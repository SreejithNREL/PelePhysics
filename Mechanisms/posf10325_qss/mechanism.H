#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  C
1  H
2  O
3  N
*/

// Species
#define POSF10325_ID 0
#define C2H4_ID 1
#define CH4_ID 2
#define C3H6_ID 3
#define iC4H8_ID 4
#define C4H81_ID 5
#define H2_ID 6
#define C2H6_ID 7
#define CO_ID 8
#define C6H6_ID 9
#define C2H2_ID 10
#define C6H5CH3_ID 11
#define CH3_ID 12
#define O2_ID 13
#define O_ID 14
#define OH_ID 15
#define HO2_ID 16
#define H2O_ID 17
#define H2O2_ID 18
#define H_ID 19
#define CH2O_ID 20
#define CO2_ID 21
#define CH2CO_ID 22
#define C3H3_ID 23
#define aC3H5_ID 24
#define C5H4O_ID 25
#define C5H5_ID 26
#define C6H5CH2_ID 27
#define C6H5O_ID 28
#define C6H5CHO_ID 29
#define N2_ID 30

#define NUM_GAS_ELEMENTS 4      // Elements in the homogeneous phase
#define NUM_QSSA_GAS_SPECIES 31 // Species in the homogeneous phase
#define NUM_GAS_REACTIONS 202   // Reactions in the homogeneous phase

#define SITE_DENSITY 0.000000E+00 // mol/cm^2

#define NUM_SURFACE_ELEMENTS 0  // Additional elements in heterogeneous phase
#define NUM_SURFACE_SPECIES 0   // Species in the heterogeneous phase
#define NUM_SURFACE_REACTIONS 0 // Reactions in the heterogeneous phase

#define NUM_ELEMENTS (NUM_GAS_ELEMENTS + NUM_SURFACE_ELEMENTS)
#define NUM_SPECIES (NUM_QSSA_GAS_SPECIES + NUM_SURFACE_SPECIES)
#define NUM_REACTIONS (NUM_GAS_REACTIONS + NUM_SURFACE_REACTIONS)

#define NUM_IONS 0

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(const int i, int& nspec, int* ki, int* nu);
void CKKFKR(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int& mm, int& kk, int& ii, int& nfit)
{
  mm = 4;
  kk = 31;
  ii = 202;
  nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_imw[31] = {
  0.0064810074077915, // POSF10325
  0.0356455407428531, // C2H4
  0.0623324814560868, // CH4
  0.0237636938285687, // C3H6
  0.0178227703714265, // iC4H8
  0.0178227703714265, // C4H81
  0.4960317460317460, // H2
  0.0332557366145660, // C2H6
  0.0357015351660121, // CO
  0.0128018024937911, // C6H6
  0.0384054074813734, // C2H2
  0.0108529319195581, // C6H5CH3
  0.0665114732291320, // CH3
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0293996589639560, // H2O2
  0.9920634920634921, // H
  0.0333044694598015, // CH2O
  0.0227226249176305, // CO2
  0.0237885672145967, // CH2CO
  0.0256036049875823, // C3H3
  0.0243468945535997, // aC3H5
  0.0124865769298005, // C5H4O
  0.0153621629925494, // C5H5
  0.0109729735661067, // C6H5CH2
  0.0107405617313786, // C6H5O
  0.0094229392031963, // C6H5CHO
  0.0356964374955379, // N2
};
#endif
const amrex::Real h_global_imw[31] = {
  0.0064810074077915, // POSF10325
  0.0356455407428531, // C2H4
  0.0623324814560868, // CH4
  0.0237636938285687, // C3H6
  0.0178227703714265, // iC4H8
  0.0178227703714265, // C4H81
  0.4960317460317460, // H2
  0.0332557366145660, // C2H6
  0.0357015351660121, // CO
  0.0128018024937911, // C6H6
  0.0384054074813734, // C2H2
  0.0108529319195581, // C6H5CH3
  0.0665114732291320, // CH3
  0.0312519532470779, // O2
  0.0625039064941559, // O
  0.0587993179279120, // OH
  0.0302975216627280, // HO2
  0.0555092978073827, // H2O
  0.0293996589639560, // H2O2
  0.9920634920634921, // H
  0.0333044694598015, // CH2O
  0.0227226249176305, // CO2
  0.0237885672145967, // CH2CO
  0.0256036049875823, // C3H3
  0.0243468945535997, // aC3H5
  0.0124865769298005, // C5H4O
  0.0153621629925494, // C5H5
  0.0109729735661067, // C6H5CH2
  0.0107405617313786, // C6H5O
  0.0094229392031963, // C6H5CHO
  0.0356964374955379, // N2
};

//  molecular weights
#ifdef AMREX_USE_GPU
AMREX_GPU_CONSTANT const amrex::Real global_mw[31] = {
  154.297000, // POSF10325
  28.054000,  // C2H4
  16.043000,  // CH4
  42.081000,  // C3H6
  56.108000,  // iC4H8
  56.108000,  // C4H81
  2.016000,   // H2
  30.070000,  // C2H6
  28.010000,  // CO
  78.114000,  // C6H6
  26.038000,  // C2H2
  92.141000,  // C6H5CH3
  15.035000,  // CH3
  31.998000,  // O2
  15.999000,  // O
  17.007000,  // OH
  33.006000,  // HO2
  18.015000,  // H2O
  34.014000,  // H2O2
  1.008000,   // H
  30.026000,  // CH2O
  44.009000,  // CO2
  42.037000,  // CH2CO
  39.057000,  // C3H3
  41.073000,  // aC3H5
  80.086000,  // C5H4O
  65.095000,  // C5H5
  91.133000,  // C6H5CH2
  93.105000,  // C6H5O
  106.124000, // C6H5CHO
  28.014000,  // N2
};
#endif
const amrex::Real h_global_mw[31] = {
  154.297000, // POSF10325
  28.054000,  // C2H4
  16.043000,  // CH4
  42.081000,  // C3H6
  56.108000,  // iC4H8
  56.108000,  // C4H81
  2.016000,   // H2
  30.070000,  // C2H6
  28.010000,  // CO
  78.114000,  // C6H6
  26.038000,  // C2H2
  92.141000,  // C6H5CH3
  15.035000,  // CH3
  31.998000,  // O2
  15.999000,  // O
  17.007000,  // OH
  33.006000,  // HO2
  18.015000,  // H2O
  34.014000,  // H2O2
  1.008000,   // H
  30.026000,  // CH2O
  44.009000,  // CO2
  42.037000,  // CH2CO
  39.057000,  // C3H3
  41.073000,  // aC3H5
  80.086000,  // C5H4O
  65.095000,  // C5H5
  91.133000,  // C6H5CH2
  93.105000,  // C6H5O
  106.124000, // C6H5CHO
  28.014000,  // N2
};

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 0.0064810074077915;  // POSF10325
  imw_new[1] = 0.0356455407428531;  // C2H4
  imw_new[2] = 0.0623324814560868;  // CH4
  imw_new[3] = 0.0237636938285687;  // C3H6
  imw_new[4] = 0.0178227703714265;  // iC4H8
  imw_new[5] = 0.0178227703714265;  // C4H81
  imw_new[6] = 0.4960317460317460;  // H2
  imw_new[7] = 0.0332557366145660;  // C2H6
  imw_new[8] = 0.0357015351660121;  // CO
  imw_new[9] = 0.0128018024937911;  // C6H6
  imw_new[10] = 0.0384054074813734; // C2H2
  imw_new[11] = 0.0108529319195581; // C6H5CH3
  imw_new[12] = 0.0665114732291320; // CH3
  imw_new[13] = 0.0312519532470779; // O2
  imw_new[14] = 0.0625039064941559; // O
  imw_new[15] = 0.0587993179279120; // OH
  imw_new[16] = 0.0302975216627280; // HO2
  imw_new[17] = 0.0555092978073827; // H2O
  imw_new[18] = 0.0293996589639560; // H2O2
  imw_new[19] = 0.9920634920634921; // H
  imw_new[20] = 0.0333044694598015; // CH2O
  imw_new[21] = 0.0227226249176305; // CO2
  imw_new[22] = 0.0237885672145967; // CH2CO
  imw_new[23] = 0.0256036049875823; // C3H3
  imw_new[24] = 0.0243468945535997; // aC3H5
  imw_new[25] = 0.0124865769298005; // C5H4O
  imw_new[26] = 0.0153621629925494; // C5H5
  imw_new[27] = 0.0109729735661067; // C6H5CH2
  imw_new[28] = 0.0107405617313786; // C6H5O
  imw_new[29] = 0.0094229392031963; // C6H5CHO
  imw_new[30] = 0.0356964374955379; // N2
}

//  inverse molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
imw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_imw[n];
#else
  return h_global_imw[n];
#endif
}
//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 154.297000;  // POSF10325
  mw_new[1] = 28.054000;   // C2H4
  mw_new[2] = 16.043000;   // CH4
  mw_new[3] = 42.081000;   // C3H6
  mw_new[4] = 56.108000;   // iC4H8
  mw_new[5] = 56.108000;   // C4H81
  mw_new[6] = 2.016000;    // H2
  mw_new[7] = 30.070000;   // C2H6
  mw_new[8] = 28.010000;   // CO
  mw_new[9] = 78.114000;   // C6H6
  mw_new[10] = 26.038000;  // C2H2
  mw_new[11] = 92.141000;  // C6H5CH3
  mw_new[12] = 15.035000;  // CH3
  mw_new[13] = 31.998000;  // O2
  mw_new[14] = 15.999000;  // O
  mw_new[15] = 17.007000;  // OH
  mw_new[16] = 33.006000;  // HO2
  mw_new[17] = 18.015000;  // H2O
  mw_new[18] = 34.014000;  // H2O2
  mw_new[19] = 1.008000;   // H
  mw_new[20] = 30.026000;  // CH2O
  mw_new[21] = 44.009000;  // CO2
  mw_new[22] = 42.037000;  // CH2CO
  mw_new[23] = 39.057000;  // C3H3
  mw_new[24] = 41.073000;  // aC3H5
  mw_new[25] = 80.086000;  // C5H4O
  mw_new[26] = 65.095000;  // C5H5
  mw_new[27] = 91.133000;  // C6H5CH2
  mw_new[28] = 93.105000;  // C6H5O
  mw_new[29] = 106.124000; // C6H5CHO
  mw_new[30] = 28.014000;  // N2
}

//  molecular weight
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE amrex::Real
mw(const int n)
{
#if AMREX_DEVICE_COMPILE
  return global_mw[n];
#else
  return h_global_mw[n];
#endif
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real& ru, amrex::Real& ruc, amrex::Real& pa)
{
  ru = 8.31446261815324e+07;
  ruc = 1.98721558317399615845;
  pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +1.57855180e+00 + 7.26248320e-02 * T + 7.32363700e-05 * T2 -
                 1.51154440e-07 * T3 + 6.89355790e-11 * T4;
    // species 1: C2H4
    species[1] = +2.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
                 6.91588753e-08 * T3 + 2.69884373e-11 * T4;
    // species 2: CH4
    species[2] = +4.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
                 4.84743026e-08 * T3 + 1.66693956e-11 * T4;
    // species 3: C3H6
    species[3] = +4.93307000e-01 + 2.09251800e-02 * T + 4.48679400e-06 * T2 -
                 1.66891200e-08 * T3 + 7.15814600e-12 * T4;
    // species 4: iC4H8
    species[4] = +1.64714050e+00 + 2.59029570e-02 * T + 8.19853540e-06 * T2 -
                 2.21932590e-08 * T3 + 8.89585800e-12 * T4;
    // species 5: C4H81
    species[5] = +1.81138000e-01 + 3.08533800e-02 * T + 5.08652470e-06 * T2 -
                 2.46548880e-08 * T3 + 1.11101930e-11 * T4;
    // species 6: H2
    species[6] = +1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 7: C2H6
    species[7] = +3.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
                 7.08466285e-08 * T3 + 2.68685771e-11 * T4;
    // species 8: CO
    species[8] = +2.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
                 9.07005884e-10 * T3 - 9.04424499e-13 * T4;
    // species 9: C6H6
    species[9] = -5.84377340e+00 + 5.84276130e-02 * T - 2.94858550e-05 * T2 -
                 6.93904400e-09 * T3 + 8.21252530e-12 * T4;
    // species 10: C2H2
    species[10] = -1.91318906e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
                  2.80152437e-08 * T3 - 8.50072974e-12 * T4;
    // species 11: C6H5CH3
    species[11] = +6.15266300e-01 + 2.10994380e-02 * T + 8.53660180e-05 * T2 -
                  1.32610660e-07 * T3 + 5.59566040e-11 * T4;
    // species 12: CH3
    species[12] = +2.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
                  6.87117425e-09 * T3 + 2.54385734e-12 * T4;
    // species 13: O2
    species[13] = +2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                  9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 14: O
    species[14] = +2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                  6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 15: OH
    species[15] = +3.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
                  5.79853643e-09 * T3 + 2.06237379e-12 * T4;
    // species 16: HO2
    species[16] = +3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                  2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 17: H2O
    species[17] = +3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                  5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 18: H2O2
    species[18] = +3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                  2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 19: H
    species[19] = +1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                  2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 20: CH2O
    species[20] = +3.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
                  3.79285261e-08 * T3 + 1.31772652e-11 * T4;
    // species 21: CO2
    species[21] = +1.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
                  2.45919022e-09 * T3 - 1.43699548e-13 * T4;
    // species 22: CH2CO
    species[22] = +1.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
                  9.34397568e-09 * T3 - 2.01457615e-12 * T4;
    // species 23: C3H3
    species[23] = +3.51109270e-01 + 3.27411223e-02 * T - 4.73827135e-05 * T2 +
                  3.76309808e-08 * T3 - 1.18540923e-11 * T4;
    // species 24: aC3H5
    species[24] = +3.63183500e-01 + 1.98138210e-02 * T + 1.24970600e-05 * T2 -
                  3.33555550e-08 * T3 + 1.58465710e-11 * T4;
    // species 25: C5H4O
    species[25] = -7.35423503e-01 + 3.34873827e-02 * T + 1.67738470e-06 * T2 -
                  2.96207455e-08 * T3 + 1.54431476e-11 * T4;
    // species 26: C5H5
    species[26] = -1.65017800e-02 + 3.36514760e-02 * T - 1.10541810e-07 * T2 -
                  3.67433940e-08 * T3 + 2.31411840e-11 * T4;
    // species 27: C6H5CH2
    species[27] = -5.18884600e-01 + 3.85128320e-02 * T + 3.28614920e-05 * T2 -
                  7.69727210e-08 * T3 + 3.54230680e-11 * T4;
    // species 28: C6H5O
    species[28] = -1.46620445e+00 + 4.13443975e-02 * T + 1.32412991e-05 * T2 -
                  5.72872769e-08 * T3 + 2.89763707e-11 * T4;
    // species 29: C6H5CHO
    species[29] = -4.16273340e+00 + 6.63692450e-02 * T - 3.48163530e-05 * T2 -
                  6.29993770e-09 * T3 + 8.58071010e-12 * T4;
    // species 30: N2
    species[30] = +2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                  5.64151500e-09 * T3 - 2.44485400e-12 * T4;
  } else {
    // species 0: POSF10325
    species[0] = +2.03578910e+01 + 6.65890870e-02 * T - 2.59674690e-05 * T2 +
                 4.47750010e-09 * T3 - 2.36071520e-13 * T4;
    // species 1: C2H4
    species[1] = +1.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
                 1.47222923e-09 * T3 - 1.25706061e-13 * T4;
    // species 2: CH4
    species[2] = -9.25148505e-01 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
                 1.22292535e-09 * T3 - 1.01815230e-13 * T4;
    // species 3: C3H6
    species[3] = +5.73225700e+00 + 1.49083400e-02 * T - 4.94989900e-06 * T2 +
                 7.21202200e-10 * T3 - 3.76620400e-14 * T4;
    // species 4: iC4H8
    species[4] = +3.46094700e+00 + 2.96114870e-02 * T - 1.30771290e-05 * T2 +
                 2.65719340e-09 * T3 - 2.01347130e-13 * T4;
    // species 5: C4H81
    species[5] = +1.05358410e+00 + 3.43505070e-02 * T - 1.58831970e-05 * T2 +
                 3.30896620e-09 * T3 - 2.53610450e-13 * T4;
    // species 6: H2
    species[6] = +2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 7: C2H6
    species[7] = +7.18815000e-02 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
                 2.21412001e-09 * T3 - 1.90002890e-13 * T4;
    // species 8: CO
    species[8] = +1.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
                 2.30053008e-10 * T3 - 2.03647716e-14 * T4;
    // species 9: C6H6
    species[9] = +8.13812450e+00 + 2.38544330e-02 * T - 8.81277260e-06 * T2 +
                 1.20990210e-09 * T3 - 1.82215030e-14 * T4;
    // species 10: C2H2
    species[10] = +3.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
                  4.67412171e-10 * T3 - 3.61235213e-14 * T4;
    // species 11: C6H5CH3
    species[11] = +1.19400340e+01 + 2.66912870e-02 * T - 9.68385050e-06 * T2 +
                  1.57386290e-09 * T3 - 9.46636010e-14 * T4;
    // species 12: CH3
    species[12] = +1.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
                  5.95684644e-10 * T3 - 4.67154394e-14 * T4;
    // species 13: O2
    species[13] = +2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                  2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 14: O
    species[14] = +1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                  1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 15: OH
    species[15] = +1.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
                  3.05218674e-11 * T3 - 1.33195876e-15 * T4;
    // species 16: HO2
    species[16] = +3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                  1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 17: H2O
    species[17] = +2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                  9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 18: H2O2
    species[18] = +3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                  3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 19: H
    species[19] = +1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                  4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 20: CH2O
    species[20] = +7.60690080e-01 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
                  1.00641212e-09 * T3 - 8.83855640e-14 * T4;
    // species 21: CO2
    species[21] = +2.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
                  5.23490188e-10 * T3 - 4.72084164e-14 * T4;
    // species 22: CH2CO
    species[22] = +3.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
                  9.23345882e-10 * T3 - 7.94838201e-14 * T4;
    // species 23: C3H3
    species[23] = +6.14221880e+00 + 7.61902005e-03 * T - 2.67459950e-06 * T2 +
                  4.24914801e-10 * T3 - 2.51475415e-14 * T4;
    // species 24: aC3H5
    species[24] = +5.50078770e+00 + 1.43247310e-02 * T - 5.67816320e-06 * T2 +
                  1.10808010e-09 * T3 - 9.03638870e-14 * T4;
    // species 25: C5H4O
    species[25] = +9.08068240e+00 + 1.61143465e-02 * T - 5.83314509e-06 * T2 +
                  9.46759320e-10 * T3 - 5.68972206e-14 * T4;
    // species 26: C5H5
    species[26] = +6.47439380e+00 + 1.60127330e-02 * T - 6.48231480e-09 * T2 -
                  3.58197030e-09 * T3 + 9.23650710e-13 * T4;
    // species 27: C6H5CH2
    species[27] = +1.30439800e+01 + 2.34938730e-02 * T - 8.53753670e-06 * T2 +
                  1.38908410e-09 * T3 - 8.36144200e-14 * T4;
    // species 28: C6H5O
    species[28] = +1.27221720e+01 + 1.74688771e-02 * T - 6.35504520e-06 * T2 +
                  1.03492308e-09 * T3 - 6.23410504e-14 * T4;
    // species 29: C6H5CHO
    species[29] = +1.26507370e+01 + 2.56804190e-02 * T - 1.04667290e-05 * T2 +
                  1.94134300e-09 * T3 - 1.34837920e-13 * T4;
    // species 30: N2
    species[30] = +1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                  1.00970380e-10 * T3 - 6.75335100e-15 * T4;
  }
}

// compute Cp/R at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +2.57855180e+00 + 7.26248320e-02 * T + 7.32363700e-05 * T2 -
                 1.51154440e-07 * T3 + 6.89355790e-11 * T4;
    // species 1: C2H4
    species[1] = +3.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
                 6.91588753e-08 * T3 + 2.69884373e-11 * T4;
    // species 2: CH4
    species[2] = +5.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
                 4.84743026e-08 * T3 + 1.66693956e-11 * T4;
    // species 3: C3H6
    species[3] = +1.49330700e+00 + 2.09251800e-02 * T + 4.48679400e-06 * T2 -
                 1.66891200e-08 * T3 + 7.15814600e-12 * T4;
    // species 4: iC4H8
    species[4] = +2.64714050e+00 + 2.59029570e-02 * T + 8.19853540e-06 * T2 -
                 2.21932590e-08 * T3 + 8.89585800e-12 * T4;
    // species 5: C4H81
    species[5] = +1.18113800e+00 + 3.08533800e-02 * T + 5.08652470e-06 * T2 -
                 2.46548880e-08 * T3 + 1.11101930e-11 * T4;
    // species 6: H2
    species[6] = +2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
                 2.01572094e-08 * T3 - 7.37611761e-12 * T4;
    // species 7: C2H6
    species[7] = +4.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
                 7.08466285e-08 * T3 + 2.68685771e-11 * T4;
    // species 8: CO
    species[8] = +3.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
                 9.07005884e-10 * T3 - 9.04424499e-13 * T4;
    // species 9: C6H6
    species[9] = -4.84377340e+00 + 5.84276130e-02 * T - 2.94858550e-05 * T2 -
                 6.93904400e-09 * T3 + 8.21252530e-12 * T4;
    // species 10: C2H2
    species[10] = +8.08681094e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
                  2.80152437e-08 * T3 - 8.50072974e-12 * T4;
    // species 11: C6H5CH3
    species[11] = +1.61526630e+00 + 2.10994380e-02 * T + 8.53660180e-05 * T2 -
                  1.32610660e-07 * T3 + 5.59566040e-11 * T4;
    // species 12: CH3
    species[12] = +3.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
                  6.87117425e-09 * T3 + 2.54385734e-12 * T4;
    // species 13: O2
    species[13] = +3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
                  9.68129509e-09 * T3 + 3.24372837e-12 * T4;
    // species 14: O
    species[14] = +3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
                  6.12806624e-09 * T3 + 2.11265971e-12 * T4;
    // species 15: OH
    species[15] = +4.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
                  5.79853643e-09 * T3 + 2.06237379e-12 * T4;
    // species 16: HO2
    species[16] = +4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
                  2.42763894e-08 * T3 + 9.29225124e-12 * T4;
    // species 17: H2O
    species[17] = +4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
                  5.48797062e-09 * T3 + 1.77197817e-12 * T4;
    // species 18: H2O2
    species[18] = +4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
                  2.15770813e-08 * T3 + 8.62454363e-12 * T4;
    // species 19: H
    species[19] = +2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
                  2.30081632e-18 * T3 - 9.27732332e-22 * T4;
    // species 20: CH2O
    species[20] = +4.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
                  3.79285261e-08 * T3 + 1.31772652e-11 * T4;
    // species 21: CO2
    species[21] = +2.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
                  2.45919022e-09 * T3 - 1.43699548e-13 * T4;
    // species 22: CH2CO
    species[22] = +2.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
                  9.34397568e-09 * T3 - 2.01457615e-12 * T4;
    // species 23: C3H3
    species[23] = +1.35110927e+00 + 3.27411223e-02 * T - 4.73827135e-05 * T2 +
                  3.76309808e-08 * T3 - 1.18540923e-11 * T4;
    // species 24: aC3H5
    species[24] = +1.36318350e+00 + 1.98138210e-02 * T + 1.24970600e-05 * T2 -
                  3.33555550e-08 * T3 + 1.58465710e-11 * T4;
    // species 25: C5H4O
    species[25] = +2.64576497e-01 + 3.34873827e-02 * T + 1.67738470e-06 * T2 -
                  2.96207455e-08 * T3 + 1.54431476e-11 * T4;
    // species 26: C5H5
    species[26] = +9.83498220e-01 + 3.36514760e-02 * T - 1.10541810e-07 * T2 -
                  3.67433940e-08 * T3 + 2.31411840e-11 * T4;
    // species 27: C6H5CH2
    species[27] = +4.81115400e-01 + 3.85128320e-02 * T + 3.28614920e-05 * T2 -
                  7.69727210e-08 * T3 + 3.54230680e-11 * T4;
    // species 28: C6H5O
    species[28] = -4.66204455e-01 + 4.13443975e-02 * T + 1.32412991e-05 * T2 -
                  5.72872769e-08 * T3 + 2.89763707e-11 * T4;
    // species 29: C6H5CHO
    species[29] = -3.16273340e+00 + 6.63692450e-02 * T - 3.48163530e-05 * T2 -
                  6.29993770e-09 * T3 + 8.58071010e-12 * T4;
    // species 30: N2
    species[30] = +3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
                  5.64151500e-09 * T3 - 2.44485400e-12 * T4;
  } else {
    // species 0: POSF10325
    species[0] = +2.13578910e+01 + 6.65890870e-02 * T - 2.59674690e-05 * T2 +
                 4.47750010e-09 * T3 - 2.36071520e-13 * T4;
    // species 1: C2H4
    species[1] = +2.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
                 1.47222923e-09 * T3 - 1.25706061e-13 * T4;
    // species 2: CH4
    species[2] = +7.48514950e-02 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
                 1.22292535e-09 * T3 - 1.01815230e-13 * T4;
    // species 3: C3H6
    species[3] = +6.73225700e+00 + 1.49083400e-02 * T - 4.94989900e-06 * T2 +
                 7.21202200e-10 * T3 - 3.76620400e-14 * T4;
    // species 4: iC4H8
    species[4] = +4.46094700e+00 + 2.96114870e-02 * T - 1.30771290e-05 * T2 +
                 2.65719340e-09 * T3 - 2.01347130e-13 * T4;
    // species 5: C4H81
    species[5] = +2.05358410e+00 + 3.43505070e-02 * T - 1.58831970e-05 * T2 +
                 3.30896620e-09 * T3 - 2.53610450e-13 * T4;
    // species 6: H2
    species[6] = +3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
                 1.79566394e-10 * T3 + 2.00255376e-14 * T4;
    // species 7: C2H6
    species[7] = +1.07188150e+00 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
                 2.21412001e-09 * T3 - 1.90002890e-13 * T4;
    // species 8: CO
    species[8] = +2.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
                 2.30053008e-10 * T3 - 2.03647716e-14 * T4;
    // species 9: C6H6
    species[9] = +9.13812450e+00 + 2.38544330e-02 * T - 8.81277260e-06 * T2 +
                 1.20990210e-09 * T3 - 1.82215030e-14 * T4;
    // species 10: C2H2
    species[10] = +4.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
                  4.67412171e-10 * T3 - 3.61235213e-14 * T4;
    // species 11: C6H5CH3
    species[11] = +1.29400340e+01 + 2.66912870e-02 * T - 9.68385050e-06 * T2 +
                  1.57386290e-09 * T3 - 9.46636010e-14 * T4;
    // species 12: CH3
    species[12] = +2.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
                  5.95684644e-10 * T3 - 4.67154394e-14 * T4;
    // species 13: O2
    species[13] = +3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
                  2.09470555e-10 * T3 - 2.16717794e-14 * T4;
    // species 14: O
    species[14] = +2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
                  1.00177799e-11 * T3 + 1.22833691e-15 * T4;
    // species 15: OH
    species[15] = +2.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
                  3.05218674e-11 * T3 - 1.33195876e-15 * T4;
    // species 16: HO2
    species[16] = +4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
                  1.14246370e-10 * T3 - 1.07908535e-14 * T4;
    // species 17: H2O
    species[17] = +3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
                  9.70419870e-11 * T3 + 1.68200992e-14 * T4;
    // species 18: H2O2
    species[18] = +4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
                  3.71185986e-10 * T3 - 2.87908305e-14 * T4;
    // species 19: H
    species[19] = +2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
                  4.73515235e-18 * T3 + 4.98197357e-22 * T4;
    // species 20: CH2O
    species[20] = +1.76069008e+00 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
                  1.00641212e-09 * T3 - 8.83855640e-14 * T4;
    // species 21: CO2
    species[21] = +3.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
                  5.23490188e-10 * T3 - 4.72084164e-14 * T4;
    // species 22: CH2CO
    species[22] = +4.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
                  9.23345882e-10 * T3 - 7.94838201e-14 * T4;
    // species 23: C3H3
    species[23] = +7.14221880e+00 + 7.61902005e-03 * T - 2.67459950e-06 * T2 +
                  4.24914801e-10 * T3 - 2.51475415e-14 * T4;
    // species 24: aC3H5
    species[24] = +6.50078770e+00 + 1.43247310e-02 * T - 5.67816320e-06 * T2 +
                  1.10808010e-09 * T3 - 9.03638870e-14 * T4;
    // species 25: C5H4O
    species[25] = +1.00806824e+01 + 1.61143465e-02 * T - 5.83314509e-06 * T2 +
                  9.46759320e-10 * T3 - 5.68972206e-14 * T4;
    // species 26: C5H5
    species[26] = +7.47439380e+00 + 1.60127330e-02 * T - 6.48231480e-09 * T2 -
                  3.58197030e-09 * T3 + 9.23650710e-13 * T4;
    // species 27: C6H5CH2
    species[27] = +1.40439800e+01 + 2.34938730e-02 * T - 8.53753670e-06 * T2 +
                  1.38908410e-09 * T3 - 8.36144200e-14 * T4;
    // species 28: C6H5O
    species[28] = +1.37221720e+01 + 1.74688771e-02 * T - 6.35504520e-06 * T2 +
                  1.03492308e-09 * T3 - 6.23410504e-14 * T4;
    // species 29: C6H5CHO
    species[29] = +1.36507370e+01 + 2.56804190e-02 * T - 1.04667290e-05 * T2 +
                  1.94134300e-09 * T3 - 1.34837920e-13 * T4;
    // species 30: N2
    species[30] = +2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
                  1.00970380e-10 * T3 - 6.75335100e-15 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = -3.802985500000000e+04 * invT - 1.995518320000000e+01 -
                 2.578551800000000e+00 * logT - 3.631241600000000e-02 * T -
                 1.220606166666667e-05 * T2 + 1.259620333333333e-08 * T3 -
                 3.446778950000000e-12 * T4;
    // species 1: C2H4
    species[1] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                 3.959201480000000e+00 * logT + 3.785261235000000e-03 * T -
                 9.516504866666667e-06 * T2 + 5.763239608333333e-09 * T3 -
                 1.349421865000000e-12 * T4;
    // species 2: CH4
    species[2] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                 5.149876130000000e+00 * logT + 6.835489400000000e-03 * T -
                 8.196676650000000e-06 * T2 + 4.039525216666667e-09 * T3 -
                 8.334697800000000e-13 * T4;
    // species 3: C3H6
    species[3] = +1.074826000000000e+03 * invT - 1.465203300000000e+01 -
                 1.493307000000000e+00 * logT - 1.046259000000000e-02 * T -
                 7.477990000000000e-07 * T2 + 1.390760000000000e-09 * T3 -
                 3.579073000000000e-13 * T4;
    // species 4: iC4H8
    species[4] = -4.037306900000000e+03 * invT - 1.002924750000000e+01 -
                 2.647140500000000e+00 * logT - 1.295147850000000e-02 * T -
                 1.366422566666667e-06 * T2 + 1.849438250000000e-09 * T3 -
                 4.447929000000000e-13 * T4;
    // species 5: C4H81
    species[5] = -1.790400400000000e+03 * invT - 1.988133100000000e+01 -
                 1.181138000000000e+00 * logT - 1.542669000000000e-02 * T -
                 8.477541166666667e-07 * T2 + 2.054574000000000e-09 * T3 -
                 5.555096499999999e-13 * T4;
    // species 6: H2
    species[6] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * logT - 3.990260375000000e-03 * T +
                 3.246358500000000e-06 * T2 - 1.679767450000000e-09 * T3 +
                 3.688058805000000e-13 * T4;
    // species 7: C2H6
    species[7] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                 4.291424920000000e+00 * logT + 2.750771350000000e-03 * T -
                 9.990638133333334e-06 * T2 + 5.903885708333334e-09 * T3 -
                 1.343428855000000e-12 * T4;
    // species 8: CO
    species[8] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                 3.579533470000000e+00 * logT + 3.051768400000000e-04 * T -
                 1.694690550000000e-07 * T2 - 7.558382366666667e-11 * T3 +
                 4.522122495000000e-14 * T4;
    // species 9: C6H6
    species[9] = +9.181777300000000e+03 * invT - 4.873360540000000e+01 +
                 4.843773400000000e+00 * logT - 2.921380650000000e-02 * T +
                 4.914309166666667e-06 * T2 + 5.782536666666667e-10 * T3 -
                 4.106262650000000e-13 * T4;
    // species 10: C2H2
    species[10] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * logT - 1.168078145000000e-02 * T +
                  5.919530250000000e-06 * T2 - 2.334603641666667e-09 * T3 +
                  4.250364870000000e-13 * T4;
    // species 11: C6H5CH3
    species[11] = +4.075630000000000e+03 * invT - 1.866694370000000e+01 -
                  1.615266300000000e+00 * logT - 1.054971900000000e-02 * T -
                  1.422766966666667e-05 * T2 + 1.105088833333333e-08 * T3 -
                  2.797830200000000e-12 * T4;
    // species 12: CH3
    species[12] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                  3.673590400000000e+00 * logT - 1.005475875000000e-03 * T -
                  9.550364266666668e-07 * T2 + 5.725978541666666e-10 * T3 -
                  1.271928670000000e-13 * T4;
    // species 13: O2
    species[13] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                  3.782456360000000e+00 * logT + 1.498367080000000e-03 * T -
                  1.641217001666667e-06 * T2 + 8.067745908333334e-10 * T3 -
                  1.621864185000000e-13 * T4;
    // species 14: O
    species[14] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                  3.168267100000000e+00 * logT + 1.639659420000000e-03 * T -
                  1.107177326666667e-06 * T2 + 5.106721866666666e-10 * T3 -
                  1.056329855000000e-13 * T4;
    // species 15: OH
    species[15] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                  4.125305610000000e+00 * logT + 1.612724695000000e-03 * T -
                  1.087941151666667e-06 * T2 + 4.832113691666666e-10 * T3 -
                  1.031186895000000e-13 * T4;
    // species 16: HO2
    species[16] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                  4.301798010000000e+00 * logT + 2.374560255000000e-03 * T -
                  3.526381516666666e-06 * T2 + 2.023032450000000e-09 * T3 -
                  4.646125620000001e-13 * T4;
    // species 17: H2O
    species[17] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                  4.198640560000000e+00 * logT + 1.018217050000000e-03 * T -
                  1.086733685000000e-06 * T2 + 4.573308850000000e-10 * T3 -
                  8.859890850000000e-14 * T4;
    // species 18: H2O2
    species[18] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                  4.276112690000000e+00 * logT + 2.714112085000000e-04 * T -
                  2.788928350000000e-06 * T2 + 1.798090108333333e-09 * T3 -
                  4.312271815000000e-13 * T4;
    // species 19: H
    species[19] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                  2.500000000000000e+00 * logT - 3.526664095000000e-13 * T +
                  3.326532733333333e-16 * T2 - 1.917346933333333e-19 * T3 +
                  4.638661660000000e-23 * T4;
    // species 20: CH2O
    species[20] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * logT + 4.954166845000000e-03 * T -
                  6.220333466666666e-06 * T2 + 3.160710508333333e-09 * T3 -
                  6.588632600000000e-13 * T4;
    // species 21: CO2
    species[21] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * logT - 4.492298385000000e-03 * T +
                  1.187260448333333e-06 * T2 - 2.049325183333333e-10 * T3 +
                  7.184977399999999e-15 * T4;
    // species 22: CH2CO
    species[22] = -7.270000000000000e+03 * invT - 1.007981170000000e+01 -
                  2.135836300000000e+00 * logT - 9.059436050000000e-03 * T +
                  2.899124566666666e-06 * T2 - 7.786646400000000e-10 * T3 +
                  1.007288075000000e-13 * T4;
    // species 23: C3H3
    species[23] = +4.010577830000000e+04 * invT - 1.385478313000000e+01 -
                  1.351109270000000e+00 * logT - 1.637056115000000e-02 * T +
                  7.897118916666667e-06 * T2 - 3.135915066666667e-09 * T3 +
                  5.927046150000000e-13 * T4;
    // species 24: aC3H5
    species[24] = +1.924562900000000e+04 * invT - 1.581003050000000e+01 -
                  1.363183500000000e+00 * logT - 9.906910499999999e-03 * T -
                  2.082843333333333e-06 * T2 + 2.779629583333333e-09 * T3 -
                  7.923285500000000e-13 * T4;
    // species 25: C5H4O
    species[25] = +5.111592870000000e+03 * invT - 2.327637480300000e+01 -
                  2.645764970000000e-01 * logT - 1.674369135000000e-02 * T -
                  2.795641166666666e-07 * T2 + 2.468395458333334e-09 * T3 -
                  7.721573800000001e-13 * T4;
    // species 26: C5H5
    species[26] = +2.962600000000000e+04 * invT - 1.560202078000000e+01 -
                  9.834982200000000e-01 * logT - 1.682573800000000e-02 * T +
                  1.842363500000000e-08 * T2 + 3.061949500000000e-09 * T3 -
                  1.157059200000000e-12 * T4;
    // species 27: C6H5CH2
    species[27] = +2.330702700000000e+04 * invT - 2.306770460000000e+01 -
                  4.811154000000000e-01 * logT - 1.925641600000000e-02 * T -
                  5.476915333333333e-06 * T2 + 6.414393416666667e-09 * T3 -
                  1.771153400000000e-12 * T4;
    // species 28: C6H5O
    species[28] = +4.778583910000000e+03 * invT - 2.816523185500000e+01 +
                  4.662044550000000e-01 * logT - 2.067219875000000e-02 * T -
                  2.206883183333333e-06 * T2 + 4.773939741666667e-09 * T3 -
                  1.448818535000000e-12 * T4;
    // species 29: C6H5CHO
    species[29] = -6.116934900000000e+03 * invT - 4.339446840000000e+01 +
                  3.162733400000000e+00 * logT - 3.318462250000000e-02 * T +
                  5.802725500000000e-06 * T2 + 5.249948083333333e-10 * T3 -
                  4.290355050000000e-13 * T4;
    // species 30: N2
    species[30] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * logT - 7.041202000000000e-04 * T +
                  6.605369999999999e-07 * T2 - 4.701262500000001e-10 * T3 +
                  1.222427000000000e-13 * T4;
  } else {
    // species 0: POSF10325
    species[0] = -4.579699600000000e+04 * invT + 1.074939770000000e+02 -
                 2.135789100000000e+01 * logT - 3.329454350000000e-02 * T +
                 4.327911500000000e-06 * T2 - 3.731250083333333e-10 * T3 +
                 1.180357600000000e-14 * T4;
    // species 1: C2H4
    species[1] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                 2.036111160000000e+00 * logT - 7.322707550000000e-03 * T +
                 1.118463191666667e-06 * T2 - 1.226857691666667e-10 * T3 +
                 6.285303050000000e-15 * T4;
    // species 2: CH4
    species[2] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                 7.485149500000000e-02 * logT - 6.695473350000000e-03 * T +
                 9.554763483333333e-07 * T2 - 1.019104458333333e-10 * T3 +
                 5.090761500000000e-15 * T4;
    // species 3: C3H6
    species[3] = -9.235703000000000e+02 * invT + 2.004560700000000e+01 -
                 6.732257000000000e+00 * logT - 7.454170000000000e-03 * T +
                 8.249831666666666e-07 * T2 - 6.010018333333334e-11 * T3 +
                 1.883102000000000e-15 * T4;
    // species 4: iC4H8
    species[4] = -5.006675800000000e+03 * invT + 3.393792100000000e+00 -
                 4.460947000000000e+00 * logT - 1.480574350000000e-02 * T +
                 2.179521500000000e-06 * T2 - 2.214327833333333e-10 * T3 +
                 1.006735650000000e-14 * T4;
    // species 5: C4H81
    species[5] = -2.139723100000000e+03 * invT - 1.348961690000000e+01 -
                 2.053584100000000e+00 * logT - 1.717525350000000e-02 * T +
                 2.647199500000000e-06 * T2 - 2.757471833333334e-10 * T3 +
                 1.268052250000000e-14 * T4;
    // species 6: H2
    species[6] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * logT + 2.470123655000000e-05 * T -
                 8.324279633333333e-08 * T2 + 1.496386616666667e-11 * T3 -
                 1.001276880000000e-15 * T4;
    // species 7: C2H6
    species[7] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                 1.071881500000000e+00 * logT - 1.084263385000000e-02 * T +
                 1.670934450000000e-06 * T2 - 1.845100008333333e-10 * T3 +
                 9.500144500000000e-15 * T4;
    // species 8: CO
    species[8] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                 2.715185610000000e+00 * logT - 1.031263715000000e-03 * T +
                 1.664709618333334e-07 * T2 - 1.917108400000000e-11 * T3 +
                 1.018238580000000e-15 * T4;
    // species 9: C6H6
    species[9] = +5.204346200000000e+03 * invT + 3.825378950000000e+01 -
                 9.138124500000000e+00 * logT - 1.192721650000000e-02 * T +
                 1.468795433333333e-06 * T2 - 1.008251750000000e-10 * T3 +
                 9.110751500000001e-16 * T4;
    // species 10: C2H2
    species[10] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * logT - 2.980833320000000e-03 * T +
                  3.954914200000000e-07 * T2 - 3.895101425000000e-11 * T3 +
                  1.806176065000000e-15 * T4;
    // species 11: C6H5CH3
    species[11] = -6.976490800000000e+02 * invT + 5.966881900000000e+01 -
                  1.294003400000000e+01 * logT - 1.334564350000000e-02 * T +
                  1.613975083333333e-06 * T2 - 1.311552416666667e-10 * T3 +
                  4.733180050000000e-15 * T4;
    // species 12: CH3
    species[12] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                  2.285717720000000e+00 * logT - 3.619950185000000e-03 * T +
                  4.978572466666667e-07 * T2 - 4.964038700000000e-11 * T3 +
                  2.335771970000000e-15 * T4;
    // species 13: O2
    species[13] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                  3.282537840000000e+00 * logT - 7.415437700000000e-04 * T +
                  1.263277781666667e-07 * T2 - 1.745587958333333e-11 * T3 +
                  1.083588970000000e-15 * T4;
    // species 14: O
    species[14] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                  2.569420780000000e+00 * logT + 4.298705685000000e-05 * T -
                  6.991409816666667e-09 * T2 + 8.348149916666666e-13 * T3 -
                  6.141684549999999e-17 * T4;
    // species 15: OH
    species[15] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                  2.864728860000000e+00 * logT - 5.282522400000000e-04 * T +
                  4.318045966666667e-08 * T2 - 2.543488950000000e-12 * T3 +
                  6.659793800000000e-17 * T4;
    // species 16: HO2
    species[16] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                  4.017210900000000e+00 * logT - 1.119910065000000e-03 * T +
                  1.056096916666667e-07 * T2 - 9.520530833333334e-12 * T3 +
                  5.395426750000000e-16 * T4;
    // species 17: H2O
    species[17] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                  3.033992490000000e+00 * logT - 1.088459020000000e-03 * T +
                  2.734541966666666e-08 * T2 + 8.086832250000000e-12 * T3 -
                  8.410049600000000e-16 * T4;
    // species 18: H2O2
    species[18] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                  4.165002850000000e+00 * logT - 2.454158470000000e-03 * T +
                  3.168987083333333e-07 * T2 - 3.093216550000000e-11 * T3 +
                  1.439541525000000e-15 * T4;
    // species 19: H
    species[19] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                  2.500000010000000e+00 * logT + 1.154214865000000e-11 * T -
                  2.692699133333334e-15 * T2 + 3.945960291666667e-19 * T3 -
                  2.490986785000000e-23 * T4;
    // species 20: CH2O
    species[20] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * logT - 4.600000410000000e-03 * T +
                  7.370980216666666e-07 * T2 - 8.386767666666666e-11 * T3 +
                  4.419278200000001e-15 * T4;
    // species 21: CO2
    species[21] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * logT - 2.207185130000000e-03 * T +
                  3.691356733333334e-07 * T2 - 4.362418233333334e-11 * T3 +
                  2.360420820000000e-15 * T4;
    // species 22: CH2CO
    species[22] = -7.778500000000000e+03 * invT + 3.879050115000000e+00 -
                  4.511297320000000e+00 * logT - 4.501798725000000e-03 * T +
                  6.948993916666666e-07 * T2 - 7.694549016666667e-11 * T3 +
                  3.974191005000000e-15 * T4;
    // species 23: C3H3
    species[23] = +3.890874270000000e+04 * invT + 1.972706240000000e+01 -
                  7.142218800000000e+00 * logT - 3.809510025000000e-03 * T +
                  4.457665833333333e-07 * T2 - 3.540956675000000e-11 * T3 +
                  1.257377075000000e-15 * T4;
    // species 24: aC3H5
    species[24] = +1.748244900000000e+04 * invT + 1.774383770000000e+01 -
                  6.500787700000000e+00 * logT - 7.162365500000000e-03 * T +
                  9.463605333333332e-07 * T2 - 9.234000833333333e-11 * T3 +
                  4.518194349999999e-15 * T4;
    // species 25: C5H4O
    species[25] = +1.943647710000000e+03 * invT + 3.953284470000000e+01 -
                  1.008068240000000e+01 * logT - 8.057173250000001e-03 * T +
                  9.721908483333333e-07 * T2 - 7.889661000000000e-11 * T3 +
                  2.844861030000000e-15 * T4;
    // species 26: C5H5
    species[26] = +2.808600000000000e+04 * invT + 2.360739380000000e+01 -
                  7.474393800000000e+00 * logT - 8.006366500000001e-03 * T +
                  1.080385800000000e-09 * T2 + 2.984975250000000e-10 * T3 -
                  4.618253550000001e-14 * T4;
    // species 27: C6H5CH2
    species[27] = +1.856420300000000e+04 * invT + 6.570956900000000e+01 -
                  1.404398000000000e+01 * logT - 1.174693650000000e-02 * T +
                  1.422922783333333e-06 * T2 - 1.157570083333333e-10 * T3 +
                  4.180721000000000e-15 * T4;
    // species 28: C6H5O
    species[28] = +2.872747510000000e+02 * invT + 6.254034000000000e+01 -
                  1.372217200000000e+01 * logT - 8.734438549999999e-03 * T +
                  1.059174200000000e-06 * T2 - 8.624359000000001e-11 * T3 +
                  3.117052520000000e-15 * T4;
    // species 29: C6H5CHO
    species[29] = -1.101974400000000e+04 * invT + 6.161653300000000e+01 -
                  1.365073700000000e+01 * logT - 1.284020950000000e-02 * T +
                  1.744454833333333e-06 * T2 - 1.617785833333333e-10 * T3 +
                  6.741896000000000e-15 * T4;
    // species 30: N2
    species[30] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * logT - 7.439884000000000e-04 * T +
                  9.474600000000001e-08 * T2 - 8.414198333333333e-12 * T3 +
                  3.376675500000000e-16 * T4;
  }
}

// compute the g/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs_qss(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                 3.762678670000000e+00 * logT - 4.844360715000000e-04 * T -
                 4.658164016666667e-07 * T2 + 3.209092941666667e-10 * T3 -
                 8.437085950000000e-14 * T4;
    // species 1: CH2*
    species[1] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                 4.198604110000000e+00 * logT + 1.183307095000000e-03 * T -
                 1.372160366666667e-06 * T2 + 5.573466508333334e-10 * T3 -
                 9.715736850000000e-14 * T4;
    // species 2: HCO
    species[2] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                 4.221185840000000e+00 * logT + 1.621962660000000e-03 * T -
                 2.296657433333333e-06 * T2 + 1.109534108333333e-09 * T3 -
                 2.168844325000000e-13 * T4;
    // species 3: CH3O
    species[3] = +1.295697600000000e+03 * invT - 2.860603620000000e+00 -
                 3.711805020000000e+00 * logT + 1.402316530000000e-03 * T -
                 6.275849516666667e-06 * T2 + 3.942267408333333e-09 * T3 -
                 9.329421000000001e-13 * T4;
    // species 4: C2H3
    species[4] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                 3.212466450000000e+00 * logT - 7.573958100000000e-04 * T -
                 4.320156866666666e-06 * T2 + 2.980482058333333e-09 * T3 -
                 7.357543650000000e-13 * T4;
    // species 5: C2H5
    species[5] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                 4.306465680000000e+00 * logT + 2.093294460000000e-03 * T -
                 8.285713450000000e-06 * T2 + 4.992721716666666e-09 * T3 -
                 1.152545020000000e-12 * T4;
    // species 6: HCCO
    species[6] = +2.005944900000000e+04 * invT - 1.023869560000000e+01 -
                 2.251721400000000e+00 * logT - 8.827510500000000e-03 * T +
                 3.954850166666666e-06 * T2 - 1.439646583333334e-09 * T3 +
                 2.533240550000000e-13 * T4;
    // species 7: CH2CHO
    species[7] = +6.200000000000000e+01 * invT - 6.162391100000001e+00 -
                 3.409062400000000e+00 * logT - 5.369287000000000e-03 * T -
                 3.152487500000000e-07 * T2 + 5.965485916666667e-10 * T3 -
                 1.433692550000000e-13 * T4;
    // species 8: C6H5
    species[8] = +3.977959000000000e+04 * invT - 4.502568030000000e+01 +
                 3.693145300000000e+00 * logT - 2.608948400000000e-02 * T +
                 4.259737833333333e-06 * T2 + 5.888426750000000e-10 * T3 -
                 3.791698750000000e-13 * T4;
    // species 9: C6H5CO
    species[9] = +1.125580300000000e+04 * invT - 3.780329050000000e+01 +
                 2.025115500000000e+00 * logT - 3.075627050000000e-02 * T +
                 5.267275500000000e-06 * T2 + 5.810383250000000e-10 * T3 -
                 3.991757449999999e-13 * T4;
  } else {
    // species 0: CH2
    species[0] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                 2.874101130000000e+00 * logT - 1.828196460000000e-03 * T +
                 2.348243283333333e-07 * T2 - 2.168162908333333e-11 * T3 +
                 9.386378350000000e-16 * T4;
    // species 1: CH2*
    species[1] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                 2.292038420000000e+00 * logT - 2.327943185000000e-03 * T +
                 3.353199116666667e-07 * T2 - 3.482550000000000e-11 * T3 +
                 1.698581825000000e-15 * T4;
    // species 2: HCO
    species[2] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                 2.772174380000000e+00 * logT - 2.478477630000000e-03 * T +
                 4.140760216666667e-07 * T2 - 4.909681483333334e-11 * T3 +
                 2.667543555000000e-15 * T4;
    // species 3: CH3O
    species[3] = +3.781119400000000e+02 * invT + 6.724592660000000e+00 -
                 4.757792380000000e+00 * logT - 3.720712370000000e-03 * T +
                 4.495086266666666e-07 * T2 - 3.650754200000000e-11 * T3 +
                 1.317685490000000e-15 * T4;
    // species 4: C2H3
    species[4] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                 3.016724000000000e+00 * logT - 5.165114600000000e-03 * T +
                 7.801372483333333e-07 * T2 - 8.480274000000000e-11 * T3 +
                 4.313035205000000e-15 * T4;
    // species 5: C2H5
    species[5] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                 1.954656420000000e+00 * logT - 8.698636100000001e-03 * T +
                 1.330344446666667e-06 * T2 - 1.460147408333333e-10 * T3 +
                 7.482078800000000e-15 * T4;
    // species 6: HCCO
    species[6] = +1.932721500000000e+04 * invT + 9.558465300000000e+00 -
                 5.628205800000000e+00 * logT - 2.042670050000000e-03 * T +
                 2.655757833333333e-07 * T2 - 2.385504333333333e-11 * T3 +
                 9.703915999999999e-16 * T4;
    // species 7: CH2CHO
    species[7] = -9.695000000000000e+02 * invT + 1.100775780000000e+01 -
                 5.975669900000000e+00 * logT - 4.065295700000000e-03 * T +
                 4.572707500000000e-07 * T2 - 3.391920083333333e-11 * T3 +
                 1.088008550000000e-15 * T4;
    // species 8: C6H5
    species[8] = +3.626104700000000e+04 * invT + 3.155195400000000e+01 -
                 8.597310999999999e+00 * logT - 1.112081500000000e-02 * T +
                 1.453332966666666e-06 * T2 - 1.149065416666667e-10 * T3 +
                 2.657302800000000e-15 * T4;
    // species 9: C6H5CO
    species[9] = +6.914783700000000e+03 * invT + 5.803362700000000e+01 -
                 1.337440900000000e+01 * logT - 1.199964450000000e-02 * T +
                 1.744287333333333e-06 * T2 - 1.805760916666667e-10 * T3 +
                 9.003522500000000e-15 * T4;
  }
}

// compute the a/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = -3.80298550e+04 * invT - 2.09551832e+01 -
                 2.57855180e+00 * logT - 3.63124160e-02 * T -
                 1.22060617e-05 * T2 + 1.25962033e-08 * T3 -
                 3.44677895e-12 * T4;
    // species 1: C2H4
    species[1] = +5.08977593e+03 * invT - 1.13812948e+00 -
                 3.95920148e+00 * logT + 3.78526124e-03 * T -
                 9.51650487e-06 * T2 + 5.76323961e-09 * T3 -
                 1.34942187e-12 * T4;
    // species 2: CH4
    species[2] = -1.02466476e+04 * invT + 8.79117989e+00 -
                 5.14987613e+00 * logT + 6.83548940e-03 * T -
                 8.19667665e-06 * T2 + 4.03952522e-09 * T3 -
                 8.33469780e-13 * T4;
    // species 3: C3H6
    species[3] = +1.07482600e+03 * invT - 1.56520330e+01 -
                 1.49330700e+00 * logT - 1.04625900e-02 * T -
                 7.47799000e-07 * T2 + 1.39076000e-09 * T3 -
                 3.57907300e-13 * T4;
    // species 4: iC4H8
    species[4] = -4.03730690e+03 * invT - 1.10292475e+01 -
                 2.64714050e+00 * logT - 1.29514785e-02 * T -
                 1.36642257e-06 * T2 + 1.84943825e-09 * T3 -
                 4.44792900e-13 * T4;
    // species 5: C4H81
    species[5] = -1.79040040e+03 * invT - 2.08813310e+01 -
                 1.18113800e+00 * logT - 1.54266900e-02 * T -
                 8.47754117e-07 * T2 + 2.05457400e-09 * T3 -
                 5.55509650e-13 * T4;
    // species 6: H2
    species[6] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * logT - 3.99026037e-03 * T +
                 3.24635850e-06 * T2 - 1.67976745e-09 * T3 +
                 3.68805881e-13 * T4;
    // species 7: C2H6
    species[7] = -1.15222055e+04 * invT + 6.24601760e-01 -
                 4.29142492e+00 * logT + 2.75077135e-03 * T -
                 9.99063813e-06 * T2 + 5.90388571e-09 * T3 -
                 1.34342886e-12 * T4;
    // species 8: CO
    species[8] = -1.43440860e+04 * invT - 9.28875810e-01 -
                 3.57953347e+00 * logT + 3.05176840e-04 * T -
                 1.69469055e-07 * T2 - 7.55838237e-11 * T3 +
                 4.52212249e-14 * T4;
    // species 9: C6H6
    species[9] = +9.18177730e+03 * invT - 4.97336054e+01 +
                 4.84377340e+00 * logT - 2.92138065e-02 * T +
                 4.91430917e-06 * T2 + 5.78253667e-10 * T3 -
                 4.10626265e-13 * T4;
    // species 10: C2H2
    species[10] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * logT - 1.16807815e-02 * T +
                  5.91953025e-06 * T2 - 2.33460364e-09 * T3 +
                  4.25036487e-13 * T4;
    // species 11: C6H5CH3
    species[11] = +4.07563000e+03 * invT - 1.96669437e+01 -
                  1.61526630e+00 * logT - 1.05497190e-02 * T -
                  1.42276697e-05 * T2 + 1.10508883e-08 * T3 -
                  2.79783020e-12 * T4;
    // species 12: CH3
    species[12] = +1.64449988e+04 * invT + 1.06902607e+00 -
                  3.67359040e+00 * logT - 1.00547588e-03 * T -
                  9.55036427e-07 * T2 + 5.72597854e-10 * T3 -
                  1.27192867e-13 * T4;
    // species 13: O2
    species[13] = -1.06394356e+03 * invT - 8.75219370e-01 -
                  3.78245636e+00 * logT + 1.49836708e-03 * T -
                  1.64121700e-06 * T2 + 8.06774591e-10 * T3 -
                  1.62186418e-13 * T4;
    // species 14: O
    species[14] = +2.91222592e+04 * invT + 1.16333640e-01 -
                  3.16826710e+00 * logT + 1.63965942e-03 * T -
                  1.10717733e-06 * T2 + 5.10672187e-10 * T3 -
                  1.05632985e-13 * T4;
    // species 15: OH
    species[15] = +3.38153812e+03 * invT + 3.81573857e+00 -
                  4.12530561e+00 * logT + 1.61272470e-03 * T -
                  1.08794115e-06 * T2 + 4.83211369e-10 * T3 -
                  1.03118689e-13 * T4;
    // species 16: HO2
    species[16] = +2.94808040e+02 * invT - 4.14864440e-01 -
                  4.30179801e+00 * logT + 2.37456025e-03 * T -
                  3.52638152e-06 * T2 + 2.02303245e-09 * T3 -
                  4.64612562e-13 * T4;
    // species 17: H2O
    species[17] = -3.02937267e+04 * invT + 4.04767277e+00 -
                  4.19864056e+00 * logT + 1.01821705e-03 * T -
                  1.08673369e-06 * T2 + 4.57330885e-10 * T3 -
                  8.85989085e-14 * T4;
    // species 18: H2O2
    species[18] = -1.77025821e+04 * invT - 1.58938050e-01 -
                  4.27611269e+00 * logT + 2.71411208e-04 * T -
                  2.78892835e-06 * T2 + 1.79809011e-09 * T3 -
                  4.31227182e-13 * T4;
    // species 19: H
    species[19] = +2.54736599e+04 * invT + 1.94668285e+00 -
                  2.50000000e+00 * logT - 3.52666409e-13 * T +
                  3.32653273e-16 * T2 - 1.91734693e-19 * T3 +
                  4.63866166e-23 * T4;
    // species 20: CH2O
    species[20] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * logT + 4.95416684e-03 * T -
                  6.22033347e-06 * T2 + 3.16071051e-09 * T3 -
                  6.58863260e-13 * T4;
    // species 21: CO2
    species[21] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * logT - 4.49229839e-03 * T +
                  1.18726045e-06 * T2 - 2.04932518e-10 * T3 +
                  7.18497740e-15 * T4;
    // species 22: CH2CO
    species[22] = -7.27000000e+03 * invT - 1.10798117e+01 -
                  2.13583630e+00 * logT - 9.05943605e-03 * T +
                  2.89912457e-06 * T2 - 7.78664640e-10 * T3 +
                  1.00728807e-13 * T4;
    // species 23: C3H3
    species[23] = +4.01057783e+04 * invT - 1.48547831e+01 -
                  1.35110927e+00 * logT - 1.63705612e-02 * T +
                  7.89711892e-06 * T2 - 3.13591507e-09 * T3 +
                  5.92704615e-13 * T4;
    // species 24: aC3H5
    species[24] = +1.92456290e+04 * invT - 1.68100305e+01 -
                  1.36318350e+00 * logT - 9.90691050e-03 * T -
                  2.08284333e-06 * T2 + 2.77962958e-09 * T3 -
                  7.92328550e-13 * T4;
    // species 25: C5H4O
    species[25] = +5.11159287e+03 * invT - 2.42763748e+01 -
                  2.64576497e-01 * logT - 1.67436913e-02 * T -
                  2.79564117e-07 * T2 + 2.46839546e-09 * T3 -
                  7.72157380e-13 * T4;
    // species 26: C5H5
    species[26] = +2.96260000e+04 * invT - 1.66020208e+01 -
                  9.83498220e-01 * logT - 1.68257380e-02 * T +
                  1.84236350e-08 * T2 + 3.06194950e-09 * T3 -
                  1.15705920e-12 * T4;
    // species 27: C6H5CH2
    species[27] = +2.33070270e+04 * invT - 2.40677046e+01 -
                  4.81115400e-01 * logT - 1.92564160e-02 * T -
                  5.47691533e-06 * T2 + 6.41439342e-09 * T3 -
                  1.77115340e-12 * T4;
    // species 28: C6H5O
    species[28] = +4.77858391e+03 * invT - 2.91652319e+01 +
                  4.66204455e-01 * logT - 2.06721987e-02 * T -
                  2.20688318e-06 * T2 + 4.77393974e-09 * T3 -
                  1.44881853e-12 * T4;
    // species 29: C6H5CHO
    species[29] = -6.11693490e+03 * invT - 4.43944684e+01 +
                  3.16273340e+00 * logT - 3.31846225e-02 * T +
                  5.80272550e-06 * T2 + 5.24994808e-10 * T3 -
                  4.29035505e-13 * T4;
    // species 30: N2
    species[30] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * logT - 7.04120200e-04 * T +
                  6.60537000e-07 * T2 - 4.70126250e-10 * T3 +
                  1.22242700e-13 * T4;
  } else {
    // species 0: POSF10325
    species[0] = -4.57969960e+04 * invT + 1.06493977e+02 -
                 2.13578910e+01 * logT - 3.32945435e-02 * T +
                 4.32791150e-06 * T2 - 3.73125008e-10 * T3 +
                 1.18035760e-14 * T4;
    // species 1: C2H4
    species[1] = +4.93988614e+03 * invT - 9.26925814e+00 -
                 2.03611116e+00 * logT - 7.32270755e-03 * T +
                 1.11846319e-06 * T2 - 1.22685769e-10 * T3 +
                 6.28530305e-15 * T4;
    // species 2: CH4
    species[2] = -9.46834459e+03 * invT - 1.93624665e+01 -
                 7.48514950e-02 * logT - 6.69547335e-03 * T +
                 9.55476348e-07 * T2 - 1.01910446e-10 * T3 +
                 5.09076150e-15 * T4;
    // species 3: C3H6
    species[3] = -9.23570300e+02 * invT + 1.90456070e+01 -
                 6.73225700e+00 * logT - 7.45417000e-03 * T +
                 8.24983167e-07 * T2 - 6.01001833e-11 * T3 +
                 1.88310200e-15 * T4;
    // species 4: iC4H8
    species[4] = -5.00667580e+03 * invT + 2.39379210e+00 -
                 4.46094700e+00 * logT - 1.48057435e-02 * T +
                 2.17952150e-06 * T2 - 2.21432783e-10 * T3 +
                 1.00673565e-14 * T4;
    // species 5: C4H81
    species[5] = -2.13972310e+03 * invT - 1.44896169e+01 -
                 2.05358410e+00 * logT - 1.71752535e-02 * T +
                 2.64719950e-06 * T2 - 2.75747183e-10 * T3 +
                 1.26805225e-14 * T4;
    // species 6: H2
    species[6] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * logT + 2.47012365e-05 * T -
                 8.32427963e-08 * T2 + 1.49638662e-11 * T3 -
                 1.00127688e-15 * T4;
    // species 7: C2H6
    species[7] = -1.14263932e+04 * invT - 1.50437292e+01 -
                 1.07188150e+00 * logT - 1.08426339e-02 * T +
                 1.67093445e-06 * T2 - 1.84510001e-10 * T3 +
                 9.50014450e-15 * T4;
    // species 8: CO
    species[8] = -1.41518724e+04 * invT - 6.10350211e+00 -
                 2.71518561e+00 * logT - 1.03126372e-03 * T +
                 1.66470962e-07 * T2 - 1.91710840e-11 * T3 +
                 1.01823858e-15 * T4;
    // species 9: C6H6
    species[9] = +5.20434620e+03 * invT + 3.72537895e+01 -
                 9.13812450e+00 * logT - 1.19272165e-02 * T +
                 1.46879543e-06 * T2 - 1.00825175e-10 * T3 +
                 9.11075150e-16 * T4;
    // species 10: C2H2
    species[10] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * logT - 2.98083332e-03 * T +
                  3.95491420e-07 * T2 - 3.89510143e-11 * T3 +
                  1.80617607e-15 * T4;
    // species 11: C6H5CH3
    species[11] = -6.97649080e+02 * invT + 5.86688190e+01 -
                  1.29400340e+01 * logT - 1.33456435e-02 * T +
                  1.61397508e-06 * T2 - 1.31155242e-10 * T3 +
                  4.73318005e-15 * T4;
    // species 12: CH3
    species[12] = +1.67755843e+04 * invT - 7.19435407e+00 -
                  2.28571772e+00 * logT - 3.61995018e-03 * T +
                  4.97857247e-07 * T2 - 4.96403870e-11 * T3 +
                  2.33577197e-15 * T4;
    // species 13: O2
    species[13] = -1.08845772e+03 * invT - 3.17069345e+00 -
                  3.28253784e+00 * logT - 7.41543770e-04 * T +
                  1.26327778e-07 * T2 - 1.74558796e-11 * T3 +
                  1.08358897e-15 * T4;
    // species 14: O
    species[14] = +2.92175791e+04 * invT - 3.21491786e+00 -
                  2.56942078e+00 * logT + 4.29870569e-05 * T -
                  6.99140982e-09 * T2 + 8.34814992e-13 * T3 -
                  6.14168455e-17 * T4;
    // species 15: OH
    species[15] = +3.71885774e+03 * invT - 3.83691187e+00 -
                  2.86472886e+00 * logT - 5.28252240e-04 * T +
                  4.31804597e-08 * T2 - 2.54348895e-12 * T3 +
                  6.65979380e-17 * T4;
    // species 16: HO2
    species[16] = +1.11856713e+02 * invT - 7.67891250e-01 -
                  4.01721090e+00 * logT - 1.11991006e-03 * T +
                  1.05609692e-07 * T2 - 9.52053083e-12 * T3 +
                  5.39542675e-16 * T4;
    // species 17: H2O
    species[17] = -3.00042971e+04 * invT - 2.93277761e+00 -
                  3.03399249e+00 * logT - 1.08845902e-03 * T +
                  2.73454197e-08 * T2 + 8.08683225e-12 * T3 -
                  8.41004960e-16 * T4;
    // species 18: H2O2
    species[18] = -1.78617877e+04 * invT + 2.48846230e-01 -
                  4.16500285e+00 * logT - 2.45415847e-03 * T +
                  3.16898708e-07 * T2 - 3.09321655e-11 * T3 +
                  1.43954153e-15 * T4;
    // species 19: H
    species[19] = +2.54736599e+04 * invT + 1.94668292e+00 -
                  2.50000001e+00 * logT + 1.15421486e-11 * T -
                  2.69269913e-15 * T2 + 3.94596029e-19 * T3 -
                  2.49098679e-23 * T4;
    // species 20: CH2O
    species[20] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * logT - 4.60000041e-03 * T +
                  7.37098022e-07 * T2 - 8.38676767e-11 * T3 +
                  4.41927820e-15 * T4;
    // species 21: CO2
    species[21] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * logT - 2.20718513e-03 * T +
                  3.69135673e-07 * T2 - 4.36241823e-11 * T3 +
                  2.36042082e-15 * T4;
    // species 22: CH2CO
    species[22] = -7.77850000e+03 * invT + 2.87905011e+00 -
                  4.51129732e+00 * logT - 4.50179872e-03 * T +
                  6.94899392e-07 * T2 - 7.69454902e-11 * T3 +
                  3.97419100e-15 * T4;
    // species 23: C3H3
    species[23] = +3.89087427e+04 * invT + 1.87270624e+01 -
                  7.14221880e+00 * logT - 3.80951002e-03 * T +
                  4.45766583e-07 * T2 - 3.54095668e-11 * T3 +
                  1.25737708e-15 * T4;
    // species 24: aC3H5
    species[24] = +1.74824490e+04 * invT + 1.67438377e+01 -
                  6.50078770e+00 * logT - 7.16236550e-03 * T +
                  9.46360533e-07 * T2 - 9.23400083e-11 * T3 +
                  4.51819435e-15 * T4;
    // species 25: C5H4O
    species[25] = +1.94364771e+03 * invT + 3.85328447e+01 -
                  1.00806824e+01 * logT - 8.05717325e-03 * T +
                  9.72190848e-07 * T2 - 7.88966100e-11 * T3 +
                  2.84486103e-15 * T4;
    // species 26: C5H5
    species[26] = +2.80860000e+04 * invT + 2.26073938e+01 -
                  7.47439380e+00 * logT - 8.00636650e-03 * T +
                  1.08038580e-09 * T2 + 2.98497525e-10 * T3 -
                  4.61825355e-14 * T4;
    // species 27: C6H5CH2
    species[27] = +1.85642030e+04 * invT + 6.47095690e+01 -
                  1.40439800e+01 * logT - 1.17469365e-02 * T +
                  1.42292278e-06 * T2 - 1.15757008e-10 * T3 +
                  4.18072100e-15 * T4;
    // species 28: C6H5O
    species[28] = +2.87274751e+02 * invT + 6.15403400e+01 -
                  1.37221720e+01 * logT - 8.73443855e-03 * T +
                  1.05917420e-06 * T2 - 8.62435900e-11 * T3 +
                  3.11705252e-15 * T4;
    // species 29: C6H5CHO
    species[29] = -1.10197440e+04 * invT + 6.06165330e+01 -
                  1.36507370e+01 * logT - 1.28402095e-02 * T +
                  1.74445483e-06 * T2 - 1.61778583e-10 * T3 +
                  6.74189600e-15 * T4;
    // species 30: N2
    species[30] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * logT - 7.43988400e-04 * T +
                  9.47460000e-08 * T2 - 8.41419833e-12 * T3 +
                  3.37667550e-16 * T4;
  }
}

// compute the e/(RT) at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +1.57855180e+00 + 3.63124160e-02 * T + 2.44121233e-05 * T2 -
                 3.77886100e-08 * T3 + 1.37871158e-11 * T4 -
                 3.80298550e+04 * invT;
    // species 1: C2H4
    species[1] = +2.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
                 1.72897188e-08 * T3 + 5.39768746e-12 * T4 +
                 5.08977593e+03 * invT;
    // species 2: CH4
    species[2] = +4.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
                 1.21185757e-08 * T3 + 3.33387912e-12 * T4 -
                 1.02466476e+04 * invT;
    // species 3: C3H6
    species[3] = +4.93307000e-01 + 1.04625900e-02 * T + 1.49559800e-06 * T2 -
                 4.17228000e-09 * T3 + 1.43162920e-12 * T4 +
                 1.07482600e+03 * invT;
    // species 4: iC4H8
    species[4] = +1.64714050e+00 + 1.29514785e-02 * T + 2.73284513e-06 * T2 -
                 5.54831475e-09 * T3 + 1.77917160e-12 * T4 -
                 4.03730690e+03 * invT;
    // species 5: C4H81
    species[5] = +1.81138000e-01 + 1.54266900e-02 * T + 1.69550823e-06 * T2 -
                 6.16372200e-09 * T3 + 2.22203860e-12 * T4 -
                 1.79040040e+03 * invT;
    // species 6: H2
    species[6] = +1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 7: C2H6
    species[7] = +3.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
                 1.77116571e-08 * T3 + 5.37371542e-12 * T4 -
                 1.15222055e+04 * invT;
    // species 8: CO
    species[8] = +2.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
                 2.26751471e-10 * T3 - 1.80884900e-13 * T4 -
                 1.43440860e+04 * invT;
    // species 9: C6H6
    species[9] = -5.84377340e+00 + 2.92138065e-02 * T - 9.82861833e-06 * T2 -
                 1.73476100e-09 * T3 + 1.64250506e-12 * T4 +
                 9.18177730e+03 * invT;
    // species 10: C2H2
    species[10] = -1.91318906e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
                  7.00381092e-09 * T3 - 1.70014595e-12 * T4 +
                  2.64289807e+04 * invT;
    // species 11: C6H5CH3
    species[11] = +6.15266300e-01 + 1.05497190e-02 * T + 2.84553393e-05 * T2 -
                  3.31526650e-08 * T3 + 1.11913208e-11 * T4 +
                  4.07563000e+03 * invT;
    // species 12: CH3
    species[12] = +2.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
                  1.71779356e-09 * T3 + 5.08771468e-13 * T4 +
                  1.64449988e+04 * invT;
    // species 13: O2
    species[13] = +2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                  2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                  1.06394356e+03 * invT;
    // species 14: O
    species[14] = +2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                  1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                  2.91222592e+04 * invT;
    // species 15: OH
    species[15] = +3.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
                  1.44963411e-09 * T3 + 4.12474758e-13 * T4 +
                  3.38153812e+03 * invT;
    // species 16: HO2
    species[16] = +3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                  6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                  2.94808040e+02 * invT;
    // species 17: H2O
    species[17] = +3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                  1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                  3.02937267e+04 * invT;
    // species 18: H2O2
    species[18] = +3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                  5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                  1.77025821e+04 * invT;
    // species 19: H
    species[19] = +1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                  5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                  2.54736599e+04 * invT;
    // species 20: CH2O
    species[20] = +3.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
                  9.48213152e-09 * T3 + 2.63545304e-12 * T4 -
                  1.43089567e+04 * invT;
    // species 21: CO2
    species[21] = +1.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
                  6.14797555e-10 * T3 - 2.87399096e-14 * T4 -
                  4.83719697e+04 * invT;
    // species 22: CH2CO
    species[22] = +1.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
                  2.33599392e-09 * T3 - 4.02915230e-13 * T4 -
                  7.27000000e+03 * invT;
    // species 23: C3H3
    species[23] = +3.51109270e-01 + 1.63705612e-02 * T - 1.57942378e-05 * T2 +
                  9.40774520e-09 * T3 - 2.37081846e-12 * T4 +
                  4.01057783e+04 * invT;
    // species 24: aC3H5
    species[24] = +3.63183500e-01 + 9.90691050e-03 * T + 4.16568667e-06 * T2 -
                  8.33888875e-09 * T3 + 3.16931420e-12 * T4 +
                  1.92456290e+04 * invT;
    // species 25: C5H4O
    species[25] = -7.35423503e-01 + 1.67436913e-02 * T + 5.59128233e-07 * T2 -
                  7.40518638e-09 * T3 + 3.08862952e-12 * T4 +
                  5.11159287e+03 * invT;
    // species 26: C5H5
    species[26] = -1.65017800e-02 + 1.68257380e-02 * T - 3.68472700e-08 * T2 -
                  9.18584850e-09 * T3 + 4.62823680e-12 * T4 +
                  2.96260000e+04 * invT;
    // species 27: C6H5CH2
    species[27] = -5.18884600e-01 + 1.92564160e-02 * T + 1.09538307e-05 * T2 -
                  1.92431803e-08 * T3 + 7.08461360e-12 * T4 +
                  2.33070270e+04 * invT;
    // species 28: C6H5O
    species[28] = -1.46620445e+00 + 2.06721987e-02 * T + 4.41376637e-06 * T2 -
                  1.43218192e-08 * T3 + 5.79527414e-12 * T4 +
                  4.77858391e+03 * invT;
    // species 29: C6H5CHO
    species[29] = -4.16273340e+00 + 3.31846225e-02 * T - 1.16054510e-05 * T2 -
                  1.57498443e-09 * T3 + 1.71614202e-12 * T4 -
                  6.11693490e+03 * invT;
    // species 30: N2
    species[30] = +2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                  1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                  1.02089990e+03 * invT;
  } else {
    // species 0: POSF10325
    species[0] = +2.03578910e+01 + 3.32945435e-02 * T - 8.65582300e-06 * T2 +
                 1.11937502e-09 * T3 - 4.72143040e-14 * T4 -
                 4.57969960e+04 * invT;
    // species 1: C2H4
    species[1] = +1.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
                 3.68057308e-10 * T3 - 2.51412122e-14 * T4 +
                 4.93988614e+03 * invT;
    // species 2: CH4
    species[2] = -9.25148505e-01 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
                 3.05731338e-10 * T3 - 2.03630460e-14 * T4 -
                 9.46834459e+03 * invT;
    // species 3: C3H6
    species[3] = +5.73225700e+00 + 7.45417000e-03 * T - 1.64996633e-06 * T2 +
                 1.80300550e-10 * T3 - 7.53240800e-15 * T4 -
                 9.23570300e+02 * invT;
    // species 4: iC4H8
    species[4] = +3.46094700e+00 + 1.48057435e-02 * T - 4.35904300e-06 * T2 +
                 6.64298350e-10 * T3 - 4.02694260e-14 * T4 -
                 5.00667580e+03 * invT;
    // species 5: C4H81
    species[5] = +1.05358410e+00 + 1.71752535e-02 * T - 5.29439900e-06 * T2 +
                 8.27241550e-10 * T3 - 5.07220900e-14 * T4 -
                 2.13972310e+03 * invT;
    // species 6: H2
    species[6] = +2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 7: C2H6
    species[7] = +7.18815000e-02 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
                 5.53530003e-10 * T3 - 3.80005780e-14 * T4 -
                 1.14263932e+04 * invT;
    // species 8: CO
    species[8] = +1.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
                 5.75132520e-11 * T3 - 4.07295432e-15 * T4 -
                 1.41518724e+04 * invT;
    // species 9: C6H6
    species[9] = +8.13812450e+00 + 1.19272165e-02 * T - 2.93759087e-06 * T2 +
                 3.02475525e-10 * T3 - 3.64430060e-15 * T4 +
                 5.20434620e+03 * invT;
    // species 10: C2H2
    species[10] = +3.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
                  1.16853043e-10 * T3 - 7.22470426e-15 * T4 +
                  2.59359992e+04 * invT;
    // species 11: C6H5CH3
    species[11] = +1.19400340e+01 + 1.33456435e-02 * T - 3.22795017e-06 * T2 +
                  3.93465725e-10 * T3 - 1.89327202e-14 * T4 -
                  6.97649080e+02 * invT;
    // species 12: CH3
    species[12] = +1.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
                  1.48921161e-10 * T3 - 9.34308788e-15 * T4 +
                  1.67755843e+04 * invT;
    // species 13: O2
    species[13] = +2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                  5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                  1.08845772e+03 * invT;
    // species 14: O
    species[14] = +1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                  2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                  2.92175791e+04 * invT;
    // species 15: OH
    species[15] = +1.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
                  7.63046685e-12 * T3 - 2.66391752e-16 * T4 +
                  3.71885774e+03 * invT;
    // species 16: HO2
    species[16] = +3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                  2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                  1.11856713e+02 * invT;
    // species 17: H2O
    species[17] = +2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                  2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                  3.00042971e+04 * invT;
    // species 18: H2O2
    species[18] = +3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                  9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                  1.78617877e+04 * invT;
    // species 19: H
    species[19] = +1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                  1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                  2.54736599e+04 * invT;
    // species 20: CH2O
    species[20] = +7.60690080e-01 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
                  2.51603030e-10 * T3 - 1.76771128e-14 * T4 -
                  1.39958323e+04 * invT;
    // species 21: CO2
    species[21] = +2.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
                  1.30872547e-10 * T3 - 9.44168328e-15 * T4 -
                  4.87591660e+04 * invT;
    // species 22: CH2CO
    species[22] = +3.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
                  2.30836470e-10 * T3 - 1.58967640e-14 * T4 -
                  7.77850000e+03 * invT;
    // species 23: C3H3
    species[23] = +6.14221880e+00 + 3.80951002e-03 * T - 8.91533167e-07 * T2 +
                  1.06228700e-10 * T3 - 5.02950830e-15 * T4 +
                  3.89087427e+04 * invT;
    // species 24: aC3H5
    species[24] = +5.50078770e+00 + 7.16236550e-03 * T - 1.89272107e-06 * T2 +
                  2.77020025e-10 * T3 - 1.80727774e-14 * T4 +
                  1.74824490e+04 * invT;
    // species 25: C5H4O
    species[25] = +9.08068240e+00 + 8.05717325e-03 * T - 1.94438170e-06 * T2 +
                  2.36689830e-10 * T3 - 1.13794441e-14 * T4 +
                  1.94364771e+03 * invT;
    // species 26: C5H5
    species[26] = +6.47439380e+00 + 8.00636650e-03 * T - 2.16077160e-09 * T2 -
                  8.95492575e-10 * T3 + 1.84730142e-13 * T4 +
                  2.80860000e+04 * invT;
    // species 27: C6H5CH2
    species[27] = +1.30439800e+01 + 1.17469365e-02 * T - 2.84584557e-06 * T2 +
                  3.47271025e-10 * T3 - 1.67228840e-14 * T4 +
                  1.85642030e+04 * invT;
    // species 28: C6H5O
    species[28] = +1.27221720e+01 + 8.73443855e-03 * T - 2.11834840e-06 * T2 +
                  2.58730770e-10 * T3 - 1.24682101e-14 * T4 +
                  2.87274751e+02 * invT;
    // species 29: C6H5CHO
    species[29] = +1.26507370e+01 + 1.28402095e-02 * T - 3.48890967e-06 * T2 +
                  4.85335750e-10 * T3 - 2.69675840e-14 * T4 -
                  1.10197440e+04 * invT;
    // species 30: N2
    species[30] = +1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                  2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                  9.22797700e+02 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +2.57855180e+00 + 3.63124160e-02 * T + 2.44121233e-05 * T2 -
                 3.77886100e-08 * T3 + 1.37871158e-11 * T4 -
                 3.80298550e+04 * invT;
    // species 1: C2H4
    species[1] = +3.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
                 1.72897188e-08 * T3 + 5.39768746e-12 * T4 +
                 5.08977593e+03 * invT;
    // species 2: CH4
    species[2] = +5.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
                 1.21185757e-08 * T3 + 3.33387912e-12 * T4 -
                 1.02466476e+04 * invT;
    // species 3: C3H6
    species[3] = +1.49330700e+00 + 1.04625900e-02 * T + 1.49559800e-06 * T2 -
                 4.17228000e-09 * T3 + 1.43162920e-12 * T4 +
                 1.07482600e+03 * invT;
    // species 4: iC4H8
    species[4] = +2.64714050e+00 + 1.29514785e-02 * T + 2.73284513e-06 * T2 -
                 5.54831475e-09 * T3 + 1.77917160e-12 * T4 -
                 4.03730690e+03 * invT;
    // species 5: C4H81
    species[5] = +1.18113800e+00 + 1.54266900e-02 * T + 1.69550823e-06 * T2 -
                 6.16372200e-09 * T3 + 2.22203860e-12 * T4 -
                 1.79040040e+03 * invT;
    // species 6: H2
    species[6] = +2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
                 5.03930235e-09 * T3 - 1.47522352e-12 * T4 -
                 9.17935173e+02 * invT;
    // species 7: C2H6
    species[7] = +4.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
                 1.77116571e-08 * T3 + 5.37371542e-12 * T4 -
                 1.15222055e+04 * invT;
    // species 8: CO
    species[8] = +3.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
                 2.26751471e-10 * T3 - 1.80884900e-13 * T4 -
                 1.43440860e+04 * invT;
    // species 9: C6H6
    species[9] = -4.84377340e+00 + 2.92138065e-02 * T - 9.82861833e-06 * T2 -
                 1.73476100e-09 * T3 + 1.64250506e-12 * T4 +
                 9.18177730e+03 * invT;
    // species 10: C2H2
    species[10] = +8.08681094e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
                  7.00381092e-09 * T3 - 1.70014595e-12 * T4 +
                  2.64289807e+04 * invT;
    // species 11: C6H5CH3
    species[11] = +1.61526630e+00 + 1.05497190e-02 * T + 2.84553393e-05 * T2 -
                  3.31526650e-08 * T3 + 1.11913208e-11 * T4 +
                  4.07563000e+03 * invT;
    // species 12: CH3
    species[12] = +3.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
                  1.71779356e-09 * T3 + 5.08771468e-13 * T4 +
                  1.64449988e+04 * invT;
    // species 13: O2
    species[13] = +3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
                  2.42032377e-09 * T3 + 6.48745674e-13 * T4 -
                  1.06394356e+03 * invT;
    // species 14: O
    species[14] = +3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
                  1.53201656e-09 * T3 + 4.22531942e-13 * T4 +
                  2.91222592e+04 * invT;
    // species 15: OH
    species[15] = +4.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
                  1.44963411e-09 * T3 + 4.12474758e-13 * T4 +
                  3.38153812e+03 * invT;
    // species 16: HO2
    species[16] = +4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
                  6.06909735e-09 * T3 + 1.85845025e-12 * T4 +
                  2.94808040e+02 * invT;
    // species 17: H2O
    species[17] = +4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
                  1.37199266e-09 * T3 + 3.54395634e-13 * T4 -
                  3.02937267e+04 * invT;
    // species 18: H2O2
    species[18] = +4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
                  5.39427032e-09 * T3 + 1.72490873e-12 * T4 -
                  1.77025821e+04 * invT;
    // species 19: H
    species[19] = +2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
                  5.75204080e-19 * T3 - 1.85546466e-22 * T4 +
                  2.54736599e+04 * invT;
    // species 20: CH2O
    species[20] = +4.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
                  9.48213152e-09 * T3 + 2.63545304e-12 * T4 -
                  1.43089567e+04 * invT;
    // species 21: CO2
    species[21] = +2.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
                  6.14797555e-10 * T3 - 2.87399096e-14 * T4 -
                  4.83719697e+04 * invT;
    // species 22: CH2CO
    species[22] = +2.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
                  2.33599392e-09 * T3 - 4.02915230e-13 * T4 -
                  7.27000000e+03 * invT;
    // species 23: C3H3
    species[23] = +1.35110927e+00 + 1.63705612e-02 * T - 1.57942378e-05 * T2 +
                  9.40774520e-09 * T3 - 2.37081846e-12 * T4 +
                  4.01057783e+04 * invT;
    // species 24: aC3H5
    species[24] = +1.36318350e+00 + 9.90691050e-03 * T + 4.16568667e-06 * T2 -
                  8.33888875e-09 * T3 + 3.16931420e-12 * T4 +
                  1.92456290e+04 * invT;
    // species 25: C5H4O
    species[25] = +2.64576497e-01 + 1.67436913e-02 * T + 5.59128233e-07 * T2 -
                  7.40518638e-09 * T3 + 3.08862952e-12 * T4 +
                  5.11159287e+03 * invT;
    // species 26: C5H5
    species[26] = +9.83498220e-01 + 1.68257380e-02 * T - 3.68472700e-08 * T2 -
                  9.18584850e-09 * T3 + 4.62823680e-12 * T4 +
                  2.96260000e+04 * invT;
    // species 27: C6H5CH2
    species[27] = +4.81115400e-01 + 1.92564160e-02 * T + 1.09538307e-05 * T2 -
                  1.92431803e-08 * T3 + 7.08461360e-12 * T4 +
                  2.33070270e+04 * invT;
    // species 28: C6H5O
    species[28] = -4.66204455e-01 + 2.06721987e-02 * T + 4.41376637e-06 * T2 -
                  1.43218192e-08 * T3 + 5.79527414e-12 * T4 +
                  4.77858391e+03 * invT;
    // species 29: C6H5CHO
    species[29] = -3.16273340e+00 + 3.31846225e-02 * T - 1.16054510e-05 * T2 -
                  1.57498443e-09 * T3 + 1.71614202e-12 * T4 -
                  6.11693490e+03 * invT;
    // species 30: N2
    species[30] = +3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
                  1.41037875e-09 * T3 - 4.88970800e-13 * T4 -
                  1.02089990e+03 * invT;
  } else {
    // species 0: POSF10325
    species[0] = +2.13578910e+01 + 3.32945435e-02 * T - 8.65582300e-06 * T2 +
                 1.11937502e-09 * T3 - 4.72143040e-14 * T4 -
                 4.57969960e+04 * invT;
    // species 1: C2H4
    species[1] = +2.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
                 3.68057308e-10 * T3 - 2.51412122e-14 * T4 +
                 4.93988614e+03 * invT;
    // species 2: CH4
    species[2] = +7.48514950e-02 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
                 3.05731338e-10 * T3 - 2.03630460e-14 * T4 -
                 9.46834459e+03 * invT;
    // species 3: C3H6
    species[3] = +6.73225700e+00 + 7.45417000e-03 * T - 1.64996633e-06 * T2 +
                 1.80300550e-10 * T3 - 7.53240800e-15 * T4 -
                 9.23570300e+02 * invT;
    // species 4: iC4H8
    species[4] = +4.46094700e+00 + 1.48057435e-02 * T - 4.35904300e-06 * T2 +
                 6.64298350e-10 * T3 - 4.02694260e-14 * T4 -
                 5.00667580e+03 * invT;
    // species 5: C4H81
    species[5] = +2.05358410e+00 + 1.71752535e-02 * T - 5.29439900e-06 * T2 +
                 8.27241550e-10 * T3 - 5.07220900e-14 * T4 -
                 2.13972310e+03 * invT;
    // species 6: H2
    species[6] = +3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
                 4.48915985e-11 * T3 + 4.00510752e-15 * T4 -
                 9.50158922e+02 * invT;
    // species 7: C2H6
    species[7] = +1.07188150e+00 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
                 5.53530003e-10 * T3 - 3.80005780e-14 * T4 -
                 1.14263932e+04 * invT;
    // species 8: CO
    species[8] = +2.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
                 5.75132520e-11 * T3 - 4.07295432e-15 * T4 -
                 1.41518724e+04 * invT;
    // species 9: C6H6
    species[9] = +9.13812450e+00 + 1.19272165e-02 * T - 2.93759087e-06 * T2 +
                 3.02475525e-10 * T3 - 3.64430060e-15 * T4 +
                 5.20434620e+03 * invT;
    // species 10: C2H2
    species[10] = +4.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
                  1.16853043e-10 * T3 - 7.22470426e-15 * T4 +
                  2.59359992e+04 * invT;
    // species 11: C6H5CH3
    species[11] = +1.29400340e+01 + 1.33456435e-02 * T - 3.22795017e-06 * T2 +
                  3.93465725e-10 * T3 - 1.89327202e-14 * T4 -
                  6.97649080e+02 * invT;
    // species 12: CH3
    species[12] = +2.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
                  1.48921161e-10 * T3 - 9.34308788e-15 * T4 +
                  1.67755843e+04 * invT;
    // species 13: O2
    species[13] = +3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
                  5.23676387e-11 * T3 - 4.33435588e-15 * T4 -
                  1.08845772e+03 * invT;
    // species 14: O
    species[14] = +2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
                  2.50444497e-12 * T3 + 2.45667382e-16 * T4 +
                  2.92175791e+04 * invT;
    // species 15: OH
    species[15] = +2.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
                  7.63046685e-12 * T3 - 2.66391752e-16 * T4 +
                  3.71885774e+03 * invT;
    // species 16: HO2
    species[16] = +4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
                  2.85615925e-11 * T3 - 2.15817070e-15 * T4 +
                  1.11856713e+02 * invT;
    // species 17: H2O
    species[17] = +3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
                  2.42604967e-11 * T3 + 3.36401984e-15 * T4 -
                  3.00042971e+04 * invT;
    // species 18: H2O2
    species[18] = +4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
                  9.27964965e-11 * T3 - 5.75816610e-15 * T4 -
                  1.78617877e+04 * invT;
    // species 19: H
    species[19] = +2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
                  1.18378809e-18 * T3 + 9.96394714e-23 * T4 +
                  2.54736599e+04 * invT;
    // species 20: CH2O
    species[20] = +1.76069008e+00 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
                  2.51603030e-10 * T3 - 1.76771128e-14 * T4 -
                  1.39958323e+04 * invT;
    // species 21: CO2
    species[21] = +3.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
                  1.30872547e-10 * T3 - 9.44168328e-15 * T4 -
                  4.87591660e+04 * invT;
    // species 22: CH2CO
    species[22] = +4.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
                  2.30836470e-10 * T3 - 1.58967640e-14 * T4 -
                  7.77850000e+03 * invT;
    // species 23: C3H3
    species[23] = +7.14221880e+00 + 3.80951002e-03 * T - 8.91533167e-07 * T2 +
                  1.06228700e-10 * T3 - 5.02950830e-15 * T4 +
                  3.89087427e+04 * invT;
    // species 24: aC3H5
    species[24] = +6.50078770e+00 + 7.16236550e-03 * T - 1.89272107e-06 * T2 +
                  2.77020025e-10 * T3 - 1.80727774e-14 * T4 +
                  1.74824490e+04 * invT;
    // species 25: C5H4O
    species[25] = +1.00806824e+01 + 8.05717325e-03 * T - 1.94438170e-06 * T2 +
                  2.36689830e-10 * T3 - 1.13794441e-14 * T4 +
                  1.94364771e+03 * invT;
    // species 26: C5H5
    species[26] = +7.47439380e+00 + 8.00636650e-03 * T - 2.16077160e-09 * T2 -
                  8.95492575e-10 * T3 + 1.84730142e-13 * T4 +
                  2.80860000e+04 * invT;
    // species 27: C6H5CH2
    species[27] = +1.40439800e+01 + 1.17469365e-02 * T - 2.84584557e-06 * T2 +
                  3.47271025e-10 * T3 - 1.67228840e-14 * T4 +
                  1.85642030e+04 * invT;
    // species 28: C6H5O
    species[28] = +1.37221720e+01 + 8.73443855e-03 * T - 2.11834840e-06 * T2 +
                  2.58730770e-10 * T3 - 1.24682101e-14 * T4 +
                  2.87274751e+02 * invT;
    // species 29: C6H5CHO
    species[29] = +1.36507370e+01 + 1.28402095e-02 * T - 3.48890967e-06 * T2 +
                  4.85335750e-10 * T3 - 2.69675840e-14 * T4 -
                  1.10197440e+04 * invT;
    // species 30: N2
    species[30] = +2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
                  2.52425950e-11 * T3 - 1.35067020e-15 * T4 -
                  9.22797700e+02 * invT;
  }
}

// compute the h/(RT) at the given temperature (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy_qss(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: CH2
    species[0] = +3.76267867e+00 + 4.84436072e-04 * T + 9.31632803e-07 * T2 -
                 9.62727883e-10 * T3 + 3.37483438e-13 * T4 +
                 4.60040401e+04 * invT;
    // species 1: CH2*
    species[1] = +4.19860411e+00 - 1.18330710e-03 * T + 2.74432073e-06 * T2 -
                 1.67203995e-09 * T3 + 3.88629474e-13 * T4 +
                 5.04968163e+04 * invT;
    // species 2: HCO
    species[2] = +4.22118584e+00 - 1.62196266e-03 * T + 4.59331487e-06 * T2 -
                 3.32860233e-09 * T3 + 8.67537730e-13 * T4 +
                 3.83956496e+03 * invT;
    // species 3: CH3O
    species[3] = +3.71180502e+00 - 1.40231653e-03 * T + 1.25516990e-05 * T2 -
                 1.18268022e-08 * T3 + 3.73176840e-12 * T4 +
                 1.29569760e+03 * invT;
    // species 4: C2H3
    species[4] = +3.21246645e+00 + 7.57395810e-04 * T + 8.64031373e-06 * T2 -
                 8.94144617e-09 * T3 + 2.94301746e-12 * T4 +
                 3.48598468e+04 * invT;
    // species 5: C2H5
    species[5] = +4.30646568e+00 - 2.09329446e-03 * T + 1.65714269e-05 * T2 -
                 1.49781651e-08 * T3 + 4.61018008e-12 * T4 +
                 1.28416265e+04 * invT;
    // species 6: HCCO
    species[6] = +2.25172140e+00 + 8.82751050e-03 * T - 7.90970033e-06 * T2 +
                 4.31893975e-09 * T3 - 1.01329622e-12 * T4 +
                 2.00594490e+04 * invT;
    // species 7: CH2CHO
    species[7] = +3.40906240e+00 + 5.36928700e-03 * T + 6.30497500e-07 * T2 -
                 1.78964578e-09 * T3 + 5.73477020e-13 * T4 +
                 6.20000000e+01 * invT;
    // species 8: C6H5
    species[8] = -3.69314530e+00 + 2.60894840e-02 * T - 8.51947567e-06 * T2 -
                 1.76652803e-09 * T3 + 1.51667950e-12 * T4 +
                 3.97795900e+04 * invT;
    // species 9: C6H5CO
    species[9] = -2.02511550e+00 + 3.07562705e-02 * T - 1.05345510e-05 * T2 -
                 1.74311497e-09 * T3 + 1.59670298e-12 * T4 +
                 1.12558030e+04 * invT;
  } else {
    // species 0: CH2
    species[0] = +2.87410113e+00 + 1.82819646e-03 * T - 4.69648657e-07 * T2 +
                 6.50448872e-11 * T3 - 3.75455134e-15 * T4 +
                 4.62636040e+04 * invT;
    // species 1: CH2*
    species[1] = +2.29203842e+00 + 2.32794318e-03 * T - 6.70639823e-07 * T2 +
                 1.04476500e-10 * T3 - 6.79432730e-15 * T4 +
                 5.09259997e+04 * invT;
    // species 2: HCO
    species[2] = +2.77217438e+00 + 2.47847763e-03 * T - 8.28152043e-07 * T2 +
                 1.47290445e-10 * T3 - 1.06701742e-14 * T4 +
                 4.01191815e+03 * invT;
    // species 3: CH3O
    species[3] = +4.75779238e+00 + 3.72071237e-03 * T - 8.99017253e-07 * T2 +
                 1.09522626e-10 * T3 - 5.27074196e-15 * T4 +
                 3.78111940e+02 * invT;
    // species 4: C2H3
    species[4] = +3.01672400e+00 + 5.16511460e-03 * T - 1.56027450e-06 * T2 +
                 2.54408220e-10 * T3 - 1.72521408e-14 * T4 +
                 3.46128739e+04 * invT;
    // species 5: C2H5
    species[5] = +1.95465642e+00 + 8.69863610e-03 * T - 2.66068889e-06 * T2 +
                 4.38044223e-10 * T3 - 2.99283152e-14 * T4 +
                 1.28575200e+04 * invT;
    // species 6: HCCO
    species[6] = +5.62820580e+00 + 2.04267005e-03 * T - 5.31151567e-07 * T2 +
                 7.15651300e-11 * T3 - 3.88156640e-15 * T4 +
                 1.93272150e+04 * invT;
    // species 7: CH2CHO
    species[7] = +5.97566990e+00 + 4.06529570e-03 * T - 9.14541500e-07 * T2 +
                 1.01757603e-10 * T3 - 4.35203420e-15 * T4 -
                 9.69500000e+02 * invT;
    // species 8: C6H5
    species[8] = +8.59731100e+00 + 1.11208150e-02 * T - 2.90666593e-06 * T2 +
                 3.44719625e-10 * T3 - 1.06292112e-14 * T4 +
                 3.62610470e+04 * invT;
    // species 9: C6H5CO
    species[9] = +1.33744090e+01 + 1.19996445e-02 * T - 3.48857467e-06 * T2 +
                 5.41728275e-10 * T3 - 3.60140900e-14 * T4 +
                 6.91478370e+03 * invT;
  }
}

// compute the S/R at the given temperature (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real logT = log(T);

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +2.57855180e+00 * logT + 7.26248320e-02 * T +
                 3.66181850e-05 * T2 - 5.03848133e-08 * T3 +
                 1.72338947e-11 * T4 + 2.25337350e+01;
    // species 1: C2H4
    species[1] = +3.95920148e+00 * logT - 7.57052247e-03 * T +
                 2.85495146e-05 * T2 - 2.30529584e-08 * T3 +
                 6.74710933e-12 * T4 + 4.09733096e+00;
    // species 2: CH4
    species[2] = +5.14987613e+00 * logT - 1.36709788e-02 * T +
                 2.45900299e-05 * T2 - 1.61581009e-08 * T3 +
                 4.16734890e-12 * T4 - 4.64130376e+00;
    // species 3: C3H6
    species[3] = +1.49330700e+00 * logT + 2.09251800e-02 * T +
                 2.24339700e-06 * T2 - 5.56304000e-09 * T3 +
                 1.78953650e-12 * T4 + 1.61453400e+01;
    // species 4: iC4H8
    species[4] = +2.64714050e+00 * logT + 2.59029570e-02 * T +
                 4.09926770e-06 * T2 - 7.39775300e-09 * T3 +
                 2.22396450e-12 * T4 + 1.26763880e+01;
    // species 5: C4H81
    species[5] = +1.18113800e+00 * logT + 3.08533800e-02 * T +
                 2.54326235e-06 * T2 - 8.21829600e-09 * T3 +
                 2.77754825e-12 * T4 + 2.10624690e+01;
    // species 6: H2
    species[6] = +2.34433112e+00 * logT + 7.98052075e-03 * T -
                 9.73907550e-06 * T2 + 6.71906980e-09 * T3 -
                 1.84402940e-12 * T4 + 6.83010238e-01;
    // species 7: C2H6
    species[7] = +4.29142492e+00 * logT - 5.50154270e-03 * T +
                 2.99719144e-05 * T2 - 2.36155428e-08 * T3 +
                 6.71714427e-12 * T4 + 2.66682316e+00;
    // species 8: CO
    species[8] = +3.57953347e+00 * logT - 6.10353680e-04 * T +
                 5.08407165e-07 * T2 + 3.02335295e-10 * T3 -
                 2.26106125e-13 * T4 + 3.50840928e+00;
    // species 9: C6H6
    species[9] = -4.84377340e+00 * logT + 5.84276130e-02 * T -
                 1.47429275e-05 * T2 - 2.31301467e-09 * T3 +
                 2.05313133e-12 * T4 + 4.38898320e+01;
    // species 10: C2H2
    species[10] = +8.08681094e-01 * logT + 2.33615629e-02 * T -
                  1.77585907e-05 * T2 + 9.33841457e-09 * T3 -
                  2.12518243e-12 * T4 + 1.39397051e+01;
    // species 11: C6H5CH3
    species[11] = +1.61526630e+00 * logT + 2.10994380e-02 * T +
                  4.26830090e-05 * T2 - 4.42035533e-08 * T3 +
                  1.39891510e-11 * T4 + 2.02822100e+01;
    // species 12: CH3
    species[12] = +3.67359040e+00 * logT + 2.01095175e-03 * T +
                  2.86510928e-06 * T2 - 2.29039142e-09 * T3 +
                  6.35964335e-13 * T4 + 1.60456433e+00;
    // species 13: O2
    species[13] = +3.78245636e+00 * logT - 2.99673416e-03 * T +
                  4.92365101e-06 * T2 - 3.22709836e-09 * T3 +
                  8.10932092e-13 * T4 + 3.65767573e+00;
    // species 14: O
    species[14] = +3.16826710e+00 * logT - 3.27931884e-03 * T +
                  3.32153198e-06 * T2 - 2.04268875e-09 * T3 +
                  5.28164927e-13 * T4 + 2.05193346e+00;
    // species 15: OH
    species[15] = +4.12530561e+00 * logT - 3.22544939e-03 * T +
                  3.26382346e-06 * T2 - 1.93284548e-09 * T3 +
                  5.15593447e-13 * T4 - 6.90432960e-01;
    // species 16: HO2
    species[16] = +4.30179801e+00 * logT - 4.74912051e-03 * T +
                  1.05791445e-05 * T2 - 8.09212980e-09 * T3 +
                  2.32306281e-12 * T4 + 3.71666245e+00;
    // species 17: H2O
    species[17] = +4.19864056e+00 * logT - 2.03643410e-03 * T +
                  3.26020105e-06 * T2 - 1.82932354e-09 * T3 +
                  4.42994543e-13 * T4 - 8.49032208e-01;
    // species 18: H2O2
    species[18] = +4.27611269e+00 * logT - 5.42822417e-04 * T +
                  8.36678505e-06 * T2 - 7.19236043e-09 * T3 +
                  2.15613591e-12 * T4 + 3.43505074e+00;
    // species 19: H
    species[19] = +2.50000000e+00 * logT + 7.05332819e-13 * T -
                  9.97959820e-16 * T2 + 7.66938773e-19 * T3 -
                  2.31933083e-22 * T4 - 4.46682853e-01;
    // species 20: CH2O
    species[20] = +4.79372315e+00 * logT - 9.90833369e-03 * T +
                  1.86610004e-05 * T2 - 1.26428420e-08 * T3 +
                  3.29431630e-12 * T4 + 6.02812900e-01;
    // species 21: CO2
    species[21] = +2.35677352e+00 * logT + 8.98459677e-03 * T -
                  3.56178134e-06 * T2 + 8.19730073e-10 * T3 -
                  3.59248870e-14 * T4 + 9.90105222e+00;
    // species 22: CH2CO
    species[22] = +2.13583630e+00 * logT + 1.81188721e-02 * T -
                  8.69737370e-06 * T2 + 3.11465856e-09 * T3 -
                  5.03644037e-13 * T4 + 1.22156480e+01;
    // species 23: C3H3
    species[23] = +1.35110927e+00 * logT + 3.27411223e-02 * T -
                  2.36913568e-05 * T2 + 1.25436603e-08 * T3 -
                  2.96352308e-12 * T4 + 1.52058924e+01;
    // species 24: aC3H5
    species[24] = +1.36318350e+00 * logT + 1.98138210e-02 * T +
                  6.24853000e-06 * T2 - 1.11185183e-08 * T3 +
                  3.96164275e-12 * T4 + 1.71732140e+01;
    // species 25: C5H4O
    species[25] = +2.64576497e-01 * logT + 3.34873827e-02 * T +
                  8.38692350e-07 * T2 - 9.87358183e-09 * T3 +
                  3.86078690e-12 * T4 + 2.35409513e+01;
    // species 26: C5H5
    species[26] = +9.83498220e-01 * logT + 3.36514760e-02 * T -
                  5.52709050e-08 * T2 - 1.22477980e-08 * T3 +
                  5.78529600e-12 * T4 + 1.65855190e+01;
    // species 27: C6H5CH2
    species[27] = +4.81115400e-01 * logT + 3.85128320e-02 * T +
                  1.64307460e-05 * T2 - 2.56575737e-08 * T3 +
                  8.85576700e-12 * T4 + 2.35488200e+01;
    // species 28: C6H5O
    species[28] = -4.66204455e-01 * logT + 4.13443975e-02 * T +
                  6.62064955e-06 * T2 - 1.90957590e-08 * T3 +
                  7.24409267e-12 * T4 + 2.76990274e+01;
    // species 29: C6H5CHO
    species[29] = -3.16273340e+00 * logT + 6.63692450e-02 * T -
                  1.74081765e-05 * T2 - 2.09997923e-09 * T3 +
                  2.14517753e-12 * T4 + 4.02317350e+01;
    // species 30: N2
    species[30] = +3.29867700e+00 * logT + 1.40824040e-03 * T -
                  1.98161100e-06 * T2 + 1.88050500e-09 * T3 -
                  6.11213500e-13 * T4 + 3.95037200e+00;
  } else {
    // species 0: POSF10325
    species[0] = +2.13578910e+01 * logT + 6.65890870e-02 * T -
                 1.29837345e-05 * T2 + 1.49250003e-09 * T3 -
                 5.90178800e-14 * T4 - 8.61360860e+01;
    // species 1: C2H4
    species[1] = +2.03611116e+00 * logT + 1.46454151e-02 * T -
                 3.35538958e-06 * T2 + 4.90743077e-10 * T3 -
                 3.14265152e-14 * T4 + 1.03053693e+01;
    // species 2: CH4
    species[2] = +7.48514950e-02 * logT + 1.33909467e-02 * T -
                 2.86642905e-06 * T2 + 4.07641783e-10 * T3 -
                 2.54538075e-14 * T4 + 1.84373180e+01;
    // species 3: C3H6
    species[3] = +6.73225700e+00 * logT + 1.49083400e-02 * T -
                 2.47494950e-06 * T2 + 2.40400733e-10 * T3 -
                 9.41551000e-15 * T4 - 1.33133500e+01;
    // species 4: iC4H8
    species[4] = +4.46094700e+00 * logT + 2.96114870e-02 * T -
                 6.53856450e-06 * T2 + 8.85731133e-10 * T3 -
                 5.03367825e-14 * T4 + 1.06715490e+00;
    // species 5: C4H81
    species[5] = +2.05358410e+00 * logT + 3.43505070e-02 * T -
                 7.94159850e-06 * T2 + 1.10298873e-09 * T3 -
                 6.34026125e-14 * T4 + 1.55432010e+01;
    // species 6: H2
    species[6] = +3.33727920e+00 * logT - 4.94024731e-05 * T +
                 2.49728389e-07 * T2 - 5.98554647e-11 * T3 +
                 5.00638440e-15 * T4 - 3.20502331e+00;
    // species 7: C2H6
    species[7] = +1.07188150e+00 * logT + 2.16852677e-02 * T -
                 5.01280335e-06 * T2 + 7.38040003e-10 * T3 -
                 4.75007225e-14 * T4 + 1.51156107e+01;
    // species 8: CO
    species[8] = +2.71518561e+00 * logT + 2.06252743e-03 * T -
                 4.99412886e-07 * T2 + 7.66843360e-11 * T3 -
                 5.09119290e-15 * T4 + 7.81868772e+00;
    // species 9: C6H6
    species[9] = +9.13812450e+00 * logT + 2.38544330e-02 * T -
                 4.40638630e-06 * T2 + 4.03300700e-10 * T3 -
                 4.55537575e-15 * T4 - 2.91156650e+01;
    // species 10: C2H2
    species[10] = +4.14756964e+00 * logT + 5.96166664e-03 * T -
                  1.18647426e-06 * T2 + 1.55804057e-10 * T3 -
                  9.03088033e-15 * T4 - 1.23028121e+00;
    // species 11: C6H5CH3
    species[11] = +1.29400340e+01 * logT + 2.66912870e-02 * T -
                  4.84192525e-06 * T2 + 5.24620967e-10 * T3 -
                  2.36659002e-14 * T4 - 4.67287850e+01;
    // species 12: CH3
    species[12] = +2.28571772e+00 * logT + 7.23990037e-03 * T -
                  1.49357174e-06 * T2 + 1.98561548e-10 * T3 -
                  1.16788599e-14 * T4 + 8.48007179e+00;
    // species 13: O2
    species[13] = +3.28253784e+00 * logT + 1.48308754e-03 * T -
                  3.78983334e-07 * T2 + 6.98235183e-11 * T3 -
                  5.41794485e-15 * T4 + 5.45323129e+00;
    // species 14: O
    species[14] = +2.56942078e+00 * logT - 8.59741137e-05 * T +
                  2.09742295e-08 * T2 - 3.33925997e-12 * T3 +
                  3.07084227e-16 * T4 + 4.78433864e+00;
    // species 15: OH
    species[15] = +2.86472886e+00 * logT + 1.05650448e-03 * T -
                  1.29541379e-07 * T2 + 1.01739558e-11 * T3 -
                  3.32989690e-16 * T4 + 5.70164073e+00;
    // species 16: HO2
    species[16] = +4.01721090e+00 * logT + 2.23982013e-03 * T -
                  3.16829075e-07 * T2 + 3.80821233e-11 * T3 -
                  2.69771337e-15 * T4 + 3.78510215e+00;
    // species 17: H2O
    species[17] = +3.03399249e+00 * logT + 2.17691804e-03 * T -
                  8.20362590e-08 * T2 - 3.23473290e-11 * T3 +
                  4.20502480e-15 * T4 + 4.96677010e+00;
    // species 18: H2O2
    species[18] = +4.16500285e+00 * logT + 4.90831694e-03 * T -
                  9.50696125e-07 * T2 + 1.23728662e-10 * T3 -
                  7.19770763e-15 * T4 + 2.91615662e+00;
    // species 19: H
    species[19] = +2.50000001e+00 * logT - 2.30842973e-11 * T +
                  8.07809740e-15 * T2 - 1.57838412e-18 * T3 +
                  1.24549339e-22 * T4 - 4.46682914e-01;
    // species 20: CH2O
    species[20] = +1.76069008e+00 * logT + 9.20000082e-03 * T -
                  2.21129406e-06 * T2 + 3.35470707e-10 * T3 -
                  2.20963910e-14 * T4 + 1.36563230e+01;
    // species 21: CO2
    species[21] = +3.85746029e+00 * logT + 4.41437026e-03 * T -
                  1.10740702e-06 * T2 + 1.74496729e-10 * T3 -
                  1.18021041e-14 * T4 + 2.27163806e+00;
    // species 22: CH2CO
    species[22] = +4.51129732e+00 * logT + 9.00359745e-03 * T -
                  2.08469817e-06 * T2 + 3.07781961e-10 * T3 -
                  1.98709550e-14 * T4 + 6.32247205e-01;
    // species 23: C3H3
    species[23] = +7.14221880e+00 * logT + 7.61902005e-03 * T -
                  1.33729975e-06 * T2 + 1.41638267e-10 * T3 -
                  6.28688537e-15 * T4 - 1.25848436e+01;
    // species 24: aC3H5
    species[24] = +6.50078770e+00 * logT + 1.43247310e-02 * T -
                  2.83908160e-06 * T2 + 3.69360033e-10 * T3 -
                  2.25909717e-14 * T4 - 1.12430500e+01;
    // species 25: C5H4O
    species[25] = +1.00806824e+01 * logT + 1.61143465e-02 * T -
                  2.91657254e-06 * T2 + 3.15586440e-10 * T3 -
                  1.42243052e-14 * T4 - 2.94521623e+01;
    // species 26: C5H5
    species[26] = +7.47439380e+00 * logT + 1.60127330e-02 * T -
                  3.24115740e-09 * T2 - 1.19399010e-09 * T3 +
                  2.30912678e-13 * T4 - 1.61330000e+01;
    // species 27: C6H5CH2
    species[27] = +1.40439800e+01 * logT + 2.34938730e-02 * T -
                  4.26876835e-06 * T2 + 4.63028033e-10 * T3 -
                  2.09036050e-14 * T4 - 5.16655890e+01;
    // species 28: C6H5O
    species[28] = +1.37221720e+01 * logT + 1.74688771e-02 * T -
                  3.17752260e-06 * T2 + 3.44974360e-10 * T3 -
                  1.55852626e-14 * T4 - 4.88181680e+01;
    // species 29: C6H5CHO
    species[29] = +1.36507370e+01 * logT + 2.56804190e-02 * T -
                  5.23336450e-06 * T2 + 6.47114333e-10 * T3 -
                  3.37094800e-14 * T4 - 4.79657960e+01;
    // species 30: N2
    species[30] = +2.92664000e+00 * logT + 1.48797680e-03 * T -
                  2.84238000e-07 * T2 + 3.36567933e-11 * T3 -
                  1.68833775e-15 * T4 + 5.98052800e+00;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real T)
{
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +7.26248320e-02 + 1.46472740e-04 * T - 4.53463320e-07 * T2 +
                 2.75742316e-10 * T3;
    // species 1: C2H4
    species[1] = -7.57052247e-03 + 1.14198058e-04 * T - 2.07476626e-07 * T2 +
                 1.07953749e-10 * T3;
    // species 2: CH4
    species[2] = -1.36709788e-02 + 9.83601198e-05 * T - 1.45422908e-07 * T2 +
                 6.66775824e-11 * T3;
    // species 3: C3H6
    species[3] = +2.09251800e-02 + 8.97358800e-06 * T - 5.00673600e-08 * T2 +
                 2.86325840e-11 * T3;
    // species 4: iC4H8
    species[4] = +2.59029570e-02 + 1.63970708e-05 * T - 6.65797770e-08 * T2 +
                 3.55834320e-11 * T3;
    // species 5: C4H81
    species[5] = +3.08533800e-02 + 1.01730494e-05 * T - 7.39646640e-08 * T2 +
                 4.44407720e-11 * T3;
    // species 6: H2
    species[6] = +7.98052075e-03 - 3.89563020e-05 * T + 6.04716282e-08 * T2 -
                 2.95044704e-11 * T3;
    // species 7: C2H6
    species[7] = -5.50154270e-03 + 1.19887658e-04 * T - 2.12539886e-07 * T2 +
                 1.07474308e-10 * T3;
    // species 8: CO
    species[8] = -6.10353680e-04 + 2.03362866e-06 * T + 2.72101765e-09 * T2 -
                 3.61769800e-12 * T3;
    // species 9: C6H6
    species[9] = +5.84276130e-02 - 5.89717100e-05 * T - 2.08171320e-08 * T2 +
                 3.28501012e-11 * T3;
    // species 10: C2H2
    species[10] = +2.33615629e-02 - 7.10343630e-05 * T + 8.40457311e-08 * T2 -
                  3.40029190e-11 * T3;
    // species 11: C6H5CH3
    species[11] = +2.10994380e-02 + 1.70732036e-04 * T - 3.97831980e-07 * T2 +
                  2.23826416e-10 * T3;
    // species 12: CH3
    species[12] = +2.01095175e-03 + 1.14604371e-05 * T - 2.06135228e-08 * T2 +
                  1.01754294e-11 * T3;
    // species 13: O2
    species[13] = -2.99673416e-03 + 1.96946040e-05 * T - 2.90438853e-08 * T2 +
                  1.29749135e-11 * T3;
    // species 14: O
    species[14] = -3.27931884e-03 + 1.32861279e-05 * T - 1.83841987e-08 * T2 +
                  8.45063884e-12 * T3;
    // species 15: OH
    species[15] = -3.22544939e-03 + 1.30552938e-05 * T - 1.73956093e-08 * T2 +
                  8.24949516e-12 * T3;
    // species 16: HO2
    species[16] = -4.74912051e-03 + 4.23165782e-05 * T - 7.28291682e-08 * T2 +
                  3.71690050e-11 * T3;
    // species 17: H2O
    species[17] = -2.03643410e-03 + 1.30408042e-05 * T - 1.64639119e-08 * T2 +
                  7.08791268e-12 * T3;
    // species 18: H2O2
    species[18] = -5.42822417e-04 + 3.34671402e-05 * T - 6.47312439e-08 * T2 +
                  3.44981745e-11 * T3;
    // species 19: H
    species[19] = +7.05332819e-13 - 3.99183928e-15 * T + 6.90244896e-18 * T2 -
                  3.71092933e-21 * T3;
    // species 20: CH2O
    species[20] = -9.90833369e-03 + 7.46440016e-05 * T - 1.13785578e-07 * T2 +
                  5.27090608e-11 * T3;
    // species 21: CO2
    species[21] = +8.98459677e-03 - 1.42471254e-05 * T + 7.37757066e-09 * T2 -
                  5.74798192e-13 * T3;
    // species 22: CH2CO
    species[22] = +1.81188721e-02 - 3.47894948e-05 * T + 2.80319270e-08 * T2 -
                  8.05830460e-12 * T3;
    // species 23: C3H3
    species[23] = +3.27411223e-02 - 9.47654270e-05 * T + 1.12892942e-07 * T2 -
                  4.74163692e-11 * T3;
    // species 24: aC3H5
    species[24] = +1.98138210e-02 + 2.49941200e-05 * T - 1.00066665e-07 * T2 +
                  6.33862840e-11 * T3;
    // species 25: C5H4O
    species[25] = +3.34873827e-02 + 3.35476940e-06 * T - 8.88622365e-08 * T2 +
                  6.17725904e-11 * T3;
    // species 26: C5H5
    species[26] = +3.36514760e-02 - 2.21083620e-07 * T - 1.10230182e-07 * T2 +
                  9.25647360e-11 * T3;
    // species 27: C6H5CH2
    species[27] = +3.85128320e-02 + 6.57229840e-05 * T - 2.30918163e-07 * T2 +
                  1.41692272e-10 * T3;
    // species 28: C6H5O
    species[28] = +4.13443975e-02 + 2.64825982e-05 * T - 1.71861831e-07 * T2 +
                  1.15905483e-10 * T3;
    // species 29: C6H5CHO
    species[29] = +6.63692450e-02 - 6.96327060e-05 * T - 1.88998131e-08 * T2 +
                  3.43228404e-11 * T3;
    // species 30: N2
    species[30] = +1.40824040e-03 - 7.92644400e-06 * T + 1.69245450e-08 * T2 -
                  9.77941600e-12 * T3;
  } else {
    // species 0: POSF10325
    species[0] = +6.65890870e-02 - 5.19349380e-05 * T + 1.34325003e-08 * T2 -
                 9.44286080e-13 * T3;
    // species 1: C2H4
    species[1] = +1.46454151e-02 - 1.34215583e-05 * T + 4.41668769e-09 * T2 -
                 5.02824244e-13 * T3;
    // species 2: CH4
    species[2] = +1.33909467e-02 - 1.14657162e-05 * T + 3.66877605e-09 * T2 -
                 4.07260920e-13 * T3;
    // species 3: C3H6
    species[3] = +1.49083400e-02 - 9.89979800e-06 * T + 2.16360660e-09 * T2 -
                 1.50648160e-13 * T3;
    // species 4: iC4H8
    species[4] = +2.96114870e-02 - 2.61542580e-05 * T + 7.97158020e-09 * T2 -
                 8.05388520e-13 * T3;
    // species 5: C4H81
    species[5] = +3.43505070e-02 - 3.17663940e-05 * T + 9.92689860e-09 * T2 -
                 1.01444180e-12 * T3;
    // species 6: H2
    species[6] = -4.94024731e-05 + 9.98913556e-07 * T - 5.38699182e-10 * T2 +
                 8.01021504e-14 * T3;
    // species 7: C2H6
    species[7] = +2.16852677e-02 - 2.00512134e-05 * T + 6.64236003e-09 * T2 -
                 7.60011560e-13 * T3;
    // species 8: CO
    species[8] = +2.06252743e-03 - 1.99765154e-06 * T + 6.90159024e-10 * T2 -
                 8.14590864e-14 * T3;
    // species 9: C6H6
    species[9] = +2.38544330e-02 - 1.76255452e-05 * T + 3.62970630e-09 * T2 -
                 7.28860120e-14 * T3;
    // species 10: C2H2
    species[10] = +5.96166664e-03 - 4.74589704e-06 * T + 1.40223651e-09 * T2 -
                  1.44494085e-13 * T3;
    // species 11: C6H5CH3
    species[11] = +2.66912870e-02 - 1.93677010e-05 * T + 4.72158870e-09 * T2 -
                  3.78654404e-13 * T3;
    // species 12: CH3
    species[12] = +7.23990037e-03 - 5.97428696e-06 * T + 1.78705393e-09 * T2 -
                  1.86861758e-13 * T3;
    // species 13: O2
    species[13] = +1.48308754e-03 - 1.51593334e-06 * T + 6.28411665e-10 * T2 -
                  8.66871176e-14 * T3;
    // species 14: O
    species[14] = -8.59741137e-05 + 8.38969178e-08 * T - 3.00533397e-11 * T2 +
                  4.91334764e-15 * T3;
    // species 15: OH
    species[15] = +1.05650448e-03 - 5.18165516e-07 * T + 9.15656022e-11 * T2 -
                  5.32783504e-15 * T3;
    // species 16: HO2
    species[16] = +2.23982013e-03 - 1.26731630e-06 * T + 3.42739110e-10 * T2 -
                  4.31634140e-14 * T3;
    // species 17: H2O
    species[17] = +2.17691804e-03 - 3.28145036e-07 * T - 2.91125961e-10 * T2 +
                  6.72803968e-14 * T3;
    // species 18: H2O2
    species[18] = +4.90831694e-03 - 3.80278450e-06 * T + 1.11355796e-09 * T2 -
                  1.15163322e-13 * T3;
    // species 19: H
    species[19] = -2.30842973e-11 + 3.23123896e-14 * T - 1.42054571e-17 * T2 +
                  1.99278943e-21 * T3;
    // species 20: CH2O
    species[20] = +9.20000082e-03 - 8.84517626e-06 * T + 3.01923636e-09 * T2 -
                  3.53542256e-13 * T3;
    // species 21: CO2
    species[21] = +4.41437026e-03 - 4.42962808e-06 * T + 1.57047056e-09 * T2 -
                  1.88833666e-13 * T3;
    // species 22: CH2CO
    species[22] = +9.00359745e-03 - 8.33879270e-06 * T + 2.77003765e-09 * T2 -
                  3.17935280e-13 * T3;
    // species 23: C3H3
    species[23] = +7.61902005e-03 - 5.34919900e-06 * T + 1.27474440e-09 * T2 -
                  1.00590166e-13 * T3;
    // species 24: aC3H5
    species[24] = +1.43247310e-02 - 1.13563264e-05 * T + 3.32424030e-09 * T2 -
                  3.61455548e-13 * T3;
    // species 25: C5H4O
    species[25] = +1.61143465e-02 - 1.16662902e-05 * T + 2.84027796e-09 * T2 -
                  2.27588882e-13 * T3;
    // species 26: C5H5
    species[26] = +1.60127330e-02 - 1.29646296e-08 * T - 1.07459109e-08 * T2 +
                  3.69460284e-12 * T3;
    // species 27: C6H5CH2
    species[27] = +2.34938730e-02 - 1.70750734e-05 * T + 4.16725230e-09 * T2 -
                  3.34457680e-13 * T3;
    // species 28: C6H5O
    species[28] = +1.74688771e-02 - 1.27100904e-05 * T + 3.10476924e-09 * T2 -
                  2.49364202e-13 * T3;
    // species 29: C6H5CHO
    species[29] = +2.56804190e-02 - 2.09334580e-05 * T + 5.82402900e-09 * T2 -
                  5.39351680e-13 * T3;
    // species 30: N2
    species[30] = +1.48797680e-03 - 1.13695200e-06 * T + 3.02911140e-10 * T2 -
                  2.70134040e-14 * T3;
  }
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cpbl)
{
  amrex::Real result = 0;
  amrex::Real cpor[31]; //  temporary storage
  cp_R(cpor, T);

  // perform dot product
  for (int id = 0; id < 31; ++id) {
    result += x[id] * cpor[id];
  }

  cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cpbs)
{
  amrex::Real result = 0.0;

  // compute Cp/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    result += y[0] *
              (+2.57855180e+00 + 7.26248320e-02 * T + 7.32363700e-05 * T2 -
               1.51154440e-07 * T3 + 6.89355790e-11 * T4) *
              0.0064810074077915;
    // species 1: C2H4
    result += y[1] *
              (+3.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
               6.91588753e-08 * T3 + 2.69884373e-11 * T4) *
              0.0356455407428531;
    // species 2: CH4
    result += y[2] *
              (+5.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
               4.84743026e-08 * T3 + 1.66693956e-11 * T4) *
              0.0623324814560868;
    // species 3: C3H6
    result += y[3] *
              (+1.49330700e+00 + 2.09251800e-02 * T + 4.48679400e-06 * T2 -
               1.66891200e-08 * T3 + 7.15814600e-12 * T4) *
              0.0237636938285687;
    // species 4: iC4H8
    result += y[4] *
              (+2.64714050e+00 + 2.59029570e-02 * T + 8.19853540e-06 * T2 -
               2.21932590e-08 * T3 + 8.89585800e-12 * T4) *
              0.0178227703714265;
    // species 5: C4H81
    result += y[5] *
              (+1.18113800e+00 + 3.08533800e-02 * T + 5.08652470e-06 * T2 -
               2.46548880e-08 * T3 + 1.11101930e-11 * T4) *
              0.0178227703714265;
    // species 6: H2
    result += y[6] *
              (+2.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 7: C2H6
    result += y[7] *
              (+4.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
               7.08466285e-08 * T3 + 2.68685771e-11 * T4) *
              0.0332557366145660;
    // species 8: CO
    result += y[8] *
              (+3.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
               9.07005884e-10 * T3 - 9.04424499e-13 * T4) *
              0.0357015351660121;
    // species 9: C6H6
    result += y[9] *
              (-4.84377340e+00 + 5.84276130e-02 * T - 2.94858550e-05 * T2 -
               6.93904400e-09 * T3 + 8.21252530e-12 * T4) *
              0.0128018024937911;
    // species 10: C2H2
    result += y[10] *
              (+8.08681094e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
               2.80152437e-08 * T3 - 8.50072974e-12 * T4) *
              0.0384054074813734;
    // species 11: C6H5CH3
    result += y[11] *
              (+1.61526630e+00 + 2.10994380e-02 * T + 8.53660180e-05 * T2 -
               1.32610660e-07 * T3 + 5.59566040e-11 * T4) *
              0.0108529319195581;
    // species 12: CH3
    result += y[12] *
              (+3.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
               6.87117425e-09 * T3 + 2.54385734e-12 * T4) *
              0.0665114732291320;
    // species 13: O2
    result += y[13] *
              (+3.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 14: O
    result += y[14] *
              (+3.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 15: OH
    result += y[15] *
              (+4.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
               5.79853643e-09 * T3 + 2.06237379e-12 * T4) *
              0.0587993179279120;
    // species 16: HO2
    result += y[16] *
              (+4.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 17: H2O
    result += y[17] *
              (+4.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 18: H2O2
    result += y[18] *
              (+4.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 19: H
    result += y[19] *
              (+2.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 20: CH2O
    result += y[20] *
              (+4.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
               3.79285261e-08 * T3 + 1.31772652e-11 * T4) *
              0.0333044694598015;
    // species 21: CO2
    result += y[21] *
              (+2.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
               2.45919022e-09 * T3 - 1.43699548e-13 * T4) *
              0.0227226249176305;
    // species 22: CH2CO
    result += y[22] *
              (+2.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
               9.34397568e-09 * T3 - 2.01457615e-12 * T4) *
              0.0237885672145967;
    // species 23: C3H3
    result += y[23] *
              (+1.35110927e+00 + 3.27411223e-02 * T - 4.73827135e-05 * T2 +
               3.76309808e-08 * T3 - 1.18540923e-11 * T4) *
              0.0256036049875823;
    // species 24: aC3H5
    result += y[24] *
              (+1.36318350e+00 + 1.98138210e-02 * T + 1.24970600e-05 * T2 -
               3.33555550e-08 * T3 + 1.58465710e-11 * T4) *
              0.0243468945535997;
    // species 25: C5H4O
    result += y[25] *
              (+2.64576497e-01 + 3.34873827e-02 * T + 1.67738470e-06 * T2 -
               2.96207455e-08 * T3 + 1.54431476e-11 * T4) *
              0.0124865769298005;
    // species 26: C5H5
    result += y[26] *
              (+9.83498220e-01 + 3.36514760e-02 * T - 1.10541810e-07 * T2 -
               3.67433940e-08 * T3 + 2.31411840e-11 * T4) *
              0.0153621629925494;
    // species 27: C6H5CH2
    result += y[27] *
              (+4.81115400e-01 + 3.85128320e-02 * T + 3.28614920e-05 * T2 -
               7.69727210e-08 * T3 + 3.54230680e-11 * T4) *
              0.0109729735661067;
    // species 28: C6H5O
    result += y[28] *
              (-4.66204455e-01 + 4.13443975e-02 * T + 1.32412991e-05 * T2 -
               5.72872769e-08 * T3 + 2.89763707e-11 * T4) *
              0.0107405617313786;
    // species 29: C6H5CHO
    result += y[29] *
              (-3.16273340e+00 + 6.63692450e-02 * T - 3.48163530e-05 * T2 -
               6.29993770e-09 * T3 + 8.58071010e-12 * T4) *
              0.0094229392031963;
    // species 30: N2
    result += y[30] *
              (+3.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
  } else {
    // species 0: POSF10325
    result += y[0] *
              (+2.13578910e+01 + 6.65890870e-02 * T - 2.59674690e-05 * T2 +
               4.47750010e-09 * T3 - 2.36071520e-13 * T4) *
              0.0064810074077915;
    // species 1: C2H4
    result += y[1] *
              (+2.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
               1.47222923e-09 * T3 - 1.25706061e-13 * T4) *
              0.0356455407428531;
    // species 2: CH4
    result += y[2] *
              (+7.48514950e-02 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
               1.22292535e-09 * T3 - 1.01815230e-13 * T4) *
              0.0623324814560868;
    // species 3: C3H6
    result += y[3] *
              (+6.73225700e+00 + 1.49083400e-02 * T - 4.94989900e-06 * T2 +
               7.21202200e-10 * T3 - 3.76620400e-14 * T4) *
              0.0237636938285687;
    // species 4: iC4H8
    result += y[4] *
              (+4.46094700e+00 + 2.96114870e-02 * T - 1.30771290e-05 * T2 +
               2.65719340e-09 * T3 - 2.01347130e-13 * T4) *
              0.0178227703714265;
    // species 5: C4H81
    result += y[5] *
              (+2.05358410e+00 + 3.43505070e-02 * T - 1.58831970e-05 * T2 +
               3.30896620e-09 * T3 - 2.53610450e-13 * T4) *
              0.0178227703714265;
    // species 6: H2
    result += y[6] *
              (+3.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 7: C2H6
    result += y[7] *
              (+1.07188150e+00 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
               2.21412001e-09 * T3 - 1.90002890e-13 * T4) *
              0.0332557366145660;
    // species 8: CO
    result += y[8] *
              (+2.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
               2.30053008e-10 * T3 - 2.03647716e-14 * T4) *
              0.0357015351660121;
    // species 9: C6H6
    result += y[9] *
              (+9.13812450e+00 + 2.38544330e-02 * T - 8.81277260e-06 * T2 +
               1.20990210e-09 * T3 - 1.82215030e-14 * T4) *
              0.0128018024937911;
    // species 10: C2H2
    result += y[10] *
              (+4.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
               4.67412171e-10 * T3 - 3.61235213e-14 * T4) *
              0.0384054074813734;
    // species 11: C6H5CH3
    result += y[11] *
              (+1.29400340e+01 + 2.66912870e-02 * T - 9.68385050e-06 * T2 +
               1.57386290e-09 * T3 - 9.46636010e-14 * T4) *
              0.0108529319195581;
    // species 12: CH3
    result += y[12] *
              (+2.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
               5.95684644e-10 * T3 - 4.67154394e-14 * T4) *
              0.0665114732291320;
    // species 13: O2
    result += y[13] *
              (+3.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 14: O
    result += y[14] *
              (+2.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 15: OH
    result += y[15] *
              (+2.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
               3.05218674e-11 * T3 - 1.33195876e-15 * T4) *
              0.0587993179279120;
    // species 16: HO2
    result += y[16] *
              (+4.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 17: H2O
    result += y[17] *
              (+3.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 18: H2O2
    result += y[18] *
              (+4.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 19: H
    result += y[19] *
              (+2.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 20: CH2O
    result += y[20] *
              (+1.76069008e+00 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
               1.00641212e-09 * T3 - 8.83855640e-14 * T4) *
              0.0333044694598015;
    // species 21: CO2
    result += y[21] *
              (+3.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
               5.23490188e-10 * T3 - 4.72084164e-14 * T4) *
              0.0227226249176305;
    // species 22: CH2CO
    result += y[22] *
              (+4.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
               9.23345882e-10 * T3 - 7.94838201e-14 * T4) *
              0.0237885672145967;
    // species 23: C3H3
    result += y[23] *
              (+7.14221880e+00 + 7.61902005e-03 * T - 2.67459950e-06 * T2 +
               4.24914801e-10 * T3 - 2.51475415e-14 * T4) *
              0.0256036049875823;
    // species 24: aC3H5
    result += y[24] *
              (+6.50078770e+00 + 1.43247310e-02 * T - 5.67816320e-06 * T2 +
               1.10808010e-09 * T3 - 9.03638870e-14 * T4) *
              0.0243468945535997;
    // species 25: C5H4O
    result += y[25] *
              (+1.00806824e+01 + 1.61143465e-02 * T - 5.83314509e-06 * T2 +
               9.46759320e-10 * T3 - 5.68972206e-14 * T4) *
              0.0124865769298005;
    // species 26: C5H5
    result += y[26] *
              (+7.47439380e+00 + 1.60127330e-02 * T - 6.48231480e-09 * T2 -
               3.58197030e-09 * T3 + 9.23650710e-13 * T4) *
              0.0153621629925494;
    // species 27: C6H5CH2
    result += y[27] *
              (+1.40439800e+01 + 2.34938730e-02 * T - 8.53753670e-06 * T2 +
               1.38908410e-09 * T3 - 8.36144200e-14 * T4) *
              0.0109729735661067;
    // species 28: C6H5O
    result += y[28] *
              (+1.37221720e+01 + 1.74688771e-02 * T - 6.35504520e-06 * T2 +
               1.03492308e-09 * T3 - 6.23410504e-14 * T4) *
              0.0107405617313786;
    // species 29: C6H5CHO
    result += y[29] *
              (+1.36507370e+01 + 2.56804190e-02 * T - 1.04667290e-05 * T2 +
               1.94134300e-09 * T3 - 1.34837920e-13 * T4) *
              0.0094229392031963;
    // species 30: N2
    result += y[30] *
              (+2.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
  }

  cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(const amrex::Real T, const amrex::Real x[], amrex::Real& cvbl)
{
  amrex::Real result = 0;
  amrex::Real cvor[31]; //  temporary storage
  cv_R(cvor, T);

  // perform dot product
  for (int id = 0; id < 31; ++id) {
    result += x[id] * cvor[id];
  }

  cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(const amrex::Real T, const amrex::Real y[], amrex::Real& cvbs)
{
  amrex::Real result = 0.0;
  // compute Cv/R at the given temperature
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    result += y[0] *
              (+1.57855180e+00 + 7.26248320e-02 * T + 7.32363700e-05 * T2 -
               1.51154440e-07 * T3 + 6.89355790e-11 * T4) *
              0.0064810074077915;
    // species 1: C2H4
    result += y[1] *
              (+2.95920148e+00 - 7.57052247e-03 * T + 5.70990292e-05 * T2 -
               6.91588753e-08 * T3 + 2.69884373e-11 * T4) *
              0.0356455407428531;
    // species 2: CH4
    result += y[2] *
              (+4.14987613e+00 - 1.36709788e-02 * T + 4.91800599e-05 * T2 -
               4.84743026e-08 * T3 + 1.66693956e-11 * T4) *
              0.0623324814560868;
    // species 3: C3H6
    result += y[3] *
              (+4.93307000e-01 + 2.09251800e-02 * T + 4.48679400e-06 * T2 -
               1.66891200e-08 * T3 + 7.15814600e-12 * T4) *
              0.0237636938285687;
    // species 4: iC4H8
    result += y[4] *
              (+1.64714050e+00 + 2.59029570e-02 * T + 8.19853540e-06 * T2 -
               2.21932590e-08 * T3 + 8.89585800e-12 * T4) *
              0.0178227703714265;
    // species 5: C4H81
    result += y[5] *
              (+1.81138000e-01 + 3.08533800e-02 * T + 5.08652470e-06 * T2 -
               2.46548880e-08 * T3 + 1.11101930e-11 * T4) *
              0.0178227703714265;
    // species 6: H2
    result += y[6] *
              (+1.34433112e+00 + 7.98052075e-03 * T - 1.94781510e-05 * T2 +
               2.01572094e-08 * T3 - 7.37611761e-12 * T4) *
              0.4960317460317460;
    // species 7: C2H6
    result += y[7] *
              (+3.29142492e+00 - 5.50154270e-03 * T + 5.99438288e-05 * T2 -
               7.08466285e-08 * T3 + 2.68685771e-11 * T4) *
              0.0332557366145660;
    // species 8: CO
    result += y[8] *
              (+2.57953347e+00 - 6.10353680e-04 * T + 1.01681433e-06 * T2 +
               9.07005884e-10 * T3 - 9.04424499e-13 * T4) *
              0.0357015351660121;
    // species 9: C6H6
    result += y[9] *
              (-5.84377340e+00 + 5.84276130e-02 * T - 2.94858550e-05 * T2 -
               6.93904400e-09 * T3 + 8.21252530e-12 * T4) *
              0.0128018024937911;
    // species 10: C2H2
    result += y[10] *
              (-1.91318906e-01 + 2.33615629e-02 * T - 3.55171815e-05 * T2 +
               2.80152437e-08 * T3 - 8.50072974e-12 * T4) *
              0.0384054074813734;
    // species 11: C6H5CH3
    result += y[11] *
              (+6.15266300e-01 + 2.10994380e-02 * T + 8.53660180e-05 * T2 -
               1.32610660e-07 * T3 + 5.59566040e-11 * T4) *
              0.0108529319195581;
    // species 12: CH3
    result += y[12] *
              (+2.67359040e+00 + 2.01095175e-03 * T + 5.73021856e-06 * T2 -
               6.87117425e-09 * T3 + 2.54385734e-12 * T4) *
              0.0665114732291320;
    // species 13: O2
    result += y[13] *
              (+2.78245636e+00 - 2.99673416e-03 * T + 9.84730201e-06 * T2 -
               9.68129509e-09 * T3 + 3.24372837e-12 * T4) *
              0.0312519532470779;
    // species 14: O
    result += y[14] *
              (+2.16826710e+00 - 3.27931884e-03 * T + 6.64306396e-06 * T2 -
               6.12806624e-09 * T3 + 2.11265971e-12 * T4) *
              0.0625039064941559;
    // species 15: OH
    result += y[15] *
              (+3.12530561e+00 - 3.22544939e-03 * T + 6.52764691e-06 * T2 -
               5.79853643e-09 * T3 + 2.06237379e-12 * T4) *
              0.0587993179279120;
    // species 16: HO2
    result += y[16] *
              (+3.30179801e+00 - 4.74912051e-03 * T + 2.11582891e-05 * T2 -
               2.42763894e-08 * T3 + 9.29225124e-12 * T4) *
              0.0302975216627280;
    // species 17: H2O
    result += y[17] *
              (+3.19864056e+00 - 2.03643410e-03 * T + 6.52040211e-06 * T2 -
               5.48797062e-09 * T3 + 1.77197817e-12 * T4) *
              0.0555092978073827;
    // species 18: H2O2
    result += y[18] *
              (+3.27611269e+00 - 5.42822417e-04 * T + 1.67335701e-05 * T2 -
               2.15770813e-08 * T3 + 8.62454363e-12 * T4) *
              0.0293996589639560;
    // species 19: H
    result += y[19] *
              (+1.50000000e+00 + 7.05332819e-13 * T - 1.99591964e-15 * T2 +
               2.30081632e-18 * T3 - 9.27732332e-22 * T4) *
              0.9920634920634921;
    // species 20: CH2O
    result += y[20] *
              (+3.79372315e+00 - 9.90833369e-03 * T + 3.73220008e-05 * T2 -
               3.79285261e-08 * T3 + 1.31772652e-11 * T4) *
              0.0333044694598015;
    // species 21: CO2
    result += y[21] *
              (+1.35677352e+00 + 8.98459677e-03 * T - 7.12356269e-06 * T2 +
               2.45919022e-09 * T3 - 1.43699548e-13 * T4) *
              0.0227226249176305;
    // species 22: CH2CO
    result += y[22] *
              (+1.13583630e+00 + 1.81188721e-02 * T - 1.73947474e-05 * T2 +
               9.34397568e-09 * T3 - 2.01457615e-12 * T4) *
              0.0237885672145967;
    // species 23: C3H3
    result += y[23] *
              (+3.51109270e-01 + 3.27411223e-02 * T - 4.73827135e-05 * T2 +
               3.76309808e-08 * T3 - 1.18540923e-11 * T4) *
              0.0256036049875823;
    // species 24: aC3H5
    result += y[24] *
              (+3.63183500e-01 + 1.98138210e-02 * T + 1.24970600e-05 * T2 -
               3.33555550e-08 * T3 + 1.58465710e-11 * T4) *
              0.0243468945535997;
    // species 25: C5H4O
    result += y[25] *
              (-7.35423503e-01 + 3.34873827e-02 * T + 1.67738470e-06 * T2 -
               2.96207455e-08 * T3 + 1.54431476e-11 * T4) *
              0.0124865769298005;
    // species 26: C5H5
    result += y[26] *
              (-1.65017800e-02 + 3.36514760e-02 * T - 1.10541810e-07 * T2 -
               3.67433940e-08 * T3 + 2.31411840e-11 * T4) *
              0.0153621629925494;
    // species 27: C6H5CH2
    result += y[27] *
              (-5.18884600e-01 + 3.85128320e-02 * T + 3.28614920e-05 * T2 -
               7.69727210e-08 * T3 + 3.54230680e-11 * T4) *
              0.0109729735661067;
    // species 28: C6H5O
    result += y[28] *
              (-1.46620445e+00 + 4.13443975e-02 * T + 1.32412991e-05 * T2 -
               5.72872769e-08 * T3 + 2.89763707e-11 * T4) *
              0.0107405617313786;
    // species 29: C6H5CHO
    result += y[29] *
              (-4.16273340e+00 + 6.63692450e-02 * T - 3.48163530e-05 * T2 -
               6.29993770e-09 * T3 + 8.58071010e-12 * T4) *
              0.0094229392031963;
    // species 30: N2
    result += y[30] *
              (+2.29867700e+00 + 1.40824040e-03 * T - 3.96322200e-06 * T2 +
               5.64151500e-09 * T3 - 2.44485400e-12 * T4) *
              0.0356964374955379;
  } else {
    // species 0: POSF10325
    result += y[0] *
              (+2.03578910e+01 + 6.65890870e-02 * T - 2.59674690e-05 * T2 +
               4.47750010e-09 * T3 - 2.36071520e-13 * T4) *
              0.0064810074077915;
    // species 1: C2H4
    result += y[1] *
              (+1.03611116e+00 + 1.46454151e-02 * T - 6.71077915e-06 * T2 +
               1.47222923e-09 * T3 - 1.25706061e-13 * T4) *
              0.0356455407428531;
    // species 2: CH4
    result += y[2] *
              (-9.25148505e-01 + 1.33909467e-02 * T - 5.73285809e-06 * T2 +
               1.22292535e-09 * T3 - 1.01815230e-13 * T4) *
              0.0623324814560868;
    // species 3: C3H6
    result += y[3] *
              (+5.73225700e+00 + 1.49083400e-02 * T - 4.94989900e-06 * T2 +
               7.21202200e-10 * T3 - 3.76620400e-14 * T4) *
              0.0237636938285687;
    // species 4: iC4H8
    result += y[4] *
              (+3.46094700e+00 + 2.96114870e-02 * T - 1.30771290e-05 * T2 +
               2.65719340e-09 * T3 - 2.01347130e-13 * T4) *
              0.0178227703714265;
    // species 5: C4H81
    result += y[5] *
              (+1.05358410e+00 + 3.43505070e-02 * T - 1.58831970e-05 * T2 +
               3.30896620e-09 * T3 - 2.53610450e-13 * T4) *
              0.0178227703714265;
    // species 6: H2
    result += y[6] *
              (+2.33727920e+00 - 4.94024731e-05 * T + 4.99456778e-07 * T2 -
               1.79566394e-10 * T3 + 2.00255376e-14 * T4) *
              0.4960317460317460;
    // species 7: C2H6
    result += y[7] *
              (+7.18815000e-02 + 2.16852677e-02 * T - 1.00256067e-05 * T2 +
               2.21412001e-09 * T3 - 1.90002890e-13 * T4) *
              0.0332557366145660;
    // species 8: CO
    result += y[8] *
              (+1.71518561e+00 + 2.06252743e-03 * T - 9.98825771e-07 * T2 +
               2.30053008e-10 * T3 - 2.03647716e-14 * T4) *
              0.0357015351660121;
    // species 9: C6H6
    result += y[9] *
              (+8.13812450e+00 + 2.38544330e-02 * T - 8.81277260e-06 * T2 +
               1.20990210e-09 * T3 - 1.82215030e-14 * T4) *
              0.0128018024937911;
    // species 10: C2H2
    result += y[10] *
              (+3.14756964e+00 + 5.96166664e-03 * T - 2.37294852e-06 * T2 +
               4.67412171e-10 * T3 - 3.61235213e-14 * T4) *
              0.0384054074813734;
    // species 11: C6H5CH3
    result += y[11] *
              (+1.19400340e+01 + 2.66912870e-02 * T - 9.68385050e-06 * T2 +
               1.57386290e-09 * T3 - 9.46636010e-14 * T4) *
              0.0108529319195581;
    // species 12: CH3
    result += y[12] *
              (+1.28571772e+00 + 7.23990037e-03 * T - 2.98714348e-06 * T2 +
               5.95684644e-10 * T3 - 4.67154394e-14 * T4) *
              0.0665114732291320;
    // species 13: O2
    result += y[13] *
              (+2.28253784e+00 + 1.48308754e-03 * T - 7.57966669e-07 * T2 +
               2.09470555e-10 * T3 - 2.16717794e-14 * T4) *
              0.0312519532470779;
    // species 14: O
    result += y[14] *
              (+1.56942078e+00 - 8.59741137e-05 * T + 4.19484589e-08 * T2 -
               1.00177799e-11 * T3 + 1.22833691e-15 * T4) *
              0.0625039064941559;
    // species 15: OH
    result += y[15] *
              (+1.86472886e+00 + 1.05650448e-03 * T - 2.59082758e-07 * T2 +
               3.05218674e-11 * T3 - 1.33195876e-15 * T4) *
              0.0587993179279120;
    // species 16: HO2
    result += y[16] *
              (+3.01721090e+00 + 2.23982013e-03 * T - 6.33658150e-07 * T2 +
               1.14246370e-10 * T3 - 1.07908535e-14 * T4) *
              0.0302975216627280;
    // species 17: H2O
    result += y[17] *
              (+2.03399249e+00 + 2.17691804e-03 * T - 1.64072518e-07 * T2 -
               9.70419870e-11 * T3 + 1.68200992e-14 * T4) *
              0.0555092978073827;
    // species 18: H2O2
    result += y[18] *
              (+3.16500285e+00 + 4.90831694e-03 * T - 1.90139225e-06 * T2 +
               3.71185986e-10 * T3 - 2.87908305e-14 * T4) *
              0.0293996589639560;
    // species 19: H
    result += y[19] *
              (+1.50000001e+00 - 2.30842973e-11 * T + 1.61561948e-14 * T2 -
               4.73515235e-18 * T3 + 4.98197357e-22 * T4) *
              0.9920634920634921;
    // species 20: CH2O
    result += y[20] *
              (+7.60690080e-01 + 9.20000082e-03 * T - 4.42258813e-06 * T2 +
               1.00641212e-09 * T3 - 8.83855640e-14 * T4) *
              0.0333044694598015;
    // species 21: CO2
    result += y[21] *
              (+2.85746029e+00 + 4.41437026e-03 * T - 2.21481404e-06 * T2 +
               5.23490188e-10 * T3 - 4.72084164e-14 * T4) *
              0.0227226249176305;
    // species 22: CH2CO
    result += y[22] *
              (+3.51129732e+00 + 9.00359745e-03 * T - 4.16939635e-06 * T2 +
               9.23345882e-10 * T3 - 7.94838201e-14 * T4) *
              0.0237885672145967;
    // species 23: C3H3
    result += y[23] *
              (+6.14221880e+00 + 7.61902005e-03 * T - 2.67459950e-06 * T2 +
               4.24914801e-10 * T3 - 2.51475415e-14 * T4) *
              0.0256036049875823;
    // species 24: aC3H5
    result += y[24] *
              (+5.50078770e+00 + 1.43247310e-02 * T - 5.67816320e-06 * T2 +
               1.10808010e-09 * T3 - 9.03638870e-14 * T4) *
              0.0243468945535997;
    // species 25: C5H4O
    result += y[25] *
              (+9.08068240e+00 + 1.61143465e-02 * T - 5.83314509e-06 * T2 +
               9.46759320e-10 * T3 - 5.68972206e-14 * T4) *
              0.0124865769298005;
    // species 26: C5H5
    result += y[26] *
              (+6.47439380e+00 + 1.60127330e-02 * T - 6.48231480e-09 * T2 -
               3.58197030e-09 * T3 + 9.23650710e-13 * T4) *
              0.0153621629925494;
    // species 27: C6H5CH2
    result += y[27] *
              (+1.30439800e+01 + 2.34938730e-02 * T - 8.53753670e-06 * T2 +
               1.38908410e-09 * T3 - 8.36144200e-14 * T4) *
              0.0109729735661067;
    // species 28: C6H5O
    result += y[28] *
              (+1.27221720e+01 + 1.74688771e-02 * T - 6.35504520e-06 * T2 +
               1.03492308e-09 * T3 - 6.23410504e-14 * T4) *
              0.0107405617313786;
    // species 29: C6H5CHO
    result += y[29] *
              (+1.26507370e+01 + 2.56804190e-02 * T - 1.04667290e-05 * T2 +
               1.94134300e-09 * T3 - 1.34837920e-13 * T4) *
              0.0094229392031963;
    // species 30: N2
    result += y[30] *
              (+1.92664000e+00 + 1.48797680e-03 * T - 5.68476000e-07 * T2 +
               1.00970380e-10 * T3 - 6.75335100e-15 * T4) *
              0.0356964374955379;
  }

  cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(const amrex::Real T, const amrex::Real x[], amrex::Real& hbml)
{
  amrex::Real result = 0;
  amrex::Real hml[31];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // perform dot product
  for (int id = 0; id < 31; ++id) {
    result += x[id] * hml[id];
  }

  hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& hbms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    result +=
      y[0] *
      (+2.57855180e+00 + 3.63124160e-02 * T + 2.44121233e-05 * T2 -
       3.77886100e-08 * T3 + 1.37871158e-11 * T4 - 3.80298550e+04 * invT) *
      0.0064810074077915;
    // species 1: C2H4
    result +=
      y[1] *
      (+3.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
       1.72897188e-08 * T3 + 5.39768746e-12 * T4 + 5.08977593e+03 * invT) *
      0.0356455407428531;
    // species 2: CH4
    result +=
      y[2] *
      (+5.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
       1.21185757e-08 * T3 + 3.33387912e-12 * T4 - 1.02466476e+04 * invT) *
      0.0623324814560868;
    // species 3: C3H6
    result +=
      y[3] *
      (+1.49330700e+00 + 1.04625900e-02 * T + 1.49559800e-06 * T2 -
       4.17228000e-09 * T3 + 1.43162920e-12 * T4 + 1.07482600e+03 * invT) *
      0.0237636938285687;
    // species 4: iC4H8
    result +=
      y[4] *
      (+2.64714050e+00 + 1.29514785e-02 * T + 2.73284513e-06 * T2 -
       5.54831475e-09 * T3 + 1.77917160e-12 * T4 - 4.03730690e+03 * invT) *
      0.0178227703714265;
    // species 5: C4H81
    result +=
      y[5] *
      (+1.18113800e+00 + 1.54266900e-02 * T + 1.69550823e-06 * T2 -
       6.16372200e-09 * T3 + 2.22203860e-12 * T4 - 1.79040040e+03 * invT) *
      0.0178227703714265;
    // species 6: H2
    result +=
      y[6] *
      (+2.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 7: C2H6
    result +=
      y[7] *
      (+4.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
       1.77116571e-08 * T3 + 5.37371542e-12 * T4 - 1.15222055e+04 * invT) *
      0.0332557366145660;
    // species 8: CO
    result +=
      y[8] *
      (+3.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
       2.26751471e-10 * T3 - 1.80884900e-13 * T4 - 1.43440860e+04 * invT) *
      0.0357015351660121;
    // species 9: C6H6
    result +=
      y[9] *
      (-4.84377340e+00 + 2.92138065e-02 * T - 9.82861833e-06 * T2 -
       1.73476100e-09 * T3 + 1.64250506e-12 * T4 + 9.18177730e+03 * invT) *
      0.0128018024937911;
    // species 10: C2H2
    result +=
      y[10] *
      (+8.08681094e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
       7.00381092e-09 * T3 - 1.70014595e-12 * T4 + 2.64289807e+04 * invT) *
      0.0384054074813734;
    // species 11: C6H5CH3
    result +=
      y[11] *
      (+1.61526630e+00 + 1.05497190e-02 * T + 2.84553393e-05 * T2 -
       3.31526650e-08 * T3 + 1.11913208e-11 * T4 + 4.07563000e+03 * invT) *
      0.0108529319195581;
    // species 12: CH3
    result +=
      y[12] *
      (+3.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
       1.71779356e-09 * T3 + 5.08771468e-13 * T4 + 1.64449988e+04 * invT) *
      0.0665114732291320;
    // species 13: O2
    result +=
      y[13] *
      (+3.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 14: O
    result +=
      y[14] *
      (+3.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 15: OH
    result +=
      y[15] *
      (+4.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
       1.44963411e-09 * T3 + 4.12474758e-13 * T4 + 3.38153812e+03 * invT) *
      0.0587993179279120;
    // species 16: HO2
    result +=
      y[16] *
      (+4.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 17: H2O
    result +=
      y[17] *
      (+4.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 18: H2O2
    result +=
      y[18] *
      (+4.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 19: H
    result +=
      y[19] *
      (+2.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 20: CH2O
    result +=
      y[20] *
      (+4.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
       9.48213152e-09 * T3 + 2.63545304e-12 * T4 - 1.43089567e+04 * invT) *
      0.0333044694598015;
    // species 21: CO2
    result +=
      y[21] *
      (+2.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
       6.14797555e-10 * T3 - 2.87399096e-14 * T4 - 4.83719697e+04 * invT) *
      0.0227226249176305;
    // species 22: CH2CO
    result +=
      y[22] *
      (+2.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
       2.33599392e-09 * T3 - 4.02915230e-13 * T4 - 7.27000000e+03 * invT) *
      0.0237885672145967;
    // species 23: C3H3
    result +=
      y[23] *
      (+1.35110927e+00 + 1.63705612e-02 * T - 1.57942378e-05 * T2 +
       9.40774520e-09 * T3 - 2.37081846e-12 * T4 + 4.01057783e+04 * invT) *
      0.0256036049875823;
    // species 24: aC3H5
    result +=
      y[24] *
      (+1.36318350e+00 + 9.90691050e-03 * T + 4.16568667e-06 * T2 -
       8.33888875e-09 * T3 + 3.16931420e-12 * T4 + 1.92456290e+04 * invT) *
      0.0243468945535997;
    // species 25: C5H4O
    result +=
      y[25] *
      (+2.64576497e-01 + 1.67436913e-02 * T + 5.59128233e-07 * T2 -
       7.40518638e-09 * T3 + 3.08862952e-12 * T4 + 5.11159287e+03 * invT) *
      0.0124865769298005;
    // species 26: C5H5
    result +=
      y[26] *
      (+9.83498220e-01 + 1.68257380e-02 * T - 3.68472700e-08 * T2 -
       9.18584850e-09 * T3 + 4.62823680e-12 * T4 + 2.96260000e+04 * invT) *
      0.0153621629925494;
    // species 27: C6H5CH2
    result +=
      y[27] *
      (+4.81115400e-01 + 1.92564160e-02 * T + 1.09538307e-05 * T2 -
       1.92431803e-08 * T3 + 7.08461360e-12 * T4 + 2.33070270e+04 * invT) *
      0.0109729735661067;
    // species 28: C6H5O
    result +=
      y[28] *
      (-4.66204455e-01 + 2.06721987e-02 * T + 4.41376637e-06 * T2 -
       1.43218192e-08 * T3 + 5.79527414e-12 * T4 + 4.77858391e+03 * invT) *
      0.0107405617313786;
    // species 29: C6H5CHO
    result +=
      y[29] *
      (-3.16273340e+00 + 3.31846225e-02 * T - 1.16054510e-05 * T2 -
       1.57498443e-09 * T3 + 1.71614202e-12 * T4 - 6.11693490e+03 * invT) *
      0.0094229392031963;
    // species 30: N2
    result +=
      y[30] *
      (+3.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
  } else {
    // species 0: POSF10325
    result +=
      y[0] *
      (+2.13578910e+01 + 3.32945435e-02 * T - 8.65582300e-06 * T2 +
       1.11937502e-09 * T3 - 4.72143040e-14 * T4 - 4.57969960e+04 * invT) *
      0.0064810074077915;
    // species 1: C2H4
    result +=
      y[1] *
      (+2.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
       3.68057308e-10 * T3 - 2.51412122e-14 * T4 + 4.93988614e+03 * invT) *
      0.0356455407428531;
    // species 2: CH4
    result +=
      y[2] *
      (+7.48514950e-02 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
       3.05731338e-10 * T3 - 2.03630460e-14 * T4 - 9.46834459e+03 * invT) *
      0.0623324814560868;
    // species 3: C3H6
    result +=
      y[3] *
      (+6.73225700e+00 + 7.45417000e-03 * T - 1.64996633e-06 * T2 +
       1.80300550e-10 * T3 - 7.53240800e-15 * T4 - 9.23570300e+02 * invT) *
      0.0237636938285687;
    // species 4: iC4H8
    result +=
      y[4] *
      (+4.46094700e+00 + 1.48057435e-02 * T - 4.35904300e-06 * T2 +
       6.64298350e-10 * T3 - 4.02694260e-14 * T4 - 5.00667580e+03 * invT) *
      0.0178227703714265;
    // species 5: C4H81
    result +=
      y[5] *
      (+2.05358410e+00 + 1.71752535e-02 * T - 5.29439900e-06 * T2 +
       8.27241550e-10 * T3 - 5.07220900e-14 * T4 - 2.13972310e+03 * invT) *
      0.0178227703714265;
    // species 6: H2
    result +=
      y[6] *
      (+3.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 7: C2H6
    result +=
      y[7] *
      (+1.07188150e+00 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
       5.53530003e-10 * T3 - 3.80005780e-14 * T4 - 1.14263932e+04 * invT) *
      0.0332557366145660;
    // species 8: CO
    result +=
      y[8] *
      (+2.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
       5.75132520e-11 * T3 - 4.07295432e-15 * T4 - 1.41518724e+04 * invT) *
      0.0357015351660121;
    // species 9: C6H6
    result +=
      y[9] *
      (+9.13812450e+00 + 1.19272165e-02 * T - 2.93759087e-06 * T2 +
       3.02475525e-10 * T3 - 3.64430060e-15 * T4 + 5.20434620e+03 * invT) *
      0.0128018024937911;
    // species 10: C2H2
    result +=
      y[10] *
      (+4.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
       1.16853043e-10 * T3 - 7.22470426e-15 * T4 + 2.59359992e+04 * invT) *
      0.0384054074813734;
    // species 11: C6H5CH3
    result +=
      y[11] *
      (+1.29400340e+01 + 1.33456435e-02 * T - 3.22795017e-06 * T2 +
       3.93465725e-10 * T3 - 1.89327202e-14 * T4 - 6.97649080e+02 * invT) *
      0.0108529319195581;
    // species 12: CH3
    result +=
      y[12] *
      (+2.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
       1.48921161e-10 * T3 - 9.34308788e-15 * T4 + 1.67755843e+04 * invT) *
      0.0665114732291320;
    // species 13: O2
    result +=
      y[13] *
      (+3.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 14: O
    result +=
      y[14] *
      (+2.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 15: OH
    result +=
      y[15] *
      (+2.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
       7.63046685e-12 * T3 - 2.66391752e-16 * T4 + 3.71885774e+03 * invT) *
      0.0587993179279120;
    // species 16: HO2
    result +=
      y[16] *
      (+4.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 17: H2O
    result +=
      y[17] *
      (+3.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 18: H2O2
    result +=
      y[18] *
      (+4.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 19: H
    result +=
      y[19] *
      (+2.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 20: CH2O
    result +=
      y[20] *
      (+1.76069008e+00 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
       2.51603030e-10 * T3 - 1.76771128e-14 * T4 - 1.39958323e+04 * invT) *
      0.0333044694598015;
    // species 21: CO2
    result +=
      y[21] *
      (+3.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
       1.30872547e-10 * T3 - 9.44168328e-15 * T4 - 4.87591660e+04 * invT) *
      0.0227226249176305;
    // species 22: CH2CO
    result +=
      y[22] *
      (+4.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
       2.30836470e-10 * T3 - 1.58967640e-14 * T4 - 7.77850000e+03 * invT) *
      0.0237885672145967;
    // species 23: C3H3
    result +=
      y[23] *
      (+7.14221880e+00 + 3.80951002e-03 * T - 8.91533167e-07 * T2 +
       1.06228700e-10 * T3 - 5.02950830e-15 * T4 + 3.89087427e+04 * invT) *
      0.0256036049875823;
    // species 24: aC3H5
    result +=
      y[24] *
      (+6.50078770e+00 + 7.16236550e-03 * T - 1.89272107e-06 * T2 +
       2.77020025e-10 * T3 - 1.80727774e-14 * T4 + 1.74824490e+04 * invT) *
      0.0243468945535997;
    // species 25: C5H4O
    result +=
      y[25] *
      (+1.00806824e+01 + 8.05717325e-03 * T - 1.94438170e-06 * T2 +
       2.36689830e-10 * T3 - 1.13794441e-14 * T4 + 1.94364771e+03 * invT) *
      0.0124865769298005;
    // species 26: C5H5
    result +=
      y[26] *
      (+7.47439380e+00 + 8.00636650e-03 * T - 2.16077160e-09 * T2 -
       8.95492575e-10 * T3 + 1.84730142e-13 * T4 + 2.80860000e+04 * invT) *
      0.0153621629925494;
    // species 27: C6H5CH2
    result +=
      y[27] *
      (+1.40439800e+01 + 1.17469365e-02 * T - 2.84584557e-06 * T2 +
       3.47271025e-10 * T3 - 1.67228840e-14 * T4 + 1.85642030e+04 * invT) *
      0.0109729735661067;
    // species 28: C6H5O
    result +=
      y[28] *
      (+1.37221720e+01 + 8.73443855e-03 * T - 2.11834840e-06 * T2 +
       2.58730770e-10 * T3 - 1.24682101e-14 * T4 + 2.87274751e+02 * invT) *
      0.0107405617313786;
    // species 29: C6H5CHO
    result +=
      y[29] *
      (+1.36507370e+01 + 1.28402095e-02 * T - 3.48890967e-06 * T2 +
       4.85335750e-10 * T3 - 2.69675840e-14 * T4 - 1.10197440e+04 * invT) *
      0.0094229392031963;
    // species 30: N2
    result +=
      y[30] *
      (+2.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(const amrex::Real T, const amrex::Real x[], amrex::Real& ubml)
{
  amrex::Real result = 0;
  amrex::Real uml[31];                       //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // perform dot product
  for (int id = 0; id < 31; ++id) {
    result += x[id] * uml[id];
  }

  ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(const amrex::Real T, const amrex::Real y[], amrex::Real& ubms)
{
  amrex::Real result = 0.0;
  const amrex::Real T2 = T * T;
  const amrex::Real T3 = T * T * T;
  const amrex::Real T4 = T * T * T * T;
  const amrex::Real invT = 1.0 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    result +=
      y[0] *
      (+1.57855180e+00 + 3.63124160e-02 * T + 2.44121233e-05 * T2 -
       3.77886100e-08 * T3 + 1.37871158e-11 * T4 - 3.80298550e+04 * invT) *
      0.0064810074077915;
    // species 1: C2H4
    result +=
      y[1] *
      (+2.95920148e+00 - 3.78526124e-03 * T + 1.90330097e-05 * T2 -
       1.72897188e-08 * T3 + 5.39768746e-12 * T4 + 5.08977593e+03 * invT) *
      0.0356455407428531;
    // species 2: CH4
    result +=
      y[2] *
      (+4.14987613e+00 - 6.83548940e-03 * T + 1.63933533e-05 * T2 -
       1.21185757e-08 * T3 + 3.33387912e-12 * T4 - 1.02466476e+04 * invT) *
      0.0623324814560868;
    // species 3: C3H6
    result +=
      y[3] *
      (+4.93307000e-01 + 1.04625900e-02 * T + 1.49559800e-06 * T2 -
       4.17228000e-09 * T3 + 1.43162920e-12 * T4 + 1.07482600e+03 * invT) *
      0.0237636938285687;
    // species 4: iC4H8
    result +=
      y[4] *
      (+1.64714050e+00 + 1.29514785e-02 * T + 2.73284513e-06 * T2 -
       5.54831475e-09 * T3 + 1.77917160e-12 * T4 - 4.03730690e+03 * invT) *
      0.0178227703714265;
    // species 5: C4H81
    result +=
      y[5] *
      (+1.81138000e-01 + 1.54266900e-02 * T + 1.69550823e-06 * T2 -
       6.16372200e-09 * T3 + 2.22203860e-12 * T4 - 1.79040040e+03 * invT) *
      0.0178227703714265;
    // species 6: H2
    result +=
      y[6] *
      (+1.34433112e+00 + 3.99026037e-03 * T - 6.49271700e-06 * T2 +
       5.03930235e-09 * T3 - 1.47522352e-12 * T4 - 9.17935173e+02 * invT) *
      0.4960317460317460;
    // species 7: C2H6
    result +=
      y[7] *
      (+3.29142492e+00 - 2.75077135e-03 * T + 1.99812763e-05 * T2 -
       1.77116571e-08 * T3 + 5.37371542e-12 * T4 - 1.15222055e+04 * invT) *
      0.0332557366145660;
    // species 8: CO
    result +=
      y[8] *
      (+2.57953347e+00 - 3.05176840e-04 * T + 3.38938110e-07 * T2 +
       2.26751471e-10 * T3 - 1.80884900e-13 * T4 - 1.43440860e+04 * invT) *
      0.0357015351660121;
    // species 9: C6H6
    result +=
      y[9] *
      (-5.84377340e+00 + 2.92138065e-02 * T - 9.82861833e-06 * T2 -
       1.73476100e-09 * T3 + 1.64250506e-12 * T4 + 9.18177730e+03 * invT) *
      0.0128018024937911;
    // species 10: C2H2
    result +=
      y[10] *
      (-1.91318906e-01 + 1.16807815e-02 * T - 1.18390605e-05 * T2 +
       7.00381092e-09 * T3 - 1.70014595e-12 * T4 + 2.64289807e+04 * invT) *
      0.0384054074813734;
    // species 11: C6H5CH3
    result +=
      y[11] *
      (+6.15266300e-01 + 1.05497190e-02 * T + 2.84553393e-05 * T2 -
       3.31526650e-08 * T3 + 1.11913208e-11 * T4 + 4.07563000e+03 * invT) *
      0.0108529319195581;
    // species 12: CH3
    result +=
      y[12] *
      (+2.67359040e+00 + 1.00547588e-03 * T + 1.91007285e-06 * T2 -
       1.71779356e-09 * T3 + 5.08771468e-13 * T4 + 1.64449988e+04 * invT) *
      0.0665114732291320;
    // species 13: O2
    result +=
      y[13] *
      (+2.78245636e+00 - 1.49836708e-03 * T + 3.28243400e-06 * T2 -
       2.42032377e-09 * T3 + 6.48745674e-13 * T4 - 1.06394356e+03 * invT) *
      0.0312519532470779;
    // species 14: O
    result +=
      y[14] *
      (+2.16826710e+00 - 1.63965942e-03 * T + 2.21435465e-06 * T2 -
       1.53201656e-09 * T3 + 4.22531942e-13 * T4 + 2.91222592e+04 * invT) *
      0.0625039064941559;
    // species 15: OH
    result +=
      y[15] *
      (+3.12530561e+00 - 1.61272470e-03 * T + 2.17588230e-06 * T2 -
       1.44963411e-09 * T3 + 4.12474758e-13 * T4 + 3.38153812e+03 * invT) *
      0.0587993179279120;
    // species 16: HO2
    result +=
      y[16] *
      (+3.30179801e+00 - 2.37456025e-03 * T + 7.05276303e-06 * T2 -
       6.06909735e-09 * T3 + 1.85845025e-12 * T4 + 2.94808040e+02 * invT) *
      0.0302975216627280;
    // species 17: H2O
    result +=
      y[17] *
      (+3.19864056e+00 - 1.01821705e-03 * T + 2.17346737e-06 * T2 -
       1.37199266e-09 * T3 + 3.54395634e-13 * T4 - 3.02937267e+04 * invT) *
      0.0555092978073827;
    // species 18: H2O2
    result +=
      y[18] *
      (+3.27611269e+00 - 2.71411208e-04 * T + 5.57785670e-06 * T2 -
       5.39427032e-09 * T3 + 1.72490873e-12 * T4 - 1.77025821e+04 * invT) *
      0.0293996589639560;
    // species 19: H
    result +=
      y[19] *
      (+1.50000000e+00 + 3.52666409e-13 * T - 6.65306547e-16 * T2 +
       5.75204080e-19 * T3 - 1.85546466e-22 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 20: CH2O
    result +=
      y[20] *
      (+3.79372315e+00 - 4.95416684e-03 * T + 1.24406669e-05 * T2 -
       9.48213152e-09 * T3 + 2.63545304e-12 * T4 - 1.43089567e+04 * invT) *
      0.0333044694598015;
    // species 21: CO2
    result +=
      y[21] *
      (+1.35677352e+00 + 4.49229839e-03 * T - 2.37452090e-06 * T2 +
       6.14797555e-10 * T3 - 2.87399096e-14 * T4 - 4.83719697e+04 * invT) *
      0.0227226249176305;
    // species 22: CH2CO
    result +=
      y[22] *
      (+1.13583630e+00 + 9.05943605e-03 * T - 5.79824913e-06 * T2 +
       2.33599392e-09 * T3 - 4.02915230e-13 * T4 - 7.27000000e+03 * invT) *
      0.0237885672145967;
    // species 23: C3H3
    result +=
      y[23] *
      (+3.51109270e-01 + 1.63705612e-02 * T - 1.57942378e-05 * T2 +
       9.40774520e-09 * T3 - 2.37081846e-12 * T4 + 4.01057783e+04 * invT) *
      0.0256036049875823;
    // species 24: aC3H5
    result +=
      y[24] *
      (+3.63183500e-01 + 9.90691050e-03 * T + 4.16568667e-06 * T2 -
       8.33888875e-09 * T3 + 3.16931420e-12 * T4 + 1.92456290e+04 * invT) *
      0.0243468945535997;
    // species 25: C5H4O
    result +=
      y[25] *
      (-7.35423503e-01 + 1.67436913e-02 * T + 5.59128233e-07 * T2 -
       7.40518638e-09 * T3 + 3.08862952e-12 * T4 + 5.11159287e+03 * invT) *
      0.0124865769298005;
    // species 26: C5H5
    result +=
      y[26] *
      (-1.65017800e-02 + 1.68257380e-02 * T - 3.68472700e-08 * T2 -
       9.18584850e-09 * T3 + 4.62823680e-12 * T4 + 2.96260000e+04 * invT) *
      0.0153621629925494;
    // species 27: C6H5CH2
    result +=
      y[27] *
      (-5.18884600e-01 + 1.92564160e-02 * T + 1.09538307e-05 * T2 -
       1.92431803e-08 * T3 + 7.08461360e-12 * T4 + 2.33070270e+04 * invT) *
      0.0109729735661067;
    // species 28: C6H5O
    result +=
      y[28] *
      (-1.46620445e+00 + 2.06721987e-02 * T + 4.41376637e-06 * T2 -
       1.43218192e-08 * T3 + 5.79527414e-12 * T4 + 4.77858391e+03 * invT) *
      0.0107405617313786;
    // species 29: C6H5CHO
    result +=
      y[29] *
      (-4.16273340e+00 + 3.31846225e-02 * T - 1.16054510e-05 * T2 -
       1.57498443e-09 * T3 + 1.71614202e-12 * T4 - 6.11693490e+03 * invT) *
      0.0094229392031963;
    // species 30: N2
    result +=
      y[30] *
      (+2.29867700e+00 + 7.04120200e-04 * T - 1.32107400e-06 * T2 +
       1.41037875e-09 * T3 - 4.88970800e-13 * T4 - 1.02089990e+03 * invT) *
      0.0356964374955379;
  } else {
    // species 0: POSF10325
    result +=
      y[0] *
      (+2.03578910e+01 + 3.32945435e-02 * T - 8.65582300e-06 * T2 +
       1.11937502e-09 * T3 - 4.72143040e-14 * T4 - 4.57969960e+04 * invT) *
      0.0064810074077915;
    // species 1: C2H4
    result +=
      y[1] *
      (+1.03611116e+00 + 7.32270755e-03 * T - 2.23692638e-06 * T2 +
       3.68057308e-10 * T3 - 2.51412122e-14 * T4 + 4.93988614e+03 * invT) *
      0.0356455407428531;
    // species 2: CH4
    result +=
      y[2] *
      (-9.25148505e-01 + 6.69547335e-03 * T - 1.91095270e-06 * T2 +
       3.05731338e-10 * T3 - 2.03630460e-14 * T4 - 9.46834459e+03 * invT) *
      0.0623324814560868;
    // species 3: C3H6
    result +=
      y[3] *
      (+5.73225700e+00 + 7.45417000e-03 * T - 1.64996633e-06 * T2 +
       1.80300550e-10 * T3 - 7.53240800e-15 * T4 - 9.23570300e+02 * invT) *
      0.0237636938285687;
    // species 4: iC4H8
    result +=
      y[4] *
      (+3.46094700e+00 + 1.48057435e-02 * T - 4.35904300e-06 * T2 +
       6.64298350e-10 * T3 - 4.02694260e-14 * T4 - 5.00667580e+03 * invT) *
      0.0178227703714265;
    // species 5: C4H81
    result +=
      y[5] *
      (+1.05358410e+00 + 1.71752535e-02 * T - 5.29439900e-06 * T2 +
       8.27241550e-10 * T3 - 5.07220900e-14 * T4 - 2.13972310e+03 * invT) *
      0.0178227703714265;
    // species 6: H2
    result +=
      y[6] *
      (+2.33727920e+00 - 2.47012365e-05 * T + 1.66485593e-07 * T2 -
       4.48915985e-11 * T3 + 4.00510752e-15 * T4 - 9.50158922e+02 * invT) *
      0.4960317460317460;
    // species 7: C2H6
    result +=
      y[7] *
      (+7.18815000e-02 + 1.08426339e-02 * T - 3.34186890e-06 * T2 +
       5.53530003e-10 * T3 - 3.80005780e-14 * T4 - 1.14263932e+04 * invT) *
      0.0332557366145660;
    // species 8: CO
    result +=
      y[8] *
      (+1.71518561e+00 + 1.03126372e-03 * T - 3.32941924e-07 * T2 +
       5.75132520e-11 * T3 - 4.07295432e-15 * T4 - 1.41518724e+04 * invT) *
      0.0357015351660121;
    // species 9: C6H6
    result +=
      y[9] *
      (+8.13812450e+00 + 1.19272165e-02 * T - 2.93759087e-06 * T2 +
       3.02475525e-10 * T3 - 3.64430060e-15 * T4 + 5.20434620e+03 * invT) *
      0.0128018024937911;
    // species 10: C2H2
    result +=
      y[10] *
      (+3.14756964e+00 + 2.98083332e-03 * T - 7.90982840e-07 * T2 +
       1.16853043e-10 * T3 - 7.22470426e-15 * T4 + 2.59359992e+04 * invT) *
      0.0384054074813734;
    // species 11: C6H5CH3
    result +=
      y[11] *
      (+1.19400340e+01 + 1.33456435e-02 * T - 3.22795017e-06 * T2 +
       3.93465725e-10 * T3 - 1.89327202e-14 * T4 - 6.97649080e+02 * invT) *
      0.0108529319195581;
    // species 12: CH3
    result +=
      y[12] *
      (+1.28571772e+00 + 3.61995018e-03 * T - 9.95714493e-07 * T2 +
       1.48921161e-10 * T3 - 9.34308788e-15 * T4 + 1.67755843e+04 * invT) *
      0.0665114732291320;
    // species 13: O2
    result +=
      y[13] *
      (+2.28253784e+00 + 7.41543770e-04 * T - 2.52655556e-07 * T2 +
       5.23676387e-11 * T3 - 4.33435588e-15 * T4 - 1.08845772e+03 * invT) *
      0.0312519532470779;
    // species 14: O
    result +=
      y[14] *
      (+1.56942078e+00 - 4.29870569e-05 * T + 1.39828196e-08 * T2 -
       2.50444497e-12 * T3 + 2.45667382e-16 * T4 + 2.92175791e+04 * invT) *
      0.0625039064941559;
    // species 15: OH
    result +=
      y[15] *
      (+1.86472886e+00 + 5.28252240e-04 * T - 8.63609193e-08 * T2 +
       7.63046685e-12 * T3 - 2.66391752e-16 * T4 + 3.71885774e+03 * invT) *
      0.0587993179279120;
    // species 16: HO2
    result +=
      y[16] *
      (+3.01721090e+00 + 1.11991006e-03 * T - 2.11219383e-07 * T2 +
       2.85615925e-11 * T3 - 2.15817070e-15 * T4 + 1.11856713e+02 * invT) *
      0.0302975216627280;
    // species 17: H2O
    result +=
      y[17] *
      (+2.03399249e+00 + 1.08845902e-03 * T - 5.46908393e-08 * T2 -
       2.42604967e-11 * T3 + 3.36401984e-15 * T4 - 3.00042971e+04 * invT) *
      0.0555092978073827;
    // species 18: H2O2
    result +=
      y[18] *
      (+3.16500285e+00 + 2.45415847e-03 * T - 6.33797417e-07 * T2 +
       9.27964965e-11 * T3 - 5.75816610e-15 * T4 - 1.78617877e+04 * invT) *
      0.0293996589639560;
    // species 19: H
    result +=
      y[19] *
      (+1.50000001e+00 - 1.15421486e-11 * T + 5.38539827e-15 * T2 -
       1.18378809e-18 * T3 + 9.96394714e-23 * T4 + 2.54736599e+04 * invT) *
      0.9920634920634921;
    // species 20: CH2O
    result +=
      y[20] *
      (+7.60690080e-01 + 4.60000041e-03 * T - 1.47419604e-06 * T2 +
       2.51603030e-10 * T3 - 1.76771128e-14 * T4 - 1.39958323e+04 * invT) *
      0.0333044694598015;
    // species 21: CO2
    result +=
      y[21] *
      (+2.85746029e+00 + 2.20718513e-03 * T - 7.38271347e-07 * T2 +
       1.30872547e-10 * T3 - 9.44168328e-15 * T4 - 4.87591660e+04 * invT) *
      0.0227226249176305;
    // species 22: CH2CO
    result +=
      y[22] *
      (+3.51129732e+00 + 4.50179872e-03 * T - 1.38979878e-06 * T2 +
       2.30836470e-10 * T3 - 1.58967640e-14 * T4 - 7.77850000e+03 * invT) *
      0.0237885672145967;
    // species 23: C3H3
    result +=
      y[23] *
      (+6.14221880e+00 + 3.80951002e-03 * T - 8.91533167e-07 * T2 +
       1.06228700e-10 * T3 - 5.02950830e-15 * T4 + 3.89087427e+04 * invT) *
      0.0256036049875823;
    // species 24: aC3H5
    result +=
      y[24] *
      (+5.50078770e+00 + 7.16236550e-03 * T - 1.89272107e-06 * T2 +
       2.77020025e-10 * T3 - 1.80727774e-14 * T4 + 1.74824490e+04 * invT) *
      0.0243468945535997;
    // species 25: C5H4O
    result +=
      y[25] *
      (+9.08068240e+00 + 8.05717325e-03 * T - 1.94438170e-06 * T2 +
       2.36689830e-10 * T3 - 1.13794441e-14 * T4 + 1.94364771e+03 * invT) *
      0.0124865769298005;
    // species 26: C5H5
    result +=
      y[26] *
      (+6.47439380e+00 + 8.00636650e-03 * T - 2.16077160e-09 * T2 -
       8.95492575e-10 * T3 + 1.84730142e-13 * T4 + 2.80860000e+04 * invT) *
      0.0153621629925494;
    // species 27: C6H5CH2
    result +=
      y[27] *
      (+1.30439800e+01 + 1.17469365e-02 * T - 2.84584557e-06 * T2 +
       3.47271025e-10 * T3 - 1.67228840e-14 * T4 + 1.85642030e+04 * invT) *
      0.0109729735661067;
    // species 28: C6H5O
    result +=
      y[28] *
      (+1.27221720e+01 + 8.73443855e-03 * T - 2.11834840e-06 * T2 +
       2.58730770e-10 * T3 - 1.24682101e-14 * T4 + 2.87274751e+02 * invT) *
      0.0107405617313786;
    // species 29: C6H5CHO
    result +=
      y[29] *
      (+1.26507370e+01 + 1.28402095e-02 * T - 3.48890967e-06 * T2 +
       4.85335750e-10 * T3 - 2.69675840e-14 * T4 - 1.10197440e+04 * invT) *
      0.0094229392031963;
    // species 30: N2
    result +=
      y[30] *
      (+1.92664000e+00 + 7.43988400e-04 * T - 1.89492000e-07 * T2 +
       2.52425950e-11 * T3 - 1.35067020e-15 * T4 - 9.22797700e+02 * invT) *
      0.0356964374955379;
  }

  const amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& sbml)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[31]; //  temporary storage
  speciesEntropy(sor, T);

  // Compute Eq 42
  for (int id = 0; id < 31; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(P / 1013250.0);
  amrex::Real sor[31]; //  temporary storage
  amrex::Real x[31];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }
  // Now compute y to x conversion
  x[0] = y[0] / (154.297000 * YOW);
  x[1] = y[1] / (28.054000 * YOW);
  x[2] = y[2] / (16.043000 * YOW);
  x[3] = y[3] / (42.081000 * YOW);
  x[4] = y[4] / (56.108000 * YOW);
  x[5] = y[5] / (56.108000 * YOW);
  x[6] = y[6] / (2.016000 * YOW);
  x[7] = y[7] / (30.070000 * YOW);
  x[8] = y[8] / (28.010000 * YOW);
  x[9] = y[9] / (78.114000 * YOW);
  x[10] = y[10] / (26.038000 * YOW);
  x[11] = y[11] / (92.141000 * YOW);
  x[12] = y[12] / (15.035000 * YOW);
  x[13] = y[13] / (31.998000 * YOW);
  x[14] = y[14] / (15.999000 * YOW);
  x[15] = y[15] / (17.007000 * YOW);
  x[16] = y[16] / (33.006000 * YOW);
  x[17] = y[17] / (18.015000 * YOW);
  x[18] = y[18] / (34.014000 * YOW);
  x[19] = y[19] / (1.008000 * YOW);
  x[20] = y[20] / (30.026000 * YOW);
  x[21] = y[21] / (44.009000 * YOW);
  x[22] = y[22] / (42.037000 * YOW);
  x[23] = y[23] / (39.057000 * YOW);
  x[24] = y[24] / (41.073000 * YOW);
  x[25] = y[25] / (80.086000 * YOW);
  x[26] = y[26] / (65.095000 * YOW);
  x[27] = y[27] / (91.133000 * YOW);
  x[28] = y[28] / (93.105000 * YOW);
  x[29] = y[29] / (106.124000 * YOW);
  x[30] = y[30] / (28.014000 * YOW);
  speciesEntropy(sor, T);
  // Perform computation in Eq 42 and 43
  for (int i = 0; i < 31; i++) {
    result += x[i] * (sor[i] - log((x[i] + 1e-100)) - logPratio);
  }
  // Scale by R/W
  sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(
  const amrex::Real e, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  CKUBMS(tmin, y, emin);
  CKUBMS(tmax, y, emax);
  if (e < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(tmin, y, cv);
    t = tmin - (emin - e) / cv;
    ierr = 1;
    return;
  }
  if (e > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(tmax, y, cv);
    t = tmax - (emax - e) / cv;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (e - emin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKUBMS(t1, y, e1);
    CKCVBS(t1, y, cv);
    dt = (e - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(
  const amrex::Real h, const amrex::Real y[], amrex::Real& t, int& ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  CKHBMS(tmin, y, hmin);
  CKHBMS(tmax, y, hmax);
  if (h < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(tmin, y, cp);
    t = tmin - (hmin - h) / cp;
    ierr = 1;
    return;
  }
  if (h > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(tmax, y, cp);
    t = tmax - (hmax - h) / cp;
    ierr = 1;
    return;
  }
  t1 = t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (h - hmin);
  }
  for (int i = 0; i < maxiter; ++i) {
    CKHBMS(t1, y, h1);
    CKCPBS(t1, y, cp);
    dt = (h - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol) {
      break;
    }
    t1 += dt;
  }
  t = t1;
  ierr = 0;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& P)
{
  amrex::Real XW = 0;                      //  To hold mean molecular wt
  XW += x[0] * 154.297000;                 // POSF10325
  XW += x[1] * 28.054000;                  // C2H4
  XW += x[2] * 16.043000;                  // CH4
  XW += x[3] * 42.081000;                  // C3H6
  XW += x[4] * 56.108000;                  // iC4H8
  XW += x[5] * 56.108000;                  // C4H81
  XW += x[6] * 2.016000;                   // H2
  XW += x[7] * 30.070000;                  // C2H6
  XW += x[8] * 28.010000;                  // CO
  XW += x[9] * 78.114000;                  // C6H6
  XW += x[10] * 26.038000;                 // C2H2
  XW += x[11] * 92.141000;                 // C6H5CH3
  XW += x[12] * 15.035000;                 // CH3
  XW += x[13] * 31.998000;                 // O2
  XW += x[14] * 15.999000;                 // O
  XW += x[15] * 17.007000;                 // OH
  XW += x[16] * 33.006000;                 // HO2
  XW += x[17] * 18.015000;                 // H2O
  XW += x[18] * 34.014000;                 // H2O2
  XW += x[19] * 1.008000;                  // H
  XW += x[20] * 30.026000;                 // CH2O
  XW += x[21] * 44.009000;                 // CO2
  XW += x[22] * 42.037000;                 // CH2CO
  XW += x[23] * 39.057000;                 // C3H3
  XW += x[24] * 41.073000;                 // aC3H5
  XW += x[25] * 80.086000;                 // C5H4O
  XW += x[26] * 65.095000;                 // C5H5
  XW += x[27] * 91.133000;                 // C6H5CH2
  XW += x[28] * 93.105000;                 // C6H5O
  XW += x[29] * 106.124000;                // C6H5CHO
  XW += x[30] * 28.014000;                 // N2
  P = rho * 8.31446261815324e+07 * T / XW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& P)
{
  amrex::Real YOW = 0; //  for computing mean MW

  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }
  P = rho * 8.31446261815324e+07 * T * YOW; // P = rho*R*T/W
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& P)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 42.081000;   // C3H6
  W += c[4] * 56.108000;   // iC4H8
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 2.016000;    // H2
  W += c[7] * 30.070000;   // C2H6
  W += c[8] * 28.010000;   // CO
  W += c[9] * 78.114000;   // C6H6
  W += c[10] * 26.038000;  // C2H2
  W += c[11] * 92.141000;  // C6H5CH3
  W += c[12] * 15.035000;  // CH3
  W += c[13] * 31.998000;  // O2
  W += c[14] * 15.999000;  // O
  W += c[15] * 17.007000;  // OH
  W += c[16] * 33.006000;  // HO2
  W += c[17] * 18.015000;  // H2O
  W += c[18] * 34.014000;  // H2O2
  W += c[19] * 1.008000;   // H
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 44.009000;  // CO2
  W += c[22] * 42.037000;  // CH2CO
  W += c[23] * 39.057000;  // C3H3
  W += c[24] * 41.073000;  // aC3H5
  W += c[25] * 80.086000;  // C5H4O
  W += c[26] * 65.095000;  // C5H5
  W += c[27] * 91.133000;  // C6H5CH2
  W += c[28] * 93.105000;  // C6H5O
  W += c[29] * 106.124000; // C6H5CHO
  W += c[30] * 28.014000;  // N2

  for (int id = 0; id < 31; ++id) {
    sumC += c[id];
  }
  P = rho * 8.31446261815324e+07 * T * sumC / W; // P = rho*R*T/W
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real& rho)
{
  amrex::Real XW = 0;                        //  To hold mean molecular wt
  XW += x[0] * 154.297000;                   // POSF10325
  XW += x[1] * 28.054000;                    // C2H4
  XW += x[2] * 16.043000;                    // CH4
  XW += x[3] * 42.081000;                    // C3H6
  XW += x[4] * 56.108000;                    // iC4H8
  XW += x[5] * 56.108000;                    // C4H81
  XW += x[6] * 2.016000;                     // H2
  XW += x[7] * 30.070000;                    // C2H6
  XW += x[8] * 28.010000;                    // CO
  XW += x[9] * 78.114000;                    // C6H6
  XW += x[10] * 26.038000;                   // C2H2
  XW += x[11] * 92.141000;                   // C6H5CH3
  XW += x[12] * 15.035000;                   // CH3
  XW += x[13] * 31.998000;                   // O2
  XW += x[14] * 15.999000;                   // O
  XW += x[15] * 17.007000;                   // OH
  XW += x[16] * 33.006000;                   // HO2
  XW += x[17] * 18.015000;                   // H2O
  XW += x[18] * 34.014000;                   // H2O2
  XW += x[19] * 1.008000;                    // H
  XW += x[20] * 30.026000;                   // CH2O
  XW += x[21] * 44.009000;                   // CO2
  XW += x[22] * 42.037000;                   // CH2CO
  XW += x[23] * 39.057000;                   // C3H3
  XW += x[24] * 41.073000;                   // aC3H5
  XW += x[25] * 80.086000;                   // C5H4O
  XW += x[26] * 65.095000;                   // C5H5
  XW += x[27] * 91.133000;                   // C6H5CH2
  XW += x[28] * 93.105000;                   // C6H5O
  XW += x[29] * 106.124000;                  // C6H5CHO
  XW += x[30] * 28.014000;                   // N2
  rho = P * XW / (8.31446261815324e+07 * T); // rho = P*W/(R*T)
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real& rho)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }

  rho = P / (8.31446261815324e+07 * T * YOW); // rho = P*W/(R*T)
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real c[],
  amrex::Real& rho)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 42.081000;   // C3H6
  W += c[4] * 56.108000;   // iC4H8
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 2.016000;    // H2
  W += c[7] * 30.070000;   // C2H6
  W += c[8] * 28.010000;   // CO
  W += c[9] * 78.114000;   // C6H6
  W += c[10] * 26.038000;  // C2H2
  W += c[11] * 92.141000;  // C6H5CH3
  W += c[12] * 15.035000;  // CH3
  W += c[13] * 31.998000;  // O2
  W += c[14] * 15.999000;  // O
  W += c[15] * 17.007000;  // OH
  W += c[16] * 33.006000;  // HO2
  W += c[17] * 18.015000;  // H2O
  W += c[18] * 34.014000;  // H2O2
  W += c[19] * 1.008000;   // H
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 44.009000;  // CO2
  W += c[22] * 42.037000;  // CH2CO
  W += c[23] * 39.057000;  // C3H3
  W += c[24] * 41.073000;  // aC3H5
  W += c[25] * 80.086000;  // C5H4O
  W += c[26] * 65.095000;  // C5H5
  W += c[27] * 91.133000;  // C6H5CH2
  W += c[28] * 93.105000;  // C6H5O
  W += c[29] * 106.124000; // C6H5CHO
  W += c[30] * 28.014000;  // N2

  for (int id = 0; id < 31; ++id) {
    sumC += c[id];
  }
  rho = P * W / (sumC * T * 8.31446261815324e+07); // rho = PW/(R*T)
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real wt[])
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(const amrex::Real y[], amrex::Real& wtm)
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }

  wtm = 1.0 / YOW;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(const amrex::Real x[], amrex::Real& wtm)
{
  amrex::Real XW = 0;       //  see Eq 4 in CK Manual
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 42.081000;   // C3H6
  XW += x[4] * 56.108000;   // iC4H8
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 2.016000;    // H2
  XW += x[7] * 30.070000;   // C2H6
  XW += x[8] * 28.010000;   // CO
  XW += x[9] * 78.114000;   // C6H6
  XW += x[10] * 26.038000;  // C2H2
  XW += x[11] * 92.141000;  // C6H5CH3
  XW += x[12] * 15.035000;  // CH3
  XW += x[13] * 31.998000;  // O2
  XW += x[14] * 15.999000;  // O
  XW += x[15] * 17.007000;  // OH
  XW += x[16] * 33.006000;  // HO2
  XW += x[17] * 18.015000;  // H2O
  XW += x[18] * 34.014000;  // H2O2
  XW += x[19] * 1.008000;   // H
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 44.009000;  // CO2
  XW += x[22] * 42.037000;  // CH2CO
  XW += x[23] * 39.057000;  // C3H3
  XW += x[24] * 41.073000;  // aC3H5
  XW += x[25] * 80.086000;  // C5H4O
  XW += x[26] * 65.095000;  // C5H5
  XW += x[27] * 91.133000;  // C6H5CH2
  XW += x[28] * 93.105000;  // C6H5O
  XW += x[29] * 106.124000; // C6H5CHO
  XW += x[30] * 28.014000;  // N2
  wtm = XW;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(const amrex::Real c[], amrex::Real& wtm)
{
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 42.081000;   // C3H6
  W += c[4] * 56.108000;   // iC4H8
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 2.016000;    // H2
  W += c[7] * 30.070000;   // C2H6
  W += c[8] * 28.010000;   // CO
  W += c[9] * 78.114000;   // C6H6
  W += c[10] * 26.038000;  // C2H2
  W += c[11] * 92.141000;  // C6H5CH3
  W += c[12] * 15.035000;  // CH3
  W += c[13] * 31.998000;  // O2
  W += c[14] * 15.999000;  // O
  W += c[15] * 17.007000;  // OH
  W += c[16] * 33.006000;  // HO2
  W += c[17] * 18.015000;  // H2O
  W += c[18] * 34.014000;  // H2O2
  W += c[19] * 1.008000;   // H
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 44.009000;  // CO2
  W += c[22] * 42.037000;  // CH2CO
  W += c[23] * 39.057000;  // C3H3
  W += c[24] * 41.073000;  // aC3H5
  W += c[25] * 80.086000;  // C5H4O
  W += c[26] * 65.095000;  // C5H5
  W += c[27] * 91.133000;  // C6H5CH2
  W += c[28] * 93.105000;  // C6H5O
  W += c[29] * 106.124000; // C6H5CHO
  W += c[30] * 28.014000;  // N2

  for (int id = 0; id < 31; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against division by zero
  wtm = W / sumC;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(const amrex::Real T, amrex::Real cpor[])
{
  cp_R(cpor, T);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(const amrex::Real T, amrex::Real hort[])
{
  speciesEnthalpy(hort, T);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(const amrex::Real T, amrex::Real sor[])
{
  speciesEntropy(sor, T);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(const amrex::Real y[], amrex::Real x[])
{
  amrex::Real YOW = 0;

  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 31; i++) {
    x[i] = y[i] * imw(i) * YOWINV;
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real c[])
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 31; i++) {
    c[i] = y[i] * imw(i);
  }
  for (int i = 0; i < 31; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // Now compute conversion

  for (int i = 0; i < 31; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(
  const amrex::Real rho,
  amrex::Real /*T*/,
  const amrex::Real y[],
  amrex::Real c[])
{

  for (int i = 0; i < 31; i++) {
    c[i] = rho * y[i] * imw(i);
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(const amrex::Real x[], amrex::Real y[])
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 42.081000;   // C3H6
  XW += x[4] * 56.108000;   // iC4H8
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 2.016000;    // H2
  XW += x[7] * 30.070000;   // C2H6
  XW += x[8] * 28.010000;   // CO
  XW += x[9] * 78.114000;   // C6H6
  XW += x[10] * 26.038000;  // C2H2
  XW += x[11] * 92.141000;  // C6H5CH3
  XW += x[12] * 15.035000;  // CH3
  XW += x[13] * 31.998000;  // O2
  XW += x[14] * 15.999000;  // O
  XW += x[15] * 17.007000;  // OH
  XW += x[16] * 33.006000;  // HO2
  XW += x[17] * 18.015000;  // H2O
  XW += x[18] * 34.014000;  // H2O2
  XW += x[19] * 1.008000;   // H
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 44.009000;  // CO2
  XW += x[22] * 42.037000;  // CH2CO
  XW += x[23] * 39.057000;  // C3H3
  XW += x[24] * 41.073000;  // aC3H5
  XW += x[25] * 80.086000;  // C5H4O
  XW += x[26] * 65.095000;  // C5H5
  XW += x[27] * 91.133000;  // C6H5CH2
  XW += x[28] * 93.105000;  // C6H5O
  XW += x[29] * 106.124000; // C6H5CHO
  XW += x[30] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 154.297000 * XWinv;
  y[1] = x[1] * 28.054000 * XWinv;
  y[2] = x[2] * 16.043000 * XWinv;
  y[3] = x[3] * 42.081000 * XWinv;
  y[4] = x[4] * 56.108000 * XWinv;
  y[5] = x[5] * 56.108000 * XWinv;
  y[6] = x[6] * 2.016000 * XWinv;
  y[7] = x[7] * 30.070000 * XWinv;
  y[8] = x[8] * 28.010000 * XWinv;
  y[9] = x[9] * 78.114000 * XWinv;
  y[10] = x[10] * 26.038000 * XWinv;
  y[11] = x[11] * 92.141000 * XWinv;
  y[12] = x[12] * 15.035000 * XWinv;
  y[13] = x[13] * 31.998000 * XWinv;
  y[14] = x[14] * 15.999000 * XWinv;
  y[15] = x[15] * 17.007000 * XWinv;
  y[16] = x[16] * 33.006000 * XWinv;
  y[17] = x[17] * 18.015000 * XWinv;
  y[18] = x[18] * 34.014000 * XWinv;
  y[19] = x[19] * 1.008000 * XWinv;
  y[20] = x[20] * 30.026000 * XWinv;
  y[21] = x[21] * 44.009000 * XWinv;
  y[22] = x[22] * 42.037000 * XWinv;
  y[23] = x[23] * 39.057000 * XWinv;
  y[24] = x[24] * 41.073000 * XWinv;
  y[25] = x[25] * 80.086000 * XWinv;
  y[26] = x[26] * 65.095000 * XWinv;
  y[27] = x[27] * 91.133000 * XWinv;
  y[28] = x[28] * 93.105000 * XWinv;
  y[29] = x[29] * 106.124000 * XWinv;
  y[30] = x[30] * 28.014000 * XWinv;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real PORT = P / (8.31446261815324e+07 * T); // P/RT

  // Compute conversion, see Eq 10
  for (int id = 0; id < 31; ++id) {
    c[id] = x[id] * PORT;
  }
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(
  const amrex::Real rho,
  const amrex::Real /*T*/,
  const amrex::Real x[],
  amrex::Real c[])
{
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 42.081000;   // C3H6
  XW += x[4] * 56.108000;   // iC4H8
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 2.016000;    // H2
  XW += x[7] * 30.070000;   // C2H6
  XW += x[8] * 28.010000;   // CO
  XW += x[9] * 78.114000;   // C6H6
  XW += x[10] * 26.038000;  // C2H2
  XW += x[11] * 92.141000;  // C6H5CH3
  XW += x[12] * 15.035000;  // CH3
  XW += x[13] * 31.998000;  // O2
  XW += x[14] * 15.999000;  // O
  XW += x[15] * 17.007000;  // OH
  XW += x[16] * 33.006000;  // HO2
  XW += x[17] * 18.015000;  // H2O
  XW += x[18] * 34.014000;  // H2O2
  XW += x[19] * 1.008000;   // H
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 44.009000;  // CO2
  XW += x[22] * 42.037000;  // CH2CO
  XW += x[23] * 39.057000;  // C3H3
  XW += x[24] * 41.073000;  // aC3H5
  XW += x[25] * 80.086000;  // C5H4O
  XW += x[26] * 65.095000;  // C5H5
  XW += x[27] * 91.133000;  // C6H5CH2
  XW += x[28] * 93.105000;  // C6H5O
  XW += x[29] * 106.124000; // C6H5CHO
  XW += x[30] * 28.014000;  // N2
  ROW = rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 31; ++id) {
    c[id] = x[id] * ROW;
  }
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(const amrex::Real c[], amrex::Real x[])
{
  amrex::Real sumC = 0;

  // compute sum of c
  for (int id = 0; id < 31; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (int id = 0; id < 31; ++id) {
    x[id] = c[id] * sumCinv;
  }
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(const amrex::Real c[], amrex::Real y[])
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 154.297000;  // POSF10325
  CW += c[1] * 28.054000;   // C2H4
  CW += c[2] * 16.043000;   // CH4
  CW += c[3] * 42.081000;   // C3H6
  CW += c[4] * 56.108000;   // iC4H8
  CW += c[5] * 56.108000;   // C4H81
  CW += c[6] * 2.016000;    // H2
  CW += c[7] * 30.070000;   // C2H6
  CW += c[8] * 28.010000;   // CO
  CW += c[9] * 78.114000;   // C6H6
  CW += c[10] * 26.038000;  // C2H2
  CW += c[11] * 92.141000;  // C6H5CH3
  CW += c[12] * 15.035000;  // CH3
  CW += c[13] * 31.998000;  // O2
  CW += c[14] * 15.999000;  // O
  CW += c[15] * 17.007000;  // OH
  CW += c[16] * 33.006000;  // HO2
  CW += c[17] * 18.015000;  // H2O
  CW += c[18] * 34.014000;  // H2O2
  CW += c[19] * 1.008000;   // H
  CW += c[20] * 30.026000;  // CH2O
  CW += c[21] * 44.009000;  // CO2
  CW += c[22] * 42.037000;  // CH2CO
  CW += c[23] * 39.057000;  // C3H3
  CW += c[24] * 41.073000;  // aC3H5
  CW += c[25] * 80.086000;  // C5H4O
  CW += c[26] * 65.095000;  // C5H5
  CW += c[27] * 91.133000;  // C6H5CH2
  CW += c[28] * 93.105000;  // C6H5O
  CW += c[29] * 106.124000; // C6H5CHO
  CW += c[30] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 154.297000 * CWinv;
  y[1] = c[1] * 28.054000 * CWinv;
  y[2] = c[2] * 16.043000 * CWinv;
  y[3] = c[3] * 42.081000 * CWinv;
  y[4] = c[4] * 56.108000 * CWinv;
  y[5] = c[5] * 56.108000 * CWinv;
  y[6] = c[6] * 2.016000 * CWinv;
  y[7] = c[7] * 30.070000 * CWinv;
  y[8] = c[8] * 28.010000 * CWinv;
  y[9] = c[9] * 78.114000 * CWinv;
  y[10] = c[10] * 26.038000 * CWinv;
  y[11] = c[11] * 92.141000 * CWinv;
  y[12] = c[12] * 15.035000 * CWinv;
  y[13] = c[13] * 31.998000 * CWinv;
  y[14] = c[14] * 15.999000 * CWinv;
  y[15] = c[15] * 17.007000 * CWinv;
  y[16] = c[16] * 33.006000 * CWinv;
  y[17] = c[17] * 18.015000 * CWinv;
  y[18] = c[18] * 34.014000 * CWinv;
  y[19] = c[19] * 1.008000 * CWinv;
  y[20] = c[20] * 30.026000 * CWinv;
  y[21] = c[21] * 44.009000 * CWinv;
  y[22] = c[22] * 42.037000 * CWinv;
  y[23] = c[23] * 39.057000 * CWinv;
  y[24] = c[24] * 41.073000 * CWinv;
  y[25] = c[25] * 80.086000 * CWinv;
  y[26] = c[26] * 65.095000 * CWinv;
  y[27] = c[27] * 91.133000 * CWinv;
  y[28] = c[28] * 93.105000 * CWinv;
  y[29] = c[29] * 106.124000 * CWinv;
  y[30] = c[30] * 28.014000 * CWinv;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(const amrex::Real T, amrex::Real cvml[])
{
  cv_R(cvml, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(const amrex::Real T, amrex::Real cpml[])
{
  cp_R(cpml, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(const amrex::Real T, amrex::Real uml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesInternalEnergy(uml, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(const amrex::Real T, amrex::Real hml[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T
  speciesEnthalpy(hml, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(const amrex::Real T, amrex::Real sml[])
{
  speciesEntropy(sml, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(const amrex::Real T, amrex::Real cvms[])
{
  cv_R(cvms, T);
  // multiply by R/molecularweight
  cvms[0] *= 5.388609382005639e+05;  // POSF10325
  cvms[1] *= 2.963735160103101e+06;  // C2H4
  cvms[2] *= 5.182610869633635e+06;  // CH4
  cvms[3] *= 1.975823440068734e+06;  // C3H6
  cvms[4] *= 1.481867580051551e+06;  // iC4H8
  cvms[5] *= 1.481867580051551e+06;  // C4H81
  cvms[6] *= 4.124237409798234e+07;  // H2
  cvms[7] *= 2.765035789209591e+06;  // C2H6
  cvms[8] *= 2.968390795484913e+06;  // CO
  cvms[9] *= 1.064401082796072e+06;  // C6H6
  cvms[10] *= 3.193203248388218e+06; // C2H2
  cvms[11] *= 9.023629674252765e+05; // C6H5CH3
  cvms[12] *= 5.530071578419182e+06; // CH3
  cvms[13] *= 2.598431970171023e+06; // O2
  cvms[14] *= 5.196863940342046e+06; // O
  cvms[15] *= 4.888847308845322e+06; // OH
  cvms[16] *= 2.519076112874398e+06; // HO2
  cvms[17] *= 4.615299815794193e+06; // H2O
  cvms[18] *= 2.444423654422661e+06; // H2O2
  cvms[19] *= 8.248474819596468e+07; // H
  cvms[20] *= 2.769087663409458e+06; // CH2O
  cvms[21] *= 1.889264154639560e+06; // CO2
  cvms[22] *= 1.977891528451897e+06; // CH2CO
  cvms[23] *= 2.128802165592145e+06; // C3H3
  cvms[24] *= 2.024313446340233e+06; // aC3H5
  cvms[25] *= 1.038191771115206e+06; // C5H4O
  cvms[26] *= 1.277281299355287e+06; // C5H5
  cvms[27] *= 9.123437852537764e+05; // C6H5CH2
  cvms[28] *= 8.930199901351420e+05; // C6H5O
  cvms[29] *= 7.834667575810599e+05; // C6H5CHO
  cvms[30] *= 2.967966951578939e+06; // N2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(const amrex::Real T, amrex::Real cpms[])
{
  cp_R(cpms, T);
  // multiply by R/molecularweight
  cpms[0] *= 5.388609382005639e+05;  // POSF10325
  cpms[1] *= 2.963735160103101e+06;  // C2H4
  cpms[2] *= 5.182610869633635e+06;  // CH4
  cpms[3] *= 1.975823440068734e+06;  // C3H6
  cpms[4] *= 1.481867580051551e+06;  // iC4H8
  cpms[5] *= 1.481867580051551e+06;  // C4H81
  cpms[6] *= 4.124237409798234e+07;  // H2
  cpms[7] *= 2.765035789209591e+06;  // C2H6
  cpms[8] *= 2.968390795484913e+06;  // CO
  cpms[9] *= 1.064401082796072e+06;  // C6H6
  cpms[10] *= 3.193203248388218e+06; // C2H2
  cpms[11] *= 9.023629674252765e+05; // C6H5CH3
  cpms[12] *= 5.530071578419182e+06; // CH3
  cpms[13] *= 2.598431970171023e+06; // O2
  cpms[14] *= 5.196863940342046e+06; // O
  cpms[15] *= 4.888847308845322e+06; // OH
  cpms[16] *= 2.519076112874398e+06; // HO2
  cpms[17] *= 4.615299815794193e+06; // H2O
  cpms[18] *= 2.444423654422661e+06; // H2O2
  cpms[19] *= 8.248474819596468e+07; // H
  cpms[20] *= 2.769087663409458e+06; // CH2O
  cpms[21] *= 1.889264154639560e+06; // CO2
  cpms[22] *= 1.977891528451897e+06; // CH2CO
  cpms[23] *= 2.128802165592145e+06; // C3H3
  cpms[24] *= 2.024313446340233e+06; // aC3H5
  cpms[25] *= 1.038191771115206e+06; // C5H4O
  cpms[26] *= 1.277281299355287e+06; // C5H5
  cpms[27] *= 9.123437852537764e+05; // C6H5CH2
  cpms[28] *= 8.930199901351420e+05; // C6H5O
  cpms[29] *= 7.834667575810599e+05; // C6H5CHO
  cpms[30] *= 2.967966951578939e+06; // N2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(const amrex::Real T, amrex::Real ums[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesInternalEnergy(ums, T);

  for (int i = 0; i < 31; i++) {
    ums[i] *= RT * imw(i);
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(const amrex::Real T, amrex::Real hms[])
{
  amrex::Real RT = 8.31446261815324e+07 * T; // R*T

  speciesEnthalpy(hms, T);

  for (int i = 0; i < 31; i++) {
    hms[i] *= RT * imw(i);
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(const amrex::Real T, amrex::Real sms[])
{
  speciesEntropy(sms, T);
  // multiply by R/molecularweight
  sms[0] *= 5.388609382005639e+05;  // POSF10325
  sms[1] *= 2.963735160103101e+06;  // C2H4
  sms[2] *= 5.182610869633635e+06;  // CH4
  sms[3] *= 1.975823440068734e+06;  // C3H6
  sms[4] *= 1.481867580051551e+06;  // iC4H8
  sms[5] *= 1.481867580051551e+06;  // C4H81
  sms[6] *= 4.124237409798234e+07;  // H2
  sms[7] *= 2.765035789209591e+06;  // C2H6
  sms[8] *= 2.968390795484913e+06;  // CO
  sms[9] *= 1.064401082796072e+06;  // C6H6
  sms[10] *= 3.193203248388218e+06; // C2H2
  sms[11] *= 9.023629674252765e+05; // C6H5CH3
  sms[12] *= 5.530071578419182e+06; // CH3
  sms[13] *= 2.598431970171023e+06; // O2
  sms[14] *= 5.196863940342046e+06; // O
  sms[15] *= 4.888847308845322e+06; // OH
  sms[16] *= 2.519076112874398e+06; // HO2
  sms[17] *= 4.615299815794193e+06; // H2O
  sms[18] *= 2.444423654422661e+06; // H2O2
  sms[19] *= 8.248474819596468e+07; // H
  sms[20] *= 2.769087663409458e+06; // CH2O
  sms[21] *= 1.889264154639560e+06; // CO2
  sms[22] *= 1.977891528451897e+06; // CH2CO
  sms[23] *= 2.128802165592145e+06; // C3H3
  sms[24] *= 2.024313446340233e+06; // aC3H5
  sms[25] *= 1.038191771115206e+06; // C5H4O
  sms[26] *= 1.277281299355287e+06; // C5H5
  sms[27] *= 9.123437852537764e+05; // C6H5CH2
  sms[28] *= 8.930199901351420e+05; // C6H5O
  sms[29] *= 7.834667575810599e+05; // C6H5CHO
  sms[30] *= 2.967966951578939e+06; // N2
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qss_coeff(
  amrex::Real* k_f,
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real T,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1. / refC;
  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 31; ++i) {
    mixture += sc[i];
  }

  {
    // reaction 3: H + HCO (+M) <=> CH2O (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP = Corr / k_f[0] * 1350000000000 *
                             exp(-2.57 * logT - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-T * 0.003690036900369) +
      0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[0] = Corr * k_f[0] * (sc[19]);
    qr[0] = Corr * k_f[0] * exp(-(g_RT[19] - g_RT[20] + g_RT_qss[2])) * (refC) *
            (sc[20]);
  }

  {
    // reaction 4: CH2 + H (+M) <=> CH3 (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[1] * 3.2e+15 * exp(-3.14 * logT - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-T * 0.0128205128205128) +
      0.68 * exp(-T * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[1] = Corr * k_f[1] * (sc[19]);
    qr[1] = Corr * k_f[1] * exp(-(-g_RT[12] + g_RT[19] + g_RT_qss[0])) *
            (refC) * (sc[12]);
  }

  {
    // reaction 5: CH2 + CO (+M) <=> CH2CO (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[2] * 2.69e+21 * exp(-5.11 * logT - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-T * 0.00363636363636364) +
      0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[2] = Corr * k_f[2] * (sc[8]);
    qr[2] = Corr * k_f[2] * exp(-(g_RT[8] - g_RT[22] + g_RT_qss[0])) * (refC) *
            (sc[22]);
  }

  {
    // reaction 6: CH2O + H (+M) <=> CH3O (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[3] * 2.2e+18 * exp(-4.8 * logT - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-T * 0.0106382978723404) +
      0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[3] = Corr * k_f[3] * (sc[19] * sc[20]);
    qr[3] = Corr * k_f[3] * exp(-(g_RT[19] + g_RT[20] - g_RT_qss[3])) * (refC) *
            (1.0);
  }

  {
    // reaction 9: C2H3 (+M) <=> C2H2 + H (+M)
    amrex::Real Corr = mixture + (3 - 1) * sc[1] + sc[2] + sc[6] +
                       (3 - 1) * sc[7] + (1.5 - 1) * sc[8] + (3 - 1) * sc[10] +
                       (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[4] * 2.565e+21 * exp(-3.4 * logT - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-T * 0.000185745862510913) +
      1.9816 * exp(-T * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[4] = Corr * k_f[4] * (1.0);
    qr[4] = Corr * k_f[4] * exp(-(-g_RT[10] - g_RT[19] + g_RT_qss[4])) *
            (refCinv) * (sc[10] * sc[19]);
  }

  {
    // reaction 10: CH2CO + H (+M) <=> CH2CHO (+M)
    amrex::Real Corr = mixture + (3 - 1) * sc[1] + sc[2] + sc[6] +
                       (3 - 1) * sc[7] + (1.5 - 1) * sc[8] + (3 - 1) * sc[10] +
                       (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[5] * 3.8e+29 * exp(-7.64 * logT - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-T * 0.000585823081429408) + 0.337 * exp(-T * 0.0003125) +
      exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[5] = Corr * k_f[5] * (sc[19] * sc[22]);
    qr[5] = Corr * k_f[5] * exp(-(g_RT[19] + g_RT[22] - g_RT_qss[7])) * (refC) *
            (1.0);
  }

  {
    // reaction 11: C2H3 + H (+M) <=> C2H4 (+M)
    amrex::Real Corr = mixture + (3 - 1) * sc[1] + sc[2] + sc[6] +
                       (3 - 1) * sc[7] + (1.5 - 1) * sc[8] + (3 - 1) * sc[10] +
                       (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[6] * 1.4e+18 * exp(-3.86 * logT - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-T * 0.00481927710843374) +
      0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[6] = Corr * k_f[6] * (sc[19]);
    qr[6] = Corr * k_f[6] * exp(-(-g_RT[1] + g_RT[19] + g_RT_qss[4])) * (refC) *
            (sc[1]);
  }

  {
    // reaction 12: C2H3 + CH3 (+M) <=> C3H6 (+M)
    amrex::Real Corr = mixture + (3 - 1) * sc[1] + sc[2] + sc[6] +
                       (3 - 1) * sc[7] + (1.5 - 1) * sc[8] + (3 - 1) * sc[10] +
                       (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[7] * 4.27e+46 * exp(-11.94 * logT - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-T * 0.000745934656124124) +
      0.175 * exp(-T * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[7] = Corr * k_f[7] * (sc[12]);
    qr[7] = Corr * k_f[7] * exp(-(-g_RT[3] + g_RT[12] + g_RT_qss[4])) * (refC) *
            (sc[3]);
  }

  {
    // reaction 13: C2H4 + H (+M) <=> C2H5 (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[8] * 2.9e+27 * exp(-6.642 * logT - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.569 * exp(-T * -0.000109325461900077) +
      1.569 * exp(-T * 0.00334448160535117) + exp(-152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[8] = Corr * k_f[8] * (sc[1] * sc[19]);
    qr[8] =
      Corr * k_f[8] * exp(-(g_RT[1] + g_RT[19] - g_RT_qss[5])) * (refC) * (1.0);
  }

  {
    // reaction 14: C2H5 + H (+M) <=> C2H6 (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[9] * 1.99e+29 * exp(-7.08 * logT - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
      exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[9] = Corr * k_f[9] * (sc[19]);
    qr[9] = Corr * k_f[9] * exp(-(-g_RT[7] + g_RT[19] + g_RT_qss[5])) * (refC) *
            (sc[7]);
  }

  {
    // reaction 15: C2H3 + C2H5 (+M) <=> C4H81 (+M)
    amrex::Real Corr = mixture + sc[2] + sc[6] + (3 - 1) * sc[7] +
                       (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[10] * 1.55e+44 * exp(-11.79 * logT - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-T * 0.000439000834101585) +
      0.198 * exp(-T * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    // Remove forward reaction
    // qf[10]  = Corr * k_f[10] * (1.0);
    qf[10] = 0.0;
    qr[10] = Corr * k_f[10] * exp(-(-g_RT[5] + g_RT_qss[4] + g_RT_qss[5])) *
             (refC) * (sc[5]);
  }

  {
    // reaction 19: C6H5 + H (+M) <=> C6H6 (+M)
    amrex::Real Corr =
      mixture + sc[2] + sc[6] + (1.5 - 1) * sc[8] + (6 - 1) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f[11] * 6.6e+63 * exp(-16.3 * logT - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 0.0017096939647803) + exp(-6113 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    qf[11] = Corr * k_f[11] * (sc[19]);
    qr[11] = Corr * k_f[11] * exp(-(-g_RT[9] + g_RT[19] + g_RT_qss[8])) *
             (refC) * (sc[9]);
  }

  {
    // reaction 26: HCO + M <=> CO + H + M
    const amrex::Real Corr = mixture + sc[6] + (1.75 - 1) * sc[8] +
                             (0 - 1) * sc[17] + (3.6 - 1) * sc[21];
    qf[12] = Corr * k_f[12] * (1.0);
    qr[12] = Corr * k_f[12] * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) *
             (refCinv) * (sc[8] * sc[19]);
  }

  {
    // reaction 27: HCO + H2O <=> CO + H + H2O
    qf[13] = k_f[13] * (sc[17]);
    qr[13] = k_f[13] * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) * (refCinv) *
             (sc[8] * sc[17] * sc[19]);
  }

  {
    // reaction 55: H + HCO <=> CO + H2
    qf[14] = k_f[14] * (sc[19]);
    qr[14] = k_f[14] * exp(-(-g_RT[6] - g_RT[8] + g_RT[19] + g_RT_qss[2])) *
             (sc[6] * sc[8]);
  }

  {
    // reaction 56: HCO + O <=> CO + OH
    qf[15] = k_f[15] * (sc[14]);
    qr[15] = k_f[15] * exp(-(-g_RT[8] + g_RT[14] - g_RT[15] + g_RT_qss[2])) *
             (sc[8] * sc[15]);
  }

  {
    // reaction 57: HCO + O <=> CO2 + H
    qf[16] = k_f[16] * (sc[14]);
    qr[16] = k_f[16] * exp(-(g_RT[14] - g_RT[19] - g_RT[21] + g_RT_qss[2])) *
             (sc[19] * sc[21]);
  }

  {
    // reaction 58: HCO + OH <=> CO + H2O
    qf[17] = k_f[17] * (sc[15]);
    qr[17] = k_f[17] * exp(-(-g_RT[8] + g_RT[15] - g_RT[17] + g_RT_qss[2])) *
             (sc[8] * sc[17]);
  }

  {
    // reaction 59: HCO + O2 <=> CO + HO2
    qf[18] = k_f[18] * (sc[13]);
    qr[18] = k_f[18] * exp(-(-g_RT[8] + g_RT[13] - g_RT[16] + g_RT_qss[2])) *
             (sc[8] * sc[16]);
  }

  {
    // reaction 60: CH2 + O <=> H + HCO
    qf[19] = k_f[19] * (sc[14]);
    qr[19] = k_f[19] * exp(-(g_RT[14] - g_RT[19] + g_RT_qss[0] - g_RT_qss[2])) *
             (sc[19]);
  }

  {
    // reaction 61: CH2 + OH <=> CH2O + H
    qf[20] = k_f[20] * (sc[15]);
    qr[20] = k_f[20] * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[0])) *
             (sc[19] * sc[20]);
  }

  {
    // reaction 62: CH2 + H2 <=> CH3 + H
    qf[21] = k_f[21] * (sc[6]);
    qr[21] = k_f[21] * exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[0])) *
             (sc[12] * sc[19]);
  }

  {
    // reaction 63: CH2 + O2 <=> HCO + OH
    qf[22] = k_f[22] * (sc[13]);
    qr[22] = k_f[22] * exp(-(g_RT[13] - g_RT[15] + g_RT_qss[0] - g_RT_qss[2])) *
             (sc[15]);
  }

  {
    // reaction 64: CH2 + O2 <=> CO2 + 2 H
    qf[23] = k_f[23] * (sc[13]);
    qr[23] = k_f[23] *
             exp(-(g_RT[13] - 2.000000 * g_RT[19] - g_RT[21] + g_RT_qss[0])) *
             (refCinv) * (sc[19] * sc[19] * sc[21]);
  }

  {
    // reaction 65: CH2* + N2 <=> CH2 + N2
    qf[24] = k_f[24] * (sc[30]);
    qr[24] = k_f[24] * exp(-(g_RT[30] - g_RT[30] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[30]);
  }

  {
    // reaction 66: CH2* + O <=> CO + H2
    qf[25] = k_f[25] * (sc[14]);
    qr[25] = k_f[25] * exp(-(-g_RT[6] - g_RT[8] + g_RT[14] + g_RT_qss[1])) *
             (sc[6] * sc[8]);
  }

  {
    // reaction 67: CH2* + OH <=> CH2O + H
    qf[26] = k_f[26] * (sc[15]);
    qr[26] = k_f[26] * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[1])) *
             (sc[19] * sc[20]);
  }

  {
    // reaction 68: CH2* + H2 <=> CH3 + H
    qf[27] = k_f[27] * (sc[6]);
    qr[27] = k_f[27] * exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[1])) *
             (sc[12] * sc[19]);
  }

  {
    // reaction 69: CH2* + O2 <=> CO + H + OH
    qf[28] = k_f[28] * (sc[13]);
    qr[28] = k_f[28] *
             exp(-(-g_RT[8] + g_RT[13] - g_RT[15] - g_RT[19] + g_RT_qss[1])) *
             (refCinv) * (sc[8] * sc[15] * sc[19]);
  }

  {
    // reaction 70: CH2* + O2 <=> CO + H2O
    qf[29] = k_f[29] * (sc[13]);
    qr[29] = k_f[29] * exp(-(-g_RT[8] + g_RT[13] - g_RT[17] + g_RT_qss[1])) *
             (sc[8] * sc[17]);
  }

  {
    // reaction 71: CH2* + H2O <=> CH2 + H2O
    qf[30] = k_f[30] * (sc[17]);
    qr[30] = k_f[30] * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[17]);
  }

  {
    // reaction 72: CH2* + CO <=> CH2 + CO
    qf[31] = k_f[31] * (sc[8]);
    qr[31] =
      k_f[31] * exp(-(g_RT[8] - g_RT[8] - g_RT_qss[0] + g_RT_qss[1])) * (sc[8]);
  }

  {
    // reaction 73: CH2* + CO2 <=> CH2 + CO2
    qf[32] = k_f[32] * (sc[21]);
    qr[32] = k_f[32] * exp(-(g_RT[21] - g_RT[21] - g_RT_qss[0] + g_RT_qss[1])) *
             (sc[21]);
  }

  {
    // reaction 74: CH2* + CO2 <=> CH2O + CO
    qf[33] = k_f[33] * (sc[21]);
    qr[33] = k_f[33] * exp(-(-g_RT[8] - g_RT[20] + g_RT[21] + g_RT_qss[1])) *
             (sc[8] * sc[20]);
  }

  {
    // reaction 75: CH2O + H <=> H2 + HCO
    qf[34] = k_f[34] * (sc[19] * sc[20]);
    qr[34] =
      k_f[34] * exp(-(-g_RT[6] + g_RT[19] + g_RT[20] - g_RT_qss[2])) * (sc[6]);
  }

  {
    // reaction 76: CH2O + O <=> HCO + OH
    qf[35] = k_f[35] * (sc[14] * sc[20]);
    qr[35] =
      k_f[35] * exp(-(g_RT[14] - g_RT[15] + g_RT[20] - g_RT_qss[2])) * (sc[15]);
  }

  {
    // reaction 77: CH2O + OH <=> H2O + HCO
    qf[36] = k_f[36] * (sc[15] * sc[20]);
    qr[36] =
      k_f[36] * exp(-(g_RT[15] - g_RT[17] + g_RT[20] - g_RT_qss[2])) * (sc[17]);
  }

  {
    // reaction 78: CH2O + O2 <=> HCO + HO2
    qf[37] = k_f[37] * (sc[13] * sc[20]);
    qr[37] =
      k_f[37] * exp(-(g_RT[13] - g_RT[16] + g_RT[20] - g_RT_qss[2])) * (sc[16]);
  }

  {
    // reaction 79: CH2O + HO2 <=> H2O2 + HCO
    qf[38] = k_f[38] * (sc[16] * sc[20]);
    qr[38] =
      k_f[38] * exp(-(g_RT[16] - g_RT[18] + g_RT[20] - g_RT_qss[2])) * (sc[18]);
  }

  {
    // reaction 81: CH3 + OH <=> CH2 + H2O
    qf[39] = k_f[39] * (sc[12] * sc[15]);
    qr[39] =
      k_f[39] * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[0])) * (sc[17]);
  }

  {
    // reaction 82: CH3 + OH <=> CH2* + H2O
    qf[40] = k_f[40] * (sc[12] * sc[15]);
    qr[40] =
      k_f[40] * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[1])) * (sc[17]);
  }

  {
    // reaction 83: CH3 + O2 <=> CH3O + O
    qf[41] = k_f[41] * (sc[12] * sc[13]);
    qr[41] =
      k_f[41] * exp(-(g_RT[12] + g_RT[13] - g_RT[14] - g_RT_qss[3])) * (sc[14]);
  }

  {
    // reaction 86: CH3 + HO2 <=> CH3O + OH
    qf[42] = k_f[42] * (sc[12] * sc[16]);
    qr[42] =
      k_f[42] * exp(-(g_RT[12] - g_RT[15] + g_RT[16] - g_RT_qss[3])) * (sc[15]);
  }

  {
    // reaction 88: CH3 + HCO <=> CH4 + CO
    qf[43] = k_f[43] * (sc[12]);
    qr[43] = k_f[43] * exp(-(-g_RT[2] - g_RT[8] + g_RT[12] + g_RT_qss[2])) *
             (sc[2] * sc[8]);
  }

  {
    // reaction 89: CH2O + CH3 <=> CH4 + HCO
    qf[44] = k_f[44] * (sc[12] * sc[20]);
    qr[44] =
      k_f[44] * exp(-(-g_RT[2] + g_RT[12] + g_RT[20] - g_RT_qss[2])) * (sc[2]);
  }

  {
    // reaction 90: CH2 + CH3 <=> C2H4 + H
    qf[45] = k_f[45] * (sc[12]);
    qr[45] = k_f[45] * exp(-(-g_RT[1] + g_RT[12] - g_RT[19] + g_RT_qss[0])) *
             (sc[1] * sc[19]);
  }

  {
    // reaction 91: 2 CH3 <=> C2H5 + H
    qf[46] = k_f[46] * (sc[12] * sc[12]);
    qr[46] =
      k_f[46] * exp(-(2.000000 * g_RT[12] - g_RT[19] - g_RT_qss[5])) * (sc[19]);
  }

  {
    // reaction 92: CH3 + HCCO <=> C2H4 + CO
    qf[47] = k_f[47] * (sc[12]);
    qr[47] = k_f[47] * exp(-(-g_RT[1] - g_RT[8] + g_RT[12] + g_RT_qss[6])) *
             (sc[1] * sc[8]);
  }

  {
    // reaction 93: CH3O + H <=> CH2O + H2
    qf[48] = k_f[48] * (sc[19]);
    qr[48] = k_f[48] * exp(-(-g_RT[6] + g_RT[19] - g_RT[20] + g_RT_qss[3])) *
             (sc[6] * sc[20]);
  }

  {
    // reaction 94: CH3O + H <=> CH3 + OH
    qf[49] = k_f[49] * (sc[19]);
    qr[49] = k_f[49] * exp(-(-g_RT[12] - g_RT[15] + g_RT[19] + g_RT_qss[3])) *
             (sc[12] * sc[15]);
  }

  {
    // reaction 95: CH3O + H <=> CH2* + H2O
    qf[50] = k_f[50] * (sc[19]);
    qr[50] = k_f[50] *
             exp(-(-g_RT[17] + g_RT[19] - g_RT_qss[1] + g_RT_qss[3])) *
             (sc[17]);
  }

  {
    // reaction 96: CH3O + OH <=> CH2O + H2O
    qf[51] = k_f[51] * (sc[15]);
    qr[51] = k_f[51] * exp(-(g_RT[15] - g_RT[17] - g_RT[20] + g_RT_qss[3])) *
             (sc[17] * sc[20]);
  }

  {
    // reaction 97: CH3O + O2 <=> CH2O + HO2
    qf[52] = k_f[52] * (sc[13]);
    qr[52] = k_f[52] * exp(-(g_RT[13] - g_RT[16] - g_RT[20] + g_RT_qss[3])) *
             (sc[16] * sc[20]);
  }

  {
    // reaction 101: CH2 + CH4 <=> 2 CH3
    qf[53] = k_f[53] * (sc[2]);
    qr[53] = k_f[53] * exp(-(g_RT[2] - 2.000000 * g_RT[12] + g_RT_qss[0])) *
             (sc[12] * sc[12]);
  }

  {
    // reaction 102: H + HCCO <=> CH2* + CO
    qf[54] = k_f[54] * (sc[19]);
    qr[54] = k_f[54] * exp(-(-g_RT[8] + g_RT[19] - g_RT_qss[1] + g_RT_qss[6])) *
             (sc[8]);
  }

  {
    // reaction 103: HCCO + O <=> 2 CO + H
    qf[55] = k_f[55] * (sc[14]);
    qr[55] = k_f[55] *
             exp(-(-2.000000 * g_RT[8] + g_RT[14] - g_RT[19] + g_RT_qss[6])) *
             (refCinv) * (sc[8] * sc[8] * sc[19]);
  }

  {
    // reaction 104: HCCO + O2 <=> 2 CO + OH
    qf[56] = k_f[56] * (sc[13]);
    qr[56] = k_f[56] *
             exp(-(-2.000000 * g_RT[8] + g_RT[13] - g_RT[15] + g_RT_qss[6])) *
             (refCinv) * (sc[8] * sc[8] * sc[15]);
  }

  {
    // reaction 105: CH2 + HCCO <=> C2H3 + CO
    // Remove forward reaction
    // qf[57] = k_f[57] * (1.0);
    qf[57] = 0.0;
    qr[57] = k_f[57] *
             exp(-(-g_RT[8] + g_RT_qss[0] - g_RT_qss[4] + g_RT_qss[6])) *
             (sc[8]);
  }

  {
    // reaction 106: C2H2 + O <=> CH2 + CO
    qf[58] = k_f[58] * (sc[10] * sc[14]);
    qr[58] =
      k_f[58] * exp(-(-g_RT[8] + g_RT[10] + g_RT[14] - g_RT_qss[0])) * (sc[8]);
  }

  {
    // reaction 107: C2H2 + O <=> H + HCCO
    qf[59] = k_f[59] * (sc[10] * sc[14]);
    qr[59] =
      k_f[59] * exp(-(g_RT[10] + g_RT[14] - g_RT[19] - g_RT_qss[6])) * (sc[19]);
  }

  {
    // reaction 110: C2H2 + HCO <=> C2H3 + CO
    qf[60] = k_f[60] * (sc[10]);
    qr[60] = k_f[60] * exp(-(-g_RT[8] + g_RT[10] + g_RT_qss[2] - g_RT_qss[4])) *
             (sc[8]);
  }

  {
    // reaction 111: C2H2 + CH2 <=> C3H3 + H
    qf[61] = k_f[61] * (sc[10]);
    qr[61] = k_f[61] * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[0])) *
             (sc[19] * sc[23]);
  }

  {
    // reaction 112: C2H2 + CH2* <=> C3H3 + H
    qf[62] = k_f[62] * (sc[10]);
    qr[62] = k_f[62] * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[1])) *
             (sc[19] * sc[23]);
  }

  {
    // reaction 114: CH2CO + H <=> H2 + HCCO
    qf[63] = k_f[63] * (sc[19] * sc[22]);
    qr[63] =
      k_f[63] * exp(-(-g_RT[6] + g_RT[19] + g_RT[22] - g_RT_qss[6])) * (sc[6]);
  }

  {
    // reaction 116: CH2CO + O <=> HCCO + OH
    qf[64] = k_f[64] * (sc[14] * sc[22]);
    qr[64] =
      k_f[64] * exp(-(g_RT[14] - g_RT[15] + g_RT[22] - g_RT_qss[6])) * (sc[15]);
  }

  {
    // reaction 117: CH2CO + O <=> CH2 + CO2
    qf[65] = k_f[65] * (sc[14] * sc[22]);
    qr[65] =
      k_f[65] * exp(-(g_RT[14] - g_RT[21] + g_RT[22] - g_RT_qss[0])) * (sc[21]);
  }

  {
    // reaction 118: CH2CO + OH <=> H2O + HCCO
    qf[66] = k_f[66] * (sc[15] * sc[22]);
    qr[66] =
      k_f[66] * exp(-(g_RT[15] - g_RT[17] + g_RT[22] - g_RT_qss[6])) * (sc[17]);
  }

  {
    // reaction 119: C2H3 + H <=> C2H2 + H2
    qf[67] = k_f[67] * (sc[19]);
    qr[67] = k_f[67] * exp(-(-g_RT[6] - g_RT[10] + g_RT[19] + g_RT_qss[4])) *
             (sc[6] * sc[10]);
  }

  {
    // reaction 120: C2H3 + O <=> CH2CO + H
    qf[68] = k_f[68] * (sc[14]);
    qr[68] = k_f[68] * exp(-(g_RT[14] - g_RT[19] - g_RT[22] + g_RT_qss[4])) *
             (sc[19] * sc[22]);
  }

  {
    // reaction 121: C2H3 + O <=> CH3 + CO
    qf[69] = k_f[69] * (sc[14]);
    qr[69] = k_f[69] * exp(-(-g_RT[8] - g_RT[12] + g_RT[14] + g_RT_qss[4])) *
             (sc[8] * sc[12]);
  }

  {
    // reaction 122: C2H3 + OH <=> C2H2 + H2O
    qf[70] = k_f[70] * (sc[15]);
    qr[70] = k_f[70] * exp(-(-g_RT[10] + g_RT[15] - g_RT[17] + g_RT_qss[4])) *
             (sc[10] * sc[17]);
  }

  {
    // reaction 123: C2H3 + O2 <=> C2H2 + HO2
    qf[71] = k_f[71] * (sc[13]);
    qr[71] = k_f[71] * exp(-(-g_RT[10] + g_RT[13] - g_RT[16] + g_RT_qss[4])) *
             (sc[10] * sc[16]);
  }

  {
    // reaction 124: C2H3 + O2 <=> CH2CHO + O
    qf[72] = k_f[72] * (sc[13]);
    qr[72] = k_f[72] * exp(-(g_RT[13] - g_RT[14] + g_RT_qss[4] - g_RT_qss[7])) *
             (sc[14]);
  }

  {
    // reaction 125: C2H3 + O2 <=> CH2O + HCO
    qf[73] = k_f[73] * (sc[13]);
    qr[73] = k_f[73] * exp(-(g_RT[13] - g_RT[20] - g_RT_qss[2] + g_RT_qss[4])) *
             (sc[20]);
  }

  {
    // reaction 126: C2H3 + CH3 <=> H + aC3H5
    qf[74] = k_f[74] * (sc[12]);
    qr[74] = k_f[74] * exp(-(g_RT[12] - g_RT[19] - g_RT[24] + g_RT_qss[4])) *
             (sc[19] * sc[24]);
  }

  {
    // reaction 127: CH2CHO <=> CH3 + CO
    qf[75] = k_f[75] * (1.0);
    qr[75] = k_f[75] * exp(-(-g_RT[8] - g_RT[12] + g_RT_qss[7])) * (refCinv) *
             (sc[8] * sc[12]);
  }

  {
    // reaction 128: CH2CHO + H <=> CH3 + HCO
    qf[76] = k_f[76] * (sc[19]);
    qr[76] = k_f[76] *
             exp(-(-g_RT[12] + g_RT[19] - g_RT_qss[2] + g_RT_qss[7])) *
             (sc[12]);
  }

  {
    // reaction 129: CH2CHO + H <=> CH2CO + H2
    qf[77] = k_f[77] * (sc[19]);
    qr[77] = k_f[77] * exp(-(-g_RT[6] + g_RT[19] - g_RT[22] + g_RT_qss[7])) *
             (sc[6] * sc[22]);
  }

  {
    // reaction 130: CH2CHO + O <=> CH2CO + OH
    qf[78] = k_f[78] * (sc[14]);
    qr[78] = k_f[78] * exp(-(g_RT[14] - g_RT[15] - g_RT[22] + g_RT_qss[7])) *
             (sc[15] * sc[22]);
  }

  {
    // reaction 131: CH2CHO + OH <=> CH2CO + H2O
    qf[79] = k_f[79] * (sc[15]);
    qr[79] = k_f[79] * exp(-(g_RT[15] - g_RT[17] - g_RT[22] + g_RT_qss[7])) *
             (sc[17] * sc[22]);
  }

  {
    // reaction 132: CH2CHO + O2 <=> CH2CO + HO2
    qf[80] = k_f[80] * (sc[13]);
    qr[80] = k_f[80] * exp(-(g_RT[13] - g_RT[16] - g_RT[22] + g_RT_qss[7])) *
             (sc[16] * sc[22]);
  }

  {
    // reaction 133: C2H4 + H <=> C2H3 + H2
    qf[81] = k_f[81] * (sc[1] * sc[19]);
    qr[81] =
      k_f[81] * exp(-(g_RT[1] - g_RT[6] + g_RT[19] - g_RT_qss[4])) * (sc[6]);
  }

  {
    // reaction 134: C2H4 + O <=> C2H3 + OH
    qf[82] = k_f[82] * (sc[1] * sc[14]);
    qr[82] =
      k_f[82] * exp(-(g_RT[1] + g_RT[14] - g_RT[15] - g_RT_qss[4])) * (sc[15]);
  }

  {
    // reaction 135: C2H4 + O <=> CH3 + HCO
    qf[83] = k_f[83] * (sc[1] * sc[14]);
    qr[83] =
      k_f[83] * exp(-(g_RT[1] - g_RT[12] + g_RT[14] - g_RT_qss[2])) * (sc[12]);
  }

  {
    // reaction 136: C2H4 + O <=> CH2 + CH2O
    qf[84] = k_f[84] * (sc[1] * sc[14]);
    qr[84] =
      k_f[84] * exp(-(g_RT[1] + g_RT[14] - g_RT[20] - g_RT_qss[0])) * (sc[20]);
  }

  {
    // reaction 137: C2H4 + OH <=> C2H3 + H2O
    qf[85] = k_f[85] * (sc[1] * sc[15]);
    qr[85] =
      k_f[85] * exp(-(g_RT[1] + g_RT[15] - g_RT[17] - g_RT_qss[4])) * (sc[17]);
  }

  {
    // reaction 138: C2H4 + HCO <=> C2H5 + CO
    qf[86] = k_f[86] * (sc[1]);
    qr[86] =
      k_f[86] * exp(-(g_RT[1] - g_RT[8] + g_RT_qss[2] - g_RT_qss[5])) * (sc[8]);
  }

  {
    // reaction 139: C2H4 + CH2 <=> H + aC3H5
    qf[87] = k_f[87] * (sc[1]);
    qr[87] = k_f[87] * exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[0])) *
             (sc[19] * sc[24]);
  }

  {
    // reaction 140: C2H4 + CH2* <=> H + aC3H5
    qf[88] = k_f[88] * (sc[1]);
    qr[88] = k_f[88] * exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[1])) *
             (sc[19] * sc[24]);
  }

  {
    // reaction 141: C2H4 + CH3 <=> C2H3 + CH4
    qf[89] = k_f[89] * (sc[1] * sc[12]);
    qr[89] =
      k_f[89] * exp(-(g_RT[1] - g_RT[2] + g_RT[12] - g_RT_qss[4])) * (sc[2]);
  }

  {
    // reaction 142: C2H4 + O2 <=> C2H3 + HO2
    qf[90] = k_f[90] * (sc[1] * sc[13]);
    qr[90] =
      k_f[90] * exp(-(g_RT[1] + g_RT[13] - g_RT[16] - g_RT_qss[4])) * (sc[16]);
  }

  {
    // reaction 143: C2H5 + O <=> CH2O + CH3
    qf[91] = k_f[91] * (sc[14]);
    qr[91] = k_f[91] * exp(-(-g_RT[12] + g_RT[14] - g_RT[20] + g_RT_qss[5])) *
             (sc[12] * sc[20]);
  }

  {
    // reaction 144: C2H5 + O2 <=> C2H4 + HO2
    qf[92] = k_f[92] * (sc[13]);
    qr[92] = k_f[92] * exp(-(-g_RT[1] + g_RT[13] - g_RT[16] + g_RT_qss[5])) *
             (sc[1] * sc[16]);
  }

  {
    // reaction 145: C2H5 + HO2 <=> CH2O + CH3 + OH
    qf[93] = k_f[93] * (sc[16]);
    qr[93] = k_f[93] *
             exp(-(-g_RT[12] - g_RT[15] + g_RT[16] - g_RT[20] + g_RT_qss[5])) *
             (refCinv) * (sc[12] * sc[15] * sc[20]);
  }

  {
    // reaction 146: C2H6 + H <=> C2H5 + H2
    qf[94] = k_f[94] * (sc[7] * sc[19]);
    qr[94] =
      k_f[94] * exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT_qss[5])) * (sc[6]);
  }

  {
    // reaction 147: C2H6 + O <=> C2H5 + OH
    qf[95] = k_f[95] * (sc[7] * sc[14]);
    qr[95] =
      k_f[95] * exp(-(g_RT[7] + g_RT[14] - g_RT[15] - g_RT_qss[5])) * (sc[15]);
  }

  {
    // reaction 148: C2H6 + OH <=> C2H5 + H2O
    qf[96] = k_f[96] * (sc[7] * sc[15]);
    qr[96] =
      k_f[96] * exp(-(g_RT[7] + g_RT[15] - g_RT[17] - g_RT_qss[5])) * (sc[17]);
  }

  {
    // reaction 149: C2H6 + CH3 <=> C2H5 + CH4
    qf[97] = k_f[97] * (sc[7] * sc[12]);
    qr[97] =
      k_f[97] * exp(-(-g_RT[2] + g_RT[7] + g_RT[12] - g_RT_qss[5])) * (sc[2]);
  }

  {
    // reaction 150: C3H3 + O2 <=> CH2CO + HCO
    qf[98] = k_f[98] * (sc[13] * sc[23]);
    qr[98] =
      k_f[98] * exp(-(g_RT[13] - g_RT[22] + g_RT[23] - g_RT_qss[2])) * (sc[22]);
  }

  {
    // reaction 151: C3H3 + HO2 <=> C2H3 + CO + OH
    qf[99] = k_f[99] * (sc[16] * sc[23]);
    qr[99] = k_f[99] *
             exp(-(-g_RT[8] - g_RT[15] + g_RT[16] + g_RT[23] - g_RT_qss[4])) *
             (refCinv) * (sc[8] * sc[15]);
  }

  {
    // reaction 153: 2 C3H3 => C6H5 + H
    qf[100] = k_f[100] * (sc[23] * sc[23]);
    qr[100] = 0.0;
  }

  {
    // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
    qf[101] = k_f[101] * (sc[16] * sc[24]);
    qr[101] = k_f[101] *
              exp(-(-g_RT[15] + g_RT[16] - g_RT[20] + g_RT[24] - g_RT_qss[4])) *
              (refCinv) * (sc[15] * sc[20]);
  }

  {
    // reaction 157: HCO + aC3H5 <=> C3H6 + CO
    qf[102] = k_f[102] * (sc[24]);
    qr[102] = k_f[102] * exp(-(-g_RT[3] - g_RT[8] + g_RT[24] + g_RT_qss[2])) *
              (sc[3] * sc[8]);
  }

  {
    // reaction 161: C3H6 + O => C2H5 + HCO
    qf[103] = k_f[103] * (sc[3] * sc[14]);
    qr[103] = 0.0;
  }

  {
    // reaction 165: C4H81 + H <=> C2H4 + C2H5
    qf[104] = k_f[104] * (sc[5] * sc[19]);
    qr[104] =
      k_f[104] * exp(-(-g_RT[1] + g_RT[5] + g_RT[19] - g_RT_qss[5])) * (sc[1]);
  }

  {
    // reaction 169: C6H5 + CH3 <=> C6H5CH3
    qf[105] = k_f[105] * (sc[12]);
    qr[105] =
      k_f[105] * exp(-(-g_RT[11] + g_RT[12] + g_RT_qss[8])) * (refC) * (sc[11]);
  }

  {
    // reaction 175: C6H5CH2 + H <=> C6H5 + CH3
    qf[106] = k_f[106] * (sc[19] * sc[27]);
    qr[106] = k_f[106] * exp(-(-g_RT[12] + g_RT[19] + g_RT[27] - g_RT_qss[8])) *
              (sc[12]);
  }

  {
    // reaction 178: C6H5 + HCO <=> C6H5CHO
    // Remove forward reaction
    // qf[107] = k_f[107] * (1.0);
    qf[107] = 0.0;
    qr[107] = k_f[107] * exp(-(-g_RT[29] + g_RT_qss[2] + g_RT_qss[8])) *
              (refC) * (sc[29]);
  }

  {
    // reaction 179: C6H5CHO <=> C6H5CO + H
    qf[108] = k_f[108] * (sc[29]);
    qr[108] = k_f[108] * exp(-(-g_RT[19] + g_RT[29] - g_RT_qss[9])) *
              (refCinv) * (sc[19]);
  }

  {
    // reaction 180: C6H5CHO + O2 <=> C6H5CO + HO2
    qf[109] = k_f[109] * (sc[13] * sc[29]);
    qr[109] = k_f[109] * exp(-(g_RT[13] - g_RT[16] + g_RT[29] - g_RT_qss[9])) *
              (sc[16]);
  }

  {
    // reaction 181: C6H5CHO + OH <=> C6H5CO + H2O
    qf[110] = k_f[110] * (sc[15] * sc[29]);
    qr[110] = k_f[110] * exp(-(g_RT[15] - g_RT[17] + g_RT[29] - g_RT_qss[9])) *
              (sc[17]);
  }

  {
    // reaction 182: C6H5CHO + H <=> C6H5CO + H2
    qf[111] = k_f[111] * (sc[19] * sc[29]);
    qr[111] =
      k_f[111] * exp(-(-g_RT[6] + g_RT[19] + g_RT[29] - g_RT_qss[9])) * (sc[6]);
  }

  {
    // reaction 183: C6H5CHO + H <=> C6H6 + HCO
    qf[112] = k_f[112] * (sc[19] * sc[29]);
    qr[112] =
      k_f[112] * exp(-(-g_RT[9] + g_RT[19] + g_RT[29] - g_RT_qss[2])) * (sc[9]);
  }

  {
    // reaction 184: C6H5CHO + O <=> C6H5CO + OH
    qf[113] = k_f[113] * (sc[14] * sc[29]);
    qr[113] = k_f[113] * exp(-(g_RT[14] - g_RT[15] + g_RT[29] - g_RT_qss[9])) *
              (sc[15]);
  }

  {
    // reaction 185: C6H5CHO + CH3 <=> C6H5CO + CH4
    qf[114] = k_f[114] * (sc[12] * sc[29]);
    qr[114] =
      k_f[114] * exp(-(-g_RT[2] + g_RT[12] + g_RT[29] - g_RT_qss[9])) * (sc[2]);
  }

  {
    // reaction 186: C6H5CO + H2O2 <=> C6H5CHO + HO2
    qf[115] = k_f[115] * (sc[18]);
    qr[115] = k_f[115] * exp(-(-g_RT[16] + g_RT[18] - g_RT[29] + g_RT_qss[9])) *
              (sc[16] * sc[29]);
  }

  {
    // reaction 187: C6H5CO <=> C6H5 + CO
    qf[116] = k_f[116] * (1.0);
    qr[116] = k_f[116] * exp(-(-g_RT[8] - g_RT_qss[8] + g_RT_qss[9])) *
              (refCinv) * (sc[8]);
  }

  {
    // reaction 188: C6H6 + OH <=> C6H5 + H2O
    qf[117] = k_f[117] * (sc[9] * sc[15]);
    qr[117] =
      k_f[117] * exp(-(g_RT[9] + g_RT[15] - g_RT[17] - g_RT_qss[8])) * (sc[17]);
  }

  {
    // reaction 190: C6H6 + O <=> C5H5 + HCO
    qf[118] = k_f[118] * (sc[9] * sc[14]);
    qr[118] =
      k_f[118] * exp(-(g_RT[9] + g_RT[14] - g_RT[26] - g_RT_qss[2])) * (sc[26]);
  }

  {
    // reaction 191: C6H5 + H2 <=> C6H6 + H
    qf[119] = k_f[119] * (sc[6]);
    qr[119] = k_f[119] * exp(-(g_RT[6] - g_RT[9] - g_RT[19] + g_RT_qss[8])) *
              (sc[9] * sc[19]);
  }

  {
    // reaction 192: C6H5 + O2 <=> C6H5O + O
    qf[120] = k_f[120] * (sc[13]);
    qr[120] = k_f[120] * exp(-(g_RT[13] - g_RT[14] - g_RT[28] + g_RT_qss[8])) *
              (sc[14] * sc[28]);
  }

  {
    // reaction 193: C6H5 + O <=> C5H5 + CO
    qf[121] = k_f[121] * (sc[14]);
    qr[121] = k_f[121] * exp(-(-g_RT[8] + g_RT[14] - g_RT[26] + g_RT_qss[8])) *
              (sc[8] * sc[26]);
  }

  {
    // reaction 194: C6H5 + OH <=> C6H5O + H
    qf[122] = k_f[122] * (sc[15]);
    qr[122] = k_f[122] * exp(-(g_RT[15] - g_RT[19] - g_RT[28] + g_RT_qss[8])) *
              (sc[19] * sc[28]);
  }

  {
    // reaction 195: C6H5 + HO2 <=> C6H6 + O2
    qf[123] = k_f[123] * (sc[16]);
    qr[123] = k_f[123] * exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT_qss[8])) *
              (sc[9] * sc[13]);
  }

  {
    // reaction 196: C6H5 + CH4 <=> C6H6 + CH3
    qf[124] = k_f[124] * (sc[2]);
    qr[124] = k_f[124] * exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[8])) *
              (sc[9] * sc[12]);
  }

  {
    // reaction 201: C5H4O + O <=> C3H3 + CO + HCO
    qf[125] = k_f[125] * (sc[14] * sc[25]);
    qr[125] = k_f[125] *
              exp(-(-g_RT[8] + g_RT[14] - g_RT[23] + g_RT[25] - g_RT_qss[2])) *
              (refCinv) * (sc[8] * sc[23]);
  }

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_k_f_qss(
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT,
  amrex::Real* k_f)
{
  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  k_f[0] = 1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  k_f[1] = 25000000000 * exp((-0.8) * logT);
  // reaction 5: CH2 + CO (+M) <=> CH2CO (+M)
  k_f[2] = 810000 * exp((0.5) * logT - (2269.50716277929) * invT);
  // reaction 6: CH2O + H (+M) <=> CH3O (+M)
  k_f[3] = 540000 * exp((0.454) * logT - (1308.36333109227) * invT);
  // reaction 9: C2H3 (+M) <=> C2H2 + H (+M)
  k_f[4] = 386000000 * exp((1.62) * logT - (18643.2716780664) * invT);
  // reaction 10: CH2CO + H (+M) <=> CH2CHO (+M)
  k_f[5] = 330000000 * exp((-0.06) * logT - (4277.34165934012) * invT);
  // reaction 11: C2H3 + H (+M) <=> C2H4 (+M)
  k_f[6] = 6080000 * exp((0.27) * logT - (140.900666425322) * invT);
  // reaction 12: C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f[7] = 25000000;
  // reaction 13: C2H4 + H (+M) <=> C2H5 (+M)
  k_f[8] = 1370 * exp((1.463) * logT - (681.858582165395) * invT);
  // reaction 14: C2H5 + H (+M) <=> C2H6 (+M)
  k_f[9] = 521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
  // reaction 15: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f[10] = 15000000;
  // reaction 19: C6H5 + H (+M) <=> C6H6 (+M)
  k_f[11] = 100000000;
  // reaction 26: HCO + M <=> CO + H + M
  k_f[12] = 187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  // reaction 27: HCO + H2O <=> CO + H + H2O
  k_f[13] = 2244000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  // reaction 55: H + HCO <=> CO + H2
  k_f[14] = 120000000;
  // reaction 56: HCO + O <=> CO + OH
  k_f[15] = 30000000;
  // reaction 57: HCO + O <=> CO2 + H
  k_f[16] = 30000000;
  // reaction 58: HCO + OH <=> CO + H2O
  k_f[17] = 30200000;
  // reaction 59: HCO + O2 <=> CO + HO2
  k_f[18] = 12040 * exp((0.807) * logT - (-365.838516040031) * invT);
  // reaction 60: CH2 + O <=> H + HCO
  k_f[19] = 80000000;
  // reaction 61: CH2 + OH <=> CH2O + H
  k_f[20] = 20000000;
  // reaction 62: CH2 + H2 <=> CH3 + H
  k_f[21] = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
  // reaction 63: CH2 + O2 <=> HCO + OH
  k_f[22] = 10600000 * exp(-(754.82499870708) * invT);
  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  k_f[23] = 2640000 * exp(-(754.82499870708) * invT);
  // reaction 65: CH2* + N2 <=> CH2 + N2
  k_f[24] = 15000000 * exp(-(301.929999482832) * invT);
  // reaction 66: CH2* + O <=> CO + H2
  k_f[25] = 15000000;
  // reaction 67: CH2* + OH <=> CH2O + H
  k_f[26] = 30000000;
  // reaction 68: CH2* + H2 <=> CH3 + H
  k_f[27] = 70000000;
  // reaction 69: CH2* + O2 <=> CO + H + OH
  k_f[28] = 28000000;
  // reaction 70: CH2* + O2 <=> CO + H2O
  k_f[29] = 12000000;
  // reaction 71: CH2* + H2O <=> CH2 + H2O
  k_f[30] = 30000000;
  // reaction 72: CH2* + CO <=> CH2 + CO
  k_f[31] = 9000000;
  // reaction 73: CH2* + CO2 <=> CH2 + CO2
  k_f[32] = 7000000;
  // reaction 74: CH2* + CO2 <=> CH2O + CO
  k_f[33] = 14000000;
  // reaction 75: CH2O + H <=> H2 + HCO
  k_f[34] = 23000 * exp((1.05) * logT - (1648.03458051046) * invT);
  // reaction 76: CH2O + O <=> HCO + OH
  k_f[35] = 39000000 * exp(-(1781.38699694871) * invT);
  // reaction 77: CH2O + OH <=> H2O + HCO
  k_f[36] = 3430 * exp((1.18) * logT - (-224.93784961471) * invT);
  // reaction 78: CH2O + O2 <=> HCO + HO2
  k_f[37] = 100000000 * exp(-(20128.6666321888) * invT);
  // reaction 79: CH2O + HO2 <=> H2O2 + HCO
  k_f[38] = 1000000 * exp(-(4025.73332643776) * invT);
  // reaction 81: CH3 + OH <=> CH2 + H2O
  k_f[39] = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
  // reaction 82: CH3 + OH <=> CH2* + H2O
  k_f[40] = 25010000;
  // reaction 83: CH3 + O2 <=> CH3O + O
  k_f[41] = 30830000 * exp(-(14492.6399751759) * invT);
  // reaction 86: CH3 + HO2 <=> CH3O + OH
  k_f[42] = 13400000;
  // reaction 88: CH3 + HCO <=> CH4 + CO
  k_f[43] = 8480000;
  // reaction 89: CH2O + CH3 <=> CH4 + HCO
  k_f[44] = 0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
  // reaction 90: CH2 + CH3 <=> C2H4 + H
  k_f[45] = 40000000;
  // reaction 91: 2 CH3 <=> C2H5 + H
  k_f[46] = 4990000 * exp((0.1) * logT - (5334.09665753003) * invT);
  // reaction 92: CH3 + HCCO <=> C2H4 + CO
  k_f[47] = 50000000;
  // reaction 93: CH3O + H <=> CH2O + H2
  k_f[48] = 20000000;
  // reaction 94: CH3O + H <=> CH3 + OH
  k_f[49] = 32000000;
  // reaction 95: CH3O + H <=> CH2* + H2O
  k_f[50] = 16000000;
  // reaction 96: CH3O + OH <=> CH2O + H2O
  k_f[51] = 5000000;
  // reaction 97: CH3O + O2 <=> CH2O + HO2
  k_f[52] = 4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
  // reaction 101: CH2 + CH4 <=> 2 CH3
  k_f[53] = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
  // reaction 102: H + HCCO <=> CH2* + CO
  k_f[54] = 100000000;
  // reaction 103: HCCO + O <=> 2 CO + H
  k_f[55] = 100000000;
  // reaction 104: HCCO + O2 <=> 2 CO + OH
  k_f[56] = 1600000 * exp(-(429.747032597231) * invT);
  // reaction 105: CH2 + HCCO <=> C2H3 + CO
  k_f[57] = 30000000;
  // reaction 106: C2H2 + O <=> CH2 + CO
  k_f[58] = 4.08 * exp((2) * logT - (956.111665028967) * invT);
  // reaction 107: C2H2 + O <=> H + HCCO
  k_f[59] = 16.32 * exp((2) * logT - (956.111665028967) * invT);
  // reaction 110: C2H2 + HCO <=> C2H3 + CO
  k_f[60] = 10 * exp((2) * logT - (3019.29999482832) * invT);
  // reaction 111: C2H2 + CH2 <=> C3H3 + H
  k_f[61] = 12000000 * exp(-(3331.29432762724) * invT);
  // reaction 112: C2H2 + CH2* <=> C3H3 + H
  k_f[62] = 20000000;
  // reaction 114: CH2CO + H <=> H2 + HCCO
  k_f[63] = 50000000 * exp(-(4025.73332643776) * invT);
  // reaction 116: CH2CO + O <=> HCCO + OH
  k_f[64] = 10000000 * exp(-(4025.73332643776) * invT);
  // reaction 117: CH2CO + O <=> CH2 + CO2
  k_f[65] = 1750000 * exp(-(679.342498836372) * invT);
  // reaction 118: CH2CO + OH <=> H2O + HCCO
  k_f[66] = 7500000 * exp(-(1006.43333160944) * invT);
  // reaction 119: C2H3 + H <=> C2H2 + H2
  k_f[67] = 90000000;
  // reaction 120: C2H3 + O <=> CH2CO + H
  k_f[68] = 48000000;
  // reaction 121: C2H3 + O <=> CH3 + CO
  k_f[69] = 48000000;
  // reaction 122: C2H3 + OH <=> C2H2 + H2O
  k_f[70] = 30110000;
  // reaction 123: C2H3 + O2 <=> C2H2 + HO2
  k_f[71] = 1.34 * exp((1.61) * logT - (-192.93326966953) * invT);
  // reaction 124: C2H3 + O2 <=> CH2CHO + O
  k_f[72] = 300000 * exp((0.29) * logT - (5.53538332385192) * invT);
  // reaction 125: C2H3 + O2 <=> CH2O + HCO
  k_f[73] = 46000000000 * exp((-1.39) * logT - (508.248832462767) * invT);
  // reaction 126: C2H3 + CH3 <=> H + aC3H5
  k_f[74] = 1.5e+18 * exp((-2.83) * logT - (9368.88788395227) * invT);
  // reaction 127: CH2CHO <=> CH3 + CO
  k_f[75] = 7.8e+41 * exp((-9.147) * logT - (23600.8616262414) * invT);
  // reaction 128: CH2CHO + H <=> CH3 + HCO
  k_f[76] = 90000000;
  // reaction 129: CH2CHO + H <=> CH2CO + H2
  k_f[77] = 20000000 * exp(-(2012.86666321888) * invT);
  // reaction 130: CH2CHO + O <=> CH2CO + OH
  k_f[78] = 20000000 * exp(-(2012.86666321888) * invT);
  // reaction 131: CH2CHO + OH <=> CH2CO + H2O
  k_f[79] = 10000000 * exp(-(1006.43333160944) * invT);
  // reaction 132: CH2CHO + O2 <=> CH2CO + HO2
  k_f[80] = 140000;
  // reaction 133: C2H4 + H <=> C2H3 + H2
  k_f[81] = 50.7 * exp((1.9) * logT - (6516.65582217112) * invT);
  // reaction 134: C2H4 + O <=> C2H3 + OH
  k_f[82] = 15.1 * exp((1.9) * logT - (1882.03033010965) * invT);
  // reaction 135: C2H4 + O <=> CH3 + HCO
  k_f[83] = 19.2 * exp((1.83) * logT - (110.707666477038) * invT);
  // reaction 136: C2H4 + O <=> CH2 + CH2O
  k_f[84] = 0.384 * exp((1.83) * logT - (110.707666477038) * invT);
  // reaction 137: C2H4 + OH <=> C2H3 + H2O
  k_f[85] = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
  // reaction 138: C2H4 + HCO <=> C2H5 + CO
  k_f[86] = 10 * exp((2) * logT - (4025.73332643776) * invT);
  // reaction 139: C2H4 + CH2 <=> H + aC3H5
  k_f[87] = 20000000 * exp(-(3019.29999482832) * invT);
  // reaction 140: C2H4 + CH2* <=> H + aC3H5
  k_f[88] = 50000000;
  // reaction 141: C2H4 + CH3 <=> C2H3 + CH4
  k_f[89] = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
  // reaction 142: C2H4 + O2 <=> C2H3 + HO2
  k_f[90] = 42200000 * exp(-(30595.573280927) * invT);
  // reaction 143: C2H5 + O <=> CH2O + CH3
  k_f[91] = 16040000;
  // reaction 144: C2H5 + O2 <=> C2H4 + HO2
  k_f[92] = 20000;
  // reaction 145: C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f[93] = 24000000;
  // reaction 146: C2H6 + H <=> C2H5 + H2
  k_f[94] = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
  // reaction 147: C2H6 + O <=> C2H5 + OH
  k_f[95] = 89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
  // reaction 148: C2H6 + OH <=> C2H5 + H2O
  k_f[96] = 3.54 * exp((2.12) * logT - (437.798499250106) * invT);
  // reaction 149: C2H6 + CH3 <=> C2H5 + CH4
  k_f[97] = 6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
  // reaction 150: C3H3 + O2 <=> CH2CO + HCO
  k_f[98] = 30000 * exp(-(1443.22539752794) * invT);
  // reaction 151: C3H3 + HO2 <=> C2H3 + CO + OH
  k_f[99] = 800000;
  // reaction 153: 2 C3H3 => C6H5 + H
  k_f[100] = 5000000;
  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f[101] = 6600000;
  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  k_f[102] = 60000000;
  // reaction 161: C3H6 + O => C2H5 + HCO
  k_f[103] = 35 * exp((1.65) * logT - (-489.126599162188) * invT);
  // reaction 165: C4H81 + H <=> C2H4 + C2H5
  k_f[104] = 1.6e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
  // reaction 169: C6H5 + CH3 <=> C6H5CH3
  k_f[105] = 13800000 * exp(-(23.1479666270171) * invT);
  // reaction 175: C6H5CH2 + H <=> C6H5 + CH3
  k_f[106] = 1.5e+60 * exp((-13.94) * logT - (32497.7322776688) * invT);
  // reaction 178: C6H5 + HCO <=> C6H5CHO
  k_f[107] = 10000000;
  // reaction 179: C6H5CHO <=> C6H5CO + H
  k_f[108] = 3.98e+15 * exp(-(43729.5282584301) * invT);
  // reaction 180: C6H5CHO + O2 <=> C6H5CO + HO2
  k_f[109] = 10200000 * exp(-(19600.2891330938) * invT);
  // reaction 181: C6H5CHO + OH <=> C6H5CO + H2O
  k_f[110] = 23500 * exp((0.73) * logT - (-558.570499043239) * invT);
  // reaction 182: C6H5CHO + H <=> C6H5CO + H2
  k_f[111] = 4100 * exp((1.16) * logT - (1207.71999793133) * invT);
  // reaction 183: C6H5CHO + H <=> C6H6 + HCO
  k_f[112] = 1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
  // reaction 184: C6H5CHO + O <=> C6H5CO + OH
  k_f[113] = 5800000 * exp(-(905.789998448495) * invT);
  // reaction 185: C6H5CHO + CH3 <=> C6H5CO + CH4
  k_f[114] = 2e-12 * exp((5.6) * logT - (1237.91299787961) * invT);
  // reaction 186: C6H5CO + H2O2 <=> C6H5CHO + HO2
  k_f[115] = 180000 * exp(-(4139.46029290962) * invT);
  // reaction 187: C6H5CO <=> C6H5 + CO
  k_f[116] = 527000000000000 * exp(-(14599.8251249923) * invT);
  // reaction 188: C6H6 + OH <=> C6H5 + H2O
  k_f[117] = 0.3985 * exp((2.286) * logT - (532.403232421393) * invT);
  // reaction 190: C6H6 + O <=> C5H5 + HCO
  k_f[118] = 13900000 * exp(-(2279.57149609538) * invT);
  // reaction 191: C6H5 + H2 <=> C6H6 + H
  k_f[119] = 0.05707 * exp((2.43) * logT - (3156.67814459301) * invT);
  // reaction 192: C6H5 + O2 <=> C6H5O + O
  k_f[120] = 26000000 * exp(-(3079.68599472488) * invT);
  // reaction 193: C6H5 + O <=> C5H5 + CO
  k_f[121] = 100000000;
  // reaction 194: C6H5 + OH <=> C6H5O + H
  k_f[122] = 30000000;
  // reaction 195: C6H5 + HO2 <=> C6H6 + O2
  k_f[123] = 1000000;
  // reaction 196: C6H5 + CH4 <=> C6H6 + CH3
  k_f[124] = 3.89e-09 * exp((4.57) * logT - (2644.90679546961) * invT);
  // reaction 201: C5H4O + O <=> C3H3 + CO + HCO
  k_f[125] = 620 * exp((1.45) * logT - (-431.75989926045) * invT);

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_sc_qss(amrex::Real* sc_qss, amrex::Real* qf_co, amrex::Real* qr_co)
{
  amrex::Real epsilon = 1e-12;

  // QSSA coupling between CH2CHO  C2H5  HCO  C2H3  HCCO  CH3O  CH2*  CH2
  // QSSA species 7: CH2CHO

  amrex::Real CH2CHO_num = epsilon + 1.0 * qf_co[5] + 1.0 * qr_co[75] +
                           1.0 * qr_co[77] + 1.0 * qr_co[78] + 1.0 * qr_co[79] +
                           1.0 * qr_co[80];
  amrex::Real CH2CHO_denom = epsilon - qr_co[5] - qr_co[72] - qf_co[75] -
                             qf_co[76] - qf_co[77] - qf_co[78] - qf_co[79] -
                             qf_co[80];
  amrex::Real CH2CHO_rhs = -CH2CHO_num / CH2CHO_denom;

  amrex::Real CH2CHO_HCO = (epsilon + 1.0 * qr_co[76]) / CH2CHO_denom;
  amrex::Real CH2CHO_C2H3 = (epsilon + 1.0 * qf_co[72]) / CH2CHO_denom;

  // QSSA species 5: C2H5

  amrex::Real C2H5_num = epsilon + 1.0 * qf_co[8] + 1.0 * qr_co[9] +
                         1.0 * qr_co[10] + 1.0 * qf_co[46] + 1.0 * qr_co[91] +
                         1.0 * qr_co[92] + 1.0 * qr_co[93] + 1.0 * qf_co[94] +
                         1.0 * qf_co[95] + 1.0 * qf_co[96] + 1.0 * qf_co[97] +
                         1.0 * qf_co[104];
  amrex::Real C2H5_denom = epsilon - qr_co[8] - qf_co[9] - qr_co[46] -
                           qr_co[86] - qf_co[91] - qf_co[92] - qf_co[93] -
                           qr_co[94] - qr_co[95] - qr_co[96] - qr_co[97] -
                           qr_co[104];
  amrex::Real C2H5_rhs = -C2H5_num / C2H5_denom;

  amrex::Real C2H5_HCO = (epsilon + 1.0 * qf_co[86]) / C2H5_denom;

  // QSSA species 2: HCO

  amrex::Real HCO_num =
    epsilon + 1.0 * qr_co[0] + 1.0 * qr_co[12] + 1.0 * qr_co[13] +
    1.0 * qr_co[14] + 1.0 * qr_co[15] + 1.0 * qr_co[16] + 1.0 * qr_co[17] +
    1.0 * qr_co[18] + 1.0 * qf_co[34] + 1.0 * qf_co[35] + 1.0 * qf_co[36] +
    1.0 * qf_co[37] + 1.0 * qf_co[38] + 1.0 * qr_co[43] + 1.0 * qf_co[44] +
    1.0 * qf_co[83] + 1.0 * qf_co[98] + 1.0 * qr_co[102] + 1.0 * qr_co[107] +
    1.0 * qf_co[112] + 1.0 * qf_co[118] + 1.0 * qf_co[125];
  amrex::Real HCO_denom =
    epsilon - qf_co[0] - qf_co[12] - qf_co[13] - qf_co[14] - qf_co[15] -
    qf_co[16] - qf_co[17] - qf_co[18] - qr_co[19] - qr_co[22] - qr_co[34] -
    qr_co[35] - qr_co[36] - qr_co[37] - qr_co[38] - qf_co[43] - qr_co[44] -
    qf_co[60] - qr_co[73] - qr_co[76] - qr_co[83] - qf_co[86] - qr_co[98] -
    qf_co[102] - qr_co[112] - qr_co[118] - qr_co[125];
  amrex::Real HCO_rhs = -HCO_num / HCO_denom;

  amrex::Real HCO_CH2CHO = (epsilon + 1.0 * qf_co[76]) / HCO_denom;
  amrex::Real HCO_C2H5 = (epsilon + 1.0 * qr_co[86]) / HCO_denom;
  amrex::Real HCO_C2H3 =
    (epsilon + 1.0 * qr_co[60] + 1.0 * qf_co[73]) / HCO_denom;
  amrex::Real HCO_CH2 =
    (epsilon + 1.0 * qf_co[19] + 1.0 * qf_co[22]) / HCO_denom;

  // QSSA species 4: C2H3

  amrex::Real C2H3_num = epsilon + 1.0 * qr_co[4] + 1.0 * qr_co[6] +
                         1.0 * qr_co[7] + 1.0 * qr_co[10] + 1.0 * qr_co[67] +
                         1.0 * qr_co[68] + 1.0 * qr_co[69] + 1.0 * qr_co[70] +
                         1.0 * qr_co[71] + 1.0 * qr_co[74] + 1.0 * qf_co[81] +
                         1.0 * qf_co[82] + 1.0 * qf_co[85] + 1.0 * qf_co[89] +
                         1.0 * qf_co[90] + 1.0 * qf_co[99] + 1.0 * qf_co[101];
  amrex::Real C2H3_denom =
    epsilon - qf_co[4] - qf_co[6] - qf_co[7] - qr_co[57] - qr_co[60] -
    qf_co[67] - qf_co[68] - qf_co[69] - qf_co[70] - qf_co[71] - qf_co[72] -
    qf_co[73] - qf_co[74] - qr_co[81] - qr_co[82] - qr_co[85] - qr_co[89] -
    qr_co[90] - qr_co[99] - qr_co[101];
  amrex::Real C2H3_rhs = -C2H3_num / C2H3_denom;

  amrex::Real C2H3_CH2CHO = (epsilon + 1.0 * qr_co[72]) / C2H3_denom;
  amrex::Real C2H3_HCO =
    (epsilon + 1.0 * qf_co[60] + 1.0 * qr_co[73]) / C2H3_denom;
  amrex::Real C2H3_HCCO = (epsilon + 1.0 * qf_co[57]) / C2H3_denom;

  // QSSA species 6: HCCO

  amrex::Real HCCO_num = epsilon + 1.0 * qr_co[47] + 1.0 * qr_co[55] +
                         1.0 * qr_co[56] + 1.0 * qf_co[59] + 1.0 * qf_co[63] +
                         1.0 * qf_co[64] + 1.0 * qf_co[66];
  amrex::Real HCCO_denom = epsilon - qf_co[47] - qf_co[54] - qf_co[55] -
                           qf_co[56] - qf_co[57] - qr_co[59] - qr_co[63] -
                           qr_co[64] - qr_co[66];
  amrex::Real HCCO_rhs = -HCCO_num / HCCO_denom;

  amrex::Real HCCO_C2H3 = (epsilon + 1.0 * qr_co[57]) / HCCO_denom;
  amrex::Real HCCO_CH2D = (epsilon + 1.0 * qr_co[54]) / HCCO_denom;

  // QSSA species 3: CH3O

  amrex::Real CH3O_num = epsilon + 1.0 * qf_co[3] + 1.0 * qf_co[41] +
                         1.0 * qf_co[42] + 1.0 * qr_co[48] + 1.0 * qr_co[49] +
                         1.0 * qr_co[51] + 1.0 * qr_co[52];
  amrex::Real CH3O_denom = epsilon - qr_co[3] - qr_co[41] - qr_co[42] -
                           qf_co[48] - qf_co[49] - qf_co[50] - qf_co[51] -
                           qf_co[52];
  amrex::Real CH3O_rhs = -CH3O_num / CH3O_denom;

  amrex::Real CH3O_CH2D = (epsilon + 1.0 * qr_co[50]) / CH3O_denom;

  // QSSA species 1: CH2*

  amrex::Real CH2D_num = epsilon + 1.0 * qr_co[25] + 1.0 * qr_co[26] +
                         1.0 * qr_co[27] + 1.0 * qr_co[28] + 1.0 * qr_co[29] +
                         1.0 * qr_co[33] + 1.0 * qf_co[40] + 1.0 * qr_co[62] +
                         1.0 * qr_co[88];
  amrex::Real CH2D_denom = epsilon - qf_co[24] - qf_co[25] - qf_co[26] -
                           qf_co[27] - qf_co[28] - qf_co[29] - qf_co[30] -
                           qf_co[31] - qf_co[32] - qf_co[33] - qr_co[40] -
                           qr_co[50] - qr_co[54] - qf_co[62] - qf_co[88];
  amrex::Real CH2D_rhs = -CH2D_num / CH2D_denom;

  amrex::Real CH2D_HCCO = (epsilon + 1.0 * qf_co[54]) / CH2D_denom;
  amrex::Real CH2D_CH3O = (epsilon + 1.0 * qf_co[50]) / CH2D_denom;
  amrex::Real CH2D_CH2 = (epsilon + 1.0 * qr_co[24] + 1.0 * qr_co[30] +
                          1.0 * qr_co[31] + 1.0 * qr_co[32]) /
                         CH2D_denom;

  // QSSA species 0: CH2

  amrex::Real CH2_num = epsilon + 1.0 * qr_co[1] + 1.0 * qr_co[2] +
                        1.0 * qr_co[20] + 1.0 * qr_co[21] + 1.0 * qr_co[23] +
                        1.0 * qf_co[39] + 1.0 * qr_co[45] + 1.0 * qr_co[53] +
                        1.0 * qr_co[57] + 1.0 * qf_co[58] + 1.0 * qr_co[61] +
                        1.0 * qf_co[65] + 1.0 * qf_co[84] + 1.0 * qr_co[87];
  amrex::Real CH2_denom = epsilon - qf_co[1] - qf_co[2] - qf_co[19] -
                          qf_co[20] - qf_co[21] - qf_co[22] - qf_co[23] -
                          qr_co[24] - qr_co[30] - qr_co[31] - qr_co[32] -
                          qr_co[39] - qf_co[45] - qf_co[53] - qr_co[58] -
                          qf_co[61] - qr_co[65] - qr_co[84] - qf_co[87];
  amrex::Real CH2_rhs = -CH2_num / CH2_denom;

  amrex::Real CH2_HCO =
    (epsilon + 1.0 * qr_co[19] + 1.0 * qr_co[22]) / CH2_denom;
  amrex::Real CH2_CH2D = (epsilon + 1.0 * qf_co[24] + 1.0 * qf_co[30] +
                          1.0 * qf_co[31] + 1.0 * qf_co[32]) /
                         CH2_denom;

  // Putting it all together
  amrex::Real H_0 = HCO_CH2CHO;
  amrex::Real H_1 = C2H3_CH2CHO;
  amrex::Real H_2 = HCO_C2H5;
  amrex::Real H_3 =
    (C2H3_HCO - CH2CHO_HCO * H_1) / ((1 - CH2CHO_HCO * H_0) - C2H5_HCO * H_2);
  amrex::Real H_4 = CH2_HCO / ((1 - CH2CHO_HCO * H_0) - C2H5_HCO * H_2);
  amrex::Real H_5 = HCCO_C2H3 / ((1 - CH2CHO_C2H3 * H_1) -
                                 (HCO_C2H3 - CH2CHO_C2H3 * H_0) * H_3);
  amrex::Real H_6 = CH2D_HCCO / (1 - C2H3_HCCO * H_5);
  amrex::Real H_7 = CH2D_CH3O;
  amrex::Real H_8 = CH2_CH2D / ((1 - HCCO_CH2D * H_6) - CH3O_CH2D * H_7);
  sc_qss[0] =
    ((CH2_rhs - ((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) * H_4) -
     ((CH2D_rhs -
       (HCCO_rhs - ((C2H3_rhs - CH2CHO_rhs * H_1) -
                    ((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) * H_3) *
                     H_5) *
         H_6) -
      CH3O_rhs * H_7) *
       H_8) /
    ((1 - HCO_CH2 * H_4) - CH2D_CH2 * H_8);

  sc_qss[1] =
    (((CH2D_rhs -
       (HCCO_rhs - ((C2H3_rhs - CH2CHO_rhs * H_1) -
                    ((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) * H_3) *
                     H_5) *
         H_6) -
      CH3O_rhs * H_7) -
     (CH2D_CH2 * sc_qss[0])) /
    ((1 - HCCO_CH2D * H_6) - CH3O_CH2D * H_7);

  sc_qss[3] = CH3O_rhs - (+CH3O_CH2D * sc_qss[1]);

  sc_qss[6] =
    ((HCCO_rhs - ((C2H3_rhs - CH2CHO_rhs * H_1) -
                  ((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) * H_3) *
                   H_5) -
     (+HCCO_CH2D * sc_qss[1])) /
    (1 - C2H3_HCCO * H_5);

  sc_qss[4] = (((C2H3_rhs - CH2CHO_rhs * H_1) -
                ((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) * H_3) -
               (+C2H3_HCCO * sc_qss[6])) /
              ((1 - CH2CHO_C2H3 * H_1) - (HCO_C2H3 - CH2CHO_C2H3 * H_0) * H_3);

  sc_qss[2] =
    (((HCO_rhs - CH2CHO_rhs * H_0) - C2H5_rhs * H_2) -
     (HCO_CH2 * sc_qss[0] + (HCO_C2H3 - CH2CHO_C2H3 * H_0) * sc_qss[4])) /
    ((1 - CH2CHO_HCO * H_0) - C2H5_HCO * H_2);

  sc_qss[5] = C2H5_rhs - (+C2H5_HCO * sc_qss[2]);

  sc_qss[7] = CH2CHO_rhs - (+CH2CHO_C2H3 * sc_qss[4] + CH2CHO_HCO * sc_qss[2]);

  // QSSA coupling between C6H5CO  C6H5
  // QSSA species 9: C6H5CO

  amrex::Real C6H5CO_num =
    epsilon + 1.0 * qf_co[108] + 1.0 * qf_co[109] + 1.0 * qf_co[110] +
    1.0 * qf_co[111] + 1.0 * qf_co[113] + 1.0 * qf_co[114] + 1.0 * qr_co[115];
  amrex::Real C6H5CO_denom = epsilon - qr_co[108] - qr_co[109] - qr_co[110] -
                             qr_co[111] - qr_co[113] - qr_co[114] - qf_co[115] -
                             qf_co[116];
  amrex::Real C6H5CO_rhs = -C6H5CO_num / C6H5CO_denom;

  amrex::Real C6H5CO_C6H5 = (epsilon + 1.0 * qr_co[116]) / C6H5CO_denom;

  // QSSA species 8: C6H5

  amrex::Real C6H5_num =
    epsilon + 1.0 * qr_co[11] + 1.0 * qf_co[100] + 1.0 * qr_co[105] +
    1.0 * qf_co[106] + 1.0 * qr_co[107] + 1.0 * qf_co[117] + 1.0 * qr_co[119] +
    1.0 * qr_co[120] + 1.0 * qr_co[121] + 1.0 * qr_co[122] + 1.0 * qr_co[123] +
    1.0 * qr_co[124];
  amrex::Real C6H5_denom = epsilon - qf_co[11] - qf_co[105] - qr_co[106] -
                           qr_co[116] - qr_co[117] - qf_co[119] - qf_co[120] -
                           qf_co[121] - qf_co[122] - qf_co[123] - qf_co[124];
  amrex::Real C6H5_rhs = -C6H5_num / C6H5_denom;

  amrex::Real C6H5_C6H5CO = (epsilon + 1.0 * qf_co[116]) / C6H5_denom;

  // Putting it all together
  H_0 = C6H5_C6H5CO;
  sc_qss[8] = (C6H5_rhs - C6H5CO_rhs * H_0) / (1 - C6H5CO_C6H5 * H_0);

  sc_qss[9] = C6H5CO_rhs - (C6H5CO_C6H5 * sc_qss[8]);

  return;
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  const amrex::Real* sc,
  const amrex::Real* sc_qss,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{

  // reaction 0: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[13] * sc[19];
  qr[0] = sc[16];

  // reaction 1: 2 OH (+M) <=> H2O2 (+M)
  qf[1] = (sc[15] * sc[15]);
  qr[1] = sc[18];

  // reaction 2: CO + H2 (+M) <=> CH2O (+M)
  qf[2] = sc[6] * sc[8];
  qr[2] = sc[20];

  // reaction 3: H + HCO (+M) <=> CH2O (+M)
  qf[3] = sc[19] * sc_qss[2];
  qr[3] = sc[20];

  // reaction 4: CH2 + H (+M) <=> CH3 (+M)
  qf[4] = sc[19] * sc_qss[0];
  qr[4] = sc[12];

  // reaction 5: CH2 + CO (+M) <=> CH2CO (+M)
  qf[5] = sc[8] * sc_qss[0];
  qr[5] = sc[22];

  // reaction 6: CH2O + H (+M) <=> CH3O (+M)
  qf[6] = sc[19] * sc[20];
  qr[6] = sc_qss[3];

  // reaction 7: CH3 + H (+M) <=> CH4 (+M)
  qf[7] = sc[12] * sc[19];
  qr[7] = sc[2];

  // reaction 8: 2 CH3 (+M) <=> C2H6 (+M)
  qf[8] = (sc[12] * sc[12]);
  qr[8] = sc[7];

  // reaction 9: C2H3 (+M) <=> C2H2 + H (+M)
  qf[9] = sc_qss[4];
  qr[9] = sc[10] * sc[19];

  // reaction 10: CH2CO + H (+M) <=> CH2CHO (+M)
  qf[10] = sc[19] * sc[22];
  qr[10] = sc_qss[7];

  // reaction 11: C2H3 + H (+M) <=> C2H4 (+M)
  qf[11] = sc[19] * sc_qss[4];
  qr[11] = sc[1];

  // reaction 12: C2H3 + CH3 (+M) <=> C3H6 (+M)
  qf[12] = sc[12] * sc_qss[4];
  qr[12] = sc[3];

  // reaction 13: C2H4 + H (+M) <=> C2H5 (+M)
  qf[13] = sc[1] * sc[19];
  qr[13] = sc_qss[5];

  // reaction 14: C2H5 + H (+M) <=> C2H6 (+M)
  qf[14] = sc[19] * sc_qss[5];
  qr[14] = sc[7];

  // reaction 15: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  qf[15] = sc_qss[4] * sc_qss[5];
  qr[15] = sc[5];

  // reaction 16: H + aC3H5 (+M) <=> C3H6 (+M)
  qf[16] = sc[19] * sc[24];
  qr[16] = sc[3];

  // reaction 17: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  qf[17] = sc[12] * sc[24];
  qr[17] = sc[5];

  // reaction 18: C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  qf[18] = sc[19] * sc[27];
  qr[18] = sc[11];

  // reaction 19: C6H5 + H (+M) <=> C6H6 (+M)
  qf[19] = sc[19] * sc_qss[8];
  qr[19] = sc[9];

  // reaction 20: CO + O (+M) <=> CO2 (+M)
  qf[20] = sc[8] * sc[14];
  qr[20] = sc[21];

  // reaction 21: 2 H + M <=> H2 + M
  qf[21] = (sc[19] * sc[19]);
  qr[21] = sc[6];

  // reaction 22: 2 H + H2O <=> H2 + H2O
  qf[22] = sc[17] * (sc[19] * sc[19]);
  qr[22] = sc[6] * sc[17];

  // reaction 23: H + OH + M <=> H2O + M
  qf[23] = sc[15] * sc[19];
  qr[23] = sc[17];

  // reaction 24: H + O + M <=> OH + M
  qf[24] = sc[14] * sc[19];
  qr[24] = sc[15];

  // reaction 25: 2 O + M <=> O2 + M
  qf[25] = (sc[14] * sc[14]);
  qr[25] = sc[13];

  // reaction 26: HCO + M <=> CO + H + M
  qf[26] = sc_qss[2];
  qr[26] = sc[8] * sc[19];

  // reaction 27: HCO + H2O <=> CO + H + H2O
  qf[27] = sc[17] * sc_qss[2];
  qr[27] = sc[8] * sc[17] * sc[19];

  // reaction 28: POSF10325 => 1.74268 C2H4 + 0.819058 C3H6 + 0.261401 C4H81 +
  // 0.163333 C6H5CH3 + 0.17 C6H6 + 1.5 CH3 + 0.5 H + 0.0871338 iC4H8
  qf[28] = sc[0];
  qr[28] = 0.0;

  // reaction 29: H + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186 C4H81
  // + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2 +
  // 0.0797288 iC4H8
  qf[29] = sc[0] * sc[19];
  qr[29] = 0.0;

  // reaction 30: CH3 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 1.45 CH4 + 0.3 H +
  // 0.0797288 iC4H8
  qf[30] = sc[0] * sc[12];
  qr[30] = 0.0;

  // reaction 31: OH + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O +
  // 0.0797288 iC4H8
  qf[31] = sc[0] * sc[15];
  qr[31] = 0.0;

  // reaction 32: O2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + HO2 +
  // 0.0797288 iC4H8
  qf[32] = sc[0] * sc[13];
  qr[32] = 0.0;

  // reaction 33: HO2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O2
  // + 0.0797288 iC4H8
  qf[33] = sc[0] * sc[16];
  qr[33] = 0.0;

  // reaction 34: O + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186 C4H81
  // + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + OH +
  // 0.0797288 iC4H8
  qf[34] = sc[0] * sc[14];
  qr[34] = 0.0;

  // reaction 35: H + O2 <=> O + OH
  qf[35] = sc[13] * sc[19];
  qr[35] = sc[14] * sc[15];

  // reaction 36: H2 + O <=> H + OH
  qf[36] = sc[6] * sc[14];
  qr[36] = sc[15] * sc[19];

  // reaction 37: H2 + OH <=> H + H2O
  qf[37] = sc[6] * sc[15];
  qr[37] = sc[17] * sc[19];

  // reaction 38: 2 OH <=> H2O + O
  qf[38] = (sc[15] * sc[15]);
  qr[38] = sc[14] * sc[17];

  // reaction 39: H2 + O2 <=> H + HO2
  qf[39] = sc[6] * sc[13];
  qr[39] = sc[16] * sc[19];

  // reaction 40: H + HO2 <=> 2 OH
  qf[40] = sc[16] * sc[19];
  qr[40] = (sc[15] * sc[15]);

  // reaction 41: HO2 + O <=> O2 + OH
  qf[41] = sc[14] * sc[16];
  qr[41] = sc[13] * sc[15];

  // reaction 42: 2 HO2 <=> H2O2 + O2
  qf[42] = (sc[16] * sc[16]);
  qr[42] = sc[13] * sc[18];

  // reaction 43: 2 HO2 <=> H2O2 + O2
  qf[43] = (sc[16] * sc[16]);
  qr[43] = sc[13] * sc[18];

  // reaction 44: HO2 + OH <=> H2O + O2
  qf[44] = sc[15] * sc[16];
  qr[44] = sc[13] * sc[17];

  // reaction 45: HO2 + OH <=> H2O + O2
  qf[45] = sc[15] * sc[16];
  qr[45] = sc[13] * sc[17];

  // reaction 46: HO2 + OH <=> H2O + O2
  qf[46] = sc[15] * sc[16];
  qr[46] = sc[13] * sc[17];

  // reaction 47: H + H2O2 <=> H2 + HO2
  qf[47] = sc[18] * sc[19];
  qr[47] = sc[6] * sc[16];

  // reaction 48: H + H2O2 <=> H2O + OH
  qf[48] = sc[18] * sc[19];
  qr[48] = sc[15] * sc[17];

  // reaction 49: H2O2 + O <=> HO2 + OH
  qf[49] = sc[14] * sc[18];
  qr[49] = sc[15] * sc[16];

  // reaction 50: H2O2 + OH <=> H2O + HO2
  qf[50] = sc[15] * sc[18];
  qr[50] = sc[16] * sc[17];

  // reaction 51: CO + OH <=> CO2 + H
  qf[51] = sc[8] * sc[15];
  qr[51] = sc[19] * sc[21];

  // reaction 52: CO + OH <=> CO2 + H
  qf[52] = sc[8] * sc[15];
  qr[52] = sc[19] * sc[21];

  // reaction 53: CO + O2 <=> CO2 + O
  qf[53] = sc[8] * sc[13];
  qr[53] = sc[14] * sc[21];

  // reaction 54: CO + HO2 <=> CO2 + OH
  qf[54] = sc[8] * sc[16];
  qr[54] = sc[15] * sc[21];

  // reaction 55: H + HCO <=> CO + H2
  qf[55] = sc[19] * sc_qss[2];
  qr[55] = sc[6] * sc[8];

  // reaction 56: HCO + O <=> CO + OH
  qf[56] = sc[14] * sc_qss[2];
  qr[56] = sc[8] * sc[15];

  // reaction 57: HCO + O <=> CO2 + H
  qf[57] = sc[14] * sc_qss[2];
  qr[57] = sc[19] * sc[21];

  // reaction 58: HCO + OH <=> CO + H2O
  qf[58] = sc[15] * sc_qss[2];
  qr[58] = sc[8] * sc[17];

  // reaction 59: HCO + O2 <=> CO + HO2
  qf[59] = sc[13] * sc_qss[2];
  qr[59] = sc[8] * sc[16];

  // reaction 60: CH2 + O <=> H + HCO
  qf[60] = sc[14] * sc_qss[0];
  qr[60] = sc[19] * sc_qss[2];

  // reaction 61: CH2 + OH <=> CH2O + H
  qf[61] = sc[15] * sc_qss[0];
  qr[61] = sc[19] * sc[20];

  // reaction 62: CH2 + H2 <=> CH3 + H
  qf[62] = sc[6] * sc_qss[0];
  qr[62] = sc[12] * sc[19];

  // reaction 63: CH2 + O2 <=> HCO + OH
  qf[63] = sc[13] * sc_qss[0];
  qr[63] = sc[15] * sc_qss[2];

  // reaction 64: CH2 + O2 <=> CO2 + 2 H
  qf[64] = sc[13] * sc_qss[0];
  qr[64] = (sc[19] * sc[19]) * sc[21];

  // reaction 65: CH2* + N2 <=> CH2 + N2
  qf[65] = sc[30] * sc_qss[1];
  qr[65] = sc[30] * sc_qss[0];

  // reaction 66: CH2* + O <=> CO + H2
  qf[66] = sc[14] * sc_qss[1];
  qr[66] = sc[6] * sc[8];

  // reaction 67: CH2* + OH <=> CH2O + H
  qf[67] = sc[15] * sc_qss[1];
  qr[67] = sc[19] * sc[20];

  // reaction 68: CH2* + H2 <=> CH3 + H
  qf[68] = sc[6] * sc_qss[1];
  qr[68] = sc[12] * sc[19];

  // reaction 69: CH2* + O2 <=> CO + H + OH
  qf[69] = sc[13] * sc_qss[1];
  qr[69] = sc[8] * sc[15] * sc[19];

  // reaction 70: CH2* + O2 <=> CO + H2O
  qf[70] = sc[13] * sc_qss[1];
  qr[70] = sc[8] * sc[17];

  // reaction 71: CH2* + H2O <=> CH2 + H2O
  qf[71] = sc[17] * sc_qss[1];
  qr[71] = sc[17] * sc_qss[0];

  // reaction 72: CH2* + CO <=> CH2 + CO
  qf[72] = sc[8] * sc_qss[1];
  qr[72] = sc[8] * sc_qss[0];

  // reaction 73: CH2* + CO2 <=> CH2 + CO2
  qf[73] = sc[21] * sc_qss[1];
  qr[73] = sc[21] * sc_qss[0];

  // reaction 74: CH2* + CO2 <=> CH2O + CO
  qf[74] = sc[21] * sc_qss[1];
  qr[74] = sc[8] * sc[20];

  // reaction 75: CH2O + H <=> H2 + HCO
  qf[75] = sc[19] * sc[20];
  qr[75] = sc[6] * sc_qss[2];

  // reaction 76: CH2O + O <=> HCO + OH
  qf[76] = sc[14] * sc[20];
  qr[76] = sc[15] * sc_qss[2];

  // reaction 77: CH2O + OH <=> H2O + HCO
  qf[77] = sc[15] * sc[20];
  qr[77] = sc[17] * sc_qss[2];

  // reaction 78: CH2O + O2 <=> HCO + HO2
  qf[78] = sc[13] * sc[20];
  qr[78] = sc[16] * sc_qss[2];

  // reaction 79: CH2O + HO2 <=> H2O2 + HCO
  qf[79] = sc[16] * sc[20];
  qr[79] = sc[18] * sc_qss[2];

  // reaction 80: CH3 + O <=> CH2O + H
  qf[80] = sc[12] * sc[14];
  qr[80] = sc[19] * sc[20];

  // reaction 81: CH3 + OH <=> CH2 + H2O
  qf[81] = sc[12] * sc[15];
  qr[81] = sc[17] * sc_qss[0];

  // reaction 82: CH3 + OH <=> CH2* + H2O
  qf[82] = sc[12] * sc[15];
  qr[82] = sc[17] * sc_qss[1];

  // reaction 83: CH3 + O2 <=> CH3O + O
  qf[83] = sc[12] * sc[13];
  qr[83] = sc[14] * sc_qss[3];

  // reaction 84: CH3 + O2 <=> CH2O + OH
  qf[84] = sc[12] * sc[13];
  qr[84] = sc[15] * sc[20];

  // reaction 85: CH3 + HO2 <=> CH4 + O2
  qf[85] = sc[12] * sc[16];
  qr[85] = sc[2] * sc[13];

  // reaction 86: CH3 + HO2 <=> CH3O + OH
  qf[86] = sc[12] * sc[16];
  qr[86] = sc[15] * sc_qss[3];

  // reaction 87: CH3 + H2O2 <=> CH4 + HO2
  qf[87] = sc[12] * sc[18];
  qr[87] = sc[2] * sc[16];

  // reaction 88: CH3 + HCO <=> CH4 + CO
  qf[88] = sc[12] * sc_qss[2];
  qr[88] = sc[2] * sc[8];

  // reaction 89: CH2O + CH3 <=> CH4 + HCO
  qf[89] = sc[12] * sc[20];
  qr[89] = sc[2] * sc_qss[2];

  // reaction 90: CH2 + CH3 <=> C2H4 + H
  qf[90] = sc[12] * sc_qss[0];
  qr[90] = sc[1] * sc[19];

  // reaction 91: 2 CH3 <=> C2H5 + H
  qf[91] = (sc[12] * sc[12]);
  qr[91] = sc[19] * sc_qss[5];

  // reaction 92: CH3 + HCCO <=> C2H4 + CO
  qf[92] = sc[12] * sc_qss[6];
  qr[92] = sc[1] * sc[8];

  // reaction 93: CH3O + H <=> CH2O + H2
  qf[93] = sc[19] * sc_qss[3];
  qr[93] = sc[6] * sc[20];

  // reaction 94: CH3O + H <=> CH3 + OH
  qf[94] = sc[19] * sc_qss[3];
  qr[94] = sc[12] * sc[15];

  // reaction 95: CH3O + H <=> CH2* + H2O
  qf[95] = sc[19] * sc_qss[3];
  qr[95] = sc[17] * sc_qss[1];

  // reaction 96: CH3O + OH <=> CH2O + H2O
  qf[96] = sc[15] * sc_qss[3];
  qr[96] = sc[17] * sc[20];

  // reaction 97: CH3O + O2 <=> CH2O + HO2
  qf[97] = sc[13] * sc_qss[3];
  qr[97] = sc[16] * sc[20];

  // reaction 98: CH4 + H <=> CH3 + H2
  qf[98] = sc[2] * sc[19];
  qr[98] = sc[6] * sc[12];

  // reaction 99: CH4 + O <=> CH3 + OH
  qf[99] = sc[2] * sc[14];
  qr[99] = sc[12] * sc[15];

  // reaction 100: CH4 + OH <=> CH3 + H2O
  qf[100] = sc[2] * sc[15];
  qr[100] = sc[12] * sc[17];

  // reaction 101: CH2 + CH4 <=> 2 CH3
  qf[101] = sc[2] * sc_qss[0];
  qr[101] = (sc[12] * sc[12]);

  // reaction 102: H + HCCO <=> CH2* + CO
  qf[102] = sc[19] * sc_qss[6];
  qr[102] = sc[8] * sc_qss[1];

  // reaction 103: HCCO + O <=> 2 CO + H
  qf[103] = sc[14] * sc_qss[6];
  qr[103] = (sc[8] * sc[8]) * sc[19];

  // reaction 104: HCCO + O2 <=> 2 CO + OH
  qf[104] = sc[13] * sc_qss[6];
  qr[104] = (sc[8] * sc[8]) * sc[15];

  // reaction 105: CH2 + HCCO <=> C2H3 + CO
  qf[105] = sc_qss[0] * sc_qss[6];
  qr[105] = sc[8] * sc_qss[4];

  // reaction 106: C2H2 + O <=> CH2 + CO
  qf[106] = sc[10] * sc[14];
  qr[106] = sc[8] * sc_qss[0];

  // reaction 107: C2H2 + O <=> H + HCCO
  qf[107] = sc[10] * sc[14];
  qr[107] = sc[19] * sc_qss[6];

  // reaction 108: C2H2 + OH <=> CH2CO + H
  qf[108] = sc[10] * sc[15];
  qr[108] = sc[19] * sc[22];

  // reaction 109: C2H2 + OH <=> CH3 + CO
  qf[109] = sc[10] * sc[15];
  qr[109] = sc[8] * sc[12];

  // reaction 110: C2H2 + HCO <=> C2H3 + CO
  qf[110] = sc[10] * sc_qss[2];
  qr[110] = sc[8] * sc_qss[4];

  // reaction 111: C2H2 + CH2 <=> C3H3 + H
  qf[111] = sc[10] * sc_qss[0];
  qr[111] = sc[19] * sc[23];

  // reaction 112: C2H2 + CH2* <=> C3H3 + H
  qf[112] = sc[10] * sc_qss[1];
  qr[112] = sc[19] * sc[23];

  // reaction 113: C2H2 + CH3 <=> aC3H5
  qf[113] = sc[10] * sc[12];
  qr[113] = sc[24];

  // reaction 114: CH2CO + H <=> H2 + HCCO
  qf[114] = sc[19] * sc[22];
  qr[114] = sc[6] * sc_qss[6];

  // reaction 115: CH2CO + H <=> CH3 + CO
  qf[115] = sc[19] * sc[22];
  qr[115] = sc[8] * sc[12];

  // reaction 116: CH2CO + O <=> HCCO + OH
  qf[116] = sc[14] * sc[22];
  qr[116] = sc[15] * sc_qss[6];

  // reaction 117: CH2CO + O <=> CH2 + CO2
  qf[117] = sc[14] * sc[22];
  qr[117] = sc[21] * sc_qss[0];

  // reaction 118: CH2CO + OH <=> H2O + HCCO
  qf[118] = sc[15] * sc[22];
  qr[118] = sc[17] * sc_qss[6];

  // reaction 119: C2H3 + H <=> C2H2 + H2
  qf[119] = sc[19] * sc_qss[4];
  qr[119] = sc[6] * sc[10];

  // reaction 120: C2H3 + O <=> CH2CO + H
  qf[120] = sc[14] * sc_qss[4];
  qr[120] = sc[19] * sc[22];

  // reaction 121: C2H3 + O <=> CH3 + CO
  qf[121] = sc[14] * sc_qss[4];
  qr[121] = sc[8] * sc[12];

  // reaction 122: C2H3 + OH <=> C2H2 + H2O
  qf[122] = sc[15] * sc_qss[4];
  qr[122] = sc[10] * sc[17];

  // reaction 123: C2H3 + O2 <=> C2H2 + HO2
  qf[123] = sc[13] * sc_qss[4];
  qr[123] = sc[10] * sc[16];

  // reaction 124: C2H3 + O2 <=> CH2CHO + O
  qf[124] = sc[13] * sc_qss[4];
  qr[124] = sc[14] * sc_qss[7];

  // reaction 125: C2H3 + O2 <=> CH2O + HCO
  qf[125] = sc[13] * sc_qss[4];
  qr[125] = sc[20] * sc_qss[2];

  // reaction 126: C2H3 + CH3 <=> H + aC3H5
  qf[126] = sc[12] * sc_qss[4];
  qr[126] = sc[19] * sc[24];

  // reaction 127: CH2CHO <=> CH3 + CO
  qf[127] = sc_qss[7];
  qr[127] = sc[8] * sc[12];

  // reaction 128: CH2CHO + H <=> CH3 + HCO
  qf[128] = sc[19] * sc_qss[7];
  qr[128] = sc[12] * sc_qss[2];

  // reaction 129: CH2CHO + H <=> CH2CO + H2
  qf[129] = sc[19] * sc_qss[7];
  qr[129] = sc[6] * sc[22];

  // reaction 130: CH2CHO + O <=> CH2CO + OH
  qf[130] = sc[14] * sc_qss[7];
  qr[130] = sc[15] * sc[22];

  // reaction 131: CH2CHO + OH <=> CH2CO + H2O
  qf[131] = sc[15] * sc_qss[7];
  qr[131] = sc[17] * sc[22];

  // reaction 132: CH2CHO + O2 <=> CH2CO + HO2
  qf[132] = sc[13] * sc_qss[7];
  qr[132] = sc[16] * sc[22];

  // reaction 133: C2H4 + H <=> C2H3 + H2
  qf[133] = sc[1] * sc[19];
  qr[133] = sc[6] * sc_qss[4];

  // reaction 134: C2H4 + O <=> C2H3 + OH
  qf[134] = sc[1] * sc[14];
  qr[134] = sc[15] * sc_qss[4];

  // reaction 135: C2H4 + O <=> CH3 + HCO
  qf[135] = sc[1] * sc[14];
  qr[135] = sc[12] * sc_qss[2];

  // reaction 136: C2H4 + O <=> CH2 + CH2O
  qf[136] = sc[1] * sc[14];
  qr[136] = sc[20] * sc_qss[0];

  // reaction 137: C2H4 + OH <=> C2H3 + H2O
  qf[137] = sc[1] * sc[15];
  qr[137] = sc[17] * sc_qss[4];

  // reaction 138: C2H4 + HCO <=> C2H5 + CO
  qf[138] = sc[1] * sc_qss[2];
  qr[138] = sc[8] * sc_qss[5];

  // reaction 139: C2H4 + CH2 <=> H + aC3H5
  qf[139] = sc[1] * sc_qss[0];
  qr[139] = sc[19] * sc[24];

  // reaction 140: C2H4 + CH2* <=> H + aC3H5
  qf[140] = sc[1] * sc_qss[1];
  qr[140] = sc[19] * sc[24];

  // reaction 141: C2H4 + CH3 <=> C2H3 + CH4
  qf[141] = sc[1] * sc[12];
  qr[141] = sc[2] * sc_qss[4];

  // reaction 142: C2H4 + O2 <=> C2H3 + HO2
  qf[142] = sc[1] * sc[13];
  qr[142] = sc[16] * sc_qss[4];

  // reaction 143: C2H5 + O <=> CH2O + CH3
  qf[143] = sc[14] * sc_qss[5];
  qr[143] = sc[12] * sc[20];

  // reaction 144: C2H5 + O2 <=> C2H4 + HO2
  qf[144] = sc[13] * sc_qss[5];
  qr[144] = sc[1] * sc[16];

  // reaction 145: C2H5 + HO2 <=> CH2O + CH3 + OH
  qf[145] = sc[16] * sc_qss[5];
  qr[145] = sc[12] * sc[15] * sc[20];

  // reaction 146: C2H6 + H <=> C2H5 + H2
  qf[146] = sc[7] * sc[19];
  qr[146] = sc[6] * sc_qss[5];

  // reaction 147: C2H6 + O <=> C2H5 + OH
  qf[147] = sc[7] * sc[14];
  qr[147] = sc[15] * sc_qss[5];

  // reaction 148: C2H6 + OH <=> C2H5 + H2O
  qf[148] = sc[7] * sc[15];
  qr[148] = sc[17] * sc_qss[5];

  // reaction 149: C2H6 + CH3 <=> C2H5 + CH4
  qf[149] = sc[7] * sc[12];
  qr[149] = sc[2] * sc_qss[5];

  // reaction 150: C3H3 + O2 <=> CH2CO + HCO
  qf[150] = sc[13] * sc[23];
  qr[150] = sc[22] * sc_qss[2];

  // reaction 151: C3H3 + HO2 <=> C2H3 + CO + OH
  qf[151] = sc[16] * sc[23];
  qr[151] = sc[8] * sc[15] * sc_qss[4];

  // reaction 152: C2H2 + C3H3 <=> C5H5
  qf[152] = sc[10] * sc[23];
  qr[152] = sc[26];

  // reaction 153: 2 C3H3 => C6H5 + H
  qf[153] = (sc[23] * sc[23]);
  qr[153] = 0.0;

  // reaction 154: 2 C3H3 => C6H6
  qf[154] = (sc[23] * sc[23]);
  qr[154] = 0.0;

  // reaction 155: HO2 + aC3H5 <=> C3H6 + O2
  qf[155] = sc[16] * sc[24];
  qr[155] = sc[3] * sc[13];

  // reaction 156: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  qf[156] = sc[16] * sc[24];
  qr[156] = sc[15] * sc[20] * sc_qss[4];

  // reaction 157: HCO + aC3H5 <=> C3H6 + CO
  qf[157] = sc[24] * sc_qss[2];
  qr[157] = sc[3] * sc[8];

  // reaction 158: C3H6 + H <=> C2H4 + CH3
  qf[158] = sc[3] * sc[19];
  qr[158] = sc[1] * sc[12];

  // reaction 159: C3H6 + H <=> H2 + aC3H5
  qf[159] = sc[3] * sc[19];
  qr[159] = sc[6] * sc[24];

  // reaction 160: C3H6 + O <=> CH2CO + CH3 + H
  qf[160] = sc[3] * sc[14];
  qr[160] = sc[12] * sc[19] * sc[22];

  // reaction 161: C3H6 + O => C2H5 + HCO
  qf[161] = sc[3] * sc[14];
  qr[161] = 0.0;

  // reaction 162: C3H6 + O <=> OH + aC3H5
  qf[162] = sc[3] * sc[14];
  qr[162] = sc[15] * sc[24];

  // reaction 163: C3H6 + OH <=> H2O + aC3H5
  qf[163] = sc[3] * sc[15];
  qr[163] = sc[17] * sc[24];

  // reaction 164: C3H6 + CH3 <=> CH4 + aC3H5
  qf[164] = sc[3] * sc[12];
  qr[164] = sc[2] * sc[24];

  // reaction 165: C4H81 + H <=> C2H4 + C2H5
  qf[165] = sc[5] * sc[19];
  qr[165] = sc[1] * sc_qss[5];

  // reaction 166: C4H81 + H <=> C3H6 + CH3
  qf[166] = sc[5] * sc[19];
  qr[166] = sc[3] * sc[12];

  // reaction 167: H + iC4H8 <=> C3H6 + CH3
  qf[167] = sc[4] * sc[19];
  qr[167] = sc[3] * sc[12];

  // reaction 168: O + iC4H8 <=> CH2CO + 2 CH3
  qf[168] = sc[4] * sc[14];
  qr[168] = (sc[12] * sc[12]) * sc[22];

  // reaction 169: C6H5 + CH3 <=> C6H5CH3
  qf[169] = sc[12] * sc_qss[8];
  qr[169] = sc[11];

  // reaction 170: C6H5CH3 + O2 <=> C6H5CH2 + HO2
  qf[170] = sc[11] * sc[13];
  qr[170] = sc[16] * sc[27];

  // reaction 171: C6H5CH3 + OH <=> C6H5CH2 + H2O
  qf[171] = sc[11] * sc[15];
  qr[171] = sc[17] * sc[27];

  // reaction 172: C6H5CH3 + H <=> C6H5CH2 + H2
  qf[172] = sc[11] * sc[19];
  qr[172] = sc[6] * sc[27];

  // reaction 173: C6H5CH3 + H <=> C6H6 + CH3
  qf[173] = sc[11] * sc[19];
  qr[173] = sc[9] * sc[12];

  // reaction 174: C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  qf[174] = sc[11] * sc[12];
  qr[174] = sc[2] * sc[27];

  // reaction 175: C6H5CH2 + H <=> C6H5 + CH3
  qf[175] = sc[19] * sc[27];
  qr[175] = sc[12] * sc_qss[8];

  // reaction 176: C6H5CH2 + O <=> C6H5CHO + H
  qf[176] = sc[14] * sc[27];
  qr[176] = sc[19] * sc[29];

  // reaction 177: C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  qf[177] = sc[16] * sc[27];
  qr[177] = sc[15] * sc[19] * sc[29];

  // reaction 178: C6H5 + HCO <=> C6H5CHO
  qf[178] = sc_qss[2] * sc_qss[8];
  qr[178] = sc[29];

  // reaction 179: C6H5CHO <=> C6H5CO + H
  qf[179] = sc[29];
  qr[179] = sc[19] * sc_qss[9];

  // reaction 180: C6H5CHO + O2 <=> C6H5CO + HO2
  qf[180] = sc[13] * sc[29];
  qr[180] = sc[16] * sc_qss[9];

  // reaction 181: C6H5CHO + OH <=> C6H5CO + H2O
  qf[181] = sc[15] * sc[29];
  qr[181] = sc[17] * sc_qss[9];

  // reaction 182: C6H5CHO + H <=> C6H5CO + H2
  qf[182] = sc[19] * sc[29];
  qr[182] = sc[6] * sc_qss[9];

  // reaction 183: C6H5CHO + H <=> C6H6 + HCO
  qf[183] = sc[19] * sc[29];
  qr[183] = sc[9] * sc_qss[2];

  // reaction 184: C6H5CHO + O <=> C6H5CO + OH
  qf[184] = sc[14] * sc[29];
  qr[184] = sc[15] * sc_qss[9];

  // reaction 185: C6H5CHO + CH3 <=> C6H5CO + CH4
  qf[185] = sc[12] * sc[29];
  qr[185] = sc[2] * sc_qss[9];

  // reaction 186: C6H5CO + H2O2 <=> C6H5CHO + HO2
  qf[186] = sc[18] * sc_qss[9];
  qr[186] = sc[16] * sc[29];

  // reaction 187: C6H5CO <=> C6H5 + CO
  qf[187] = sc_qss[9];
  qr[187] = sc[8] * sc_qss[8];

  // reaction 188: C6H6 + OH <=> C6H5 + H2O
  qf[188] = sc[9] * sc[15];
  qr[188] = sc[17] * sc_qss[8];

  // reaction 189: C6H6 + O <=> C6H5O + H
  qf[189] = sc[9] * sc[14];
  qr[189] = sc[19] * sc[28];

  // reaction 190: C6H6 + O <=> C5H5 + HCO
  qf[190] = sc[9] * sc[14];
  qr[190] = sc[26] * sc_qss[2];

  // reaction 191: C6H5 + H2 <=> C6H6 + H
  qf[191] = sc[6] * sc_qss[8];
  qr[191] = sc[9] * sc[19];

  // reaction 192: C6H5 + O2 <=> C6H5O + O
  qf[192] = sc[13] * sc_qss[8];
  qr[192] = sc[14] * sc[28];

  // reaction 193: C6H5 + O <=> C5H5 + CO
  qf[193] = sc[14] * sc_qss[8];
  qr[193] = sc[8] * sc[26];

  // reaction 194: C6H5 + OH <=> C6H5O + H
  qf[194] = sc[15] * sc_qss[8];
  qr[194] = sc[19] * sc[28];

  // reaction 195: C6H5 + HO2 <=> C6H6 + O2
  qf[195] = sc[16] * sc_qss[8];
  qr[195] = sc[9] * sc[13];

  // reaction 196: C6H5 + CH4 <=> C6H6 + CH3
  qf[196] = sc[2] * sc_qss[8];
  qr[196] = sc[9] * sc[12];

  // reaction 197: C6H5O <=> C5H5 + CO
  qf[197] = sc[28];
  qr[197] = sc[8] * sc[26];

  // reaction 198: C5H5 + O <=> C5H4O + H
  qf[198] = sc[14] * sc[26];
  qr[198] = sc[19] * sc[25];

  // reaction 199: C5H5 + O2 <=> C5H4O + OH
  qf[199] = sc[13] * sc[26];
  qr[199] = sc[15] * sc[25];

  // reaction 200: C5H4O <=> 2 C2H2 + CO
  qf[200] = sc[25];
  qr[200] = sc[8] * (sc[10] * sc[10]);

  // reaction 201: C5H4O + O <=> C3H3 + CO + HCO
  qf[201] = sc[14] * sc[25];
  qr[201] = sc[8] * sc[23] * sc_qss[2];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 31; ++i) {
    mixture += sc[i];
  }

  for (int i = 0; i < 10; ++i) {
    mixture += sc_qss[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[31];
  gibbs(g_RT, T);
  amrex::Real g_RT_qss[10];
  gibbs_qss(g_RT_qss, T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  H + O2 (+M) <=> HO2 (+M)
  k_f = 5116000 * exp((0.44) * logT);
  Corr = mixture + (0.0900000000000001) * sc[8] + (-0.15) * sc[13] +
         (10.89) * sc[17] + (1.18) * sc[21];
  redP = Corr / k_f * 63280000 * exp(-1.4 * logT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10((0.5) * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[19])) * (refC);
  // reaction 1:  2 OH (+M) <=> H2O2 (+M)
  k_f = 111000000 * exp((-0.37) * logT);
  Corr = mixture + sc[6] + (0.75) * sc[8] + (5) * sc[17] + (2.6) * sc[21];
  redP = Corr / k_f * 201000 * exp(-0.584 * logT - (-1153.87581469022) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-T * 0.0106382978723404) +
    0.7346 * exp(-T * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(2.000000 * g_RT[15] - g_RT[18])) * (refC);
  // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * logT - (40056.0465980557) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 5.07e+15 * exp(-3.42 * logT - (42446.3257606281) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-T * 0.0050761421319797) +
    0.932 * exp(-T * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[20])) * (refC);
  // reaction 3:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP =
    Corr / k_f * 1350000000000 * exp(-2.57 * logT - (717.083748771726) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-T * 0.003690036900369) +
    0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[19] - g_RT[20] + g_RT_qss[2])) * (refC);
  // reaction 4:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * logT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 3.2e+15 * exp(-3.14 * logT - (618.956498939805) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-T * 0.0128205128205128) +
    0.68 * exp(-T * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(-g_RT[12] + g_RT[19] + g_RT_qss[0])) * (refC);
  // reaction 5:  CH2 + CO (+M) <=> CH2CO (+M)
  k_f = 810000 * exp((0.5) * logT - (2269.50716277929) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 2.69e+21 * exp(-5.11 * logT - (3570.32224388449) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4093) * exp(-T * 0.00363636363636364) +
    0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[8] - g_RT[22] + g_RT_qss[0])) * (refC);
  // reaction 6:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * logT - (1308.36333109227) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 2.2e+18 * exp(-4.8 * logT - (2797.88466187424) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-T * 0.0106382978723404) +
    0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[19] + g_RT[20] - g_RT_qss[3])) * (refC);
  // reaction 7:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * logT - (192.731983003208) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 2.477e+21 * exp(-4.76 * logT - (1227.84866456352) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-T * 0.0135135135135135) +
    0.783 * exp(-T * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[19])) * (refC);
  // reaction 8:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 21200000000 * exp((-0.97) * logT - (311.994332798926) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 1.77e+38 * exp(-9.67 * logT - (3130.00766130536) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4675) * exp(-T * 0.00662251655629139) +
    0.5325 * exp(-T * 0.000963391136801541) + exp(-4970 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(-g_RT[7] + 2.000000 * g_RT[12])) * (refC);
  // reaction 9:  C2H3 (+M) <=> C2H2 + H (+M)
  k_f = 386000000 * exp((1.62) * logT - (18643.2716780664) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
         (2) * sc[10] + (5) * sc[17] + sc[21];
  redP = Corr / k_f * 2.565e+21 * exp(-3.4 * logT - (18014.5125184767) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.9816) * exp(-T * 0.000185745862510913) +
    1.9816 * exp(-T * 0.232926488400261) + exp(0.0795 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(-g_RT[10] - g_RT[19] + g_RT_qss[4])) * (refCinv);
  // reaction 10:  CH2CO + H (+M) <=> CH2CHO (+M)
  k_f = 330000000 * exp((-0.06) * logT - (4277.34165934012) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
         (2) * sc[10] + (5) * sc[17] + sc[21];
  redP = Corr / k_f * 3.8e+29 * exp(-7.64 * logT - (5988.27832307616) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.663) * exp(-T * 0.000585823081429408) + 0.337 * exp(-T * 0.0003125) +
    exp(-4131 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[19] + g_RT[22] - g_RT_qss[7])) * (refC);
  // reaction 11:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * logT - (140.900666425322) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
         (2) * sc[10] + (5) * sc[17] + sc[21];
  redP = Corr / k_f * 1.4e+18 * exp(-3.86 * logT - (1670.67933047167) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-T * 0.00481927710843374) +
    0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(-g_RT[1] + g_RT[19] + g_RT_qss[4])) * (refC);
  // reaction 12:  C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f = 25000000;
  Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
         (2) * sc[10] + (5) * sc[17] + sc[21];
  redP = Corr / k_f * 4.27e+46 * exp(-11.94 * logT - (4916.32618157895) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.825) * exp(-T * 0.000745934656124124) +
    0.175 * exp(-T * 1.66666666666667e-05) + exp(-10139.8 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(-g_RT[3] + g_RT[12] + g_RT_qss[4])) * (refC);
  // reaction 13:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 1370 * exp((1.463) * logT - (681.858582165395) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 2.9e+27 * exp(-6.642 * logT - (2903.05694502743) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.569) * exp(-T * -0.000109325461900077) +
    1.569 * exp(-T * 0.00334448160535117) + exp(-152.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(g_RT[1] + g_RT[19] - g_RT_qss[5])) * (refC);
  // reaction 14:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 1.99e+29 * exp(-7.08 * logT - (3364.00341090455) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
    exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(-g_RT[7] + g_RT[19] + g_RT_qss[5])) * (refC);
  // reaction 15:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f = 15000000;
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 1.55e+44 * exp(-11.79 * logT - (4521.1501339225) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.802) * exp(-T * 0.000439000834101585) +
    0.198 * exp(-T * 1.66666666666667e-05) + exp(-5723.2 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(-g_RT[5] + g_RT_qss[4] + g_RT_qss[5])) * (refC);
  // reaction 16:  H + aC3H5 (+M) <=> C3H6 (+M)
  k_f = 200000000;
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 1.33e+48 * exp(-12 * logT - (3003.09641818941) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.98) * exp(-T * 0.000911909538573774) +
    0.02 * exp(-T * 0.000911909538573774) + exp(-6859.5 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(-g_RT[3] + g_RT[19] + g_RT[24])) * (refC);
  // reaction 17:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
  k_f = 100000000 * exp((-0.32) * logT - (-131.993731440578) * invT);
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 3.91e+48 * exp(-12.81 * logT - (3145.1041612795) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.896) * exp(-T * 0.00062266500622665) +
    0.104 * exp(-T * 1.66666666666667e-05) + exp(-6118.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[12] + g_RT[24])) * (refC);
  // reaction 18:  C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  k_f = 100000000;
  Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] + (5) * sc[17] +
         sc[21];
  redP = Corr / k_f * 1.1e+91 * exp(-24.63 * logT - (7341.93115409086) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.569) * exp(-T * 0.00261096605744125) +
    0.431 * exp(-T * 0.00657894736842105) + exp(-4730 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(-g_RT[11] + g_RT[19] + g_RT[27])) * (refC);
  // reaction 19:  C6H5 + H (+M) <=> C6H6 (+M)
  k_f = 100000000;
  Corr = mixture + sc[2] + sc[6] + (0.5) * sc[8] + (5) * sc[17] + sc[21];
  redP = Corr / k_f * 6.6e+63 * exp(-16.3 * logT - (3522.51666063304) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(+exp(-T * 0.0017096939647803) + exp(-6113 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT_qss[8])) * (refC);
  // reaction 20:  CO + O (+M) <=> CO2 (+M)
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  Corr = mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
  redP =
    Corr / k_f * 1173000000000 * exp(-2.79 * logT - (2108.98104638758) * invT);
  Corr = redP / (1. + redP);
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[8] + g_RT[14] - g_RT[21])) * (refC);
  // reaction 21:  2 H + M <=> H2 + M
  k_f = 1780000 * exp((-1) * logT);
  Corr = mixture + (-1) * sc[6] + (-1) * sc[17] + (-1) * sc[21];
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC);
  // reaction 22:  2 H + H2O <=> H2 + H2O
  k_f = 56240000 * exp((-1.25) * logT);
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC);
  // reaction 23:  H + OH + M <=> H2O + M
  k_f = 44000000000 * exp((-2) * logT);
  Corr = mixture + sc[6] + (0.75) * sc[8] + (5.3) * sc[17] + (2.6) * sc[21];
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[19])) * (refC);
  // reaction 24:  H + O + M <=> OH + M
  k_f = 9428000 * exp((-1) * logT);
  Corr = mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[19])) * (refC);
  // reaction 25:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * logT);
  Corr =
    mixture + (1.4) * sc[6] + (0.75) * sc[8] + (14.4) * sc[17] + (2.6) * sc[21];
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[14])) * (refC);
  // reaction 26:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  Corr = mixture + sc[6] + (0.75) * sc[8] + (-1) * sc[17] + (2.6) * sc[21];
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) * (refCinv);
  // reaction 27:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * logT - (8554.68331868023) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) * (refCinv);
  // reaction 28:  POSF10325 => 1.74268 C2H4 + 0.819058 C3H6 + 0.261401 C4H81 +
  // 0.163333 C6H5CH3 + 0.17 C6H6 + 1.5 CH3 + 0.5 H + 0.0871338 iC4H8
  k_f = 1.53e+27 * exp((-2.58) * logT - (44130.5919410765) * invT);
  qf[28] *= k_f;
  qr[28] *=
    k_f *
    exp(
      -(g_RT[0] - 1.742680 * g_RT[1] - 0.819058 * g_RT[3] - 0.087134 * g_RT[4] -
        0.261401 * g_RT[5] - 0.170000 * g_RT[9] - 0.163333 * g_RT[11] -
        1.500000 * g_RT[12] - 0.500000 * g_RT[19])) *
    (pow(std::max(refCinv, 0.0), 4.243606));
  // reaction 29:  H + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2 +
  // 0.0797288 iC4H8
  k_f = 7.66e-08 * exp((4.76) * logT - (651.615260550532) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 0.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                g_RT[6] - 0.246500 * g_RT[9] - 0.236833 * g_RT[11] -
                0.700000 * g_RT[12] + g_RT[19] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 30:  CH3 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 1.45 CH4 + 0.3 H +
  // 0.0797288 iC4H8
  k_f = 3.17e-13 * exp((5.95) * logT - (2892.69068171185) * invT);
  qf[30] *= k_f;
  qr[30] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 1.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                0.246500 * g_RT[9] - 0.236833 * g_RT[11] + g_RT[12] -
                0.700000 * g_RT[12] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 31:  OH + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O +
  // 0.0797288 iC4H8
  k_f = 2960 * exp((1.02) * logT - (107.285793149566) * invT);
  qf[31] *= k_f;
  qr[31] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 0.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                0.246500 * g_RT[9] - 0.236833 * g_RT[11] - 0.700000 * g_RT[12] +
                g_RT[15] - g_RT[17] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 32:  O2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + HO2 +
  // 0.0797288 iC4H8
  k_f = 1780000000 * exp((0.06) * logT - (22409.5464916153) * invT);
  qf[32] *= k_f;
  qr[32] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 0.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                0.246500 * g_RT[9] - 0.236833 * g_RT[11] - 0.700000 * g_RT[12] +
                g_RT[13] - g_RT[16] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 33:  HO2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O2
  // + 0.0797288 iC4H8
  k_f = 0.0698 * exp((2.94) * logT - (6446.20548895846) * invT);
  qf[33] *= k_f;
  qr[33] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 0.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                0.246500 * g_RT[9] - 0.236833 * g_RT[11] - 0.700000 * g_RT[12] +
                g_RT[16] - g_RT[18] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 34:  O + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
  // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + OH +
  // 0.0797288 iC4H8
  k_f = 8.94e-05 * exp((3.86) * logT - (385.011071007191) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f *
            exp(
              -(g_RT[0] - 1.594580 * g_RT[1] - 0.450000 * g_RT[2] -
                0.749451 * g_RT[3] - 0.079729 * g_RT[4] - 0.239186 * g_RT[5] -
                0.246500 * g_RT[9] - 0.236833 * g_RT[11] - 0.700000 * g_RT[12] +
                g_RT[14] - g_RT[15] - 0.300000 * g_RT[19])) *
            (pow(std::max(refCinv, 0.0), 3.596279));
  // reaction 35:  H + O2 <=> O + OH
  k_f = 26440000000 * exp((-0.6707) * logT - (8575.31520197823) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[13] - g_RT[14] - g_RT[15] + g_RT[19]));
  // reaction 36:  H2 + O <=> H + OH
  k_f = 0.04589 * exp((2.7) * logT - (3150.13632793755) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[6] + g_RT[14] - g_RT[15] - g_RT[19]));
  // reaction 37:  H2 + OH <=> H + H2O
  k_f = 173.4 * exp((1.51) * logT - (1726.03316371019) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(g_RT[6] + g_RT[15] - g_RT[17] - g_RT[19]));
  // reaction 38:  2 OH <=> H2O + O
  k_f = 0.03973 * exp((2.4) * logT - (-1061.78716484796) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(-g_RT[14] + 2.000000 * g_RT[15] - g_RT[17]));
  // reaction 39:  H2 + O2 <=> H + HO2
  k_f = 0.5916 * exp((2.433) * logT - (26923.0980538841) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[6] + g_RT[13] - g_RT[16] - g_RT[19]));
  // reaction 40:  H + HO2 <=> 2 OH
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(-2.000000 * g_RT[15] + g_RT[16] + g_RT[19]));
  // reaction 41:  HO2 + O <=> O2 + OH
  k_f = 40000000;
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(-g_RT[13] + g_RT[14] - g_RT[15] + g_RT[16]));
  // reaction 42:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18]));
  // reaction 43:  2 HO2 <=> H2O2 + O2
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18]));
  // reaction 44:  HO2 + OH <=> H2O + O2
  k_f = 1410000000000 * exp((-1.76) * logT - (30.1929999482832) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17]));
  // reaction 45:  HO2 + OH <=> H2O + O2
  k_f = 5.37e+64 * exp((-16.72) * logT - (16555.8283049753) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17]));
  // reaction 46:  HO2 + OH <=> H2O + O2
  k_f = 2510000 * exp((2) * logT - (20128.6666321888) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17]));
  // reaction 47:  H + H2O2 <=> H2 + HO2
  k_f = 6.05 * exp((2) * logT - (2616.72666218454) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(-g_RT[6] - g_RT[16] + g_RT[18] + g_RT[19]));
  // reaction 48:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(-g_RT[15] - g_RT[17] + g_RT[18] + g_RT[19]));
  // reaction 49:  H2O2 + O <=> HO2 + OH
  k_f = 9.63 * exp((2) * logT - (1997.77016324474) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(g_RT[14] - g_RT[15] - g_RT[16] + g_RT[18]));
  // reaction 50:  H2O2 + OH <=> H2O + HO2
  k_f = 2.67e+35 * exp((-7) * logT - (18920.9466342575) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(g_RT[15] - g_RT[16] - g_RT[17] + g_RT[18]));
  // reaction 51:  CO + OH <=> CO2 + H
  k_f = 0.07046 * exp((2.053) * logT - (-178.979071526765) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21]));
  // reaction 52:  CO + OH <=> CO2 + H
  k_f = 5757000 * exp((-0.664) * logT - (166.98238621398) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21]));
  // reaction 53:  CO + O2 <=> CO2 + O
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(g_RT[8] + g_RT[13] - g_RT[14] - g_RT[21]));
  // reaction 54:  CO + HO2 <=> CO2 + OH
  k_f = 0.157 * exp((2.18) * logT - (9029.02038003442) * invT);
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[8] - g_RT[15] + g_RT[16] - g_RT[21]));
  // reaction 55:  H + HCO <=> CO + H2
  k_f = 120000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[6] - g_RT[8] + g_RT[19] + g_RT_qss[2]));
  // reaction 56:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[15] + g_RT_qss[2]));
  // reaction 57:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[21] + g_RT_qss[2]));
  // reaction 58:  HCO + OH <=> CO + H2O
  k_f = 30200000;
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[8] + g_RT[15] - g_RT[17] + g_RT_qss[2]));
  // reaction 59:  HCO + O2 <=> CO + HO2
  k_f = 12040 * exp((0.807) * logT - (-365.838516040031) * invT);
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[16] + g_RT_qss[2]));
  // reaction 60:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(g_RT[14] - g_RT[19] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 61:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[0]));
  // reaction 62:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[0]));
  // reaction 63:  CH2 + O2 <=> HCO + OH
  k_f = 10600000 * exp(-(754.82499870708) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(g_RT[13] - g_RT[15] + g_RT_qss[0] - g_RT_qss[2]));
  // reaction 64:  CH2 + O2 <=> CO2 + 2 H
  k_f = 2640000 * exp(-(754.82499870708) * invT);
  qf[64] *= k_f;
  qr[64] *= k_f *
            exp(-(g_RT[13] - 2.000000 * g_RT[19] - g_RT[21] + g_RT_qss[0])) *
            (refCinv);
  // reaction 65:  CH2* + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(g_RT[30] - g_RT[30] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 66:  CH2* + O <=> CO + H2
  k_f = 15000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(-g_RT[6] - g_RT[8] + g_RT[14] + g_RT_qss[1]));
  // reaction 67:  CH2* + OH <=> CH2O + H
  k_f = 30000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[1]));
  // reaction 68:  CH2* + H2 <=> CH3 + H
  k_f = 70000000;
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[1]));
  // reaction 69:  CH2* + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[69] *= k_f;
  qr[69] *= k_f *
            exp(-(-g_RT[8] + g_RT[13] - g_RT[15] - g_RT[19] + g_RT_qss[1])) *
            (refCinv);
  // reaction 70:  CH2* + O2 <=> CO + H2O
  k_f = 12000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[17] + g_RT_qss[1]));
  // reaction 71:  CH2* + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 72:  CH2* + CO <=> CH2 + CO
  k_f = 9000000;
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(g_RT[8] - g_RT[8] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 73:  CH2* + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(g_RT[21] - g_RT[21] - g_RT_qss[0] + g_RT_qss[1]));
  // reaction 74:  CH2* + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(-g_RT[8] - g_RT[20] + g_RT[21] + g_RT_qss[1]));
  // reaction 75:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * logT - (1648.03458051046) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[20] - g_RT_qss[2]));
  // reaction 76:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[20] - g_RT_qss[2]));
  // reaction 77:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * logT - (-224.93784961471) * invT);
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[20] - g_RT_qss[2]));
  // reaction 78:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[20] - g_RT_qss[2]));
  // reaction 79:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(g_RT[16] - g_RT[18] + g_RT[20] - g_RT_qss[2]));
  // reaction 80:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[12] + g_RT[14] - g_RT[19] - g_RT[20]));
  // reaction 81:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[0]));
  // reaction 82:  CH3 + OH <=> CH2* + H2O
  k_f = 25010000;
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[1]));
  // reaction 83:  CH3 + O2 <=> CH3O + O
  k_f = 30830000 * exp(-(14492.6399751759) * invT);
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(g_RT[12] + g_RT[13] - g_RT[14] - g_RT_qss[3]));
  // reaction 84:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(g_RT[12] + g_RT[13] - g_RT[15] - g_RT[20]));
  // reaction 85:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[13] + g_RT[16]));
  // reaction 86:  CH3 + HO2 <=> CH3O + OH
  k_f = 13400000;
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(g_RT[12] - g_RT[15] + g_RT[16] - g_RT_qss[3]));
  // reaction 87:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * logT - (2606.66232886845) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[16] + g_RT[18]));
  // reaction 88:  CH3 + HCO <=> CH4 + CO
  k_f = 8480000;
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(-g_RT[2] - g_RT[8] + g_RT[12] + g_RT_qss[2]));
  // reaction 89:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[20] - g_RT_qss[2]));
  // reaction 90:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(-g_RT[1] + g_RT[12] - g_RT[19] + g_RT_qss[0]));
  // reaction 91:  2 CH3 <=> C2H5 + H
  k_f = 4990000 * exp((0.1) * logT - (5334.09665753003) * invT);
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(2.000000 * g_RT[12] - g_RT[19] - g_RT_qss[5]));
  // reaction 92:  CH3 + HCCO <=> C2H4 + CO
  k_f = 50000000;
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(-g_RT[1] - g_RT[8] + g_RT[12] + g_RT_qss[6]));
  // reaction 93:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[20] + g_RT_qss[3]));
  // reaction 94:  CH3O + H <=> CH3 + OH
  k_f = 32000000;
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT[19] + g_RT_qss[3]));
  // reaction 95:  CH3O + H <=> CH2* + H2O
  k_f = 16000000;
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[17] + g_RT[19] - g_RT_qss[1] + g_RT_qss[3]));
  // reaction 96:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[20] + g_RT_qss[3]));
  // reaction 97:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[20] + g_RT_qss[3]));
  // reaction 98:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * logT - (5454.86865732316) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[19]));
  // reaction 99:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * logT - (4327.66332592059) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT[15]));
  // reaction 100:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * logT - (1570.03599731073) * invT);
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[2] - g_RT[12] + g_RT[15] - g_RT[17]));
  // reaction 101:  CH2 + CH4 <=> 2 CH3
  k_f = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
  qf[101] *= k_f;
  qr[101] *= k_f * exp(-(g_RT[2] - 2.000000 * g_RT[12] + g_RT_qss[0]));
  // reaction 102:  H + HCCO <=> CH2* + CO
  k_f = 100000000;
  qf[102] *= k_f;
  qr[102] *= k_f * exp(-(-g_RT[8] + g_RT[19] - g_RT_qss[1] + g_RT_qss[6]));
  // reaction 103:  HCCO + O <=> 2 CO + H
  k_f = 100000000;
  qf[103] *= k_f;
  qr[103] *= k_f *
             exp(-(-2.000000 * g_RT[8] + g_RT[14] - g_RT[19] + g_RT_qss[6])) *
             (refCinv);
  // reaction 104:  HCCO + O2 <=> 2 CO + OH
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f *
             exp(-(-2.000000 * g_RT[8] + g_RT[13] - g_RT[15] + g_RT_qss[6])) *
             (refCinv);
  // reaction 105:  CH2 + HCCO <=> C2H3 + CO
  k_f = 30000000;
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[8] + g_RT_qss[0] - g_RT_qss[4] + g_RT_qss[6]));
  // reaction 106:  C2H2 + O <=> CH2 + CO
  k_f = 4.08 * exp((2) * logT - (956.111665028967) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT[14] - g_RT_qss[0]));
  // reaction 107:  C2H2 + O <=> H + HCCO
  k_f = 16.32 * exp((2) * logT - (956.111665028967) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[19] - g_RT_qss[6]));
  // reaction 108:  C2H2 + OH <=> CH2CO + H
  k_f = 2.18e-10 * exp((4.5) * logT - (-503.21666580472) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[10] + g_RT[15] - g_RT[19] - g_RT[22]));
  // reaction 109:  C2H2 + OH <=> CH3 + CO
  k_f = 4.83e-10 * exp((4) * logT - (-1006.43333160944) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(-g_RT[8] + g_RT[10] - g_RT[12] + g_RT[15]));
  // reaction 110:  C2H2 + HCO <=> C2H3 + CO
  k_f = 10 * exp((2) * logT - (3019.29999482832) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT_qss[2] - g_RT_qss[4]));
  // reaction 111:  C2H2 + CH2 <=> C3H3 + H
  k_f = 12000000 * exp(-(3331.29432762724) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[0]));
  // reaction 112:  C2H2 + CH2* <=> C3H3 + H
  k_f = 20000000;
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[1]));
  // reaction 113:  C2H2 + CH3 <=> aC3H5
  k_f = 2.68e+47 * exp((-12.82) * logT - (17979.9314692026) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(g_RT[10] + g_RT[12] - g_RT[24])) * (refC);
  // reaction 114:  CH2CO + H <=> H2 + HCCO
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[22] - g_RT_qss[6]));
  // reaction 115:  CH2CO + H <=> CH3 + CO
  k_f = 1500 * exp((1.43) * logT - (1353.6528310147) * invT);
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT[19] + g_RT[22]));
  // reaction 116:  CH2CO + O <=> HCCO + OH
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[22] - g_RT_qss[6]));
  // reaction 117:  CH2CO + O <=> CH2 + CO2
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[14] - g_RT[21] + g_RT[22] - g_RT_qss[0]));
  // reaction 118:  CH2CO + OH <=> H2O + HCCO
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[22] - g_RT_qss[6]));
  // reaction 119:  C2H3 + H <=> C2H2 + H2
  k_f = 90000000;
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[6] - g_RT[10] + g_RT[19] + g_RT_qss[4]));
  // reaction 120:  C2H3 + O <=> CH2CO + H
  k_f = 48000000;
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[22] + g_RT_qss[4]));
  // reaction 121:  C2H3 + O <=> CH3 + CO
  k_f = 48000000;
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT[14] + g_RT_qss[4]));
  // reaction 122:  C2H3 + OH <=> C2H2 + H2O
  k_f = 30110000;
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[10] + g_RT[15] - g_RT[17] + g_RT_qss[4]));
  // reaction 123:  C2H3 + O2 <=> C2H2 + HO2
  k_f = 1.34 * exp((1.61) * logT - (-192.93326966953) * invT);
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(-g_RT[10] + g_RT[13] - g_RT[16] + g_RT_qss[4]));
  // reaction 124:  C2H3 + O2 <=> CH2CHO + O
  k_f = 300000 * exp((0.29) * logT - (5.53538332385192) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(g_RT[13] - g_RT[14] + g_RT_qss[4] - g_RT_qss[7]));
  // reaction 125:  C2H3 + O2 <=> CH2O + HCO
  k_f = 46000000000 * exp((-1.39) * logT - (508.248832462767) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[13] - g_RT[20] - g_RT_qss[2] + g_RT_qss[4]));
  // reaction 126:  C2H3 + CH3 <=> H + aC3H5
  k_f = 1.5e+18 * exp((-2.83) * logT - (9368.88788395227) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[12] - g_RT[19] - g_RT[24] + g_RT_qss[4]));
  // reaction 127:  CH2CHO <=> CH3 + CO
  k_f = 7.8e+41 * exp((-9.147) * logT - (23600.8616262414) * invT);
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT_qss[7])) * (refCinv);
  // reaction 128:  CH2CHO + H <=> CH3 + HCO
  k_f = 90000000;
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(-g_RT[12] + g_RT[19] - g_RT_qss[2] + g_RT_qss[7]));
  // reaction 129:  CH2CHO + H <=> CH2CO + H2
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[22] + g_RT_qss[7]));
  // reaction 130:  CH2CHO + O <=> CH2CO + OH
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(g_RT[14] - g_RT[15] - g_RT[22] + g_RT_qss[7]));
  // reaction 131:  CH2CHO + OH <=> CH2CO + H2O
  k_f = 10000000 * exp(-(1006.43333160944) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[22] + g_RT_qss[7]));
  // reaction 132:  CH2CHO + O2 <=> CH2CO + HO2
  k_f = 140000;
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[22] + g_RT_qss[7]));
  // reaction 133:  C2H4 + H <=> C2H3 + H2
  k_f = 50.7 * exp((1.9) * logT - (6516.65582217112) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[1] - g_RT[6] + g_RT[19] - g_RT_qss[4]));
  // reaction 134:  C2H4 + O <=> C2H3 + OH
  k_f = 15.1 * exp((1.9) * logT - (1882.03033010965) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[1] + g_RT[14] - g_RT[15] - g_RT_qss[4]));
  // reaction 135:  C2H4 + O <=> CH3 + HCO
  k_f = 19.2 * exp((1.83) * logT - (110.707666477038) * invT);
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[1] - g_RT[12] + g_RT[14] - g_RT_qss[2]));
  // reaction 136:  C2H4 + O <=> CH2 + CH2O
  k_f = 0.384 * exp((1.83) * logT - (110.707666477038) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[1] + g_RT[14] - g_RT[20] - g_RT_qss[0]));
  // reaction 137:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(g_RT[1] + g_RT[15] - g_RT[17] - g_RT_qss[4]));
  // reaction 138:  C2H4 + HCO <=> C2H5 + CO
  k_f = 10 * exp((2) * logT - (4025.73332643776) * invT);
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(g_RT[1] - g_RT[8] + g_RT_qss[2] - g_RT_qss[5]));
  // reaction 139:  C2H4 + CH2 <=> H + aC3H5
  k_f = 20000000 * exp(-(3019.29999482832) * invT);
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[0]));
  // reaction 140:  C2H4 + CH2* <=> H + aC3H5
  k_f = 50000000;
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[1]));
  // reaction 141:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
  qf[141] *= k_f;
  qr[141] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[12] - g_RT_qss[4]));
  // reaction 142:  C2H4 + O2 <=> C2H3 + HO2
  k_f = 42200000 * exp(-(30595.573280927) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(g_RT[1] + g_RT[13] - g_RT[16] - g_RT_qss[4]));
  // reaction 143:  C2H5 + O <=> CH2O + CH3
  k_f = 16040000;
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(-g_RT[12] + g_RT[14] - g_RT[20] + g_RT_qss[5]));
  // reaction 144:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 20000;
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(-g_RT[1] + g_RT[13] - g_RT[16] + g_RT_qss[5]));
  // reaction 145:  C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f = 24000000;
  qf[145] *= k_f;
  qr[145] *= k_f *
             exp(-(-g_RT[12] - g_RT[15] + g_RT[16] - g_RT[20] + g_RT_qss[5])) *
             (refCinv);
  // reaction 146:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT_qss[5]));
  // reaction 147:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
  qf[147] *= k_f;
  qr[147] *= k_f * exp(-(g_RT[7] + g_RT[14] - g_RT[15] - g_RT_qss[5]));
  // reaction 148:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * logT - (437.798499250106) * invT);
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(g_RT[7] + g_RT[15] - g_RT[17] - g_RT_qss[5]));
  // reaction 149:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[12] - g_RT_qss[5]));
  // reaction 150:  C3H3 + O2 <=> CH2CO + HCO
  k_f = 30000 * exp(-(1443.22539752794) * invT);
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(g_RT[13] - g_RT[22] + g_RT[23] - g_RT_qss[2]));
  // reaction 151:  C3H3 + HO2 <=> C2H3 + CO + OH
  k_f = 800000;
  qf[151] *= k_f;
  qr[151] *= k_f *
             exp(-(-g_RT[8] - g_RT[15] + g_RT[16] + g_RT[23] - g_RT_qss[4])) *
             (refCinv);
  // reaction 152:  C2H2 + C3H3 <=> C5H5
  k_f = 6.87e+49 * exp((-12.5) * logT - (21147.6803804433) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(g_RT[10] + g_RT[23] - g_RT[26])) * (refC);
  // reaction 153:  2 C3H3 => C6H5 + H
  k_f = 5000000;
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(-g_RT[19] + 2.000000 * g_RT[23] - g_RT_qss[8]));
  // reaction 154:  2 C3H3 => C6H6
  k_f = 2000000;
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(-g_RT[9] + 2.000000 * g_RT[23])) * (refC);
  // reaction 155:  HO2 + aC3H5 <=> C3H6 + O2
  k_f = 2660000;
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(-g_RT[3] - g_RT[13] + g_RT[16] + g_RT[24]));
  // reaction 156:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f = 6600000;
  qf[156] *= k_f;
  qr[156] *= k_f *
             exp(-(-g_RT[15] + g_RT[16] - g_RT[20] + g_RT[24] - g_RT_qss[4])) *
             (refCinv);
  // reaction 157:  HCO + aC3H5 <=> C3H6 + CO
  k_f = 60000000;
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(-g_RT[3] - g_RT[8] + g_RT[24] + g_RT_qss[2]));
  // reaction 158:  C3H6 + H <=> C2H4 + CH3
  k_f = 8e+15 * exp((-2.39) * logT - (5625.96232369677) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[12] + g_RT[19]));
  // reaction 159:  C3H6 + H <=> H2 + aC3H5
  k_f = 1.92 * exp((2.309) * logT - (2352.03469597126) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[19] - g_RT[24]));
  // reaction 160:  C3H6 + O <=> CH2CO + CH3 + H
  k_f = 80 * exp((1.65) * logT - (164.551849718143) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(g_RT[3] - g_RT[12] + g_RT[14] - g_RT[19] - g_RT[22])) *
             (refCinv);
  // reaction 161:  C3H6 + O => C2H5 + HCO
  k_f = 35 * exp((1.65) * logT - (-489.126599162188) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[3] + g_RT[14] - g_RT_qss[2] - g_RT_qss[5]));
  // reaction 162:  C3H6 + O <=> OH + aC3H5
  k_f = 180000 * exp((0.7) * logT - (2958.91399493175) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[3] + g_RT[14] - g_RT[15] - g_RT[24]));
  // reaction 163:  C3H6 + OH <=> H2O + aC3H5
  k_f = 3.1 * exp((2) * logT - (-149.958566409806) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(g_RT[3] + g_RT[15] - g_RT[17] - g_RT[24]));
  // reaction 164:  C3H6 + CH3 <=> CH4 + aC3H5
  k_f = 4.54e-05 * exp((3.268) * logT - (3599.00559383536) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[24]));
  // reaction 165:  C4H81 + H <=> C2H4 + C2H5
  k_f = 1.6e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[19] - g_RT_qss[5]));
  // reaction 166:  C4H81 + H <=> C3H6 + CH3
  k_f = 3.2e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[12] + g_RT[19]));
  // reaction 167:  H + iC4H8 <=> C3H6 + CH3
  k_f = 6.16e+16 * exp((-2.538) * logT - (5851.90660664309) * invT);
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[12] + g_RT[19]));
  // reaction 168:  O + iC4H8 <=> CH2CO + 2 CH3
  k_f = 240 * exp((1.65) * logT - (164.551849718143) * invT);
  qf[168] *= k_f;
  qr[168] *= k_f * exp(-(g_RT[4] - 2.000000 * g_RT[12] + g_RT[14] - g_RT[22])) *
             (refCinv);
  // reaction 169:  C6H5 + CH3 <=> C6H5CH3
  k_f = 13800000 * exp(-(23.1479666270171) * invT);
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT_qss[8])) * (refC);
  // reaction 170:  C6H5CH3 + O2 <=> C6H5CH2 + HO2
  k_f = 300000000 * exp(-(21634.2908962765) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(g_RT[11] + g_RT[13] - g_RT[16] - g_RT[27]));
  // reaction 171:  C6H5CH3 + OH <=> C6H5CH2 + H2O
  k_f = 16200000 * exp(-(1393.91016427907) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(g_RT[11] + g_RT[15] - g_RT[17] - g_RT[27]));
  // reaction 172:  C6H5CH3 + H <=> C6H5CH2 + H2
  k_f = 125900000 * exp(-(4206.38810946165) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(-g_RT[6] + g_RT[11] + g_RT[19] - g_RT[27]));
  // reaction 173:  C6H5CH3 + H <=> C6H6 + CH3
  k_f = 1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[9] + g_RT[11] - g_RT[12] + g_RT[19]));
  // reaction 174:  C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  k_f = 316000 * exp(-(4780.55832514484) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[27]));
  // reaction 175:  C6H5CH2 + H <=> C6H5 + CH3
  k_f = 1.5e+60 * exp((-13.94) * logT - (32497.7322776688) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(-g_RT[12] + g_RT[19] + g_RT[27] - g_RT_qss[8]));
  // reaction 176:  C6H5CH2 + O <=> C6H5CHO + H
  k_f = 400000000;
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(g_RT[14] - g_RT[19] + g_RT[27] - g_RT[29]));
  // reaction 177:  C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  k_f = 5000000;
  qf[177] *= k_f;
  qr[177] *= k_f *
             exp(-(-g_RT[15] + g_RT[16] - g_RT[19] + g_RT[27] - g_RT[29])) *
             (refCinv);
  // reaction 178:  C6H5 + HCO <=> C6H5CHO
  k_f = 10000000;
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[29] + g_RT_qss[2] + g_RT_qss[8])) * (refC);
  // reaction 179:  C6H5CHO <=> C6H5CO + H
  k_f = 3.98e+15 * exp(-(43729.5282584301) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(-g_RT[19] + g_RT[29] - g_RT_qss[9])) * (refCinv);
  // reaction 180:  C6H5CHO + O2 <=> C6H5CO + HO2
  k_f = 10200000 * exp(-(19600.2891330938) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[29] - g_RT_qss[9]));
  // reaction 181:  C6H5CHO + OH <=> C6H5CO + H2O
  k_f = 23500 * exp((0.73) * logT - (-558.570499043239) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[29] - g_RT_qss[9]));
  // reaction 182:  C6H5CHO + H <=> C6H5CO + H2
  k_f = 4100 * exp((1.16) * logT - (1207.71999793133) * invT);
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[29] - g_RT_qss[9]));
  // reaction 183:  C6H5CHO + H <=> C6H6 + HCO
  k_f = 1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT[29] - g_RT_qss[2]));
  // reaction 184:  C6H5CHO + O <=> C6H5CO + OH
  k_f = 5800000 * exp(-(905.789998448495) * invT);
  qf[184] *= k_f;
  qr[184] *= k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[29] - g_RT_qss[9]));
  // reaction 185:  C6H5CHO + CH3 <=> C6H5CO + CH4
  k_f = 2e-12 * exp((5.6) * logT - (1237.91299787961) * invT);
  qf[185] *= k_f;
  qr[185] *= k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[29] - g_RT_qss[9]));
  // reaction 186:  C6H5CO + H2O2 <=> C6H5CHO + HO2
  k_f = 180000 * exp(-(4139.46029290962) * invT);
  qf[186] *= k_f;
  qr[186] *= k_f * exp(-(-g_RT[16] + g_RT[18] - g_RT[29] + g_RT_qss[9]));
  // reaction 187:  C6H5CO <=> C6H5 + CO
  k_f = 527000000000000 * exp(-(14599.8251249923) * invT);
  qf[187] *= k_f;
  qr[187] *= k_f * exp(-(-g_RT[8] - g_RT_qss[8] + g_RT_qss[9])) * (refCinv);
  // reaction 188:  C6H6 + OH <=> C6H5 + H2O
  k_f = 0.3985 * exp((2.286) * logT - (532.403232421393) * invT);
  qf[188] *= k_f;
  qr[188] *= k_f * exp(-(g_RT[9] + g_RT[15] - g_RT[17] - g_RT_qss[8]));
  // reaction 189:  C6H6 + O <=> C6H5O + H
  k_f = 13900000 * exp(-(2470.79382910117) * invT);
  qf[189] *= k_f;
  qr[189] *= k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[19] - g_RT[28]));
  // reaction 190:  C6H6 + O <=> C5H5 + HCO
  k_f = 13900000 * exp(-(2279.57149609538) * invT);
  qf[190] *= k_f;
  qr[190] *= k_f * exp(-(g_RT[9] + g_RT[14] - g_RT[26] - g_RT_qss[2]));
  // reaction 191:  C6H5 + H2 <=> C6H6 + H
  k_f = 0.05707 * exp((2.43) * logT - (3156.67814459301) * invT);
  qf[191] *= k_f;
  qr[191] *= k_f * exp(-(g_RT[6] - g_RT[9] - g_RT[19] + g_RT_qss[8]));
  // reaction 192:  C6H5 + O2 <=> C6H5O + O
  k_f = 26000000 * exp(-(3079.68599472488) * invT);
  qf[192] *= k_f;
  qr[192] *= k_f * exp(-(g_RT[13] - g_RT[14] - g_RT[28] + g_RT_qss[8]));
  // reaction 193:  C6H5 + O <=> C5H5 + CO
  k_f = 100000000;
  qf[193] *= k_f;
  qr[193] *= k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[26] + g_RT_qss[8]));
  // reaction 194:  C6H5 + OH <=> C6H5O + H
  k_f = 30000000;
  qf[194] *= k_f;
  qr[194] *= k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[28] + g_RT_qss[8]));
  // reaction 195:  C6H5 + HO2 <=> C6H6 + O2
  k_f = 1000000;
  qf[195] *= k_f;
  qr[195] *= k_f * exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT_qss[8]));
  // reaction 196:  C6H5 + CH4 <=> C6H6 + CH3
  k_f = 3.89e-09 * exp((4.57) * logT - (2644.90679546961) * invT);
  qf[196] *= k_f;
  qr[196] *= k_f * exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[8]));
  // reaction 197:  C6H5O <=> C5H5 + CO
  k_f = 3.76e+54 * exp((-12.06) * logT - (36634.1732705836) * invT);
  qf[197] *= k_f;
  qr[197] *= k_f * exp(-(-g_RT[8] - g_RT[26] + g_RT[28])) * (refCinv);
  // reaction 198:  C5H5 + O <=> C5H4O + H
  k_f = 58100000 * exp((-0.02) * logT - (10.0643333160944) * invT);
  qf[198] *= k_f;
  qr[198] *= k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[25] + g_RT[26]));
  // reaction 199:  C5H5 + O2 <=> C5H4O + OH
  k_f = 1800000 * exp((0.08) * logT - (9057.89998448495) * invT);
  qf[199] *= k_f;
  qr[199] *= k_f * exp(-(g_RT[13] - g_RT[15] - g_RT[25] + g_RT[26]));
  // reaction 200:  C5H4O <=> 2 C2H2 + CO
  k_f = 6.2e+41 * exp((-7.87) * logT - (49667.4849149258) * invT);
  qf[200] *= k_f;
  qr[200] *= k_f * exp(-(-g_RT[8] - 2.000000 * g_RT[10] + g_RT[25])) *
             ((refCinv * refCinv));
  // reaction 201:  C5H4O + O <=> C3H3 + CO + HCO
  k_f = 620 * exp((1.45) * logT - (-431.75989926045) * invT);
  qf[201] *= k_f;
  qr[201] *= k_f *
             exp(-(-g_RT[8] + g_RT[14] - g_RT[23] + g_RT[25] - g_RT_qss[2])) *
             (refCinv);
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, const amrex::Real* sc, const amrex::Real T)
{
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 31; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 31; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[31];
  gibbs(g_RT, T);
  amrex::Real g_RT_qss[10];
  gibbs_qss(g_RT_qss, T);

  amrex::Real sc_qss[10];
  amrex::Real kf_qss[126], qf_qss[126], qr_qss[126];
  // Fill sc_qss here
  comp_k_f_qss(T, invT, logT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, T, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * logT);
    amrex::Real Corr = mixture + (0.0900000000000001) * sc[8] +
                       (-0.15) * sc[13] + (10.89) * sc[17] + (1.18) * sc[21];
    const amrex::Real redP = Corr / k_f * 63280000 * exp(-1.4 * logT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[13] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[19])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 1:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * logT);
    amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (5) * sc[17] + (2.6) * sc[21];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * logT - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-T * 0.0106382978723404) +
      0.7346 * exp(-T * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[15] * sc[15]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[15] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * logT - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * logT - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-T * 0.0050761421319797) +
      0.932 * exp(-T * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 3:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * logT - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-T * 0.003690036900369) +
      0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] - g_RT[20] + g_RT_qss[2])) * (refC) *
                           (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 4:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * logT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * logT - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-T * 0.0128205128205128) +
      0.68 * exp(-T * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[0]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[12] + g_RT[19] + g_RT_qss[0])) * (refC) *
                           (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 5:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * logT - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * logT - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-T * 0.00363636363636364) +
      0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[8] - g_RT[22] + g_RT_qss[0])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 6:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * logT - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * logT - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-T * 0.0106382978723404) +
      0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[20]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] + g_RT[20] - g_RT_qss[3])) * (refC) *
                           (sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 7:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * logT - (192.731983003208) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * logT - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-T * 0.0135135135135135) +
      0.783 * exp(-T * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[19])) * (refC) * (sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 8:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * logT - (311.994332798926) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * logT - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-T * 0.00662251655629139) +
      0.5325 * exp(-T * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[7] + 2.000000 * g_RT[12])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[12] -= 2.000000 * qdot;
  }

  {
    // reaction 9:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      386000000 * exp((1.62) * logT - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * logT - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-T * 0.000185745862510913) +
      1.9816 * exp(-T * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[10] - g_RT[19] + g_RT_qss[4])) *
                           (refCinv) * (sc[10] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 10:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      330000000 * exp((-0.06) * logT - (4277.34165934012) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.8e+29 * exp(-7.64 * logT - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-T * 0.000585823081429408) + 0.337 * exp(-T * 0.0003125) +
      exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[22]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] + g_RT[22] - g_RT_qss[7])) * (refC) *
                           (sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 11:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * logT - (140.900666425322) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * logT - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-T * 0.00481927710843374) +
      0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[1] + g_RT[19] + g_RT_qss[4])) * (refC) * (sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 12:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * logT - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-T * 0.000745934656124124) +
      0.175 * exp(-T * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + g_RT[12] + g_RT_qss[4])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 13:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1370 * exp((1.463) * logT - (681.858582165395) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.9e+27 * exp(-6.642 * logT - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.569 * exp(-T * -0.000109325461900077) +
      1.569 * exp(-T * 0.00334448160535117) + exp(-152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[19]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[19] - g_RT_qss[5])) * (refC) *
                           (sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 14:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * logT - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
      exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[7] + g_RT[19] + g_RT_qss[5])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 15:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * logT - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-T * 0.000439000834101585) +
      0.198 * exp(-T * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4] * sc_qss[5]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[5] + g_RT_qss[4] + g_RT_qss[5])) *
                           (refC) * (sc[5]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[5] += qdot;
  }

  {
    // reaction 16:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * logT - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-T * 0.000911909538573774) +
      0.02 * exp(-T * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + g_RT[19] + g_RT[24])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[19] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 17:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * logT - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * logT - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-T * 0.00062266500622665) +
      0.104 * exp(-T * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[5] + g_RT[12] + g_RT[24])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 18:  C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.1e+91 * exp(-24.63 * logT - 7341.93115409086 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.569 * exp(-T * 0.00261096605744125) +
      0.431 * exp(-T * 0.00657894736842105) + exp(-4730 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[27]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[11] + g_RT[19] + g_RT[27])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[19] -= qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 19:  C6H5 + H (+M) <=> C6H6 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr =
      mixture + sc[2] + sc[6] + (0.5) * sc[8] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 6.6e+63 * exp(-16.3 * logT - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 0.0017096939647803) + exp(-6113 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT_qss[8])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 20:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * logT - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[8] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[8] + g_RT[14] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[14] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 21:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * logT);
    const amrex::Real Corr =
      mixture + (-1) * sc[6] + (-1) * sc[17] + (-1) * sc[21];
    const amrex::Real qf = Corr * k_f * ((sc[19] * sc[19]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= 2.000000 * qdot;
  }

  {
    // reaction 22:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * logT);
    const amrex::Real qf = k_f * (sc[17] * (sc[19] * sc[19]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= 2.000000 * qdot;
  }

  {
    // reaction 23:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * logT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (5.3) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc[15] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[19])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 24:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * logT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc[14] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[19])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 25:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.4) * sc[6] + (0.75) * sc[8] +
                             (14.4) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * ((sc[14] * sc[14]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[14])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= 2.000000 * qdot;
  }

  {
    // reaction 26:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (-1) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) *
                           (refCinv) * (sc[8] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 27:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc_qss[2]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) *
                           (refCinv) * (sc[8] * sc[17] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 28:  POSF10325 => 1.74268 C2H4 + 0.819058 C3H6 + 0.261401 C4H81
    // + 0.163333 C6H5CH3 + 0.17 C6H6 + 1.5 CH3 + 0.5 H + 0.0871338 iC4H8
    const amrex::Real k_f =
      1.53e+27 * exp((-2.58) * logT - (44130.5919410765) * invT);
    const amrex::Real qf = k_f * (sc[0]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.742680 * qdot;
    wdot[3] += 0.819058 * qdot;
    wdot[4] += 0.087134 * qdot;
    wdot[5] += 0.261401 * qdot;
    wdot[9] += 0.170000 * qdot;
    wdot[11] += 0.163333 * qdot;
    wdot[12] += 1.500000 * qdot;
    wdot[19] += 0.500000 * qdot;
  }

  {
    // reaction 29:  H + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      7.66e-08 * exp((4.76) * logT - (651.615260550532) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[19]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[6] += qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[19] -= qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 30:  CH3 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 1.45 CH4 + 0.3 H +
    // 0.0797288 iC4H8
    const amrex::Real k_f =
      3.17e-13 * exp((5.95) * logT - (2892.69068171185) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 1.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[12] -= qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 31:  OH + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      2960 * exp((1.02) * logT - (107.285793149566) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 32:  O2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + HO2
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      1780000000 * exp((0.06) * logT - (22409.5464916153) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[13]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 33:  HO2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H +
    // H2O2 + 0.0797288 iC4H8
    const amrex::Real k_f =
      0.0698 * exp((2.94) * logT - (6446.20548895846) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[16]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 34:  O + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + OH
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      8.94e-05 * exp((3.86) * logT - (385.011071007191) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[14]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 35:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * logT - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[14] - g_RT[15] + g_RT[19])) *
                           (sc[14] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 36:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * logT - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[14] - g_RT[15] - g_RT[19])) *
                           (sc[15] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 37:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[15] - g_RT[17] - g_RT[19])) *
                           (sc[17] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 38:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * logT - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + 2.000000 * g_RT[15] - g_RT[17])) *
                           (sc[14] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[15] -= 2.000000 * qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 39:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * logT - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[13] - g_RT[16] - g_RT[19])) *
                           (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 40:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[15] + g_RT[16] + g_RT[19])) *
                           ((sc[15] * sc[15]));
    const amrex::Real qdot = qf - qr;
    wdot[15] += 2.000000 * qdot;
    wdot[16] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 41:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[14] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[14] - g_RT[15] + g_RT[16])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 42:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 43:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 44:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1410000000000 * exp((-1.76) * logT - (30.1929999482832) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 45:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      5.37e+64 * exp((-16.72) * logT - (16555.8283049753) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 46:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      2510000 * exp((2) * logT - (20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 47:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * logT - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[16] + g_RT[18] + g_RT[19])) *
                           (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 48:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] - g_RT[17] + g_RT[18] + g_RT[19])) *
                           (sc[15] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 49:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[15] - g_RT[16] + g_RT[18])) *
                           (sc[15] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 50:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * logT - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[15] - g_RT[16] - g_RT[17] + g_RT[18])) *
                           (sc[16] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[16] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 51:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * logT - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21])) *
                           (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 52:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * logT - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21])) *
                           (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 53:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[13] - g_RT[14] - g_RT[21])) *
                           (sc[14] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 54:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * logT - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[15] + g_RT[16] - g_RT[21])) *
                           (sc[15] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 55:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[8] + g_RT[19] + g_RT_qss[2])) *
                           (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 56:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[15] + g_RT_qss[2])) *
      (sc[8] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 57:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[21] + g_RT_qss[2])) *
      (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 58:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[15] - g_RT[17] + g_RT_qss[2])) *
      (sc[8] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 59:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * logT - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[16] + g_RT_qss[2])) *
      (sc[8] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 60:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[19] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 61:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[0])) *
      (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 62:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[0])) *
                           (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[12] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 63:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[15] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[15] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 64:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - 2.000000 * g_RT[19] - g_RT[21] + g_RT_qss[0])) *
      (refCinv) * ((sc[19] * sc[19]) * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[19] += 2.000000 * qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 65:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[30] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[30] - g_RT[30] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[30] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[30] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 66:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[8] + g_RT[14] + g_RT_qss[1])) *
                           (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 67:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[1])) *
      (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 68:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[1])) *
                           (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[12] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 69:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[15] - g_RT[19] + g_RT_qss[1])) *
      (refCinv) * (sc[8] * sc[15] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 70:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[17] + g_RT_qss[1])) *
      (sc[8] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 71:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[17] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 72:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[8] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[8] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 73:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[21] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[21] - g_RT[21] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[21] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[21] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 74:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[21] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[20] + g_RT[21] + g_RT_qss[1])) *
      (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 75:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * logT - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[20] - g_RT_qss[2])) *
      (sc[6] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 76:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[20] - g_RT_qss[2])) *
      (sc[15] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 77:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * logT - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[20] - g_RT_qss[2])) *
      (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 78:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[20] - g_RT_qss[2])) *
      (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 79:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[16] - g_RT[18] + g_RT[20] - g_RT_qss[2])) *
      (sc[18] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 80:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[12] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] + g_RT[14] - g_RT[19] - g_RT[20])) *
                           (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 81:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[0])) *
      (sc[17] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 82:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[1])) *
      (sc[17] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 83:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[13] - g_RT[14] - g_RT_qss[3])) *
      (sc[14] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 84:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] + g_RT[13] - g_RT[15] - g_RT[20])) *
                           (sc[15] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 85:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] - g_RT[13] + g_RT[16])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 86:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[15] + g_RT[16] - g_RT_qss[3])) *
      (sc[15] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 87:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * logT - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] - g_RT[16] + g_RT[18])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 88:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] - g_RT[8] + g_RT[12] + g_RT_qss[2])) *
                           (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 89:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[20] - g_RT_qss[2])) *
      (sc[2] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 90:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[12] - g_RT[19] + g_RT_qss[0])) *
      (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 91:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * logT - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[12] - g_RT[19] - g_RT_qss[5])) *
      (sc[19] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 92:  CH3 + HCCO <=> C2H4 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[8] + g_RT[12] + g_RT_qss[6])) *
                           (sc[1] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 93:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[20] + g_RT_qss[3])) *
      (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 94:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT[19] + g_RT_qss[3])) *
      (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 95:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[17] + g_RT[19] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[17] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 96:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[20] + g_RT_qss[3])) *
      (sc[17] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 97:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[20] + g_RT_qss[3])) *
      (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 98:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * logT - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[19])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 99:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * logT - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT[15])) *
                           (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 100:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f = 100 * exp((1.6) * logT - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] + g_RT[15] - g_RT[17])) *
                           (sc[12] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 101:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - 2.000000 * g_RT[12] + g_RT_qss[0])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += 2.000000 * qdot;
  }

  {
    // reaction 102:  H + HCCO <=> CH2* + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[19] - g_RT_qss[1] + g_RT_qss[6])) *
      (sc[8] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 103:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[8] + g_RT[14] - g_RT[19] + g_RT_qss[6])) *
      (refCinv) * ((sc[8] * sc[8]) * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += 2.000000 * qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 104:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[8] + g_RT[13] - g_RT[15] + g_RT_qss[6])) *
      (refCinv) * ((sc[8] * sc[8]) * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += 2.000000 * qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 105:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc_qss[0] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT_qss[0] - g_RT_qss[4] + g_RT_qss[6])) *
      (sc[8] * sc_qss[4]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[8] += qdot;
  }

  {
    // reaction 106:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT[14] - g_RT_qss[0])) *
      (sc[8] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 107:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f = 16.32 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[19] - g_RT_qss[6])) *
      (sc[19] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 108:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * logT - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] + g_RT[15] - g_RT[19] - g_RT[22])) *
                           (sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 109:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * logT - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[10] - g_RT[12] + g_RT[15])) *
                           (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 110:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * logT - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT_qss[2] - g_RT_qss[4])) *
      (sc[8] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 111:  C2H2 + CH2 <=> C3H3 + H
    const amrex::Real k_f = 12000000 * exp(-(3331.29432762724) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[0])) *
      (sc[19] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 112:  C2H2 + CH2* <=> C3H3 + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[1])) *
      (sc[19] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 113:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      2.68e+47 * exp((-12.82) * logT - (17979.9314692026) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[12] - g_RT[24])) * (refC) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 114:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[22] - g_RT_qss[6])) *
      (sc[6] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 115:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f =
      1500 * exp((1.43) * logT - (1353.6528310147) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] - g_RT[12] + g_RT[19] + g_RT[22])) *
                           (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 116:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[22] - g_RT_qss[6])) *
      (sc[15] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 117:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[21] + g_RT[22] - g_RT_qss[0])) *
      (sc[21] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 118:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[22] - g_RT_qss[6])) *
      (sc[17] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 119:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] - g_RT[10] + g_RT[19] + g_RT_qss[4])) *
      (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 120:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[22] + g_RT_qss[4])) *
      (sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 121:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT[14] + g_RT_qss[4])) *
      (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 122:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] + g_RT[15] - g_RT[17] + g_RT_qss[4])) *
      (sc[10] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 123:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * logT - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] + g_RT[13] - g_RT[16] + g_RT_qss[4])) *
      (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 124:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * logT - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[14] + g_RT_qss[4] - g_RT_qss[7])) *
      (sc[14] * sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 125:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * logT - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[20] - g_RT_qss[2] + g_RT_qss[4])) *
      (sc[20] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 126:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * logT - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[19] - g_RT[24] + g_RT_qss[4])) *
      (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 127:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      7.8e+41 * exp((-9.147) * logT - (23600.8616262414) * invT);
    const amrex::Real qf = k_f * (sc_qss[7]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT_qss[7])) *
                           (refCinv) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 128:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[19] - g_RT_qss[2] + g_RT_qss[7])) *
      (sc[12] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 129:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[22] + g_RT_qss[7])) *
      (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 130:  CH2CHO + O <=> CH2CO + OH
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] - g_RT[22] + g_RT_qss[7])) *
      (sc[15] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 131:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 10000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[22] + g_RT_qss[7])) *
      (sc[17] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 132:  CH2CHO + O2 <=> CH2CO + HO2
    const amrex::Real k_f = 140000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[22] + g_RT_qss[7])) *
      (sc[16] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 133:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * logT - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[6] + g_RT[19] - g_RT_qss[4])) *
                           (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 134:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * logT - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[14] - g_RT[15] - g_RT_qss[4])) *
                           (sc[15] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 135:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] + g_RT[14] - g_RT_qss[2])) *
                           (sc[12] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 136:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[14] - g_RT[20] - g_RT_qss[0])) *
                           (sc[20] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 137:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[15] - g_RT[17] - g_RT_qss[4])) *
                           (sc[17] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 138:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * logT - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[8] + g_RT_qss[2] - g_RT_qss[5])) *
      (sc[8] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 139:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[0])) *
                           (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 140:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[1])) *
                           (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 141:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[2] + g_RT[12] - g_RT_qss[4])) *
                           (sc[2] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 142:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[13] - g_RT[16] - g_RT_qss[4])) *
                           (sc[16] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 143:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[14] - g_RT[20] + g_RT_qss[5])) *
      (sc[12] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 144:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[13] - g_RT[16] + g_RT_qss[5])) *
      (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 145:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT[16] - g_RT[20] + g_RT_qss[5])) *
      (refCinv) * (sc[12] * sc[15] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 146:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT_qss[5])) *
                           (sc[6] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 147:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] + g_RT[14] - g_RT[15] - g_RT_qss[5])) *
                           (sc[15] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 148:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] + g_RT[15] - g_RT[17] - g_RT_qss[5])) *
                           (sc[17] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 149:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[7] + g_RT[12] - g_RT_qss[5])) *
                           (sc[2] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[7] -= qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 150:  C3H3 + O2 <=> CH2CO + HCO
    const amrex::Real k_f = 30000 * exp(-(1443.22539752794) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[22] + g_RT[23] - g_RT_qss[2])) *
      (sc[22] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 151:  C3H3 + HO2 <=> C2H3 + CO + OH
    const amrex::Real k_f = 800000;
    const amrex::Real qf = k_f * (sc[16] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[15] + g_RT[16] + g_RT[23] - g_RT_qss[4])) *
      (refCinv) * (sc[8] * sc[15] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 152:  C2H2 + C3H3 <=> C5H5
    const amrex::Real k_f =
      6.87e+49 * exp((-12.5) * logT - (21147.6803804433) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[23] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[23] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 153:  2 C3H3 => C6H5 + H
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 154:  2 C3H3 => C6H6
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 155:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[16] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] - g_RT[13] + g_RT[16] + g_RT[24])) *
                           (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 156:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[16] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[15] + g_RT[16] - g_RT[20] + g_RT[24] - g_RT_qss[4])) *
      (refCinv) * (sc[15] * sc[20] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 157:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[24] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] - g_RT[8] + g_RT[24] + g_RT_qss[2])) *
                           (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 158:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[12] + g_RT[19])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 159:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      1.92 * exp((2.309) * logT - (2352.03469597126) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[19] - g_RT[24])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 160:  C3H6 + O <=> CH2CO + CH3 + H
    const amrex::Real k_f = 80 * exp((1.65) * logT - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[12] + g_RT[14] - g_RT[19] - g_RT[22])) *
      (refCinv) * (sc[12] * sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 161:  C3H6 + O => C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * logT - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 162:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * logT - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] + g_RT[14] - g_RT[15] - g_RT[24])) *
                           (sc[15] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 163:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * logT - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] + g_RT[15] - g_RT[17] - g_RT[24])) *
                           (sc[17] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 164:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      4.54e-05 * exp((3.268) * logT - (3599.00559383536) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 165:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[5] + g_RT[19] - g_RT_qss[5])) *
                           (sc[1] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 166:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[12] + g_RT[19])) * (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 167:  H + iC4H8 <=> C3H6 + CH3
    const amrex::Real k_f =
      6.16e+16 * exp((-2.538) * logT - (5851.90660664309) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[12] + g_RT[19])) * (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 168:  O + iC4H8 <=> CH2CO + 2 CH3
    const amrex::Real k_f =
      240 * exp((1.65) * logT - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - 2.000000 * g_RT[12] + g_RT[14] - g_RT[22])) *
      (refCinv) * ((sc[12] * sc[12]) * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[14] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 169:  C6H5 + CH3 <=> C6H5CH3
    const amrex::Real k_f = 13800000 * exp(-(23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT_qss[8])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 170:  C6H5CH3 + O2 <=> C6H5CH2 + HO2
    const amrex::Real k_f = 300000000 * exp(-(21634.2908962765) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[13] - g_RT[16] - g_RT[27])) *
                           (sc[16] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 171:  C6H5CH3 + OH <=> C6H5CH2 + H2O
    const amrex::Real k_f = 16200000 * exp(-(1393.91016427907) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[15] - g_RT[17] - g_RT[27])) *
                           (sc[17] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 172:  C6H5CH3 + H <=> C6H5CH2 + H2
    const amrex::Real k_f = 125900000 * exp(-(4206.38810946165) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[11] + g_RT[19] - g_RT[27])) *
                           (sc[6] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[11] -= qdot;
    wdot[19] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 173:  C6H5CH3 + H <=> C6H6 + CH3
    const amrex::Real k_f =
      1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] - g_RT[12] + g_RT[19])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 174:  C6H5CH3 + CH3 <=> C6H5CH2 + CH4
    const amrex::Real k_f = 316000 * exp(-(4780.55832514484) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[27])) *
                           (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 175:  C6H5CH2 + H <=> C6H5 + CH3
    const amrex::Real k_f =
      1.5e+60 * exp((-13.94) * logT - (32497.7322776688) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[19] + g_RT[27] - g_RT_qss[8])) *
      (sc[12] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 176:  C6H5CH2 + O <=> C6H5CHO + H
    const amrex::Real k_f = 400000000;
    const amrex::Real qf = k_f * (sc[14] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[19] + g_RT[27] - g_RT[29])) *
                           (sc[19] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[27] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 177:  C6H5CH2 + HO2 <=> C6H5CHO + H + OH
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[16] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[15] + g_RT[16] - g_RT[19] + g_RT[27] - g_RT[29])) *
      (refCinv) * (sc[15] * sc[19] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
    wdot[27] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 178:  C6H5 + HCO <=> C6H5CHO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[29] + g_RT_qss[2] + g_RT_qss[8])) * (refC) * (sc[29]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[29] += qdot;
  }

  {
    // reaction 179:  C6H5CHO <=> C6H5CO + H
    const amrex::Real k_f = 3.98e+15 * exp(-(43729.5282584301) * invT);
    const amrex::Real qf = k_f * (sc[29]);
    const amrex::Real qr = k_f * exp(-(-g_RT[19] + g_RT[29] - g_RT_qss[9])) *
                           (refCinv) * (sc[19] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 180:  C6H5CHO + O2 <=> C6H5CO + HO2
    const amrex::Real k_f = 10200000 * exp(-(19600.2891330938) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[29] - g_RT_qss[9])) *
      (sc[16] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 181:  C6H5CHO + OH <=> C6H5CO + H2O
    const amrex::Real k_f =
      23500 * exp((0.73) * logT - (-558.570499043239) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[29] - g_RT_qss[9])) *
      (sc[17] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 182:  C6H5CHO + H <=> C6H5CO + H2
    const amrex::Real k_f =
      4100 * exp((1.16) * logT - (1207.71999793133) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[29] - g_RT_qss[9])) *
      (sc[6] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 183:  C6H5CHO + H <=> C6H6 + HCO
    const amrex::Real k_f =
      1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT[29] - g_RT_qss[2])) *
      (sc[9] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 184:  C6H5CHO + O <=> C6H5CO + OH
    const amrex::Real k_f = 5800000 * exp(-(905.789998448495) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[29] - g_RT_qss[9])) *
      (sc[15] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 185:  C6H5CHO + CH3 <=> C6H5CO + CH4
    const amrex::Real k_f =
      2e-12 * exp((5.6) * logT - (1237.91299787961) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[29] - g_RT_qss[9])) *
      (sc[2] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 186:  C6H5CO + H2O2 <=> C6H5CHO + HO2
    const amrex::Real k_f = 180000 * exp(-(4139.46029290962) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc_qss[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[18] - g_RT[29] + g_RT_qss[9])) *
      (sc[16] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 187:  C6H5CO <=> C6H5 + CO
    const amrex::Real k_f = 527000000000000 * exp(-(14599.8251249923) * invT);
    const amrex::Real qf = k_f * (sc_qss[9]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT_qss[8] + g_RT_qss[9])) *
                           (refCinv) * (sc[8] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
  }

  {
    // reaction 188:  C6H6 + OH <=> C6H5 + H2O
    const amrex::Real k_f =
      0.3985 * exp((2.286) * logT - (532.403232421393) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[15] - g_RT[17] - g_RT_qss[8])) *
                           (sc[17] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 189:  C6H6 + O <=> C6H5O + H
    const amrex::Real k_f = 13900000 * exp(-(2470.79382910117) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[14] - g_RT[19] - g_RT[28])) *
                           (sc[19] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 190:  C6H6 + O <=> C5H5 + HCO
    const amrex::Real k_f = 13900000 * exp(-(2279.57149609538) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[14] - g_RT[26] - g_RT_qss[2])) *
                           (sc[26] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 191:  C6H5 + H2 <=> C6H6 + H
    const amrex::Real k_f =
      0.05707 * exp((2.43) * logT - (3156.67814459301) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[9] - g_RT[19] + g_RT_qss[8])) *
                           (sc[9] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[9] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 192:  C6H5 + O2 <=> C6H5O + O
    const amrex::Real k_f = 26000000 * exp(-(3079.68599472488) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[14] - g_RT[28] + g_RT_qss[8])) *
      (sc[14] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 193:  C6H5 + O <=> C5H5 + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[26] + g_RT_qss[8])) *
      (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 194:  C6H5 + OH <=> C6H5O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[28] + g_RT_qss[8])) *
      (sc[19] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 195:  C6H5 + HO2 <=> C6H6 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT_qss[8])) *
      (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 196:  C6H5 + CH4 <=> C6H6 + CH3
    const amrex::Real k_f =
      3.89e-09 * exp((4.57) * logT - (2644.90679546961) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc_qss[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[8])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 197:  C6H5O <=> C5H5 + CO
    const amrex::Real k_f =
      3.76e+54 * exp((-12.06) * logT - (36634.1732705836) * invT);
    const amrex::Real qf = k_f * (sc[28]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[26] + g_RT[28])) *
                           (refCinv) * (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[26] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 198:  C5H5 + O <=> C5H4O + H
    const amrex::Real k_f =
      58100000 * exp((-0.02) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[19] - g_RT[25] + g_RT[26])) *
                           (sc[19] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 199:  C5H5 + O2 <=> C5H4O + OH
    const amrex::Real k_f =
      1800000 * exp((0.08) * logT - (9057.89998448495) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[15] - g_RT[25] + g_RT[26])) *
                           (sc[15] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 200:  C5H4O <=> 2 C2H2 + CO
    const amrex::Real k_f =
      6.2e+41 * exp((-7.87) * logT - (49667.4849149258) * invT);
    const amrex::Real qf = k_f * (sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] - 2.000000 * g_RT[10] + g_RT[25])) *
                           ((refCinv * refCinv)) * (sc[8] * (sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] += 2.000000 * qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 201:  C5H4O + O <=> C3H3 + CO + HCO
    const amrex::Real k_f =
      620 * exp((1.45) * logT - (-431.75989926045) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[23] + g_RT[25] - g_RT_qss[2])) *
      (refCinv) * (sc[8] * sc[23] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
  }
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate_light(
  amrex::Real* wdot,
  amrex::Real* sc,
  amrex::Real* g_RT,
  amrex::Real* g_RT_qss,
  amrex::Real* sc_qss,
  amrex::Real* kf_qss,
  amrex::Real* qf_qss,
  amrex::Real* qr_qss,
  const amrex::Real T,
  const amrex::Real invT,
  const amrex::Real logT)
{
  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 31; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 31; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  gibbs(g_RT, T);
  gibbs_qss(g_RT_qss, T);

  // Fill sc_qss here
  comp_k_f_qss(T, invT, logT, kf_qss);
  comp_qss_coeff(kf_qss, qf_qss, qr_qss, sc, T, g_RT, g_RT_qss);
  comp_sc_qss(sc_qss, qf_qss, qr_qss);

  {
    // reaction 0:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * logT);
    amrex::Real Corr = mixture + (0.0900000000000001) * sc[8] +
                       (-0.15) * sc[13] + (10.89) * sc[17] + (1.18) * sc[21];
    const amrex::Real redP =
      Corr / k_f * 63280000 * exp(-1.4 * logT - 0 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-T * 1e+30) + 0.5 * exp(-T * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[13] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[19])) * (refC) * (sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 1:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * logT);
    amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (5) * sc[17] + (2.6) * sc[21];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * logT - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-T * 0.0106382978723404) +
      0.7346 * exp(-T * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[15] * sc[15]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[15] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 2:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * logT - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * logT - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-T * 0.0050761421319797) +
      0.932 * exp(-T * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[6] * sc[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[6] + g_RT[8] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[8] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 3:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * logT - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * logT - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-T * 0.003690036900369) +
      0.7824 * exp(-T * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] - g_RT[20] + g_RT_qss[2])) * (refC) *
                           (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 4:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * logT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * logT - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-T * 0.0128205128205128) +
      0.68 * exp(-T * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[0]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[12] + g_RT[19] + g_RT_qss[0])) * (refC) *
                           (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 5:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * logT - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * logT - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-T * 0.00363636363636364) +
      0.5907 * exp(-T * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[8] * sc_qss[0]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[8] - g_RT[22] + g_RT_qss[0])) * (refC) * (sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 6:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * logT - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * logT - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-T * 0.0106382978723404) +
      0.758 * exp(-T * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[20]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] + g_RT[20] - g_RT_qss[3])) * (refC) *
                           (sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 7:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * logT - (192.731983003208) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * logT - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-T * 0.0135135135135135) +
      0.783 * exp(-T * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[19])) * (refC) * (sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 8:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * logT - (311.994332798926) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * logT - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-T * 0.00662251655629139) +
      0.5325 * exp(-T * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[7] + 2.000000 * g_RT[12])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[12] -= 2.000000 * qdot;
  }

  {
    // reaction 9:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      386000000 * exp((1.62) * logT - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * logT - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-T * 0.000185745862510913) +
      1.9816 * exp(-T * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[10] - g_RT[19] + g_RT_qss[4])) *
                           (refCinv) * (sc[10] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 10:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      330000000 * exp((-0.06) * logT - (4277.34165934012) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.8e+29 * exp(-7.64 * logT - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-T * 0.000585823081429408) + 0.337 * exp(-T * 0.0003125) +
      exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[22]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[19] + g_RT[22] - g_RT_qss[7])) * (refC) *
                           (sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 11:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * logT - (140.900666425322) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * logT - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-T * 0.00481927710843374) +
      0.782 * exp(-T * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[1] + g_RT[19] + g_RT_qss[4])) * (refC) * (sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 12:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[6] + (2) * sc[7] +
                       (0.5) * sc[8] + (2) * sc[10] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * logT - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-T * 0.000745934656124124) +
      0.175 * exp(-T * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc_qss[4]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + g_RT[12] + g_RT_qss[4])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 13:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1370 * exp((1.463) * logT - (681.858582165395) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 2.9e+27 * exp(-6.642 * logT - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.569 * exp(-T * -0.000109325461900077) +
      1.569 * exp(-T * 0.00334448160535117) + exp(-152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[19]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(g_RT[1] + g_RT[19] - g_RT_qss[5])) * (refC) *
                           (sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 14:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * logT - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * logT - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-T * 0.008) + 0.8422 * exp(-T * 0.000450653447498873) +
      exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[5]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[7] + g_RT[19] + g_RT_qss[5])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 15:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * logT - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-T * 0.000439000834101585) +
      0.198 * exp(-T * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc_qss[4] * sc_qss[5]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[5] + g_RT_qss[4] + g_RT_qss[5])) *
                           (refC) * (sc[5]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[5] += qdot;
  }

  {
    // reaction 16:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * logT - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-T * 0.000911909538573774) +
      0.02 * exp(-T * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + g_RT[19] + g_RT[24])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[19] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 17:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * logT - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * logT - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-T * 0.00062266500622665) +
      0.104 * exp(-T * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[12] * sc[24]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[5] + g_RT[12] + g_RT[24])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[12] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 18:  C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr = mixture + sc[2] + sc[6] + (2) * sc[7] + (0.5) * sc[8] +
                       (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 1.1e+91 * exp(-24.63 * logT - 7341.93115409086 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.569 * exp(-T * 0.00261096605744125) +
      0.431 * exp(-T * 0.00657894736842105) + exp(-4730 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc[27]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[11] + g_RT[19] + g_RT[27])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[19] -= qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 19:  C6H5 + H (+M) <=> C6H6 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr =
      mixture + sc[2] + sc[6] + (0.5) * sc[8] + (5) * sc[17] + sc[21];
    const amrex::Real redP =
      Corr / k_f * 6.6e+63 * exp(-16.3 * logT - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-T * 0.0017096939647803) + exp(-6113 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = exp(M_LN10 * logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[19] * sc_qss[8]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT_qss[8])) * (refC) * (sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 20:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * logT - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[8] * sc[14]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[8] + g_RT[14] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[14] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 21:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * logT);
    const amrex::Real Corr =
      mixture + (-1) * sc[6] + (-1) * sc[17] + (-1) * sc[21];
    const amrex::Real qf = Corr * k_f * ((sc[19] * sc[19]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC) * (sc[6]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= 2.000000 * qdot;
  }

  {
    // reaction 22:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * logT);
    const amrex::Real qf = k_f * (sc[17] * (sc[19] * sc[19]));
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + 2.000000 * g_RT[19])) * (refC) * (sc[6] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= 2.000000 * qdot;
  }

  {
    // reaction 23:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * logT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (5.3) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc[15] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[19])) * (refC) * (sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 24:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * logT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (11) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc[14] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[19])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 25:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * logT);
    const amrex::Real Corr = mixture + (1.4) * sc[6] + (0.75) * sc[8] +
                             (14.4) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * ((sc[14] * sc[14]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[13] + 2.000000 * g_RT[14])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= 2.000000 * qdot;
  }

  {
    // reaction 26:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[6] + (0.75) * sc[8] + (-1) * sc[17] + (2.6) * sc[21];
    const amrex::Real qf = Corr * k_f * (sc_qss[2]);
    const amrex::Real qr = Corr * k_f *
                           exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) *
                           (refCinv) * (sc[8] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 27:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * logT - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc_qss[2]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[19] + g_RT_qss[2])) *
                           (refCinv) * (sc[8] * sc[17] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 28:  POSF10325 => 1.74268 C2H4 + 0.819058 C3H6 + 0.261401 C4H81
    // + 0.163333 C6H5CH3 + 0.17 C6H6 + 1.5 CH3 + 0.5 H + 0.0871338 iC4H8
    const amrex::Real k_f =
      1.53e+27 * exp((-2.58) * logT - (44130.5919410765) * invT);
    const amrex::Real qf = k_f * (sc[0]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.742680 * qdot;
    wdot[3] += 0.819058 * qdot;
    wdot[4] += 0.087134 * qdot;
    wdot[5] += 0.261401 * qdot;
    wdot[9] += 0.170000 * qdot;
    wdot[11] += 0.163333 * qdot;
    wdot[12] += 1.500000 * qdot;
    wdot[19] += 0.500000 * qdot;
  }

  {
    // reaction 29:  H + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      7.66e-08 * exp((4.76) * logT - (651.615260550532) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[19]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[6] += qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[19] -= qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 30:  CH3 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 1.45 CH4 + 0.3 H +
    // 0.0797288 iC4H8
    const amrex::Real k_f =
      3.17e-13 * exp((5.95) * logT - (2892.69068171185) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[12]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 1.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[12] -= qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 31:  OH + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + H2O
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      2960 * exp((1.02) * logT - (107.285793149566) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[15]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 32:  O2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + HO2
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      1780000000 * exp((0.06) * logT - (22409.5464916153) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[13]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 33:  HO2 + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H +
    // H2O2 + 0.0797288 iC4H8
    const amrex::Real k_f =
      0.0698 * exp((2.94) * logT - (6446.20548895846) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[16]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 34:  O + POSF10325 => 1.59458 C2H4 + 0.749451 C3H6 + 0.239186
    // C4H81 + 0.236833 C6H5CH3 + 0.2465 C6H6 + 0.7 CH3 + 0.45 CH4 + 0.3 H + OH
    // + 0.0797288 iC4H8
    const amrex::Real k_f =
      8.94e-05 * exp((3.86) * logT - (385.011071007191) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[14]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 1.594580 * qdot;
    wdot[2] += 0.450000 * qdot;
    wdot[3] += 0.749451 * qdot;
    wdot[4] += 0.079729 * qdot;
    wdot[5] += 0.239186 * qdot;
    wdot[9] += 0.246500 * qdot;
    wdot[11] += 0.236833 * qdot;
    wdot[12] += 0.700000 * qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] += 0.300000 * qdot;
  }

  {
    // reaction 35:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * logT - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[14] - g_RT[15] + g_RT[19])) *
                           (sc[14] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 36:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * logT - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[14] - g_RT[15] - g_RT[19])) *
                           (sc[15] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 37:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * logT - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[15] - g_RT[17] - g_RT[19])) *
                           (sc[17] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 38:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * logT - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[15] * sc[15]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[14] + 2.000000 * g_RT[15] - g_RT[17])) *
                           (sc[14] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[14] += qdot;
    wdot[15] -= 2.000000 * qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 39:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * logT - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] + g_RT[13] - g_RT[16] - g_RT[19])) *
                           (sc[16] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 40:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-2.000000 * g_RT[15] + g_RT[16] + g_RT[19])) *
                           ((sc[15] * sc[15]));
    const amrex::Real qdot = qf - qr;
    wdot[15] += 2.000000 * qdot;
    wdot[16] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 41:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[14] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[14] - g_RT[15] + g_RT[16])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 42:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 43:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[16] * sc[16]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + 2.000000 * g_RT[16] - g_RT[18])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[16] -= 2.000000 * qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 44:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1410000000000 * exp((-1.76) * logT - (30.1929999482832) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 45:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      5.37e+64 * exp((-16.72) * logT - (16555.8283049753) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 46:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      2510000 * exp((2) * logT - (20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[16] - g_RT[17])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 47:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * logT - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[16] + g_RT[18] + g_RT[19])) *
                           (sc[6] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 48:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[15] - g_RT[17] + g_RT[18] + g_RT[19])) *
                           (sc[15] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 49:  H2O2 + O <=> HO2 + OH
    const amrex::Real k_f = 9.63 * exp((2) * logT - (1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[15] - g_RT[16] + g_RT[18])) *
                           (sc[15] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 50:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * logT - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[15] - g_RT[16] - g_RT[17] + g_RT[18])) *
                           (sc[16] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[16] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 51:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * logT - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21])) *
                           (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 52:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * logT - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[15] - g_RT[19] - g_RT[21])) *
                           (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 53:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[13] - g_RT[14] - g_RT[21])) *
                           (sc[14] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 54:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * logT - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[15] + g_RT[16] - g_RT[21])) *
                           (sc[15] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 55:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[8] + g_RT[19] + g_RT_qss[2])) *
                           (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 56:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[15] + g_RT_qss[2])) *
      (sc[8] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 57:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[21] + g_RT_qss[2])) *
      (sc[19] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 58:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[15] - g_RT[17] + g_RT_qss[2])) *
      (sc[8] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 59:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * logT - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[16] + g_RT_qss[2])) *
      (sc[8] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 60:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[19] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 61:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[0])) *
      (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 62:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * logT - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[0])) *
                           (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[12] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 63:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[15] + g_RT_qss[0] - g_RT_qss[2])) *
      (sc[15] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 64:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - 2.000000 * g_RT[19] - g_RT[21] + g_RT_qss[0])) *
      (refCinv) * ((sc[19] * sc[19]) * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[19] += 2.000000 * qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 65:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[30] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[30] - g_RT[30] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[30] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[30] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 66:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] - g_RT[8] + g_RT[14] + g_RT_qss[1])) *
                           (sc[6] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[8] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 67:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT_qss[1])) *
      (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 68:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[6] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[12] - g_RT[19] + g_RT_qss[1])) *
                           (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[12] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 69:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[15] - g_RT[19] + g_RT_qss[1])) *
      (refCinv) * (sc[8] * sc[15] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 70:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[13] - g_RT[17] + g_RT_qss[1])) *
      (sc[8] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[13] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 71:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[17] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[17] - g_RT[17] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[17] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 72:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[8] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[8] - g_RT[8] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[8] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 73:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[21] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[21] - g_RT[21] - g_RT_qss[0] + g_RT_qss[1])) *
      (sc[21] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[21] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 74:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[21] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[20] + g_RT[21] + g_RT_qss[1])) *
      (sc[8] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 75:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * logT - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[20] - g_RT_qss[2])) *
      (sc[6] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 76:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[20] - g_RT_qss[2])) *
      (sc[15] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 77:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * logT - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[20] - g_RT_qss[2])) *
      (sc[17] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 78:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[20] - g_RT_qss[2])) *
      (sc[16] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 79:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[16] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[16] - g_RT[18] + g_RT[20] - g_RT_qss[2])) *
      (sc[18] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[18] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 80:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[12] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] + g_RT[14] - g_RT[19] - g_RT[20])) *
                           (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 81:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * logT - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[0])) *
      (sc[17] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 82:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[12] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[15] - g_RT[17] - g_RT_qss[1])) *
      (sc[17] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 83:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] + g_RT[13] - g_RT[14] - g_RT_qss[3])) *
      (sc[14] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 84:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] + g_RT[13] - g_RT[15] - g_RT[20])) *
                           (sc[15] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 85:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] - g_RT[13] + g_RT[16])) *
                           (sc[2] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 86:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[12] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[15] + g_RT[16] - g_RT_qss[3])) *
      (sc[15] * sc_qss[3]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 87:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * logT - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] - g_RT[16] + g_RT[18])) *
                           (sc[2] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 88:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] - g_RT[8] + g_RT[12] + g_RT_qss[2])) *
                           (sc[2] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 89:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * logT - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[20] - g_RT_qss[2])) *
      (sc[2] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 90:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[12] - g_RT[19] + g_RT_qss[0])) *
      (sc[1] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 91:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * logT - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr =
      k_f * exp(-(2.000000 * g_RT[12] - g_RT[19] - g_RT_qss[5])) *
      (sc[19] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 92:  CH3 + HCCO <=> C2H4 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[12] * sc_qss[6]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[8] + g_RT[12] + g_RT_qss[6])) *
                           (sc[1] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[8] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 93:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[20] + g_RT_qss[3])) *
      (sc[6] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 94:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT[19] + g_RT_qss[3])) *
      (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 95:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[17] + g_RT[19] - g_RT_qss[1] + g_RT_qss[3])) *
      (sc[17] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[17] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 96:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[20] + g_RT_qss[3])) *
      (sc[17] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 97:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * logT - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[3]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[20] + g_RT_qss[3])) *
      (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 98:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * logT - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[12] + g_RT[19])) * (sc[6] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[6] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 99:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * logT - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] + g_RT[14] - g_RT[15])) *
                           (sc[12] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 100:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f = 100 * exp((1.6) * logT - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[12] + g_RT[15] - g_RT[17])) *
                           (sc[12] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 101:  CH2 + CH4 <=> 2 CH3
    const amrex::Real k_f = 2.46 * exp((2) * logT - (4161.60182620503) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - 2.000000 * g_RT[12] + g_RT_qss[0])) *
                           ((sc[12] * sc[12]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[12] += 2.000000 * qdot;
  }

  {
    // reaction 102:  H + HCCO <=> CH2* + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[19] - g_RT_qss[1] + g_RT_qss[6])) *
      (sc[8] * sc_qss[1]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 103:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[8] + g_RT[14] - g_RT[19] + g_RT_qss[6])) *
      (refCinv) * ((sc[8] * sc[8]) * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += 2.000000 * qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 104:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[8] + g_RT[13] - g_RT[15] + g_RT_qss[6])) *
      (refCinv) * ((sc[8] * sc[8]) * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += 2.000000 * qdot;
    wdot[13] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 105:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc_qss[0] * sc_qss[6]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT_qss[0] - g_RT_qss[4] + g_RT_qss[6])) *
      (sc[8] * sc_qss[4]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[8] += qdot;
  }

  {
    // reaction 106:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT[14] - g_RT_qss[0])) *
      (sc[8] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 107:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f = 16.32 * exp((2) * logT - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[14] - g_RT[19] - g_RT_qss[6])) *
      (sc[19] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 108:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * logT - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] + g_RT[15] - g_RT[19] - g_RT[22])) *
                           (sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 109:  C2H2 + OH <=> CH3 + CO
    const amrex::Real k_f =
      4.83e-10 * exp((4) * logT - (-1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] + g_RT[10] - g_RT[12] + g_RT[15])) *
                           (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 110:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * logT - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[10] + g_RT_qss[2] - g_RT_qss[4])) *
      (sc[8] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] -= qdot;
  }

  {
    // reaction 111:  C2H2 + CH2 <=> C3H3 + H
    const amrex::Real k_f = 12000000 * exp(-(3331.29432762724) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc_qss[0]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[0])) *
      (sc[19] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 112:  C2H2 + CH2* <=> C3H3 + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[10] * sc_qss[1]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] - g_RT[19] - g_RT[23] + g_RT_qss[1])) *
      (sc[19] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 113:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      2.68e+47 * exp((-12.82) * logT - (17979.9314692026) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[12] - g_RT[24])) * (refC) * (sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 114:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[22] - g_RT_qss[6])) *
      (sc[6] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 115:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f =
      1500 * exp((1.43) * logT - (1353.6528310147) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] - g_RT[12] + g_RT[19] + g_RT[22])) *
                           (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 116:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[22] - g_RT_qss[6])) *
      (sc[15] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 117:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[21] + g_RT[22] - g_RT_qss[0])) *
      (sc[21] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[21] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 118:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[22]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[22] - g_RT_qss[6])) *
      (sc[17] * sc_qss[6]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 119:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] - g_RT[10] + g_RT[19] + g_RT_qss[4])) *
      (sc[6] * sc[10]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[10] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 120:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[19] - g_RT[22] + g_RT_qss[4])) *
      (sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 121:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT[14] + g_RT_qss[4])) *
      (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 122:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] + g_RT[15] - g_RT[17] + g_RT_qss[4])) *
      (sc[10] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 123:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * logT - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[10] + g_RT[13] - g_RT[16] + g_RT_qss[4])) *
      (sc[10] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 124:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * logT - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[14] + g_RT_qss[4] - g_RT_qss[7])) *
      (sc[14] * sc_qss[7]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 125:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * logT - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[20] - g_RT_qss[2] + g_RT_qss[4])) *
      (sc[20] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 126:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * logT - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[4]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[12] - g_RT[19] - g_RT[24] + g_RT_qss[4])) *
      (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 127:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      7.8e+41 * exp((-9.147) * logT - (23600.8616262414) * invT);
    const amrex::Real qf = k_f * (sc_qss[7]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[12] + g_RT_qss[7])) *
                           (refCinv) * (sc[8] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 128:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[19] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[19] - g_RT_qss[2] + g_RT_qss[7])) *
      (sc[12] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 129:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] - g_RT[22] + g_RT_qss[7])) *
      (sc[6] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 130:  CH2CHO + O <=> CH2CO + OH
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] - g_RT[22] + g_RT_qss[7])) *
      (sc[15] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 131:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 10000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] - g_RT[22] + g_RT_qss[7])) *
      (sc[17] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 132:  CH2CHO + O2 <=> CH2CO + HO2
    const amrex::Real k_f = 140000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[7]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] - g_RT[22] + g_RT_qss[7])) *
      (sc[16] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 133:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * logT - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[6] + g_RT[19] - g_RT_qss[4])) *
                           (sc[6] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 134:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * logT - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[14] - g_RT[15] - g_RT_qss[4])) *
                           (sc[15] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 135:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] + g_RT[14] - g_RT_qss[2])) *
                           (sc[12] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 136:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * logT - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[14] - g_RT[20] - g_RT_qss[0])) *
                           (sc[20] * sc_qss[0]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[14] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 137:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * logT - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[15] - g_RT[17] - g_RT_qss[4])) *
                           (sc[17] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 138:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * logT - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[2]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[8] + g_RT_qss[2] - g_RT_qss[5])) *
      (sc[8] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[8] += qdot;
  }

  {
    // reaction 139:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc_qss[0]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[0])) *
                           (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 140:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[1] * sc_qss[1]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[19] - g_RT[24] + g_RT_qss[1])) *
                           (sc[19] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 141:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f = 0.227 * exp((2) * logT - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[2] + g_RT[12] - g_RT_qss[4])) *
                           (sc[2] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 142:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[13] - g_RT[16] - g_RT_qss[4])) *
                           (sc[16] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 143:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[14] - g_RT[20] + g_RT_qss[5])) *
      (sc[12] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 144:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[13] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[13] - g_RT[16] + g_RT_qss[5])) *
      (sc[1] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
  }

  {
    // reaction 145:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[5]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] - g_RT[15] + g_RT[16] - g_RT[20] + g_RT_qss[5])) *
      (refCinv) * (sc[12] * sc[15] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 146:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f = 115 * exp((1.9) * logT - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[7] + g_RT[19] - g_RT_qss[5])) *
                           (sc[6] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[7] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 147:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * logT - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] + g_RT[14] - g_RT[15] - g_RT_qss[5])) *
                           (sc[15] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 148:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * logT - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] + g_RT[15] - g_RT[17] - g_RT_qss[5])) *
                           (sc[17] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 149:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * logT - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[7] + g_RT[12] - g_RT_qss[5])) *
                           (sc[2] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[7] -= qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 150:  C3H3 + O2 <=> CH2CO + HCO
    const amrex::Real k_f = 30000 * exp(-(1443.22539752794) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[22] + g_RT[23] - g_RT_qss[2])) *
      (sc[22] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 151:  C3H3 + HO2 <=> C2H3 + CO + OH
    const amrex::Real k_f = 800000;
    const amrex::Real qf = k_f * (sc[16] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] - g_RT[15] + g_RT[16] + g_RT[23] - g_RT_qss[4])) *
      (refCinv) * (sc[8] * sc[15] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 152:  C2H2 + C3H3 <=> C5H5
    const amrex::Real k_f =
      6.87e+49 * exp((-12.5) * logT - (21147.6803804433) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[23]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[10] + g_RT[23] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[23] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 153:  2 C3H3 => C6H5 + H
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 154:  2 C3H3 => C6H6
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * ((sc[23] * sc[23]));
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[23] -= 2.000000 * qdot;
  }

  {
    // reaction 155:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[16] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] - g_RT[13] + g_RT[16] + g_RT[24])) *
                           (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 156:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[16] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[15] + g_RT[16] - g_RT[20] + g_RT[24] - g_RT_qss[4])) *
      (refCinv) * (sc[15] * sc[20] * sc_qss[4]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 157:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[24] * sc_qss[2]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] - g_RT[8] + g_RT[24] + g_RT_qss[2])) *
                           (sc[3] * sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 158:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      8e+15 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[3] - g_RT[12] + g_RT[19])) * (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 159:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      1.92 * exp((2.309) * logT - (2352.03469597126) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[6] + g_RT[19] - g_RT[24])) * (sc[6] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 160:  C3H6 + O <=> CH2CO + CH3 + H
    const amrex::Real k_f = 80 * exp((1.65) * logT - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[12] + g_RT[14] - g_RT[19] - g_RT[22])) *
      (refCinv) * (sc[12] * sc[19] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 161:  C3H6 + O => C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * logT - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr = 0.0;
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 162:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * logT - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] + g_RT[14] - g_RT[15] - g_RT[24])) *
                           (sc[15] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 163:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * logT - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[3] + g_RT[15] - g_RT[17] - g_RT[24])) *
                           (sc[17] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 164:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      4.54e-05 * exp((3.268) * logT - (3599.00559383536) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[12]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[3] + g_RT[12] - g_RT[24])) * (sc[2] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[3] -= qdot;
    wdot[12] -= qdot;
    wdot[24] += qdot;
  }

  {
    // reaction 165:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[5] + g_RT[19] - g_RT_qss[5])) *
                           (sc[1] * sc_qss[5]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 166:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * logT - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[12] + g_RT[19])) * (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[5] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 167:  H + iC4H8 <=> C3H6 + CH3
    const amrex::Real k_f =
      6.16e+16 * exp((-2.538) * logT - (5851.90660664309) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] - g_RT[12] + g_RT[19])) * (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 168:  O + iC4H8 <=> CH2CO + 2 CH3
    const amrex::Real k_f =
      240 * exp((1.65) * logT - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - 2.000000 * g_RT[12] + g_RT[14] - g_RT[22])) *
      (refCinv) * ((sc[12] * sc[12]) * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[12] += 2.000000 * qdot;
    wdot[14] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 169:  C6H5 + CH3 <=> C6H5CH3
    const amrex::Real k_f = 13800000 * exp(-(23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT_qss[8])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 170:  C6H5CH3 + O2 <=> C6H5CH2 + HO2
    const amrex::Real k_f = 300000000 * exp(-(21634.2908962765) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[13]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[13] - g_RT[16] - g_RT[27])) *
                           (sc[16] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 171:  C6H5CH3 + OH <=> C6H5CH2 + H2O
    const amrex::Real k_f = 16200000 * exp(-(1393.91016427907) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[15] - g_RT[17] - g_RT[27])) *
                           (sc[17] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 172:  C6H5CH3 + H <=> C6H5CH2 + H2
    const amrex::Real k_f = 125900000 * exp(-(4206.38810946165) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[6] + g_RT[11] + g_RT[19] - g_RT[27])) *
                           (sc[6] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[11] -= qdot;
    wdot[19] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 173:  C6H5CH3 + H <=> C6H6 + CH3
    const amrex::Real k_f =
      1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] - g_RT[12] + g_RT[19])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[19] -= qdot;
  }

  {
    // reaction 174:  C6H5CH3 + CH3 <=> C6H5CH2 + CH4
    const amrex::Real k_f = 316000 * exp(-(4780.55832514484) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[11] + g_RT[12] - g_RT[27])) *
                           (sc[2] * sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 175:  C6H5CH2 + H <=> C6H5 + CH3
    const amrex::Real k_f =
      1.5e+60 * exp((-13.94) * logT - (32497.7322776688) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[12] + g_RT[19] + g_RT[27] - g_RT_qss[8])) *
      (sc[12] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[19] -= qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 176:  C6H5CH2 + O <=> C6H5CHO + H
    const amrex::Real k_f = 400000000;
    const amrex::Real qf = k_f * (sc[14] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[19] + g_RT[27] - g_RT[29])) *
                           (sc[19] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[27] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 177:  C6H5CH2 + HO2 <=> C6H5CHO + H + OH
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[16] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[15] + g_RT[16] - g_RT[19] + g_RT[27] - g_RT[29])) *
      (refCinv) * (sc[15] * sc[19] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[15] += qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
    wdot[27] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 178:  C6H5 + HCO <=> C6H5CHO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc_qss[2] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[29] + g_RT_qss[2] + g_RT_qss[8])) * (refC) * (sc[29]);
    // Remove forward reaction
    // const amrex::Real qdot = qf - qr;
    const amrex::Real qdot = -qr;
    wdot[29] += qdot;
  }

  {
    // reaction 179:  C6H5CHO <=> C6H5CO + H
    const amrex::Real k_f = 3.98e+15 * exp(-(43729.5282584301) * invT);
    const amrex::Real qf = k_f * (sc[29]);
    const amrex::Real qr = k_f * exp(-(-g_RT[19] + g_RT[29] - g_RT_qss[9])) *
                           (refCinv) * (sc[19] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[19] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 180:  C6H5CHO + O2 <=> C6H5CO + HO2
    const amrex::Real k_f = 10200000 * exp(-(19600.2891330938) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[16] + g_RT[29] - g_RT_qss[9])) *
      (sc[16] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[16] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 181:  C6H5CHO + OH <=> C6H5CO + H2O
    const amrex::Real k_f =
      23500 * exp((0.73) * logT - (-558.570499043239) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[17] + g_RT[29] - g_RT_qss[9])) *
      (sc[17] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[17] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 182:  C6H5CHO + H <=> C6H5CO + H2
    const amrex::Real k_f =
      4100 * exp((1.16) * logT - (1207.71999793133) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[6] + g_RT[19] + g_RT[29] - g_RT_qss[9])) *
      (sc[6] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[6] += qdot;
    wdot[19] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 183:  C6H5CHO + H <=> C6H6 + HCO
    const amrex::Real k_f =
      1.93 * exp((2.17) * logT - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[19] + g_RT[29] - g_RT_qss[2])) *
      (sc[9] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 184:  C6H5CHO + O <=> C6H5CO + OH
    const amrex::Real k_f = 5800000 * exp(-(905.789998448495) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[14] - g_RT[15] + g_RT[29] - g_RT_qss[9])) *
      (sc[15] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[15] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 185:  C6H5CHO + CH3 <=> C6H5CO + CH4
    const amrex::Real k_f =
      2e-12 * exp((5.6) * logT - (1237.91299787961) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[12] + g_RT[29] - g_RT_qss[9])) *
      (sc[2] * sc_qss[9]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 186:  C6H5CO + H2O2 <=> C6H5CHO + HO2
    const amrex::Real k_f = 180000 * exp(-(4139.46029290962) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc_qss[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[16] + g_RT[18] - g_RT[29] + g_RT_qss[9])) *
      (sc[16] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[18] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 187:  C6H5CO <=> C6H5 + CO
    const amrex::Real k_f = 527000000000000 * exp(-(14599.8251249923) * invT);
    const amrex::Real qf = k_f * (sc_qss[9]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT_qss[8] + g_RT_qss[9])) *
                           (refCinv) * (sc[8] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
  }

  {
    // reaction 188:  C6H6 + OH <=> C6H5 + H2O
    const amrex::Real k_f =
      0.3985 * exp((2.286) * logT - (532.403232421393) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[15] - g_RT[17] - g_RT_qss[8])) *
                           (sc[17] * sc_qss[8]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[15] -= qdot;
    wdot[17] += qdot;
  }

  {
    // reaction 189:  C6H6 + O <=> C6H5O + H
    const amrex::Real k_f = 13900000 * exp(-(2470.79382910117) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[14] - g_RT[19] - g_RT[28])) *
                           (sc[19] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 190:  C6H6 + O <=> C5H5 + HCO
    const amrex::Real k_f = 13900000 * exp(-(2279.57149609538) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] + g_RT[14] - g_RT[26] - g_RT_qss[2])) *
                           (sc[26] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[14] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 191:  C6H5 + H2 <=> C6H6 + H
    const amrex::Real k_f =
      0.05707 * exp((2.43) * logT - (3156.67814459301) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc_qss[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[6] - g_RT[9] - g_RT[19] + g_RT_qss[8])) *
                           (sc[9] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[9] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 192:  C6H5 + O2 <=> C6H5O + O
    const amrex::Real k_f = 26000000 * exp(-(3079.68599472488) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[13] - g_RT[14] - g_RT[28] + g_RT_qss[8])) *
      (sc[14] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[14] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 193:  C6H5 + O <=> C5H5 + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[14] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[26] + g_RT_qss[8])) *
      (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 194:  C6H5 + OH <=> C6H5O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[15] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[28] + g_RT_qss[8])) *
      (sc[19] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 195:  C6H5 + HO2 <=> C6H6 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[16] * sc_qss[8]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[13] + g_RT[16] + g_RT_qss[8])) *
      (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[13] += qdot;
    wdot[16] -= qdot;
  }

  {
    // reaction 196:  C6H5 + CH4 <=> C6H6 + CH3
    const amrex::Real k_f =
      3.89e-09 * exp((4.57) * logT - (2644.90679546961) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc_qss[8]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] - g_RT[9] - g_RT[12] + g_RT_qss[8])) *
                           (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[9] += qdot;
    wdot[12] += qdot;
  }

  {
    // reaction 197:  C6H5O <=> C5H5 + CO
    const amrex::Real k_f =
      3.76e+54 * exp((-12.06) * logT - (36634.1732705836) * invT);
    const amrex::Real qf = k_f * (sc[28]);
    const amrex::Real qr = k_f * exp(-(-g_RT[8] - g_RT[26] + g_RT[28])) *
                           (refCinv) * (sc[8] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[26] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 198:  C5H5 + O <=> C5H4O + H
    const amrex::Real k_f =
      58100000 * exp((-0.02) * logT - (10.0643333160944) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[14] - g_RT[19] - g_RT[25] + g_RT[26])) *
                           (sc[19] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[14] -= qdot;
    wdot[19] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 199:  C5H5 + O2 <=> C5H4O + OH
    const amrex::Real k_f =
      1800000 * exp((0.08) * logT - (9057.89998448495) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[15] - g_RT[25] + g_RT[26])) *
                           (sc[15] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[15] += qdot;
    wdot[25] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 200:  C5H4O <=> 2 C2H2 + CO
    const amrex::Real k_f =
      6.2e+41 * exp((-7.87) * logT - (49667.4849149258) * invT);
    const amrex::Real qf = k_f * (sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[8] - 2.000000 * g_RT[10] + g_RT[25])) *
                           ((refCinv * refCinv)) * (sc[8] * (sc[10] * sc[10]));
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[10] += 2.000000 * qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 201:  C5H4O + O <=> C3H3 + CO + HCO
    const amrex::Real k_f =
      620 * exp((1.45) * logT - (-431.75989926045) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[14] - g_RT[23] + g_RT[25] - g_RT_qss[2])) *
      (refCinv) * (sc[8] * sc[23] * sc_qss[2]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[14] -= qdot;
    wdot[23] += qdot;
    wdot[25] -= qdot;
  }

  return;
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(const amrex::Real T, amrex::Real C[], amrex::Real wdot[])
{

  // convert to SI
  for (int id = 0; id < 31; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[31]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 31; i++) {
    YOW += y[i] * imw(i);
  }
  // PW/RT (see Eq. 7)
  PWORT = P / (YOW * 8.31446261815324e+07 * T);
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  for (int i = 0; i < 31; i++) {
    c[i] = PWORT * y[i] * imw(i);
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(
  const amrex::Real P,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[31]; // temporary storage
  amrex::Real PORT =
    1e6 * P / (8.31446261815324e+07 * T); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (int id = 0; id < 31; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real y[],
  amrex::Real wdot[])
{
  amrex::Real c[31]; // temporary storage

  // See Eq 8 with an extra 1e6 so c goes to SI
  for (int i = 0; i < 31; i++) {
    c[i] = 1e6 * rho * y[i] * imw(i);
  }

  // call productionRate
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(
  const amrex::Real rho,
  const amrex::Real T,
  const amrex::Real x[],
  amrex::Real wdot[])
{
  amrex::Real c[31];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 42.081000;   // C3H6
  XW += x[4] * 56.108000;   // iC4H8
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 2.016000;    // H2
  XW += x[7] * 30.070000;   // C2H6
  XW += x[8] * 28.010000;   // CO
  XW += x[9] * 78.114000;   // C6H6
  XW += x[10] * 26.038000;  // C2H2
  XW += x[11] * 92.141000;  // C6H5CH3
  XW += x[12] * 15.035000;  // CH3
  XW += x[13] * 31.998000;  // O2
  XW += x[14] * 15.999000;  // O
  XW += x[15] * 17.007000;  // OH
  XW += x[16] * 33.006000;  // HO2
  XW += x[17] * 18.015000;  // H2O
  XW += x[18] * 34.014000;  // H2O2
  XW += x[19] * 1.008000;   // H
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 44.009000;  // CO2
  XW += x[22] * 42.037000;  // CH2CO
  XW += x[23] * 39.057000;  // C3H3
  XW += x[24] * 41.073000;  // aC3H5
  XW += x[25] * 80.086000;  // C5H4O
  XW += x[26] * 65.095000;  // C5H5
  XW += x[27] * 91.133000;  // C6H5CH2
  XW += x[28] * 93.105000;  // C6H5O
  XW += x[29] * 106.124000; // C6H5CHO
  XW += x[30] * 28.014000;  // N2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * rho / XW;

  // Compute conversion, see Eq 11
  for (int id = 0; id < 31; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, T);

  // convert to chemkin units
  for (int id = 0; id < 31; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

//  species unit charge number
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int kcharge[])
{
  kcharge[0] = 0;  // POSF10325
  kcharge[1] = 0;  // C2H4
  kcharge[2] = 0;  // CH4
  kcharge[3] = 0;  // C3H6
  kcharge[4] = 0;  // iC4H8
  kcharge[5] = 0;  // C4H81
  kcharge[6] = 0;  // H2
  kcharge[7] = 0;  // C2H6
  kcharge[8] = 0;  // CO
  kcharge[9] = 0;  // C6H6
  kcharge[10] = 0; // C2H2
  kcharge[11] = 0; // C6H5CH3
  kcharge[12] = 0; // CH3
  kcharge[13] = 0; // O2
  kcharge[14] = 0; // O
  kcharge[15] = 0; // OH
  kcharge[16] = 0; // HO2
  kcharge[17] = 0; // H2O
  kcharge[18] = 0; // H2O2
  kcharge[19] = 0; // H
  kcharge[20] = 0; // CH2O
  kcharge[21] = 0; // CO2
  kcharge[22] = 0; // CH2CO
  kcharge[23] = 0; // C3H3
  kcharge[24] = 0; // aC3H5
  kcharge[25] = 0; // C5H4O
  kcharge[26] = 0; // C5H5
  kcharge[27] = 0; // C6H5CH2
  kcharge[28] = 0; // C6H5O
  kcharge[29] = 0; // C6H5CHO
  kcharge[30] = 0; // N2
}

//  species charge per unit mass
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real zk[])
{

  int kchrg[31];
  CKCHRG(kchrg);

  for (int id = 0; id < 31; ++id) {
    zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw(id);
  }
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real T, const int HP)
{

  // Analytical Jacobian with QSSA is only supported with symbolic
  // implementation. Re-build in ceptr with -qsj flag.
  amrex::Abort();
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, const amrex::Real* sc, const amrex::Real* Tp, const int* HP)
{
  amrex::Real c[31];

  for (int k = 0; k < 31; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 31; k++) {
    J[992 + k] *= 1.e-6;
    J[k * 32 + 31] *= 1.e6;
  }
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int consP)
{
#if defined(PELE_COMPILE_AJACOBIAN) || !defined(AMREX_USE_HIP)
  const amrex::Real invT = 1.0 / T;
  const amrex::Real logT = log(T);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;
  amrex::Real g_RT[31];
  amrex::Real h_RT[31];
  amrex::Real g_RT_qss[10];
  amrex::Real h_RT_qss[10];
  amrex::Real sc_qss[10];
  amrex::Real kf_qss[126];
  amrex::Real T_pert1, pertT;
  amrex::Real wdot_pert1[31], wdot[31];

  // dwdot/dT by finite difference
  pertT = 1e-2;
  T_pert1 = T + pertT;

  const amrex::Real invT_pert1 = 1.0 / T_pert1;
  const amrex::Real logT_pert1 = log(T_pert1);
  productionRate_light(
    wdot_pert1, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[126], T_pert1,
    invT_pert1, logT_pert1);
  productionRate_light(
    wdot, sc, g_RT, g_RT_qss, sc_qss, kf_qss, &J[0], &J[126], T, invT, logT);

  // compute the species enthalpy
  speciesEnthalpy(h_RT, T);
  for (int i = 0; i < 1024; i++) {
    J[i] = 0.0;
  }
  // Species terms
  const amrex::Real x3 = exp(g_RT[17] - g_RT[19] + g_RT_qss[1] - g_RT_qss[3]);
  amrex::Real x7 = sc[0] + sc[11] + sc[12] + sc[13] + sc[14] + sc[15] + sc[16] +
                   sc[18] + sc[19] + sc[20] + sc[22] + sc[23] + sc[24] +
                   sc[25] + sc[26] + sc[27] + sc[28] + sc[29] + sc[30] + sc[3] +
                   sc[4] + sc[5] + sc[9];
  amrex::Real x11 =
    6.0 * sc[17] + 2 * sc[21] + 2 * sc[2] + 2 * sc[6] + 1.5 * sc[8];
  const amrex::Real x13 = sc[10] + sc[1] + 3.0 * sc[7] + x11 + x7;
  amrex::Real x17 = -g_RT[19] - g_RT[20] + g_RT_qss[3];
  amrex::Real x18 = -2797.88466187424 * invT - 4.8 * logT;
  amrex::Real x25 = log(
    exp(-4200.0 * invT) + 0.242 * exp(-0.010638297872340399 * T) +
    0.758 * exp(-0.00064308681672025703 * T));
  amrex::Real x28 =
    -0.29097730287517898 * x25 +
    0.43429448190325198 * log(2.2e+18 * x13 * exp(x18) / kf_qss[3]) - 0.4;
  amrex::Real x33 =
    1.7777777777777777 * ((x28) * (x28)) /
      ((-0.73540532268950665 * x25 - 0.18666666666666668 * x28 + 1) *
       (-0.73540532268950665 * x25 - 0.18666666666666668 * x28 + 1)) +
    1.0;
  amrex::Real x36 = exp(M_LN10 * (0.43429448190325198 * x25 / x33)) /
                    (1.0 + 2.2e+18 * x13 * exp(x18) / kf_qss[3]);
  amrex::Real x38 = refC * x36 * exp(x17 + x18);
  const amrex::Real x42 = exp(-g_RT[12] + g_RT[15] - g_RT[16] + g_RT_qss[3]);
  amrex::Real x45 = g_RT[13] - g_RT[14];
  amrex::Real x49 = -kf_qss[41] * sc[14] * exp(-g_RT[12] + g_RT_qss[3] - x45) -
                    kf_qss[42] * sc[15] * x42 - kf_qss[48] * sc[19] -
                    kf_qss[49] * sc[19] - kf_qss[50] * sc[19] -
                    kf_qss[51] * sc[15] - kf_qss[52] * sc[13] -
                    2.2e+18 * x13 * x38 + 10.0e-13;
  const amrex::Real x51 = (kf_qss[50] * sc[17] * x3 + 10.0e-13) / x49;
  amrex::Real x56 = g_RT[15] - g_RT[17];
  const amrex::Real x58 = exp(-g_RT[12] + g_RT_qss[1] - x56);
  const amrex::Real x62 = exp(-g_RT[19] + g_RT[8] + g_RT_qss[1] - g_RT_qss[6]);
  amrex::Real x65 =
    -kf_qss[24] * sc[30] - kf_qss[25] * sc[14] - kf_qss[26] * sc[15] -
    kf_qss[27] * sc[6] - kf_qss[28] * sc[13] - kf_qss[29] * sc[13] -
    kf_qss[30] * sc[17] - kf_qss[31] * sc[8] - kf_qss[32] * sc[21] -
    kf_qss[33] * sc[21] - kf_qss[40] * sc[17] * x58 - kf_qss[50] * sc[17] * x3 -
    kf_qss[54] * sc[8] * x62 - kf_qss[62] * sc[10] - kf_qss[88] * sc[1] +
    10.0e-13;
  amrex::Real x67 = kf_qss[50] * sc[19] + 10.0e-13;
  amrex::Real x68 = x67 / x65;
  amrex::Real x70 = kf_qss[72] * sc[13] + 10.0e-13;
  const amrex::Real x71 = 3.0 * sc[10] + 3.0 * sc[1] + 3.0 * sc[7] + x11 + x7;
  amrex::Real x74 = -g_RT[19] - g_RT[22] + g_RT_qss[7];
  amrex::Real x75 = -5988.2783230761597 * invT - 7.64 * logT;
  amrex::Real x77 = 3.8e+29 * exp(x75);
  amrex::Real x80 = log(
    exp(-4131.0 * invT) + 0.663 * exp(-0.00058582308142940799 * T) +
    0.337 * exp(-0.0003125 * T));
  amrex::Real x83 = -0.29097730287517898 * x80 +
                    0.43429448190325198 * log(x71 * x77 / kf_qss[5]) - 0.4;
  amrex::Real x89 =
    1.7777777777777777 * ((x83) * (x83)) /
      ((-0.73540532268950665 * x80 - 0.18666666666666668 * x83 + 1) *
       (-0.73540532268950665 * x80 - 0.18666666666666668 * x83 + 1)) +
    1.0;
  amrex::Real x93 = exp(M_LN10 * (0.43429448190325198 * x80 / x89)) /
                    (1.0 + x71 * x77 / kf_qss[5]);
  amrex::Real x95 = refC * x93 * exp(x74 + x75);
  amrex::Real x99 = kf_qss[72] * exp(-g_RT_qss[4] + g_RT_qss[7] - x45);
  amrex::Real x102 = -kf_qss[75] - kf_qss[76] * sc[19] - kf_qss[77] * sc[19] -
                     kf_qss[78] * sc[14] - kf_qss[79] * sc[15] -
                     kf_qss[80] * sc[13] - sc[14] * x99 - 3.8e+29 * x71 * x95 +
                     10.0e-13;
  const amrex::Real x104 = x70 / x102;
  amrex::Real x105 = -717.08374877172605 * invT - 2.57 * logT;
  amrex::Real x107 = 1350000000000.0 * exp(x105);
  amrex::Real x110 = log(
    exp(-6570.0 * invT) + 0.2176 * exp(-0.0036900369003690001 * T) +
    0.7824 * exp(-0.00036297640653357502 * T));
  amrex::Real x113 = -0.29097730287517898 * x110 +
                     0.43429448190325198 * log(x107 * x13 / kf_qss[0]) - 0.4;
  amrex::Real x118 =
    1.7777777777777777 * ((x113) * (x113)) /
      ((-0.73540532268950665 * x110 - 0.18666666666666668 * x113 + 1) *
       (-0.73540532268950665 * x110 - 0.18666666666666668 * x113 + 1)) +
    1.0;
  amrex::Real x121 = exp(M_LN10 * (0.43429448190325198 * x110 / x118)) /
                     (1.0 + x107 * x13 / kf_qss[0]);
  amrex::Real x138 =
    kf_qss[73] * exp(-g_RT[13] + g_RT[20] + g_RT_qss[2] - g_RT_qss[4]);
  const amrex::Real x142 = exp(g_RT[12] - g_RT[19] + g_RT_qss[2] - g_RT_qss[7]);
  amrex::Real x148 = g_RT[14] - g_RT[15];
  amrex::Real x149 = g_RT[20] - g_RT_qss[2];
  amrex::Real x157 = g_RT[13] - g_RT[16];
  const amrex::Real x162 = sc[10] + sc[1] + sc[2] + sc[7] + x7;
  amrex::Real x164 = 3.6 * sc[21] + 2 * sc[6] + 1.75 * sc[8] + x162;
  amrex::Real x169 =
    kf_qss[22] * exp(-g_RT[13] + g_RT[15] - g_RT_qss[0] + g_RT_qss[2]);
  const amrex::Real x171 = refCinv * sc[8];
  amrex::Real x175 =
    kf_qss[125] * exp(-g_RT[14] + g_RT[23] - g_RT[25] + g_RT[8] + g_RT_qss[2]);
  amrex::Real x182 = g_RT[12] - g_RT[2];
  amrex::Real x186 = g_RT[19] - g_RT[9];
  amrex::Real x190 = g_RT[14] - g_RT[19];
  const amrex::Real x191 = exp(-g_RT_qss[0] + g_RT_qss[2] - x190);
  amrex::Real x194 =
    -kf_qss[102] * sc[24] -
    kf_qss[112] * sc[9] * exp(-g_RT[29] + g_RT_qss[2] - x186) -
    kf_qss[118] * sc[26] * exp(-g_RT[14] + g_RT[26] - g_RT[9] + g_RT_qss[2]) -
    kf_qss[12] * x164 - kf_qss[13] * sc[17] - kf_qss[14] * sc[19] -
    kf_qss[15] * sc[14] - kf_qss[16] * sc[14] - kf_qss[17] * sc[15] -
    kf_qss[18] * sc[13] - kf_qss[19] * sc[19] * x191 -
    kf_qss[34] * sc[6] * exp(-g_RT[19] - g_RT[20] + g_RT[6] + g_RT_qss[2]) -
    kf_qss[35] * sc[15] * exp(-x148 - x149) -
    kf_qss[36] * sc[17] * exp(-x149 - x56) -
    kf_qss[37] * sc[16] * exp(-x149 - x157) -
    kf_qss[38] * sc[18] * exp(-g_RT[16] + g_RT[18] - x149) -
    kf_qss[43] * sc[12] - kf_qss[44] * sc[2] * exp(-x149 - x182) -
    kf_qss[60] * sc[10] - kf_qss[76] * sc[12] * x142 -
    kf_qss[83] * sc[12] * exp(g_RT[12] - g_RT[14] - g_RT[1] + g_RT_qss[2]) -
    kf_qss[86] * sc[1] -
    kf_qss[98] * sc[22] * exp(-g_RT[13] + g_RT[22] - g_RT[23] + g_RT_qss[2]) -
    sc[15] * x169 - sc[19] * x107 * x121 * x13 - sc[20] * x138 -
    sc[23] * x171 * x175 + 10.0e-13;
  amrex::Real x196 = kf_qss[76] * sc[19] + 10.0e-13;
  amrex::Real x197 = x196 / x194;
  amrex::Real x201 = -g_RT[8] + g_RT_qss[2];
  amrex::Real x203 = kf_qss[60] * exp(-g_RT[10] + g_RT_qss[4] - x201);
  amrex::Real x207 =
    -x104 * x197 + (kf_qss[73] * sc[13] + sc[8] * x203 + 10.0e-13) / x194;
  amrex::Real x209 = -3364.00341090455 * invT - 7.08 * logT;
  amrex::Real x211 = 1.99e+29 * exp(x209);
  amrex::Real x214 = log(
    exp(-6882.0 * invT) + 0.1578 * exp(-0.008 * T) +
    0.8422 * exp(-0.000450653447498873 * T));
  amrex::Real x217 = -0.29097730287517898 * x214 +
                     0.43429448190325198 * log(x13 * x211 / kf_qss[9]) - 0.4;
  amrex::Real x222 =
    1.7777777777777777 * ((x217) * (x217)) /
      ((-0.73540532268950665 * x214 - 0.18666666666666668 * x217 + 1) *
       (-0.73540532268950665 * x214 - 0.18666666666666668 * x217 + 1)) +
    1.0;
  amrex::Real x225 = exp(M_LN10 * (0.43429448190325198 * x214 / x222)) /
                     (1.0 + x13 * x211 / kf_qss[9]);
  amrex::Real x230 = g_RT[7] - g_RT_qss[5];
  amrex::Real x240 = g_RT[19] - g_RT[6];
  amrex::Real x245 = -g_RT[19] - g_RT[1] + g_RT_qss[5];
  amrex::Real x246 = -2903.0569450274302 * invT - 6.642 * logT;
  amrex::Real x250 = 2.9e+27 * x13 * exp(x246) / kf_qss[8];
  amrex::Real x251 = log(
    -0.569 * exp(0.000109325461900077 * T) + exp(-152.4 * invT) +
    1.569 * exp(-0.0033444816053511701 * T));
  amrex::Real x254 =
    -0.29097730287517898 * x251 + 0.43429448190325198 * log(x250) - 0.4;
  amrex::Real x259 =
    1.7777777777777777 * ((x254) * (x254)) /
      ((-0.73540532268950665 * x251 - 0.18666666666666668 * x254 + 1) *
       (-0.73540532268950665 * x251 - 0.18666666666666668 * x254 + 1)) +
    1.0;
  amrex::Real x262 =
    exp(M_LN10 * (0.43429448190325198 * x251 / x259)) / (x250 + 1.0);
  amrex::Real x264 = refC * x262 * exp(x245 + x246);
  amrex::Real x267 = kf_qss[86] * exp(-g_RT[1] + g_RT_qss[5] - x201);
  amrex::Real x272 =
    kf_qss[104] * exp(-g_RT[19] + g_RT[1] - g_RT[5] + g_RT_qss[5]);
  amrex::Real x273 =
    -kf_qss[46] * sc[19] * exp(-2.0 * g_RT[12] + g_RT[19] + g_RT_qss[5]) -
    kf_qss[91] * sc[14] - kf_qss[92] * sc[13] - kf_qss[93] * sc[16] -
    kf_qss[94] * sc[6] * exp(-x230 - x240) -
    kf_qss[95] * sc[15] * exp(-x148 - x230) -
    kf_qss[96] * sc[17] * exp(-x230 - x56) -
    kf_qss[97] * sc[2] * exp(-x182 - x230) - sc[19] * x13 * x211 * x225 -
    sc[1] * x272 - sc[8] * x267 - 2.9e+27 * x13 * x264 + 10.0e-13;
  const amrex::Real x275 = (kf_qss[86] * sc[1] + 10.0e-13) / x273;
  amrex::Real x276 = sc[8] * x267 + 10.0e-13;
  amrex::Real x277 = x276 / x194;
  amrex::Real x278 = kf_qss[76] * sc[12] * x142 + 10.0e-13;
  const amrex::Real x279 = x278 / x102;
  amrex::Real x280 = -x197 * x279 - x275 * x277 + 1;
  const amrex::Real x284 =
    exp(g_RT[15] - g_RT[16] - g_RT[23] + g_RT[8] + g_RT_qss[4]);
  amrex::Real x287 = g_RT[1] - g_RT_qss[4];
  const amrex::Real x292 =
    exp(g_RT[8] - g_RT_qss[0] + g_RT_qss[4] - g_RT_qss[6]);
  amrex::Real x295 = -18014.512518476698 * invT - 3.4 * logT;
  amrex::Real x298 = 2.565e+21 * x71 * exp(x295) / kf_qss[4];
  amrex::Real x299 = log(
    exp(0.0795 * invT) + 1.9816 * exp(-0.23292648840026101 * T) -
    0.9816 * exp(-0.000185745862510913 * T));
  amrex::Real x301 =
    -0.29097730287517898 * x299 + 0.43429448190325198 * log(x298) - 0.4;
  amrex::Real x306 =
    1.7777777777777777 * ((x301) * (x301)) /
      ((-0.73540532268950665 * x299 - 0.18666666666666668 * x301 + 1) *
       (-0.73540532268950665 * x299 - 0.18666666666666668 * x301 + 1)) +
    1.0;
  amrex::Real x308 = exp(M_LN10 * (0.43429448190325198 * x299 / x306));
  amrex::Real x311 = x308 * exp(x295) / (x298 + 1.0);
  const amrex::Real x318 = refCinv * sc[15];
  const amrex::Real x319 =
    exp(g_RT[15] - g_RT[16] + g_RT[20] - g_RT[24] + g_RT_qss[4]);
  const amrex::Real x324 = x71 * exp(-4916.3261815789501 * invT - 11.94 * logT);
  amrex::Real x329 = log(
    exp(-10139.8 * invT) + 0.825 * exp(-0.00074593465612412396 * T) +
    0.175 * exp(-1.6666666666666701e-5 * T));
  amrex::Real x331 = -0.29097730287517898 * x329 +
                     0.43429448190325198 * log(4.27e+46 * x324 / kf_qss[7]) -
                     0.4;
  amrex::Real x333 = -0.55155399201712996 * x329 - 0.14 * x331 + 0.75;
  amrex::Real x336 = ((x331) * (x331)) / ((x333) * (x333)) + 1.0;
  amrex::Real x340 = exp(M_LN10 * (0.43429448190325198 * x329 / x336)) /
                     (1.0 + 4.27e+46 * x324 / kf_qss[7]);
  amrex::Real x346 = -1670.67933047167 * invT - 3.86 * logT;
  amrex::Real x348 = 1.4e+18 * exp(x346);
  amrex::Real x351 = log(
    exp(-6095.0 * invT) + 0.218 * exp(-0.0048192771084337397 * T) +
    0.782 * exp(-0.000375516334960571 * T));
  amrex::Real x354 = -0.29097730287517898 * x351 +
                     0.43429448190325198 * log(x348 * x71 / kf_qss[6]) - 0.4;
  amrex::Real x359 =
    1.7777777777777777 * ((x354) * (x354)) /
      ((-0.73540532268950665 * x351 - 0.18666666666666668 * x354 + 1) *
       (-0.73540532268950665 * x351 - 0.18666666666666668 * x354 + 1)) +
    1.0;
  amrex::Real x362 = exp(M_LN10 * (0.43429448190325198 * x351 / x359)) /
                     (1.0 + x348 * x71 / kf_qss[6]);
  const amrex::Real x366 =
    -kf_qss[101] * sc[20] * x318 * x319 - kf_qss[57] * sc[8] * x292 -
    kf_qss[67] * sc[19] - kf_qss[68] * sc[14] - kf_qss[69] * sc[14] -
    kf_qss[70] * sc[15] - kf_qss[71] * sc[13] - kf_qss[72] * sc[13] -
    kf_qss[73] * sc[13] - kf_qss[74] * sc[12] -
    kf_qss[81] * sc[6] * exp(-x240 - x287) -
    kf_qss[82] * sc[15] * exp(-x148 - x287) -
    kf_qss[85] * sc[17] * exp(-x287 - x56) -
    kf_qss[89] * sc[2] * exp(-x182 - x287) -
    kf_qss[90] * sc[16] * exp(-x157 - x287) -
    kf_qss[99] * sc[15] * x171 * x284 - 4.27e+46 * sc[12] * x324 * x340 -
    sc[19] * x348 * x362 * x71 - sc[8] * x203 - 2.565e+21 * x311 * x71 +
    10.0e-13;
  amrex::Real x368 = sc[14] * x99 + 10.0e-13;
  amrex::Real x369 = x368 / x366;
  amrex::Real x371 =
    -x279 * x369 + (kf_qss[60] * sc[10] + sc[20] * x138 + 10.0e-13) / x366;
  amrex::Real x372 = x371 / x280;
  const amrex::Real x373 = -x104 * x369 - x207 * x372 + 1;
  amrex::Real x379 =
    kf_qss[63] * exp(-g_RT[19] - g_RT[22] + g_RT[6] + g_RT_qss[6]);
  amrex::Real x383 = kf_qss[64] * exp(-g_RT[22] + g_RT_qss[6] - x148);
  amrex::Real x387 = kf_qss[66] * exp(-g_RT[22] + g_RT_qss[6] - x56);
  amrex::Real x388 = -kf_qss[47] * sc[12] - kf_qss[54] * sc[19] -
                     kf_qss[55] * sc[14] - kf_qss[56] * sc[13] -
                     kf_qss[59] * sc[19] * exp(-g_RT[10] + g_RT_qss[6] - x190) -
                     sc[15] * x383 - sc[17] * x387 - sc[6] * x379 + 10.0e-13;
  amrex::Real x390 = kf_qss[57] * sc[8] * x292 + 10.0e-13;
  amrex::Real x392 = 1 - 10.0e-13 * x390 / (x366 * x373 * x388);
  amrex::Real x394 = kf_qss[54] * sc[8] * x62 + 10.0e-13;
  const amrex::Real x396 = x394 / (x388 * x392);
  amrex::Real x397 = kf_qss[54] * sc[19] + 10.0e-13;
  amrex::Real x398 = x397 / x65;
  amrex::Real x399 = -x396 * x398 - x51 * x68 + 1;
  amrex::Real x402 = exp(g_RT_qss[0] - g_RT_qss[1]);
  amrex::Real x411 = kf_qss[24] * sc[30] * x402 + kf_qss[30] * sc[17] * x402 +
                     kf_qss[31] * sc[8] * x402 + kf_qss[32] * sc[21] * x402 +
                     10.0e-13;
  const amrex::Real x413 = x411 / (x399 * x65);
  amrex::Real x414 = g_RT[29] - g_RT_qss[9];
  amrex::Real x416 = kf_qss[111] * exp(-x240 - x414);
  amrex::Real x418 = kf_qss[113] * exp(-x148 - x414);
  amrex::Real x420 = kf_qss[114] * exp(-x182 - x414);
  amrex::Real x422 = kf_qss[110] * exp(-x414 - x56);
  const amrex::Real x423 = refCinv * sc[19];
  amrex::Real x425 = kf_qss[108] * exp(g_RT[19] - x414);
  amrex::Real x427 = kf_qss[109] * exp(-x157 - x414);
  const amrex::Real x428 = -kf_qss[115] * sc[18] - kf_qss[116] - sc[15] * x418 -
                           sc[16] * x427 - sc[17] * x422 - sc[2] * x420 -
                           sc[6] * x416 - x423 * x425 + 10.0e-13;
  const amrex::Real x433 =
    kf_qss[116] * refCinv * exp(g_RT[8] + g_RT_qss[8] - g_RT_qss[9]);
  const amrex::Real x436 = (sc[8] * x433 + 10.0e-13) / x428;
  amrex::Real x439 = kf_qss[19] * sc[14] + kf_qss[22] * sc[13] + 10.0e-13;
  const amrex::Real x441 = x439 / (x194 * x280);
  const amrex::Real x442 =
    (x104 * x197 - (kf_qss[73] * sc[13] + sc[8] * x203 + 10.0e-13) / x194) /
    x280;
  amrex::Real x444 =
    sc[12] * x71 * exp(-9832.6523631579003 * invT - 23.88 * logT);
  amrex::Real x445 =
    5.4845910414689933e-94 * exp(M_LN10 * (0.43429448190325198 * x329 / x336)) /
    (kf_qss[7] * ((2.3419203747072597e-47 + x324 / kf_qss[7]) *
                  (2.3419203747072597e-47 + x324 / kf_qss[7])));
  amrex::Real x447 = exp(M_LN10 * (0.43429448190325198 * x351 / x359)) * x71 /
                     (kf_qss[6] * ((1.0 + x348 * x71 / kf_qss[6]) *
                                   (1.0 + x348 * x71 / kf_qss[6])));
  amrex::Real x450 =
    sc[19] * x447 * exp(-3341.3586609433401 * invT - 7.72 * logT);
  amrex::Real x451 = sc[12] * exp(-4916.3261815789501 * invT - 11.94 * logT);
  amrex::Real x453 = 0.43429448190325198 / x71;
  amrex::Real x455 = 2.3703703703703702 * ((x301) * (x301)) * x453 /
                     ((-0.73540532269 * x299 - 0.18666666666666668 * x301 + 1) *
                      (-0.73540532269 * x299 - 0.18666666666666668 * x301 + 1) *
                      (-0.73540532269 * x299 - 0.18666666666666668 * x301 + 1));
  x301 = 1.7777777777777777 * x301 * x453 /
         ((-0.73540532268950665 * x299 - 0.18666666666666668 * x301 + 1) *
          (-0.73540532268950665 * x299 - 0.18666666666666668 * x301 + 1));
  amrex::Real x459 = 2.565e+21 * x299 * x311 * x71 / ((x306) * (x306));
  amrex::Real x461 =
    1.7777777777777777 * x354 * x453 /
    ((-0.73540532268950665 * x351 - 0.18666666666666668 * x354 + 1) *
     (-0.73540532268950665 * x351 - 0.18666666666666668 * x354 + 1));
  x354 = 2.3703703703703702 * ((x354) * (x354)) * x453 /
         ((-0.73540532269 * x351 - 0.18666666666666668 * x354 + 1) *
          (-0.73540532269 * x351 - 0.18666666666666668 * x354 + 1) *
          (-0.73540532269 * x351 - 0.18666666666666668 * x354 + 1));
  amrex::Real x465 = sc[19] * x348 * x351 * x362 * x71 / ((x359) * (x359));
  amrex::Real x468 = ((x331) * (x331)) * x453 / ((x333) * (x333) * (x333));
  amrex::Real x469 = x331 * x453 / ((x333) * (x333));
  amrex::Real x472 = 4.27e+46 * sc[12] * x324 * x329 * x340 / ((x336) * (x336));
  amrex::Real x475 = x308 * x71 * exp(-36029.025036953499 * invT - 6.8 * logT) /
                     (kf_qss[4] * ((x298 + 1.0) * (x298 + 1.0)));
  amrex::Real x476 = -sc[19] * x348 * x362 - 2.565e+21 * x311 -
                     4.27e+46 * x340 * x451 + 1.82329e+93 * x444 * x445 +
                     1.96e+36 * x450 + x459 * (2.0 * x301 + 0.28 * x455) +
                     x465 * (0.28 * x354 + 2.0 * x461) +
                     x472 * (0.28 * x468 + 2.0 * x469) + 6.579225e+42 * x475;
  amrex::Real x479 = x390 / (x373 * x388);
  amrex::Real x481 = 10.0e-13 * x479 / ((x366) * (x366));
  amrex::Real x482 = x476 * x481;
  const amrex::Real x483 = 0.43429448190325198 / x13;
  amrex::Real x486 =
    1.7777777777777777 * x113 /
    ((-0.73540532268950665 * x110 - 0.18666666666666668 * x113 + 1) *
     (-0.73540532268950665 * x110 - 0.18666666666666668 * x113 + 1));
  x113 = 2.3703703703703702 * ((x113) * (x113)) /
         ((-0.73540532269 * x110 - 0.18666666666666668 * x113 + 1) *
          (-0.73540532269 * x110 - 0.18666666666666668 * x113 + 1) *
          (-0.73540532269 * x110 - 0.18666666666666668 * x113 + 1));
  amrex::Real x491 = sc[19] * x107 * x110 * x121 * x13 / ((x118) * (x118));
  amrex::Real x493 = exp(M_LN10 * (0.43429448190325198 * x110 / x118)) * x13 /
                     (kf_qss[0] * ((1.0 + x107 * x13 / kf_qss[0]) *
                                   (1.0 + x107 * x13 / kf_qss[0])));
  amrex::Real x496 =
    sc[19] * x493 * exp(-1434.1674975434501 * invT - 5.14 * logT);
  amrex::Real x497 = -kf_qss[12] - sc[19] * x107 * x121 +
                     x491 * (0.28 * x113 * x483 + 2.0 * x483 * x486) +
                     1.8225e+24 * x496;
  amrex::Real x500 = x196 * x279 / ((x194) * (x194));
  amrex::Real x502 = x275 * x276 / ((x194) * (x194));
  amrex::Real x504 =
    1.7777777777777777 * x453 * x83 /
    ((-0.73540532268950665 * x80 - 0.18666666666666668 * x83 + 1) *
     (-0.73540532268950665 * x80 - 0.18666666666666668 * x83 + 1));
  x83 = 2.3703703703703702 * x453 * ((x83) * (x83)) /
        ((-0.73540532269 * x80 - 0.18666666666666668 * x83 + 1) *
         (-0.73540532269 * x80 - 0.18666666666666668 * x83 + 1) *
         (-0.73540532269 * x80 - 0.18666666666666668 * x83 + 1));
  amrex::Real x508 = 3.8e+29 * x71 * x80 * x95 / ((x89) * (x89));
  amrex::Real x509 = exp(M_LN10 * (0.43429448190325198 * x80 / x89)) * x71 /
                     (kf_qss[5] * ((1.0 + x71 * x77 / kf_qss[5]) *
                                   (1.0 + x71 * x77 / kf_qss[5])));
  amrex::Real x513 = 1.444e+59 * refC * x509 *
                       exp(-11976.556646152299 * invT - 15.28 * logT + x74) +
                     x508 * (2.0 * x504 + 0.28 * x83) - 3.8e+29 * x95;
  amrex::Real x516 = x197 * x278 / ((x102) * (x102));
  amrex::Real x519 =
    1.7777777777777777 * x254 /
    ((-0.73540532268950665 * x251 - 0.18666666666666668 * x254 + 1) *
     (-0.73540532268950665 * x251 - 0.18666666666666668 * x254 + 1));
  x254 = 2.3703703703703702 * ((x254) * (x254)) /
         ((-0.73540532269 * x251 - 0.18666666666666668 * x254 + 1) *
          (-0.73540532269 * x251 - 0.18666666666666668 * x254 + 1) *
          (-0.73540532269 * x251 - 0.18666666666666668 * x254 + 1));
  amrex::Real x523 = 2.9e+27 * x13 * x251 * x264 / ((x259) * (x259));
  x250 = exp(M_LN10 * (0.43429448190325198 * x251 / x259)) /
         (kf_qss[8] * ((x250 + 1.0) * (x250 + 1.0)));
  const amrex::Real x526 = refC * x13;
  amrex::Real x527 =
    x526 * exp(-5806.1138900548603 * invT - 13.284 * logT + x245);
  amrex::Real x530 =
    1.7777777777777777 * x217 /
    ((-0.73540532268950665 * x214 - 0.18666666666666668 * x217 + 1) *
     (-0.73540532268950665 * x214 - 0.18666666666666668 * x217 + 1));
  x217 = 2.3703703703703702 * ((x217) * (x217)) /
         ((-0.73540532269 * x214 - 0.18666666666666668 * x217 + 1) *
          (-0.73540532269 * x214 - 0.18666666666666668 * x217 + 1) *
          (-0.73540532269 * x214 - 0.18666666666666668 * x217 + 1));
  amrex::Real x534 = sc[19] * x13 * x211 * x214 * x225 / ((x222) * (x222));
  amrex::Real x535 = exp(M_LN10 * (0.43429448190325198 * x214 / x222)) * x13 /
                     (kf_qss[9] * ((1.0 + x13 * x211 / kf_qss[9]) *
                                   (1.0 + x13 * x211 / kf_qss[9])));
  amrex::Real x539 = -sc[19] * x211 * x225 +
                     3.9601e+58 * sc[19] * x535 *
                       exp(-6728.0068218091001 * invT - 14.16 * logT) +
                     8.41e+54 * x250 * x527 - 2.9e+27 * x264 +
                     x523 * (0.28 * x254 * x483 + 2.0 * x483 * x519) +
                     x534 * (0.28 * x217 * x483 + 2.0 * x483 * x530);
  amrex::Real x542 = x277 * (kf_qss[86] * sc[1] + 10.0e-13) / ((x273) * (x273));
  amrex::Real x544 = x513 * x516 + x539 * x542;
  amrex::Real x545 = x497 * x500 + x497 * x502 + x544;
  amrex::Real x548 = x207 * x371 / ((x280) * (x280));
  amrex::Real x549 = x104 * x196 / ((x194) * (x194));
  amrex::Real x550 =
    (kf_qss[73] * sc[13] + sc[8] * x203 + 10.0e-13) / ((x194) * (x194));
  amrex::Real x552 = x197 * x70 / ((x102) * (x102));
  amrex::Real x553 = x513 * x552;
  amrex::Real x555 = x369 * x70 / ((x102) * (x102));
  amrex::Real x558 = x104 * x368 / ((x366) * (x366));
  amrex::Real x559 =
    (kf_qss[60] * sc[10] + sc[20] * x138 + 10.0e-13) / ((x366) * (x366));
  amrex::Real x561 = x279 * x368 / ((x366) * (x366));
  amrex::Real x563 = x278 * x369 / ((x102) * (x102));
  amrex::Real x566 = x207 / x280;
  amrex::Real x567 = x476 * x558 + x513 * x555 -
                     x566 * (-x476 * x559 + x476 * x561 + x513 * x563);
  amrex::Real x568 =
    -x372 * (x497 * x549 - x497 * x550 + x553) + x545 * x548 + x567;
  amrex::Real x571 = 10.0e-13 * x390 / (x366 * ((x373) * (x373)) * x388);
  amrex::Real x575 = x394 * x398 / (x388 * ((x392) * (x392)));
  amrex::Real x577 =
    1.7777777777777777 * x28 /
    ((-0.73540532268950665 * x25 - 0.18666666666666668 * x28 + 1) *
     (-0.73540532268950665 * x25 - 0.18666666666666668 * x28 + 1));
  x28 = 2.3703703703703702 * ((x28) * (x28)) /
        ((-0.73540532269 * x25 - 0.18666666666666668 * x28 + 1) *
         (-0.73540532269 * x25 - 0.18666666666666668 * x28 + 1) *
         (-0.73540532269 * x25 - 0.18666666666666668 * x28 + 1));
  amrex::Real x581 = 2.2e+18 * x13 * x25 * x38 / ((x33) * (x33));
  amrex::Real x582 =
    2.066115702479339e-37 * exp(M_LN10 * (0.43429448190325198 * x25 / x33)) /
    (kf_qss[3] * ((4.5454545454545456e-19 + x13 * exp(x18) / kf_qss[3]) *
                  (4.5454545454545456e-19 + x13 * exp(x18) / kf_qss[3])));
  amrex::Real x585 = x526 * exp(-5595.76932374848 * invT - 9.6 * logT + x17);
  amrex::Real x586 = -2.2e+18 * x38 +
                     x581 * (0.28 * x28 * x483 + 2.0 * x483 * x577) +
                     4.84e+36 * x582 * x585;
  amrex::Real x589 =
    x68 * (kf_qss[50] * sc[17] * x3 + 10.0e-13) / ((x49) * (x49));
  amrex::Real x590 = x586 * x589;
  amrex::Real x591 = x575 * (x482 + x568 * x571) + x590;
  amrex::Real x593 = g_RT[14] - g_RT_qss[0];
  amrex::Real x597 = -618.95649893980499 * invT - 3.14 * logT;
  amrex::Real x599 = 3200000000000000.0 * exp(x597);
  amrex::Real x602 = log(
    exp(-5590.0 * invT) + 0.32 * exp(-0.012820512820512799 * T) +
    0.68 * exp(-0.00050125313283207998 * T));
  amrex::Real x604 = -0.29097730287517898 * x602 +
                     0.43429448190325198 * log(x13 * x599 / kf_qss[1]) - 0.4;
  amrex::Real x609 =
    1.7777777777777777 * ((x604) * (x604)) /
      ((-0.73540532268950665 * x602 - 0.18666666666666668 * x604 + 1) *
       (-0.73540532268950665 * x602 - 0.18666666666666668 * x604 + 1)) +
    1.0;
  amrex::Real x613 = exp(M_LN10 * (0.43429448190325198 * x602 / x609)) /
                     (1.0 + x13 * x599 / kf_qss[1]);
  amrex::Real x619 = -3570.32224388449 * invT - 5.11 * logT;
  amrex::Real x621 = 2.69e+21 * exp(x619);
  amrex::Real x624 = log(
    exp(-5185.0 * invT) + 0.4093 * exp(-0.0036363636363636398 * T) +
    0.5907 * exp(-0.000815660685154976 * T));
  amrex::Real x626 = -0.29097730287517898 * x624 +
                     0.43429448190325198 * log(x13 * x621 / kf_qss[2]) - 0.4;
  amrex::Real x631 =
    1.7777777777777777 * ((x626) * (x626)) /
      ((-0.73540532268950665 * x624 - 0.18666666666666668 * x626 + 1) *
       (-0.73540532268950665 * x624 - 0.18666666666666668 * x626 + 1)) +
    1.0;
  amrex::Real x635 = exp(M_LN10 * (0.43429448190325198 * x624 / x631)) /
                     (1.0 + x13 * x621 / kf_qss[2]);
  amrex::Real x644 =
    -kf_qss[19] * sc[14] - kf_qss[20] * sc[15] - kf_qss[21] * sc[6] -
    kf_qss[22] * sc[13] - kf_qss[23] * sc[13] - kf_qss[24] * sc[30] * x402 -
    kf_qss[30] * sc[17] * x402 - kf_qss[31] * sc[8] * x402 -
    kf_qss[32] * sc[21] * x402 -
    kf_qss[39] * sc[17] * exp(-g_RT[12] + g_RT_qss[0] - x56) -
    kf_qss[45] * sc[12] - kf_qss[53] * sc[2] -
    kf_qss[58] * sc[8] * exp(-g_RT[10] + g_RT[8] - x593) - kf_qss[61] * sc[10] -
    kf_qss[65] * sc[21] * exp(g_RT[21] - g_RT[22] - x593) -
    kf_qss[84] * sc[20] * exp(-g_RT[1] + g_RT[20] - x593) - kf_qss[87] * sc[1] -
    sc[19] * x13 * x599 * x613 - sc[8] * x13 * x621 * x635 + 10.0e-13;
  amrex::Real x646 = kf_qss[24] * sc[30] + kf_qss[30] * sc[17] +
                     kf_qss[31] * sc[8] + kf_qss[32] * sc[21] + 10.0e-13;
  amrex::Real x647 = x646 / x644;
  amrex::Real x649 = x411 * x647 / (((x399) * (x399)) * x65);
  amrex::Real x650 = exp(M_LN10 * (0.43429448190325198 * x624 / x631)) * x13 /
                     (kf_qss[2] * ((1.0 + x13 * x621 / kf_qss[2]) *
                                   (1.0 + x13 * x621 / kf_qss[2])));
  amrex::Real x653 =
    sc[8] * x650 * exp(-7140.6444877689701 * invT - 10.22 * logT);
  amrex::Real x655 = 2.3703703703703702 * ((x626) * (x626)) /
                     ((-0.73540532269 * x624 - 0.18666666666666668 * x626 + 1) *
                      (-0.73540532269 * x624 - 0.18666666666666668 * x626 + 1) *
                      (-0.73540532269 * x624 - 0.18666666666666668 * x626 + 1));
  x626 = 1.7777777777777777 * x626 /
         ((-0.73540532268950665 * x624 - 0.18666666666666668 * x626 + 1) *
          (-0.73540532268950665 * x624 - 0.18666666666666668 * x626 + 1));
  amrex::Real x659 = sc[8] * x13 * x621 * x624 * x635 / ((x631) * (x631));
  amrex::Real x660 = exp(M_LN10 * (0.43429448190325198 * x602 / x609)) * x13 /
                     (kf_qss[1] * ((1.0 + x13 * x599 / kf_qss[1]) *
                                   (1.0 + x13 * x599 / kf_qss[1])));
  amrex::Real x664 =
    sc[19] * x660 * exp(-1237.91299787961 * invT - 6.28 * logT);
  amrex::Real x666 = 2.3703703703703702 * ((x604) * (x604)) /
                     ((-0.73540532269 * x602 - 0.18666666666666668 * x604 + 1) *
                      (-0.73540532269 * x602 - 0.18666666666666668 * x604 + 1) *
                      (-0.73540532269 * x602 - 0.18666666666666668 * x604 + 1));
  x604 = 1.7777777777777777 * x604 /
         ((-0.73540532268950665 * x602 - 0.18666666666666668 * x604 + 1) *
          (-0.73540532268950665 * x602 - 0.18666666666666668 * x604 + 1));
  amrex::Real x670 = sc[19] * x13 * x599 * x602 * x613 / ((x609) * (x609));
  amrex::Real x671 =
    -sc[19] * x599 * x613 - sc[8] * x621 * x635 + 7.2361e+42 * x653 +
    x659 * (2.0 * x483 * x626 + 0.28 * x483 * x655) + 1.024e+31 * x664 +
    x670 * (2.0 * x483 * x604 + 0.28 * x483 * x666);
  amrex::Real x673 = kf_qss[19] * sc[19] * x191 + sc[15] * x169 + 10.0e-13;
  amrex::Real x675 = x441 * x673 / ((x644) * (x644));
  amrex::Real x677 = x413 * x646 / ((x644) * (x644));
  amrex::Real x678 = x671 * x675 + x671 * x677;
  amrex::Real x680 = x673 / (x280 * x644);
  amrex::Real x682 = x439 * x680 / ((x194) * (x194));
  amrex::Real x684 = x439 * x673 / (x194 * ((x280) * (x280)) * x644);
  amrex::Real x688 = kf_qss[79] * exp(g_RT[22] - g_RT_qss[7] - x56);
  amrex::Real x691 = kf_qss[75] * exp(g_RT[12] + g_RT[8] - g_RT_qss[7]);
  const amrex::Real x693 = exp(g_RT[22] - g_RT_qss[7] - x157);
  amrex::Real x698 =
    kf_qss[78] * exp(-g_RT[14] + g_RT[15] + g_RT[22] - g_RT_qss[7]);
  amrex::Real x701 = kf_qss[77] * exp(g_RT[22] - g_RT_qss[7] - x240);
  amrex::Real x707 =
    kf_qss[80] * sc[16] * sc[22] * x693 + sc[12] * x171 * x691 +
    sc[15] * sc[22] * x698 + sc[17] * sc[22] * x688 +
    sc[19] * sc[22] * x71 * x77 * x93 + sc[22] * sc[6] * x701 + 10.0e-13;
  const amrex::Real x708 = x707 / x102;
  const amrex::Real x710 = exp(g_RT[12] - g_RT[14] + g_RT[20] - g_RT_qss[5]);
  amrex::Real x713 = sc[19] * sc[1];
  amrex::Real x714 = 2.9e+27 * x13 * x262 * exp(x246);
  const amrex::Real x716 = exp(g_RT[1] - g_RT_qss[5] - x157);
  const amrex::Real x723 = refCinv * sc[12];
  const amrex::Real x725 =
    exp(g_RT[12] + g_RT[15] - g_RT[16] + g_RT[20] - g_RT_qss[5]);
  const amrex::Real x728 = refC * sc[7];
  amrex::Real x731 = -g_RT[19] + g_RT[7] - g_RT_qss[5];
  amrex::Real x732 = x225 * exp(x209 + x731);
  const amrex::Real x742 = refC * sc[5] *
                           exp(
                             g_RT[5] - g_RT_qss[4] - g_RT_qss[5] -
                             4521.1501339224997 * invT - 11.79 * logT);
  amrex::Real x744 = x13 * exp(-4521.1501339224997 * invT - 11.79 * logT);
  amrex::Real x746 = log(
    exp(-5723.2 * invT) + 0.802 * exp(-0.00043900083410158499 * T) +
    0.198 * exp(-1.6666666666666701e-5 * T));
  amrex::Real x749 = -0.29097730287517898 * x746 +
                     0.43429448190325198 * log(1.55e+44 * x744 / kf_qss[10]) -
                     0.4;
  amrex::Real x754 =
    1.7777777777777777 * ((x749) * (x749)) /
      ((-0.73540532268950665 * x746 - 0.18666666666666668 * x749 + 1) *
       (-0.73540532268950665 * x746 - 0.18666666666666668 * x749 + 1)) +
    1.0;
  amrex::Real x757 = exp(M_LN10 * (0.43429448190325198 * x746 / x754)) /
                     (1.0 + 1.55e+44 * x744 / kf_qss[10]);
  amrex::Real x762 =
    kf_qss[104] * sc[19] * sc[5] + kf_qss[46] * ((sc[12]) * (sc[12])) +
    kf_qss[91] * sc[12] * sc[20] * x710 + kf_qss[92] * sc[16] * sc[1] * x716 +
    kf_qss[93] * sc[15] * sc[20] * x723 * x725 + kf_qss[94] * sc[19] * sc[7] +
    kf_qss[95] * sc[14] * sc[7] + kf_qss[96] * sc[15] * sc[7] +
    kf_qss[97] * sc[12] * sc[7] + 1.99e+29 * x13 * x728 * x732 +
    1.55e+44 * x13 * x742 * x757 + x713 * x714 + 10.0e-13;
  const amrex::Real x763 = x762 / x273;
  const amrex::Real x767 = exp(-x148 - x201);
  amrex::Real x771 = exp(g_RT[19] - x201);
  const amrex::Real x774 = exp(g_RT[21] - g_RT_qss[2] - x190);
  const amrex::Real x779 = exp(-g_RT[24] + g_RT[3] - x201);
  const amrex::Real x784 = refC * sc[20];
  amrex::Real x786 = -g_RT[19] + g_RT[20] - g_RT_qss[2];
  amrex::Real x787 = x121 * exp(x105 + x786);
  const amrex::Real x793 = exp(-x201 - x240);
  const amrex::Real x800 = exp(-x201 - x56);
  const amrex::Real x807 = exp(-x182 - x201);
  const amrex::Real x812 = refC * exp(g_RT[29] - g_RT_qss[2] - g_RT_qss[8]);
  amrex::Real x815 =
    kf_qss[102] * sc[3] * sc[8] * x779 + kf_qss[107] * sc[29] * x812 +
    kf_qss[112] * sc[19] * sc[29] + kf_qss[118] * sc[14] * sc[9] +
    kf_qss[125] * sc[14] * sc[25] + kf_qss[12] * sc[19] * x164 * x171 * x771 +
    kf_qss[13] * sc[17] * sc[19] * x171 * x771 +
    kf_qss[14] * sc[6] * sc[8] * x793 + kf_qss[15] * sc[15] * sc[8] * x767 +
    kf_qss[16] * sc[19] * sc[21] * x774 + kf_qss[17] * sc[17] * sc[8] * x800 +
    kf_qss[18] * sc[16] * sc[8] * exp(-x157 - x201) +
    kf_qss[34] * sc[19] * sc[20] + kf_qss[35] * sc[14] * sc[20] +
    kf_qss[36] * sc[15] * sc[20] + kf_qss[37] * sc[13] * sc[20] +
    kf_qss[38] * sc[16] * sc[20] + kf_qss[43] * sc[2] * sc[8] * x807 +
    kf_qss[44] * sc[12] * sc[20] + kf_qss[83] * sc[14] * sc[1] +
    kf_qss[98] * sc[13] * sc[23] + 1350000000000.0 * x13 * x784 * x787 +
    10.0e-13;
  amrex::Real x816 = x197 * x708 + x277 * x763 - x815 / x194;
  amrex::Real x821 = refC * sc[3] *
                     exp(
                       -g_RT[12] + g_RT[3] - g_RT_qss[4] -
                       4916.3261815789501 * invT - 11.94 * logT);
  const amrex::Real x826 = exp(-g_RT[14] + g_RT[19] + g_RT[22] - g_RT_qss[4]);
  amrex::Real x834 =
    kf_qss[74] * exp(-g_RT[12] + g_RT[19] + g_RT[24] - g_RT_qss[4]);
  const amrex::Real x838 = exp(g_RT[10] - g_RT_qss[4] - x56);
  const amrex::Real x842 = exp(g_RT[12] - g_RT[14] + g_RT[8] - g_RT_qss[4]);
  const amrex::Real x848 = 2.565e+21 * x423 * x71;
  amrex::Real x849 = g_RT[10] + g_RT[19] - g_RT_qss[4];
  amrex::Real x851 = sc[10] * x308 * exp(x295 + x849) / (x298 + 1.0);
  const amrex::Real x853 = refC * sc[1];
  amrex::Real x854 = -g_RT[19] + g_RT[1] - g_RT_qss[4];
  amrex::Real x855 = x362 * exp(x346 + x854);
  const amrex::Real x860 = exp(g_RT[10] - g_RT_qss[4] - x240);
  amrex::Real x864 = kf_qss[71] * exp(g_RT[10] - g_RT_qss[4] - x157);
  amrex::Real x867 =
    kf_qss[101] * sc[16] * sc[24] + kf_qss[67] * sc[10] * sc[6] * x860 +
    kf_qss[68] * sc[19] * sc[22] * x826 + kf_qss[69] * sc[12] * sc[8] * x842 +
    kf_qss[70] * sc[10] * sc[17] * x838 + kf_qss[81] * sc[19] * sc[1] +
    kf_qss[82] * sc[14] * sc[1] + kf_qss[85] * sc[15] * sc[1] +
    kf_qss[89] * sc[12] * sc[1] + kf_qss[90] * sc[13] * sc[1] +
    kf_qss[99] * sc[16] * sc[23] + sc[10] * sc[16] * x864 +
    sc[19] * sc[24] * x834 + 1.55e+44 * x13 * x742 * x757 +
    4.27e+46 * x340 * x71 * x821 + 1.4e+18 * x71 * x853 * x855 + x848 * x851 +
    10.0e-13;
  amrex::Real x868 = x369 * x708 - x372 * x816 - x867 / x366;
  amrex::Real x872 = kf_qss[56] * refCinv *
                     exp(-g_RT[13] + g_RT[15] + 2.0 * g_RT[8] - g_RT_qss[6]);
  const amrex::Real x874 = refCinv * exp(2.0 * g_RT[8] - g_RT_qss[6] - x190);
  const amrex::Real x880 = exp(-g_RT[12] + g_RT[1] + g_RT[8] - g_RT_qss[6]);
  amrex::Real x885 =
    kf_qss[47] * sc[1] * sc[8] * x880 +
    kf_qss[55] * sc[19] * ((sc[8]) * (sc[8])) * x874 +
    kf_qss[59] * sc[10] * sc[14] + kf_qss[63] * sc[19] * sc[22] +
    kf_qss[64] * sc[14] * sc[22] + kf_qss[66] * sc[15] * sc[22] +
    sc[15] * ((sc[8]) * (sc[8])) * x872 + 10.0e-13;
  amrex::Real x886 = -x479 * x868 - x885 / x388;
  amrex::Real x887 = x398 / x392;
  const amrex::Real x889 = exp(g_RT[20] - g_RT_qss[3] - x56);
  amrex::Real x893 = kf_qss[52] * exp(g_RT[20] - g_RT_qss[3] - x157);
  const amrex::Real x895 = exp(-g_RT[19] + g_RT[20] + g_RT[6] - g_RT_qss[3]);
  const amrex::Real x899 = exp(g_RT[12] + g_RT[15] - g_RT[19] - g_RT_qss[3]);
  amrex::Real x903 = sc[19] * sc[20];
  amrex::Real x904 = 2.2e+18 * x13 * x36 * exp(x18);
  amrex::Real x907 =
    kf_qss[41] * sc[12] * sc[13] + kf_qss[42] * sc[12] * sc[16] +
    kf_qss[48] * sc[20] * sc[6] * x895 + kf_qss[49] * sc[12] * sc[15] * x899 +
    kf_qss[51] * sc[17] * sc[20] * x889 + sc[16] * sc[20] * x893 + x903 * x904 +
    10.0e-13;
  const amrex::Real x908 = x907 / x49;
  const amrex::Real x911 = exp(g_RT[12] + g_RT[19] - g_RT[6] - g_RT_qss[1]);
  const amrex::Real x915 = exp(g_RT[20] - g_RT[21] + g_RT[8] - g_RT_qss[1]);
  const amrex::Real x919 = exp(g_RT[19] - g_RT[1] + g_RT[24] - g_RT_qss[1]);
  const amrex::Real x924 = exp(-g_RT[15] + g_RT[19] + g_RT[20] - g_RT_qss[1]);
  const amrex::Real x927 =
    exp(-g_RT[13] + g_RT[15] + g_RT[19] + g_RT[8] - g_RT_qss[1]);
  const amrex::Real x932 = exp(-g_RT[10] + g_RT[19] + g_RT[23] - g_RT_qss[1]);
  const amrex::Real x935 = exp(-g_RT[13] + g_RT[17] + g_RT[8] - g_RT_qss[1]);
  const amrex::Real x938 = exp(-g_RT[14] + g_RT[6] + g_RT[8] - g_RT_qss[1]);
  amrex::Real x942 =
    kf_qss[25] * sc[6] * sc[8] * x938 + kf_qss[26] * sc[19] * sc[20] * x924 +
    kf_qss[27] * sc[12] * sc[19] * x911 +
    kf_qss[28] * sc[15] * sc[19] * x171 * x927 +
    kf_qss[29] * sc[17] * sc[8] * x935 + kf_qss[33] * sc[20] * sc[8] * x915 +
    kf_qss[40] * sc[12] * sc[15] + kf_qss[62] * sc[19] * sc[23] * x932 +
    kf_qss[88] * sc[19] * sc[24] * x919 + 10.0e-13;
  amrex::Real x943 = x68 * x908 - x886 * x887 - x942 / x65;
  amrex::Real x945 = x646 / (x399 * x644);
  amrex::Real x946 = x816 / x280;
  amrex::Real x949 =
    kf_qss[61] * exp(-g_RT[10] + g_RT[19] + g_RT[23] - g_RT_qss[0]);
  amrex::Real x951 = g_RT[12] - g_RT[19] - g_RT_qss[0];
  amrex::Real x959 =
    kf_qss[21] * exp(g_RT[12] + g_RT[19] - g_RT[6] - g_RT_qss[0]);
  const amrex::Real x961 = exp(-g_RT[15] + g_RT[19] + g_RT[20] - g_RT_qss[0]);
  const amrex::Real x965 = exp(-g_RT[12] + g_RT[19] + g_RT[1] - g_RT_qss[0]);
  const amrex::Real x969 = refC * sc[22];
  amrex::Real x970 = g_RT[22] - g_RT[8] - g_RT_qss[0];
  amrex::Real x971 = x635 * exp(x619 + x970);
  amrex::Real x980 = kf_qss[23] * refCinv *
                     exp(-g_RT[13] + 2.0 * g_RT[19] + g_RT[21] - g_RT_qss[0]);
  amrex::Real x985 =
    kf_qss[87] * exp(g_RT[19] - g_RT[1] + g_RT[24] - g_RT_qss[0]);
  amrex::Real x987 =
    kf_qss[20] * sc[19] * sc[20] * x961 + kf_qss[39] * sc[12] * sc[15] +
    kf_qss[45] * sc[19] * sc[1] * x965 +
    kf_qss[53] * ((sc[12]) * (sc[12])) *
      exp(2.0 * g_RT[12] - g_RT[2] - g_RT_qss[0]) +
    kf_qss[58] * sc[10] * sc[14] + kf_qss[65] * sc[14] * sc[22] +
    kf_qss[84] * sc[14] * sc[1] +
    3200000000000000.0 * refC * sc[12] * x13 * x613 * exp(x597 + x951) +
    sc[12] * sc[19] * x959 + sc[19] * sc[23] * x949 + sc[19] * sc[24] * x985 +
    ((sc[19]) * (sc[19])) * sc[21] * x980 + 2.69e+21 * x13 * x969 * x971 + x390;
  amrex::Real x990 = (-x943 * x945 - x673 * x946 / x644 - x987 / x644) /
                     ((-x413 * x647 - x441 * x673 / x644 + 1) *
                      (-x413 * x647 - x441 * x673 / x644 + 1));
  const amrex::Real x991 =
    x990 * (x497 * x682 + x545 * x684 + x591 * x649 + x678);
  x118 = 1350000000000.0 * x110 * x13 * x784 * x787 / ((x118) * (x118));
  amrex::Real x995 =
    x493 * x784 * exp(-1434.1674975434501 * invT - 5.14 * logT + x786);
  amrex::Real x996 = sc[19] * x171 * x771;
  amrex::Real x998 = kf_qss[12] * x996 -
                     x118 * (0.28 * x113 * x483 + 2.0 * x483 * x486) +
                     1350000000000.0 * x784 * x787 - 1.8225e+24 * x995;
  x222 = 1.99e+29 * x13 * x214 * x728 * x732 / ((x222) * (x222));
  x259 = x251 * x713 * x714 / ((x259) * (x259));
  amrex::Real x1004 =
    x13 * x713 * exp(-5806.1138900548603 * invT - 13.284 * logT);
  amrex::Real x1009 =
    1.7777777777777777 * x749 /
    ((-0.73540532268950665 * x746 - 0.18666666666666668 * x749 + 1) *
     (-0.73540532268950665 * x746 - 0.18666666666666668 * x749 + 1));
  x749 = 2.3703703703703702 * ((x749) * (x749)) /
         ((-0.73540532269 * x746 - 0.18666666666666668 * x749 + 1) *
          (-0.73540532269 * x746 - 0.18666666666666668 * x749 + 1) *
          (-0.73540532269 * x746 - 0.18666666666666668 * x749 + 1));
  amrex::Real x1011 = 1.55e+44 * x13 * x742 * x746 * x757 / ((x754) * (x754));
  amrex::Real x1013 = refC * sc[5] * x13 *
                      exp(
                        g_RT[5] - g_RT_qss[4] - g_RT_qss[5] -
                        9042.3002678450102 * invT - 23.58 * logT);
  x754 = 4.162330905306972e-89 *
         exp(M_LN10 * (0.43429448190325198 * x746 / x754)) * x1013 /
         (kf_qss[10] * ((6.4516129032258066e-45 + x744 / kf_qss[10]) *
                        (6.4516129032258066e-45 + x744 / kf_qss[10])));
  amrex::Real x1015 = -x1011 * (2.0 * x1009 * x483 + 0.28 * x483 * x749) +
                      1.55e+44 * x742 * x757 - 2.4025e+88 * x754;
  amrex::Real x1016 = -8.41e+54 * x1004 * x250 + x1015 -
                      x222 * (0.28 * x217 * x483 + 2.0 * x483 * x530) -
                      x259 * (0.28 * x254 * x483 + 2.0 * x483 * x519) +
                      2.9e+27 * x262 * x713 * exp(x246) -
                      3.9601e+58 * x535 * x728 *
                        exp(-6728.0068218091001 * invT - 14.16 * logT + x731) +
                      1.99e+29 * x728 * x732;
  amrex::Real x1018 = x1016 * x277 / x273;
  x89 = sc[19] * sc[22] * x71 * x77 * x80 * x93 / ((x89) * (x89));
  amrex::Real x1021 = -1.444e+59 * sc[19] * sc[22] * x509 *
                        exp(-11976.556646152299 * invT - 15.28 * logT) +
                      sc[19] * sc[22] * x77 * x93 -
                      x89 * (2.0 * x504 + 0.28 * x83);
  x707 = x707 / ((x102) * (x102));
  x762 = x762 / ((x273) * (x273));
  amrex::Real x1031 =
    -x197 * x513 * x707 - x277 * x539 * x762 + x1021 * x197 / x102;
  amrex::Real x1033 = x1018 + x1031 - x998 / x194;
  x815 = x815 / ((x194) * (x194));
  amrex::Real x1035 = x196 * x708 / ((x194) * (x194));
  amrex::Real x1037 = x276 * x763 / ((x194) * (x194));
  amrex::Real x1038 = -x1035 * x497 - x1037 * x497 + x497 * x815;
  amrex::Real x1042 =
    x447 * x853 * exp(-3341.3586609433401 * invT - 7.72 * logT + x854);
  x306 = x299 * x848 * x851 / ((x306) * (x306));
  amrex::Real x1046 = sc[10] * x308 * x423 * x71 *
                      exp(-36029.025036953499 * invT - 6.8 * logT + x849) /
                      (kf_qss[4] * ((x298 + 1.0) * (x298 + 1.0)));
  x336 = 4.27e+46 * x329 * x340 * x71 * x821 / ((x336) * (x336));
  x359 = 1.4e+18 * x351 * x71 * x853 * x855 / ((x359) * (x359));
  const amrex::Real x1049 = refC * sc[3] * x71 *
                            exp(
                              -g_RT[12] + g_RT[3] - g_RT_qss[4] -
                              9832.6523631579003 * invT - 23.88 * logT);
  amrex::Real x1051 =
    x1015 - 1.96e+36 * x1042 - 6.579225e+42 * x1046 -
    1.82329e+93 * x1049 * x445 - x306 * (2.0 * x301 + 0.28 * x455) -
    x336 * (0.28 * x468 + 2.0 * x469) + 4.27e+46 * x340 * x821 -
    x359 * (0.28 * x354 + 2.0 * x461) + 2.565e+21 * x423 * x851 +
    1.4e+18 * x853 * x855;
  amrex::Real x1052 = -x1051 / x366;
  x371 = x371 * x816 / ((x280) * (x280));
  amrex::Real x1055 = -x369 * x513 * x707;
  x867 = x867 / ((x366) * (x366));
  amrex::Real x1059 = x368 * x708 / ((x366) * (x366));
  amrex::Real x1060 = -x1059 * x476 + x476 * x867 -
                      x946 * (-x476 * x559 + x476 * x561 + x513 * x563);
  amrex::Real x1061 = x1055 + x1060 + x1021 * x369 / x102;
  amrex::Real x1062 = x1061 + x371 * x545;
  amrex::Real x1065 = x390 * x868 / (((x373) * (x373)) * x388);
  const amrex::Real x1067 =
    (x1065 * x568 - x479 * (x1052 + x1062 - x372 * (x1033 + x1038))) / x392;
  amrex::Real x1068 = x398 * x886 / ((x392) * (x392));
  x33 = x25 * x903 * x904 / ((x33) * (x33));
  amrex::Real x1073 = x13 * x903 * exp(-5595.76932374848 * invT - 9.6 * logT);
  amrex::Real x1074 = -4.84e+36 * x1073 * x582 -
                      x33 * (0.28 * x28 * x483 + 2.0 * x483 * x577) +
                      2.2e+18 * x36 * x903 * exp(x18);
  x907 = x907 / ((x49) * (x49));
  amrex::Real x1080 = x1074 * x68 / x49 - x586 * x68 * x907;
  amrex::Real x1081 = x1068 * (x482 + x568 * x571) + x1080;
  const amrex::Real x1083 = (-x1067 * x398 + x1081) / x399;
  amrex::Real x1084 = x647 * x943 / ((x399) * (x399));
  x631 = 2.69e+21 * x13 * x624 * x969 * x971 / ((x631) * (x631));
  amrex::Real x1087 =
    x650 * x969 * exp(-7140.6444877689701 * invT - 10.22 * logT + x970);
  amrex::Real x1088 =
    refC * sc[12] * exp(-1237.91299787961 * invT - 6.28 * logT + x951);
  x609 = 3200000000000000.0 * refC * sc[12] * x13 * x602 * x613 *
         exp(x597 + x951) / ((x609) * (x609));
  amrex::Real x1091 = refC * sc[12] * x613 * exp(x597 + x951);
  amrex::Real x1092 = -7.2361e+42 * x1087 - 1.024e+31 * x1088 * x660 +
                      3200000000000000.0 * x1091 -
                      x609 * (2.0 * x483 * x604 + 0.28 * x483 * x666) -
                      x631 * (2.0 * x483 * x626 + 0.28 * x483 * x655) +
                      2.69e+21 * x969 * x971;
  amrex::Real x1093 = -x1092 / x644;
  amrex::Real x1094 = x673 * x816 / (((x280) * (x280)) * x644);
  amrex::Real x1096 = x987 / ((x644) * (x644));
  amrex::Real x1098 = x673 * x946 / ((x644) * (x644));
  amrex::Real x1100 = x646 * x943 / (x399 * ((x644) * (x644)));
  amrex::Real x1101 = x1096 * x671 + x1098 * x671 + x1100 * x671;
  amrex::Real x1102 = x1084 * x591 + x1093 + x1094 * x545 + x1101;
  amrex::Real x1103 = (1.0 / ((-x413 * x647 - x441 * x673 / x644 + 1)));
  const amrex::Real x1104 =
    x1103 * (-x1083 * x647 + x1102 - x680 * (x1033 + x1038));
  amrex::Real x1106 = -kf_qss[86] + x497;
  amrex::Real x1113 =
    -4.2e+18 * sc[19] * x362 * exp(x346) +
    5.88e+36 * sc[19] * x447 * exp(-3341.3586609433401 * invT - 7.72 * logT) -
    7.695e+21 * x311 - 1.281e+47 * x340 * x451 + 5.46987e+93 * x444 * x445 +
    x459 * (6.0 * x301 + 0.84 * x455) + x465 * (0.84 * x354 + 6.0 * x461) +
    x472 * (0.84 * x468 + 6.0 * x469) + 1.9737675e+43 * x475;
  amrex::Real x1116 =
    refC * x509 * exp(-11976.556646152299 * invT - 15.28 * logT + x74);
  amrex::Real x1117 =
    4.332e+59 * x1116 + x508 * (6.0 * x504 + 0.84 * x83) - 1.14e+30 * x95;
  amrex::Real x1121 = -kf_qss[86] * x277 / x273 + x1106 * x500 + x1106 * x502 +
                      x1117 * x516 + x542 * (-x272 + x539);
  amrex::Real x1124 = -x1113 * x559 + x1113 * x561 + x1117 * x563;
  amrex::Real x1127 = x1113 * x558 + x1117 * x555 + x1121 * x548 -
                      x1124 * x566 -
                      x372 * (x1106 * x549 - x1106 * x550 + x1117 * x552);
  amrex::Real x1131 = x51 * x67 / ((x65) * (x65));
  amrex::Real x1133 = x396 * x397 / ((x65) * (x65));
  amrex::Real x1134 = -kf_qss[88] * x1131 - kf_qss[88] * x1133 +
                      x575 * (x1113 * x481 + x1127 * x571) + x590;
  amrex::Real x1137 = x411 * x945 / ((x65) * (x65));
  const amrex::Real x1138 =
    x990 * (-kf_qss[88] * x1137 + x1106 * x682 + x1121 * x684 + x1134 * x649 +
            x675 * (-kf_qss[87] + x671) + x677 * (-kf_qss[87] + x671));
  amrex::Real x1139 = x67 * x908 / ((x65) * (x65));
  amrex::Real x1143 = x397 * x886 / (x392 * ((x65) * (x65)));
  x447 = -1.9737675000000001e+43 * x1046 - 5.46987e+93 * x1049 * x445 -
         x306 * (6.0 * x301 + 0.84 * x455) - x336 * (0.84 * x468 + 6.0 * x469) +
         1.281e+47 * x340 * x821 - x359 * (0.84 * x354 + 6.0 * x461) +
         7.695e+21 * x423 * x851 -
         5.88e+36 * x447 * x853 *
           exp(-3341.3586609433401 * invT - 7.72 * logT + x854) +
         4.2e+18 * x853 * x855;
  amrex::Real x1152 = sc[19] * sc[22] * x93 * exp(x75);
  x509 =
    sc[19] * sc[22] * x509 * exp(-11976.556646152299 * invT - 15.28 * logT);
  amrex::Real x1154 =
    (1.14e+30 * x1152 - 4.332e+59 * x509 - x89 * (6.0 * x504 + 0.84 * x83)) /
    x102;
  amrex::Real x1155 = -x1117 * x197 * x707 + x1154 * x197;
  amrex::Real x1156 =
    -x1035 * x1106 - x1037 * x1106 + x1106 * x815 + x1155 -
    x277 * x762 * (-x272 + x539) +
    x277 * (kf_qss[92] * sc[16] * x716 + sc[19] * x714 + x1016) / x273 -
    (kf_qss[83] * sc[14] + x998) / x194;
  amrex::Real x1157 =
    -x1059 * x1113 + x1113 * x867 - x1117 * x369 * x707 + x1154 * x369;
  amrex::Real x1159 =
    x1121 * x371 - x1124 * x946 - x1156 * x372 + x1157 -
    (kf_qss[81] * sc[19] + kf_qss[82] * sc[14] + kf_qss[85] * sc[15] +
     kf_qss[89] * sc[12] + kf_qss[90] * sc[13] + 1.4e+18 * refC * x71 * x855 +
     x1015 + x447) /
      x366;
  const amrex::Real x1160 =
    (-kf_qss[47] * sc[8] * x880 / x388 + x1065 * x1127 - x1159 * x479) / x392;
  amrex::Real x1161 = kf_qss[88] * x1139 - kf_qss[88] * x1143 -
                      kf_qss[88] * x942 / ((x65) * (x65)) +
                      x1068 * (x1113 * x481 + x1127 * x571) + x1080 -
                      x1160 * x398;
  const amrex::Real x1162 =
    x1103 * (x1084 * x1134 + x1094 * x1121 + x1096 * (-kf_qss[87] + x671) +
             x1098 * (-kf_qss[87] + x671) + x1100 * (-kf_qss[87] + x671) -
             x1156 * x680 - x1161 * x945 -
             (kf_qss[45] * sc[19] * x965 + kf_qss[84] * sc[14] + x1092) / x644);
  amrex::Real x1169 =
    -2700000000000.0 * sc[19] * x121 * exp(x105) +
    3.645e+24 * sc[19] * x493 * exp(-1434.1674975434501 * invT - 5.14 * logT) +
    x491 * (0.56 * x113 * x483 + 4.0 * x483 * x486);
  amrex::Real x1170 = -kf_qss[12] - kf_qss[44] * exp(-x149 - x182) + x1169;
  amrex::Real x1172 =
    2.888e+59 * x1116 + x508 * (4.0 * x504 + 0.56 * x83) - 7.6e+29 * x95;
  amrex::Real x1173 = x1172 / ((x102) * (x102));
  amrex::Real x1180 =
    sc[19] * x535 * exp(-6728.0068218091001 * invT - 14.16 * logT);
  amrex::Real x1181 = -5.8e+27 * refC * x262 * exp(x245 + x246) -
                      3.98e+29 * sc[19] * x225 * exp(x209) +
                      7.9202e+58 * x1180 + 1.682e+55 * x250 * x527 +
                      x523 * (0.56 * x254 * x483 + 4.0 * x483 * x519) +
                      x534 * (0.56 * x217 * x483 + 4.0 * x483 * x530);
  amrex::Real x1182 = -kf_qss[97] * exp(-x182 - x230) + x1181;
  amrex::Real x1183 =
    x1170 * x500 + x1170 * x502 + x1173 * x197 * x278 + x1182 * x542;
  amrex::Real x1189 = -6400000000000000.0 * sc[19] * x613 * exp(x597) -
                      5.38e+21 * sc[8] * x635 * exp(x619) + 1.44722e+43 * x653 +
                      x659 * (4.0 * x483 * x626 + 0.56 * x483 * x655) +
                      2.048e+31 * x664 +
                      x670 * (4.0 * x483 * x604 + 0.56 * x483 * x666);
  amrex::Real x1196 = -2.8e+18 * sc[19] * x362 * exp(x346) - 5.13e+21 * x311 -
                      8.54e+46 * x340 * x451 + 3.64658e+93 * x444 * x445 +
                      3.92e+36 * x450 + x459 * (4.0 * x301 + 0.56 * x455) +
                      x465 * (0.56 * x354 + 4.0 * x461) +
                      x472 * (0.56 * x468 + 4.0 * x469) + 1.315845e+43 * x475;
  amrex::Real x1197 = -kf_qss[89] * exp(-x182 - x287) + x1196;
  amrex::Real x1205 =
    x1173 * x369 * x70 + x1183 * x548 + x1197 * x558 -
    x372 * (x1170 * x549 - x1170 * x550 + x1173 * x197 * x70) -
    x566 * (x1173 * x278 * x369 - x1197 * x559 + x1197 * x561);
  amrex::Real x1209 = -4.4e+18 * x38 +
                      x581 * (0.56 * x28 * x483 + 4.0 * x483 * x577) +
                      9.68e+36 * x582 * x585;
  amrex::Real x1211 = x1209 * x589 + x575 * (x1197 * x481 + x1205 * x571);
  const amrex::Real x1212 =
    x990 * (x1170 * x682 + x1183 * x684 + x1211 * x649 +
            x413 * x646 * (-kf_qss[53] + x1189) / ((x644) * (x644)) +
            x675 * (-kf_qss[53] + x1189));
  amrex::Real x1214 = -1.44722e+43 * x1087 - 2.048e+31 * x1088 * x660 +
                      6400000000000000.0 * x1091 -
                      x609 * (4.0 * x483 * x604 + 0.56 * x483 * x666) -
                      x631 * (4.0 * x483 * x626 + 0.56 * x483 * x655) +
                      5.38e+21 * x969 * x971;
  x493 = -x118 * (0.56 * x113 * x483 + 4.0 * x483 * x486) -
         3.645e+24 * x493 * x784 *
           exp(-1434.1674975434501 * invT - 5.14 * logT + x786) +
         2700000000000.0 * x784 * x787;
  amrex::Real x1218 =
    7.6e+29 * x1152 - 2.888e+59 * x509 - x89 * (4.0 * x504 + 0.56 * x83);
  x535 = x535 * x728 * exp(-6728.0068218091001 * invT - 14.16 * logT + x731);
  amrex::Real x1223 = -x1011 * (4.0 * x1009 * x483 + 0.56 * x483 * x749) +
                      3.1e+44 * x742 * x757 - 4.805e+88 * x754;
  amrex::Real x1224 = (-1.682e+55 * x1004 * x250 + x1223 -
                       x222 * (0.56 * x217 * x483 + 4.0 * x483 * x530) -
                       x259 * (0.56 * x254 * x483 + 4.0 * x483 * x519) +
                       5.8e+27 * x262 * x713 * exp(x246) - 7.9202e+58 * x535 +
                       3.98e+29 * x728 * x732) /
                      x273;
  amrex::Real x1225 = -x1172 * x197 * x707 + x1224 * x277;
  amrex::Real x1227 =
    -x1035 * x1170 - x1037 * x1170 + x1170 * x815 - x1182 * x277 * x762 +
    x1225 - (kf_qss[12] * x996 + kf_qss[43] * sc[8] * x807 + x493) / x194 +
    x1218 * x197 / x102;
  x1223 = -3.92e+36 * x1042 - 1.315845e+43 * x1046 -
          3.64658e+93 * x1049 * x445 + x1223 -
          x306 * (4.0 * x301 + 0.56 * x455) -
          x336 * (0.56 * x468 + 4.0 * x469) + 8.54e+46 * x340 * x821 -
          x359 * (0.56 * x354 + 4.0 * x461) + 5.13e+21 * x423 * x851 +
          2.8e+18 * x853 * x855;
  amrex::Real x1233 =
    -x1059 * x1197 - x1172 * x369 * x707 + x1183 * x371 + x1197 * x867 -
    x1223 / x366 - x1227 * x372 -
    x946 * (x1173 * x278 * x369 - x1197 * x559 + x1197 * x561) +
    x1218 * x369 / x102;
  const amrex::Real x1234 = (x1065 * x1205 - x1233 * x479) / x392;
  amrex::Real x1237 = -9.68e+36 * x1073 * x582 -
                      x33 * (0.56 * x28 * x483 + 4.0 * x483 * x577) +
                      4.4e+18 * x36 * x903 * exp(x18);
  const amrex::Real x1242 =
    (x1068 * (x1197 * x481 + x1205 * x571) - x1209 * x68 * x907 - x1234 * x398 +
     x1237 * x68 / x49) /
    x399;
  const amrex::Real x1243 =
    x1103 * (x1084 * x1211 + x1094 * x1183 + x1096 * (-kf_qss[53] + x1189) +
             x1098 * (-kf_qss[53] + x1189) - x1214 / x644 - x1227 * x680 -
             x1242 * x647 +
             x646 * x943 * (-kf_qss[53] + x1189) / (x399 * ((x644) * (x644))));
  amrex::Real x1245 =
    x1018 + x1031 + x1038 - (kf_qss[102] * sc[8] * x779 + x998) / x194;
  const amrex::Real x1246 = 4.27e+46 * refC * x71 *
                            exp(
                              -g_RT[12] + g_RT[3] - g_RT_qss[4] -
                              4916.3261815789501 * invT - 11.94 * logT);
  const amrex::Real x1248 =
    (x1065 * x568 -
     x479 * (x1062 - x1245 * x372 - (x1051 + x1246 * x340) / x366)) /
    x392;
  const amrex::Real x1249 = (x1081 - x1248 * x398) / x399;
  const amrex::Real x1250 = x1103 * (x1102 - x1245 * x680 - x1249 * x647);
  const amrex::Real x1251 = 1.55e+44 * x526 *
                            exp(
                              g_RT[5] - g_RT_qss[4] - g_RT_qss[5] -
                              4521.1501339224997 * invT - 11.79 * logT);
  amrex::Real x1254 =
    x1031 + x1038 +
    x277 * (kf_qss[104] * sc[19] + x1016 + x1251 * x757) / x273 - x998 / x194;
  const amrex::Real x1256 =
    (x1065 * x568 -
     x479 * (x1062 - x1254 * x372 - (x1051 + x1251 * x757) / x366)) /
    x392;
  const amrex::Real x1257 = (x1081 - x1256 * x398) / x399;
  const amrex::Real x1258 = x1103 * (x1102 - x1254 * x680 - x1257 * x647);
  amrex::Real x1260 =
    -2 * kf_qss[12] -
    kf_qss[34] * exp(-g_RT[19] - g_RT[20] + g_RT[6] + g_RT_qss[2]) + x1169;
  amrex::Real x1262 = -kf_qss[94] * exp(-x230 - x240) + x1181;
  amrex::Real x1263 =
    x1173 * x197 * x278 + x1260 * x500 + x1260 * x502 + x1262 * x542;
  amrex::Real x1264 = -kf_qss[81] * exp(-x240 - x287) + x1196;
  amrex::Real x1268 =
    x104 * x1264 * x368 / ((x366) * (x366)) + x1173 * x369 * x70 +
    x1263 * x548 - x372 * (x1173 * x197 * x70 + x1260 * x549 - x1260 * x550) -
    x566 * (x1173 * x278 * x369 + x1264 * x279 * x368 / ((x366) * (x366)) -
            x1264 * x559);
  amrex::Real x1270 = 10.0e-13 * x390 / (x366 * x373);
  amrex::Real x1272 = 10.0e-13 * x1264 * x479 / ((x366) * (x366)) +
                      x1268 * x571 - x1270 * x379 / ((x388) * (x388));
  amrex::Real x1275 = -kf_qss[27] * x1131 - kf_qss[27] * x1133 + x1209 * x589 +
                      x1272 * x575 - x379 * x394 * x887 / ((x388) * (x388));
  const amrex::Real x1276 =
    x990 * (-kf_qss[27] * x1137 + x1260 * x682 + x1263 * x684 + x1275 * x649 +
            x675 * (-kf_qss[21] + x1189) + x677 * (-kf_qss[21] + x1189));
  amrex::Real x1279 =
    -x1035 * x1260 - x1037 * x1260 + x1225 + x1260 * x815 -
    x1262 * x277 * x762 -
    (2 * kf_qss[12] * x996 + kf_qss[14] * sc[8] * x793 + x493) / x194 +
    x197 * (sc[22] * x701 + x1218) / x102;
  amrex::Real x1284 =
    -x1172 * x369 * x707 + x1263 * x371 + x1264 * x867 -
    x1264 * x368 * x708 / ((x366) * (x366)) - x1279 * x372 -
    x946 * (x1173 * x278 * x369 + x1264 * x279 * x368 / ((x366) * (x366)) -
            x1264 * x559) -
    (kf_qss[67] * sc[10] * x860 + x1223) / x366 +
    x369 * (sc[22] * x701 + x1218) / x102;
  amrex::Real x1286 = x390 * x868 / (x373 * ((x388) * (x388)));
  amrex::Real x1287 = x1065 * x1268 - x1284 * x479 - x1286 * x379 -
                      x379 * x885 / ((x388) * (x388));
  amrex::Real x1288 = -kf_qss[25] * sc[8] * x938 / x65 + kf_qss[27] * x1139 -
                      kf_qss[27] * x1143 - kf_qss[27] * x942 / ((x65) * (x65)) +
                      x1068 * x1272 - x1209 * x68 * x907 - x1287 * x887 +
                      x68 * (kf_qss[48] * sc[20] * x895 + x1237) / x49;
  const amrex::Real x1289 =
    x1103 * (x1084 * x1275 + x1094 * x1263 + x1096 * (-kf_qss[21] + x1189) +
             x1098 * (-kf_qss[21] + x1189) + x1100 * (-kf_qss[21] + x1189) -
             x1214 / x644 - x1279 * x680 - x1288 * x945);
  amrex::Real x1295 = -9600000000000000.0 * sc[19] * x613 * exp(x597) -
                      8.07e+21 * sc[8] * x635 * exp(x619) + 2.17083e+43 * x653 +
                      x659 * (6.0 * x483 * x626 + 0.84 * x483 * x655) +
                      3.072e+31 * x664 +
                      x670 * (6.0 * x483 * x604 + 0.84 * x483 * x666);
  amrex::Real x1298 =
    -kf_qss[12] - 4050000000000.0 * sc[19] * x121 * exp(x105) +
    x491 * (0.84 * x113 * x483 + 6.0 * x483 * x486) + 5.4675e+24 * x496;
  amrex::Real x1303 = -5.97e+29 * sc[19] * x225 * exp(x209) +
                      1.18803e+59 * x1180 + 2.523e+55 * x250 * x527 -
                      8.7e+27 * x264 +
                      x523 * (0.84 * x254 * x483 + 6.0 * x483 * x519) +
                      x534 * (0.84 * x217 * x483 + 6.0 * x483 * x530);
  amrex::Real x1304 = x1117 * x516 + x1298 * x500 +
                      x1298 * x275 * x276 / ((x194) * (x194)) + x1303 * x542;
  amrex::Real x1306 = x1113 * x558 + x1117 * x555 - x1124 * x566 +
                      x1304 * x548 -
                      x372 * (x1117 * x552 + x1298 * x549 - x1298 * x550);
  amrex::Real x1309 = -6.6e+18 * x38 +
                      x581 * (0.84 * x28 * x483 + 6.0 * x483 * x577) +
                      1.452e+37 * x582 * x585;
  amrex::Real x1310 = x1309 * x589 + x575 * (x1113 * x481 + x1306 * x571);
  const amrex::Real x1311 = x990 * (x1295 * x675 + x1295 * x677 +
                                    x1298 * x439 * x680 / ((x194) * (x194)) +
                                    x1304 * x684 + x1310 * x649);
  amrex::Real x1314 = -x1011 * (6.0 * x1009 * x483 + 0.84 * x483 * x749) +
                      4.65e+44 * x742 * x757 - 7.2075e+88 * x754;
  amrex::Real x1315 =
    (kf_qss[94] * sc[19] + kf_qss[95] * sc[14] + kf_qss[96] * sc[15] +
     kf_qss[97] * sc[12] - 2.523e+55 * x1004 * x250 + x1314 -
     x222 * (0.84 * x217 * x483 + 6.0 * x483 * x530) -
     x259 * (0.84 * x254 * x483 + 6.0 * x483 * x519) +
     8.7e+27 * x262 * x713 * exp(x246) + 1.99e+29 * x526 * x732 -
     1.18803e+59 * x535 + 5.97e+29 * x728 * x732) /
    x273;
  amrex::Real x1317 =
    -x1035 * x1298 - x1037 * x1298 + x1155 + x1298 * x815 -
    x1303 * x277 * x762 + x1315 * x277 -
    (kf_qss[12] * x996 - x118 * (0.84 * x113 * x483 + 6.0 * x483 * x486) +
     4050000000000.0 * x784 * x787 - 5.4675e+24 * x995) /
      x194;
  x1314 =
    -x1124 * x946 + x1157 + x1304 * x371 - x1317 * x372 - (x1314 + x447) / x366;
  const amrex::Real x1319 = (x1065 * x1306 - x1314 * x479) / x392;
  amrex::Real x1320 =
    (-1.452e+37 * x1073 * x582 - x33 * (0.84 * x28 * x483 + 6.0 * x483 * x577) +
     6.6e+18 * x36 * x903 * exp(x18)) /
    x49;
  const amrex::Real x1322 = (x1068 * (x1113 * x481 + x1306 * x571) -
                             x1309 * x68 * x907 - x1319 * x398 + x1320 * x68) /
                            x399;
  x1295 = x1103 * (x1084 * x1310 + x1094 * x1304 + x1096 * x1295 +
                   x1098 * x1295 + x1100 * x1295 - x1317 * x680 - x1322 * x647 -
                   (-2.17083e+43 * x1087 - 3.072e+31 * x1088 * x660 +
                    9600000000000000.0 * x1091 -
                    x609 * (6.0 * x483 * x604 + 0.84 * x483 * x666) -
                    x631 * (6.0 * x483 * x626 + 0.84 * x483 * x655) +
                    8.07e+21 * x969 * x971) /
                     x644);
  amrex::Real x1328 = -1.75 * kf_qss[12] - refCinv * sc[23] * x175 -
                      2025000000000.0 * sc[19] * x121 * exp(x105) +
                      x491 * (0.42 * x113 * x483 + 3.0 * x483 * x486) +
                      2.73375e+24 * x496;
  x621 = -kf_qss[31] * x402 - kf_qss[58] * exp(-g_RT[10] + g_RT[8] - x593) -
         4800000000000000.0 * sc[19] * x613 * exp(x597) -
         4.035e+21 * sc[8] * x635 * exp(x619) +
         1.085415e+43 * sc[8] * x650 *
           exp(-7140.6444877689701 * invT - 10.22 * logT) -
         x13 * x621 * x635 + x659 * (3.0 * x483 * x626 + 0.42 * x483 * x655) +
         1.536e+31 * x664 + x670 * (3.0 * x483 * x604 + 0.42 * x483 * x666);
  x664 = (-kf_qss[31] - kf_qss[54] * x62) / ((x65) * (x65));
  x95 = 2.166e+59 * x1116 + x508 * (3.0 * x504 + 0.42 * x83) - 5.7e+29 * x95;
  amrex::Real x1341 = -2.985e+29 * sc[19] * x225 * exp(x209) +
                      5.94015e+58 * x1180 + 1.2615e+55 * x250 * x527 -
                      4.35e+27 * x264 - x267 +
                      x523 * (0.42 * x254 * x483 + 3.0 * x483 * x519) +
                      x534 * (0.42 * x217 * x483 + 3.0 * x483 * x530);
  amrex::Real x1343 = x1328 * x500 + x1328 * x502 + x1341 * x542 -
                      x267 * x275 / x194 +
                      x197 * x278 * x95 / ((x102) * (x102));
  amrex::Real x1351 =
    -kf_qss[57] * x292 - kf_qss[99] * x284 * x318 -
    2.1e+18 * sc[19] * x362 * exp(x346) - x203 - 3.8475e+21 * x311 -
    6.405e+46 * x340 * x451 + 2.734935e+93 * x444 * x445 + 2.94e+36 * x450 +
    x459 * (3.0 * x301 + 0.42 * x455) + x465 * (0.42 * x354 + 3.0 * x461) +
    x472 * (0.42 * ((x331) * (x331)) * x453 / ((x333) * (x333) * (x333)) +
            3.0 * x469) +
    9.8688375000000004e+42 * x475;
  x203 = x1328 * x549 - x1328 * x550 + x203 / x194 +
         x197 * x70 * x95 / ((x102) * (x102));
  amrex::Real x1355 = x1343 * x548 + x1351 * x558 - x203 * x372 -
                      x566 * (-x1351 * x559 + x1351 * x561 +
                              x278 * x369 * x95 / ((x102) * (x102))) +
                      x369 * x70 * x95 / ((x102) * (x102));
  amrex::Real x1356 = -10.0e-13 * kf_qss[57] * x292 / (x366 * x373 * x388) +
                      x1351 * x481 + x1355 * x571;
  x38 = -3.3e+18 * x38 + x581 * (0.42 * x28 * x483 + 3.0 * x483 * x577) +
        7.26e+36 * x582 * x585;
  amrex::Real x1361 = -kf_qss[54] * x62 * x887 / x388 + x1356 * x575 +
                      x38 * x589 + x396 * x397 * x664 + x51 * x664 * x67;
  const amrex::Real x1362 =
    x990 * (-kf_qss[31] * x402 * x945 / x65 - kf_qss[31] * x413 / x644 +
            x1328 * x682 + x1343 * x684 + x1361 * x649 + x411 * x664 * x945 +
            x621 * x675 + x621 * x677);
  amrex::Real x1367 = (5.7e+29 * x1152 - 2.166e+59 * x509 + x691 * x723 -
                       x89 * (3.0 * x504 + 0.42 * x83)) /
                      x102;
  amrex::Real x1370 = -x1011 * (3.0 * x1009 * x483 + 0.42 * x483 * x749) +
                      2.325e+44 * x742 * x757 - 3.60375e+88 * x754;
  amrex::Real x1371 = (-1.2615e+55 * x1004 * x250 + x1370 -
                       x222 * (0.42 * x217 * x483 + 3.0 * x483 * x530) -
                       x259 * (0.42 * x254 * x483 + 3.0 * x483 * x519) +
                       4.35e+27 * x262 * x713 * exp(x246) - 5.94015e+58 * x535 +
                       2.985e+29 * x728 * x732) /
                      x273;
  x267 = -x1035 * x1328 - x1037 * x1328 + x1328 * x815 - x1341 * x277 * x762 +
         x1367 * x197 + x1371 * x277 - x197 * x707 * x95 + x267 * x763 / x194 -
         (kf_qss[102] * sc[3] * x779 + 1.75 * kf_qss[12] * sc[8] * x423 * x771 +
          kf_qss[12] * x164 * x423 * x771 + kf_qss[13] * sc[17] * x423 * x771 +
          kf_qss[14] * sc[6] * x793 + kf_qss[15] * sc[15] * x767 +
          kf_qss[17] * sc[17] * x800 + kf_qss[18] * sc[16] * exp(-x157 - x201) +
          kf_qss[43] * sc[2] * x807 -
          x118 * (0.42 * x113 * x483 + 3.0 * x483 * x486) +
          2025000000000.0 * x784 * x787 - 2.73375e+24 * x995) /
           x194;
  amrex::Real x1377 =
    (-7.26e+36 * x1073 * x582 - x33 * (0.42 * x28 * x483 + 3.0 * x483 * x577) +
     3.3e+18 * x36 * x903 * exp(x18)) /
    x49;
  x331 = -x1059 * x1351 + x1343 * x371 + x1351 * x867 + x1367 * x369 -
         x267 * x372 - x369 * x707 * x95 -
         x946 * (-x1351 * x559 + x1351 * x561 +
                 x278 * x369 * x95 / ((x102) * (x102))) -
         (kf_qss[69] * sc[12] * x842 - 2.94e+36 * x1042 -
          9.8688375000000004e+42 * x1046 - 2.734935e+93 * x1049 * x445 + x1370 -
          x306 * (3.0 * x301 + 0.42 * x455) -
          x336 * (0.42 * ((x331) * (x331)) * x453 / ((x333) * (x333) * (x333)) +
                  3.0 * x469) +
          6.405e+46 * x340 * x821 - x359 * (0.42 * x354 + 3.0 * x461) +
          3.8475e+21 * x423 * x851 + 2.1e+18 * x853 * x855) /
           x366;
  x333 =
    -kf_qss[57] * x292 * x868 / (x373 * x388) + x1065 * x1355 - x331 * x479 -
    (kf_qss[47] * sc[1] * x880 + 2.0 * kf_qss[55] * sc[19] * ((sc[8])) * x874 +
     2.0 * sc[15] * ((sc[8])) * x872) /
      x388;
  x1370 = x1068 * x1356 + x1377 * x68 - x333 * x887 - x38 * x68 * x907 -
          x664 * x67 * x908 -
          (kf_qss[25] * sc[6] * x938 + kf_qss[28] * sc[15] * x423 * x927 +
           kf_qss[29] * sc[17] * x935 + kf_qss[33] * sc[20] * x915) /
            x65 +
          x942 * (-kf_qss[31] - kf_qss[54] * x62) / ((x65) * (x65)) +
          x397 * x664 * x886 / x392;
  x650 = x1103 * (-kf_qss[31] * x943 / (x399 * x644) + x1084 * x1361 +
                  x1094 * x1343 + x1096 * x621 + x1098 * x621 + x1100 * x621 -
                  x1370 * x945 - x267 * x680 -
                  (kf_qss[57] * x292 - 1.536e+31 * x1088 * x660 +
                   4800000000000000.0 * x1091 -
                   x609 * (3.0 * x483 * x604 + 0.42 * x483 * x666) -
                   x631 * (3.0 * x483 * x626 + 0.42 * x483 * x655) -
                   1.085415e+43 * x650 * x969 *
                     exp(-7140.6444877689701 * invT - 10.22 * logT + x970) +
                   4.035e+21 * x969 * x971) /
                    x644);
  x621 = -kf_qss[112] * exp(-g_RT[29] + g_RT_qss[2] - x186) + x497;
  amrex::Real x1386 = x500 * x621 + x502 * x621 + x544;
  amrex::Real x1388 =
    x1386 * x548 - x372 * (x549 * x621 - x550 * x621 + x553) + x567;
  const amrex::Real x1391 =
    x990 * (x1386 * x684 + x621 * x682 +
            x649 * (x575 * (x1388 * x571 + x482) + x590) + x678);
  amrex::Real x1392 = x1018 + x1031 - x1035 * x621 - x1037 * x621 +
                      x621 * x815 - (kf_qss[118] * sc[14] + x998) / x194;
  const amrex::Real x1395 =
    (x1065 * x1388 - x479 * (x1052 + x1061 + x1386 * x371 - x1392 * x372)) /
    x392;
  const amrex::Real x1396 =
    (x1068 * (x1388 * x571 + x482) + x1080 - x1395 * x398) / x399;
  const amrex::Real x1398 =
    x1103 * (x1084 * (x575 * (x1388 * x571 + x482) + x590) + x1093 +
             x1094 * x1386 + x1101 - x1392 * x680 - x1396 * x647);
  amrex::Real x1400 = -kf_qss[60] + x497;
  amrex::Real x1401 = x1117 * x516 + x1400 * x500 + x1400 * x502 + x539 * x542;
  amrex::Real x1404 = x1113 * x558 + x1117 * x555 + x1401 * x548 -
                      x372 * (x1117 * x552 + x1400 * x549 - x1400 * x550) -
                      x566 * (kf_qss[60] / x366 + x1124);
  amrex::Real x1406 = -kf_qss[62] * x1131 - kf_qss[62] * x1133 +
                      x575 * (x1113 * x481 + x1404 * x571) + x590;
  const amrex::Real x1407 =
    x990 * (-kf_qss[62] * x1137 + x1400 * x682 + x1401 * x684 + x1406 * x649 +
            x675 * (-kf_qss[61] + x671) + x677 * (-kf_qss[61] + x671));
  x1155 = x1018 - x1035 * x1400 - x1037 * x1400 + x1155 + x1400 * x815 -
          x277 * x539 * x762 - x998 / x194;
  x298 =
    -x1155 * x372 + x1157 + x1401 * x371 - x946 * (kf_qss[60] / x366 + x1124) -
    (kf_qss[67] * sc[6] * x860 + kf_qss[70] * sc[17] * x838 + sc[16] * x864 +
     x1015 + x308 * x848 * exp(x295 + x849) / (x298 + 1.0) + x447) /
      x366;
  x308 = (-kf_qss[59] * sc[14] / x388 + x1065 * x1404 - x298 * x479) / x392;
  x1015 = kf_qss[62] * x1139 - kf_qss[62] * x1143 -
          kf_qss[62] * x942 / ((x65) * (x65)) +
          x1068 * (x1113 * x481 + x1404 * x571) + x1080 - x308 * x398;
  x1124 = x1103 * (-x1015 * x945 + x1084 * x1406 + x1094 * x1401 +
                   x1096 * (-kf_qss[61] + x671) + x1098 * (-kf_qss[61] + x671) +
                   x1100 * (-kf_qss[61] + x671) - x1155 * x680 -
                   (kf_qss[58] * sc[14] + x1092) / x644);
  x447 = -kf_qss[43] - kf_qss[76] * x142 -
         kf_qss[83] * exp(g_RT[12] - g_RT[14] - g_RT[1] + g_RT_qss[2]) + x497;
  x1157 = -kf_qss[76] * x142 * x197 / x102 + x447 * x500 + x447 * x502 + x544;
  amrex::Real x1418 = -kf_qss[74] - 4.27e+46 * x324 * x340 + x476;
  amrex::Real x1420 = -kf_qss[76] * x142 * x369 / x102 - x1418 * x559 +
                      x1418 * x561 + x513 * x563;
  amrex::Real x1422 = x1157 * x548 + x1418 * x558 - x1420 * x566 -
                      x372 * (x447 * x549 - x447 * x550 + x553) + x513 * x555;
  amrex::Real x1423 =
    -kf_qss[47] * x1270 / ((x388) * (x388)) + x1418 * x481 + x1422 * x571;
  amrex::Real x1424 =
    -kf_qss[47] * x394 * x887 / ((x388) * (x388)) + x1423 * x575 + x590;
  const amrex::Real x1425 =
    x990 * (x1157 * x684 + x1424 * x649 + x447 * x682 +
            x675 * (-kf_qss[45] + x671) + x677 * (-kf_qss[45] + x671));
  amrex::Real x1428 =
    (2.0 * kf_qss[46] * ((sc[12])) + kf_qss[91] * sc[20] * x710 +
     kf_qss[93] * sc[20] * x318 * x725 + kf_qss[97] * sc[7] + x1016) /
    x273;
  amrex::Real x1429 = -x1035 * x447 - x1037 * x447 + x1428 * x277 -
                      x197 * x513 * x707 - x277 * x539 * x762 + x447 * x815 -
                      (kf_qss[44] * sc[20] + x998) / x194 +
                      x197 * (x1021 + x171 * x691) / x102;
  x1420 = x1055 - x1059 * x1418 + x1157 * x371 + x1418 * x867 - x1420 * x946 -
          x1429 * x372 -
          (kf_qss[69] * sc[8] * x842 + kf_qss[89] * sc[1] + x1051) / x366 +
          x369 * (x1021 + x171 * x691) / x102;
  amrex::Real x1431 = -kf_qss[47] * x885 / ((x388) * (x388)) -
                      kf_qss[47] * x390 * x868 / (x373 * ((x388) * (x388))) +
                      x1065 * x1422 - x1420 * x479;
  const amrex::Real x1433 =
    (x1068 * x1423 - x1431 * x887 - x586 * x68 * x907 -
     (kf_qss[27] * sc[19] * x911 + kf_qss[40] * sc[15]) / x65 +
     x68 *
       (kf_qss[41] * sc[13] + kf_qss[42] * sc[16] + kf_qss[49] * sc[15] * x899 +
        x1074) /
       x49) /
    x399;
  const amrex::Real x1434 =
    x1103 * (x1084 * x1424 + x1094 * x1157 + x1096 * (-kf_qss[45] + x671) +
             x1098 * (-kf_qss[45] + x671) + x1100 * (-kf_qss[45] + x671) -
             x1429 * x680 - x1433 * x647 -
             (kf_qss[39] * sc[15] +
              2.0 * kf_qss[53] * ((sc[12])) *
                exp(2.0 * g_RT[12] - g_RT[2] - g_RT_qss[0]) +
              3200000000000000.0 * refC * x13 * x613 * exp(x597 + x951) +
              sc[19] * x959 + x1092) /
               x644);
  amrex::Real x1436 = -kf_qss[22] - kf_qss[23] + x671;
  amrex::Real x1438 = (-kf_qss[18] + x497) / ((x194) * (x194));
  amrex::Real x1440 = -kf_qss[80] + x513;
  amrex::Real x1442 = x1438 * x196 * x279 + x1438 * x275 * x276 + x1440 * x516 +
                      x542 * (-kf_qss[92] + x539);
  amrex::Real x1443 = -kf_qss[28] - kf_qss[29];
  amrex::Real x1445 = -kf_qss[71] - kf_qss[72] - kf_qss[73] + x476;
  amrex::Real x1448 = -kf_qss[72] * x197 / x102 + kf_qss[73] / x194 +
                      x104 * x1438 * x196 + x1440 * x552 -
                      x550 * (-kf_qss[18] + x497);
  amrex::Real x1450 = -kf_qss[72] * x369 / x102 + x1440 * x555 + x1442 * x548 +
                      x1445 * x558 - x1448 * x372 -
                      x566 * (x1440 * x563 - x1445 * x559 + x1445 * x561);
  amrex::Real x1451 =
    -kf_qss[56] * x1270 / ((x388) * (x388)) + x1445 * x481 + x1450 * x571;
  amrex::Real x1454 = -kf_qss[56] * x394 * x887 / ((x388) * (x388)) +
                      x1443 * x396 * x397 / ((x65) * (x65)) +
                      x1443 * x51 * x67 / ((x65) * (x65)) + x1451 * x575 +
                      x589 * (-kf_qss[52] + x586);
  const amrex::Real x1455 =
    x990 * (-kf_qss[22] * x680 / x194 + x1436 * x675 + x1436 * x677 +
            x1438 * x439 * x680 + x1442 * x684 +
            x1443 * x411 * x945 / ((x65) * (x65)) + x1454 * x649);
  x196 = x1018 - x1438 * x196 * x708 - x1438 * x276 * x763 -
         x1440 * x197 * x707 - x277 * x762 * (-kf_qss[92] + x539) +
         x815 * (-kf_qss[18] + x497) -
         (kf_qss[37] * sc[20] + kf_qss[98] * sc[23] + x998) / x194 +
         x1021 * x197 / x102;
  amrex::Real x1461 = -x1059 * x1445 - x1440 * x369 * x707 + x1442 * x371 +
                      x1445 * x867 - x196 * x372 -
                      x946 * (x1440 * x563 - x1445 * x559 + x1445 * x561) -
                      (kf_qss[90] * sc[1] + x1051) / x366 + x1021 * x369 / x102;
  amrex::Real x1462 = -kf_qss[56] * x1286 -
                      kf_qss[56] * x885 / ((x388) * (x388)) + x1065 * x1450 -
                      x1461 * x479;
  amrex::Real x1463 = x1068 * x1451 - x1443 * x67 * x908 / ((x65) * (x65)) +
                      x1443 * x942 / ((x65) * (x65)) +
                      x1443 * x397 * x886 / (x392 * ((x65) * (x65))) -
                      x1462 * x887 - x68 * x907 * (-kf_qss[52] + x586) +
                      x68 * (kf_qss[41] * sc[12] + x1074) / x49;
  x1436 = x1103 * (x1084 * x1454 + x1093 + x1094 * x1442 + x1096 * x1436 +
                   x1098 * x1436 + x1100 * x1436 - x1463 * x945 - x196 * x680);
  amrex::Real x1467 = -kf_qss[15] - kf_qss[16] + x497;
  amrex::Real x1468 = -kf_qss[78] + x513 - x99;
  amrex::Real x1470 =
    x1467 * x500 + x1467 * x502 + x1468 * x516 + x542 * (-kf_qss[91] + x539);
  amrex::Real x1471 = -kf_qss[68] - kf_qss[69] + x476;
  amrex::Real x1475 =
    x1468 * x563 - x1471 * x559 + x1471 * x561 - x279 * x99 / x366;
  amrex::Real x1476 = -x104 * x99 / x366 + x1468 * x555 + x1470 * x548 +
                      x1471 * x558 - x1475 * x566 -
                      x372 * (x1467 * x549 - x1467 * x550 + x1468 * x552);
  amrex::Real x1477 =
    -kf_qss[55] * x1270 / ((x388) * (x388)) + x1471 * x481 + x1476 * x571;
  amrex::Real x1478 = -kf_qss[41] * exp(-g_RT[12] + g_RT_qss[3] - x45) + x586;
  x397 = -kf_qss[25] * x1131 - kf_qss[25] * x396 * x397 / ((x65) * (x65)) -
         kf_qss[55] * x394 * x887 / ((x388) * (x388)) + x1477 * x575 +
         x1478 * x589;
  const amrex::Real x1480 =
    x990 *
    (-kf_qss[19] * x680 / x194 - kf_qss[25] * x411 * x945 / ((x65) * (x65)) +
     x1467 * x682 + x1470 * x684 + x397 * x649 + x675 * (-kf_qss[19] + x671) +
     x677 * (-kf_qss[19] + x671));
  amrex::Real x1484 = -x1035 * x1467 - x1037 * x1467 + x1467 * x815 -
                      x1468 * x197 * x707 - x277 * x762 * (-kf_qss[91] + x539) +
                      x277 * (kf_qss[95] * sc[7] + x1016) / x273 -
                      (kf_qss[118] * sc[9] + kf_qss[125] * sc[25] +
                       kf_qss[35] * sc[20] + kf_qss[83] * sc[1] + x998) /
                        x194 +
                      x1021 * x197 / x102;
  x99 = -x1059 * x1471 - x1468 * x369 * x707 + x1470 * x371 + x1471 * x867 -
        x1475 * x946 - x1484 * x372 + x708 * x99 / x366 -
        (kf_qss[82] * sc[1] + x1051) / x366 + x1021 * x369 / x102;
  x1475 = -kf_qss[55] * x1286 - kf_qss[55] * x885 / ((x388) * (x388)) +
          x1065 * x1476 - x479 * x99 -
          (kf_qss[59] * sc[10] + kf_qss[64] * sc[22]) / x388;
  amrex::Real x1488 = kf_qss[25] * x1139 - kf_qss[25] * x1143 -
                      kf_qss[25] * x942 / ((x65) * (x65)) + x1068 * x1477 +
                      x1074 * x68 / x49 - x1475 * x887 - x1478 * x68 * x907;
  const amrex::Real x1489 =
    x1103 *
    (x1084 * x397 + x1094 * x1470 + x1096 * (-kf_qss[19] + x671) +
     x1098 * (-kf_qss[19] + x671) + x1100 * (-kf_qss[19] + x671) -
     x1484 * x680 - x1488 * x945 -
     (kf_qss[58] * sc[10] + kf_qss[65] * sc[22] + kf_qss[84] * sc[1] + x1092) /
       x644);
  amrex::Real x1490 =
    -kf_qss[17] - kf_qss[35] * exp(-x148 - x149) - x169 + x497;
  amrex::Real x1492 = (-kf_qss[20] + x671) / ((x644) * (x644));
  amrex::Real x1494 = -kf_qss[101] * refCinv * sc[20] * x319 - kf_qss[70] -
                      kf_qss[82] * exp(-x148 - x287) -
                      kf_qss[99] * x171 * x284 + x476;
  amrex::Real x1495 = -kf_qss[79] + x513;
  amrex::Real x1498 = -kf_qss[95] * exp(-x148 - x230) + x539;
  amrex::Real x1499 = x1490 * x500 + x1490 * x502 + x1498 * x542 +
                      x1495 * x197 * x278 / ((x102) * (x102));
  amrex::Real x1502 =
    x1494 * x558 + x1499 * x548 -
    x372 *
      (x1490 * x549 - x1490 * x550 + x1495 * x197 * x70 / ((x102) * (x102))) -
    x566 *
      (-x1494 * x559 + x1494 * x561 + x1495 * x278 * x369 / ((x102) * (x102))) +
    x1495 * x369 * x70 / ((x102) * (x102));
  amrex::Real x1503 =
    -x1270 * x383 / ((x388) * (x388)) + x1494 * x481 + x1502 * x571;
  amrex::Real x1504 = -kf_qss[42] * x42 - kf_qss[51] + x586;
  amrex::Real x1505 = -kf_qss[26] * x1131 - kf_qss[26] * x1133 + x1503 * x575 +
                      x1504 * x589 - x383 * x394 * x887 / ((x388) * (x388));
  const amrex::Real x1508 =
    x990 *
    (-kf_qss[26] * x1137 + x1490 * x682 + x1492 * x413 * x646 +
     x1492 * x441 * x673 + x1499 * x684 + x1505 * x649 - x169 * x441 / x644);
  amrex::Real x1513 =
    -x1035 * x1490 - x1037 * x1490 + x1490 * x815 - x1495 * x197 * x707 -
    x1498 * x277 * x762 +
    x277 * (kf_qss[93] * sc[20] * x723 * x725 + kf_qss[96] * sc[7] + x1016) /
      x273 -
    (kf_qss[15] * sc[8] * x767 + kf_qss[36] * sc[20] + x998) / x194 +
    x197 * (sc[22] * x698 + x1021) / x102;
  amrex::Real x1517 =
    -x1059 * x1494 + x1494 * x867 - x1495 * x369 * x707 + x1499 * x371 -
    x1513 * x372 -
    x946 *
      (-x1494 * x559 + x1494 * x561 + x1495 * x278 * x369 / ((x102) * (x102))) -
    (kf_qss[85] * sc[1] + x1051) / x366 + x369 * (sc[22] * x698 + x1021) / x102;
  x872 = x1065 * x1502 - x1286 * x383 - x1517 * x479 -
         x383 * x885 / ((x388) * (x388)) -
         (kf_qss[66] * sc[22] + ((sc[8]) * (sc[8])) * x872) / x388;
  amrex::Real x1519 =
    kf_qss[26] * x1139 - kf_qss[26] * x1143 -
    kf_qss[26] * x942 / ((x65) * (x65)) + x1068 * x1503 - x1504 * x68 * x907 -
    x872 * x887 -
    (kf_qss[28] * sc[19] * x171 * x927 + kf_qss[40] * sc[12]) / x65 +
    x68 * (kf_qss[49] * sc[12] * x899 + x1074) / x49;
  x169 = x1103 * (x1084 * x1505 + x1094 * x1499 + x1096 * (-kf_qss[20] + x671) +
                  x1492 * x673 * x946 + x1492 * x646 * x943 / x399 -
                  x1513 * x680 - x1519 * x945 - x169 * x946 / x644 -
                  (kf_qss[39] * sc[12] + x1092) / x644);
  x646 = -kf_qss[37] * exp(-x149 - x157) + x497;
  x1492 = x500 * x646 + x502 * x646 + x513 * x516 + x542 * (-kf_qss[93] + x539);
  amrex::Real x1524 = -kf_qss[90] * exp(-x157 - x287) + x476;
  amrex::Real x1527 = x1492 * x548 + x1524 * x558 -
                      x372 * (x549 * x646 - x550 * x646 + x553) + x513 * x555 -
                      x566 * (-x1524 * x559 + x1524 * x561 + x513 * x563);
  amrex::Real x1528 = x1524 * x481 + x1527 * x571;
  const amrex::Real x1530 =
    x990 * (x1492 * x684 + x646 * x682 + x649 * (x1528 * x575 + x590) + x678);
  amrex::Real x1535 =
    -x1035 * x646 - x1037 * x646 - x197 * x513 * x707 -
    x277 * x762 * (-kf_qss[93] + x539) + x646 * x815 +
    x277 * (kf_qss[92] * sc[1] * x716 + x1016) / x273 -
    (kf_qss[18] * sc[8] * exp(-x157 - x201) + kf_qss[38] * sc[20] + x998) /
      x194 +
    x197 * (kf_qss[80] * sc[22] * x693 + x1021) / x102;
  x864 = x1055 - x1059 * x1524 + x1492 * x371 + x1524 * x867 - x1535 * x372 -
         x946 * (-x1524 * x559 + x1524 * x561 + x513 * x563) -
         (kf_qss[101] * sc[24] + kf_qss[99] * sc[23] + sc[10] * x864 + x1051) /
           x366 +
         x369 * (kf_qss[80] * sc[22] * x693 + x1021) / x102;
  const amrex::Real x1537 = (x1065 * x1527 - x479 * x864) / x392;
  const amrex::Real x1539 =
    (x1068 * x1528 - x1537 * x398 - x586 * x68 * x907 +
     x68 * (kf_qss[42] * sc[12] + sc[20] * x893 + x1074) / x49) /
    x399;
  const amrex::Real x1540 =
    x1103 * (x1084 * (x1528 * x575 + x590) + x1093 + x1094 * x1492 + x1101 -
             x1535 * x680 - x1539 * x647);
  x491 = -kf_qss[13] - kf_qss[36] * exp(-x149 - x56) -
         8100000000000.0 * sc[19] * x121 * exp(x105) +
         x491 * (1.68 * x113 * x483 + 12.0 * x483 * x486) + 1.0935e+25 * x496;
  x496 = -2.28e+30 * refC * x93 * exp(x74 + x75) + 8.664e+59 * x1116 +
         x508 * (12.0 * x504 + 1.68 * x83);
  x264 = -kf_qss[96] * exp(-x230 - x56) -
         1.194e+30 * sc[19] * x225 * exp(x209) + 2.37606e+59 * x1180 +
         5.046e+55 * x250 * x527 - 1.74e+28 * x264 +
         x523 * (1.68 * x254 * x483 + 12.0 * x483 * x519) +
         x534 * (1.68 * x217 * x483 + 12.0 * x483 * x530);
  x508 = x264 * x542 + x491 * x500 + x491 * x502 + x496 * x516;
  x311 = -kf_qss[85] * exp(-x287 - x56) - 8.4e+18 * sc[19] * x362 * exp(x346) -
         1.539e+22 * x311 - 2.562e+47 * x340 * x451 +
         1.093974e+94 * x444 * x445 + 1.176e+37 * x450 +
         x459 * (12.0 * x301 + 1.68 * x455) +
         x465 * (1.68 * x354 + 12.0 * x461) +
         x472 * (1.68 * x468 + 12.0 * x469) + 3.947535e+43 * x475;
  x450 = x311 * x558 - x372 * (x491 * x549 - x491 * x550 + x496 * x552) +
         x496 * x555 + x508 * x548 -
         x566 * (-x311 * x559 + x311 * x561 + x496 * x563);
  x459 = -x1270 * x387 / ((x388) * (x388)) + x311 * x481 + x450 * x571;
  x465 = -kf_qss[30] - kf_qss[40] * x58 - kf_qss[50] * x3;
  x472 = -1.32e+19 * refC * x36 * exp(x17 + x18) +
         x581 * (1.68 * x28 * x483 + 12.0 * x483 * x577) +
         2.904e+37 * x582 * x585;
  x475 = -kf_qss[50] * x3 * x68 / x49 + x1133 * x465 -
         x387 * x394 * x887 / ((x388) * (x388)) + x459 * x575 +
         x465 * x51 * x67 / ((x65) * (x65)) + x472 * x589;
  x523 =
    -kf_qss[30] * x402 - kf_qss[39] * exp(-g_RT[12] + g_RT_qss[0] - x56) -
    1.92e+16 * sc[19] * x613 * exp(x597) +
    6.144e+31 * sc[19] * x660 * exp(-1237.91299787961 * invT - 6.28 * logT) -
    1.614e+22 * sc[8] * x635 * exp(x619) + 4.34166e+43 * x653 +
    x659 * (12.0 * x483 * x626 + 1.68 * x483 * x655) +
    x670 * (12.0 * x483 * x604 + 1.68 * x483 * x666);
  x527 = x990 * (-kf_qss[30] * x402 * x945 / x65 - kf_qss[30] * x413 / x644 +
                 x1137 * x465 + x475 * x649 + x491 * x682 + x508 * x684 +
                 x523 * x675 + x523 * x677);
  x504 = (sc[22] * x688 + 2.28e+30 * x1152 - 8.664e+59 * x509 -
          x89 * (12.0 * x504 + 1.68 * x83)) /
         x102;
  x83 = -x1011 * (12.0 * x1009 * x483 + 1.68 * x483 * x749) +
        9.3e+44 * x742 * x757 - 1.4415e+89 * x754;
  x262 = (-5.046e+55 * x1004 * x250 -
          x222 * (1.68 * x217 * x483 + 12.0 * x483 * x530) -
          x259 * (1.68 * x254 * x483 + 12.0 * x483 * x519) +
          1.74e+28 * x262 * x713 * exp(x246) - 2.37606e+59 * x535 +
          1.194e+30 * x728 * x732 + x83) /
         x273;
  x486 = -x1035 * x491 - x1037 * x491 - x197 * x496 * x707 + x197 * x504 +
         x262 * x277 - x264 * x277 * x762 + x491 * x815 -
         (kf_qss[13] * x996 + kf_qss[17] * sc[8] * x800 -
          x118 * (1.68 * x113 * x483 + 12.0 * x483 * x486) +
          8100000000000.0 * x784 * x787 - 1.0935e+25 * x995) /
           x194;
  x445 =
    -x1059 * x311 + x311 * x867 - x369 * x496 * x707 + x369 * x504 +
    x371 * x508 - x372 * x486 -
    x946 * (-x311 * x559 + x311 * x561 + x496 * x563) -
    (kf_qss[70] * sc[10] * x838 - 1.176e+37 * x1042 - 3.947535e+43 * x1046 -
     1.093974e+94 * x1049 * x445 - x306 * (12.0 * x301 + 1.68 * x455) -
     x336 * (1.68 * x468 + 12.0 * x469) + 2.562e+47 * x340 * x821 -
     x359 * (1.68 * x354 + 12.0 * x461) + 1.539e+22 * x423 * x851 + x83 +
     8.4e+18 * x853 * x855) /
      x366;
  x455 =
    x1065 * x450 - x1286 * x387 - x387 * x885 / ((x388) * (x388)) - x445 * x479;
  x36 = (kf_qss[51] * sc[20] * x889 - 2.904e+37 * x1073 * x582 -
         x33 * (1.68 * x28 * x483 + 12.0 * x483 * x577) +
         1.32e+19 * x36 * x903 * exp(x18)) /
        x49;
  x67 = -kf_qss[29] * sc[8] * x935 / x65 + x1068 * x459 + x1143 * x465 +
        x36 * x68 - x455 * x887 - x465 * x67 * x908 / ((x65) * (x65)) +
        x465 * x942 / ((x65) * (x65)) - x472 * x68 * x907;
  x301 =
    x1103 *
    (-kf_qss[30] * x943 / (x399 * x644) + x1084 * x475 + x1094 * x508 +
     x1096 * x523 + x1098 * x523 + x1100 * x523 - x486 * x680 - x67 * x945 -
     (-4.34166e+43 * x1087 - 6.144e+31 * x1088 * x660 + 1.92e+16 * x1091 -
      x609 * (12.0 * x483 * x604 + 1.68 * x483 * x666) -
      x631 * (12.0 * x483 * x626 + 1.68 * x483 * x655) +
      1.614e+22 * x969 * x971) /
       x644);
  x461 = -kf_qss[38] * exp(-g_RT[16] + g_RT[18] - x149) + x497;
  x354 = x461 * x500 + x461 * x502 + x544;
  x468 = x354 * x548 - x372 * (x461 * x549 - x461 * x550 + x553) + x567;
  x469 = x990 * (x354 * x684 + x461 * x682 +
                 x649 * (x575 * (x468 * x571 + x482) + x590) + x678);
  x113 = x1033 - x1035 * x461 - x1037 * x461 + x461 * x815;
  x519 =
    (x1065 * x468 - x479 * (x1052 + x1061 - x113 * x372 + x354 * x371)) / x392;
  x254 = (x1068 * (x468 * x571 + x482) + x1080 - x398 * x519) / x399;
  x250 = x1103 * (x1084 * (x575 * (x468 * x571 + x482) + x590) + x1093 +
                  x1094 * x354 + x1101 - x113 * x680 - x254 * x647);
  x107 = -kf_qss[14] - kf_qss[19] * x191 - x107 * x121 * x13 + x497;
  x121 = -x13 * x599 * x613 + x671;
  x530 = -kf_qss[76] - kf_qss[77] + x513;
  x211 = -kf_qss[46] * exp(-2.0 * g_RT[12] + g_RT[19] + g_RT_qss[5]) -
         x13 * x211 * x225 + x539;
  x225 = -kf_qss[76] * x279 / x194 + x107 * x500 + x107 * x502 + x211 * x542 +
         x516 * x530;
  x348 = -kf_qss[67] - x348 * x362 * x71 + x476;
  x362 = -kf_qss[54] - kf_qss[59] * exp(-g_RT[10] + g_RT_qss[6] - x190);
  x516 = -kf_qss[76] * x104 / x194 + x107 * x549 - x107 * x550 + x530 * x552;
  x217 =
    x104 * x348 * x368 / ((x366) * (x366)) + x225 * x548 - x372 * x516 +
    x530 * x555 -
    x566 * (x279 * x348 * x368 / ((x366) * (x366)) - x348 * x559 + x530 * x563);
  x534 = x1270 * x362 / ((x388) * (x388)) + x217 * x571 +
         10.0e-13 * x348 * x479 / ((x366) * (x366));
  x577 = -kf_qss[48] - kf_qss[49] - kf_qss[50] + x586;
  x28 = -kf_qss[50] * x51 / x65 - kf_qss[54] * x396 / x65 +
        x362 * x394 * x887 / ((x388) * (x388)) + x534 * x575 + x577 * x589;
  x581 = x990 * (-kf_qss[19] * x191 * x441 / x644 + x107 * x682 + x121 * x675 +
                 x121 * x677 + x225 * x684 + x28 * x649);
  x582 = (sc[22] * x71 * x77 * x93 + x1021) / x102;
  x585 = kf_qss[76] * x708 / x194 - x1035 * x107 - x1037 * x107 + x107 * x815 -
         x197 * x530 * x707 + x197 * x582 - x211 * x277 * x762 +
         x277 *
           (kf_qss[104] * sc[5] + kf_qss[94] * sc[7] + sc[1] * x714 + x1016) /
           x273 -
         (kf_qss[112] * sc[29] + kf_qss[12] * x164 * x171 * x771 +
          kf_qss[13] * sc[17] * x171 * x771 + kf_qss[16] * sc[21] * x774 +
          kf_qss[34] * sc[20] + x998) /
           x194;
  x368 = x225 * x371 + x348 * x867 - x348 * x368 * x708 / ((x366) * (x366)) -
         x369 * x530 * x707 + x369 * x582 - x372 * x585 -
         x946 * (x279 * x348 * x368 / ((x366) * (x366)) - x348 * x559 +
                 x530 * x563) -
         (kf_qss[68] * sc[22] * x826 + kf_qss[81] * sc[1] +
          2.565e+21 * refCinv * x71 * x851 + sc[24] * x834 + x1051) /
           x366;
  x390 = x1065 * x217 + x362 * x885 / ((x388) * (x388)) +
         x362 * x390 * x868 / (x373 * ((x388) * (x388))) - x368 * x479 -
         (kf_qss[55] * ((sc[8]) * (sc[8])) * x874 + kf_qss[63] * sc[22]) / x388;
  x597 = (kf_qss[50] * x908 / x65 - kf_qss[54] * x886 / (x392 * x65) +
          x1068 * x534 - x390 * x887 - x577 * x68 * x907 -
          (kf_qss[26] * sc[20] * x924 + kf_qss[27] * sc[12] * x911 +
           kf_qss[28] * sc[15] * x171 * x927 + kf_qss[62] * sc[23] * x932 +
           kf_qss[88] * sc[24] * x919) /
            x65 +
          x68 * (sc[20] * x904 + x1074) / x49) /
         x399;
  x599 = x1103 * (-kf_qss[19] * x191 * x946 / x644 + x1084 * x28 +
                  x1094 * x225 + x1096 * x121 + x1098 * x121 + x1100 * x121 -
                  x585 * x680 - x597 * x647 -
                  (kf_qss[20] * sc[20] * x961 + kf_qss[45] * sc[1] * x965 +
                   sc[12] * x959 + 2.0 * ((sc[19])) * sc[21] * x980 +
                   sc[23] * x949 + sc[24] * x985 + x1092) /
                    x644);
  x613 = -x138 + x497;
  x635 = x500 * x613 + x502 * x613 + x544;
  x653 = -kf_qss[84] * exp(-g_RT[1] + g_RT[20] - x593) + x671;
  x655 = -kf_qss[101] * x318 * x319 + x476;
  x555 = -x372 * (x549 * x613 - x550 * x613 + x553) + x513 * x555 +
         x548 * x635 + x558 * x655 -
         x566 * (x138 / x366 + x513 * x563 - x559 * x655 + x561 * x655);
  x626 = x481 * x655 + x555 * x571;
  x659 = x990 * (x613 * x682 + x635 * x684 + x649 * (x575 * x626 + x590) +
                 x653 * x675 + x653 * x677);
  x660 =
    x1031 - x1035 * x613 - x1037 * x613 + x613 * x815 +
    x277 *
      (kf_qss[91] * sc[12] * x710 + kf_qss[93] * sc[15] * x723 * x725 + x1016) /
      x273 -
    (kf_qss[34] * sc[19] + kf_qss[35] * sc[14] + kf_qss[36] * sc[15] +
     kf_qss[37] * sc[13] + kf_qss[38] * sc[16] + kf_qss[44] * sc[12] +
     1350000000000.0 * x526 * x787 + x998) /
      x194;
  x138 = x1052 + x1055 - x1059 * x655 + x371 * x635 - x372 * x660 +
         x655 * x867 -
         x946 * (x138 / x366 + x513 * x563 - x559 * x655 + x561 * x655) +
         x1021 * x369 / x102;
  x563 = (x1065 * x555 - x138 * x479) / x392;
  x666 = (kf_qss[48] * sc[6] * x895 + kf_qss[51] * sc[17] * x889 +
          sc[16] * x893 + sc[19] * x904 + x1074) /
         x49;
  x604 = (x1068 * x626 - x398 * x563 - x586 * x68 * x907 + x666 * x68 -
          (kf_qss[26] * sc[19] * x924 + kf_qss[33] * sc[8] * x915) / x65) /
         x399;
  x670 = x1103 * (x1084 * (x575 * x626 + x590) + x1094 * x635 + x1096 * x653 +
                  x1098 * x653 + x1100 * x653 - x604 * x647 - x660 * x680 -
                  (kf_qss[20] * sc[19] * x961 + x1092) / x644);
  x732 = -3.6 * kf_qss[12] + x1169;
  x771 =
    -kf_qss[32] * x402 - kf_qss[65] * exp(g_RT[21] - g_RT[22] - x593) + x1189;
  x542 = x1173 * x197 * x278 + x1181 * x542 + x500 * x732 + x502 * x732;
  x787 = -kf_qss[32] - kf_qss[33];
  x558 = x1173 * x369 * x70 + x1196 * x558 -
         x372 * (x1173 * x197 * x70 + x549 * x732 - x550 * x732) + x542 * x548 -
         x566 * (x1173 * x278 * x369 - x1196 * x559 + x1196 * x561);
  x566 = x1131 * x787 + x1133 * x787 + x1209 * x589 +
         x575 * (x1196 * x481 + x558 * x571);
  x589 = x990 * (-kf_qss[32] * x402 * x945 / x65 - kf_qss[32] * x413 / x644 +
                 x1137 * x787 + x542 * x684 + x566 * x649 + x675 * x771 +
                 x677 * x771 + x682 * x732);
  x851 = -x1035 * x732 - x1037 * x732 - x1181 * x277 * x762 + x1225 +
         x732 * x815 -
         (3.6 * kf_qss[12] * x996 + kf_qss[16] * sc[19] * x774 + x493) / x194 +
         x1218 * x197 / x102;
  x559 = -x1059 * x1196 - x1172 * x369 * x707 + x1196 * x867 - x1223 / x366 +
         x371 * x542 - x372 * x851 -
         x946 * (x1173 * x278 * x369 - x1196 * x559 + x1196 * x561) +
         x1218 * x369 / x102;
  x561 = (x1065 * x558 - x479 * x559) / x392;
  x68 = x1068 * (x1196 * x481 + x558 * x571) - x1139 * x787 + x1143 * x787 -
        x1209 * x68 * x907 + x1237 * x68 / x49 - x398 * x561 +
        x787 * x942 / ((x65) * (x65));
  x855 =
    x1103 * (-kf_qss[32] * x943 / (x399 * x644) + x1084 * x566 + x1094 * x542 +
             x1096 * x771 + x1098 * x771 + x1100 * x771 - x68 * x945 -
             x680 * x851 - (((sc[19]) * (sc[19])) * x980 + x1214) / x644);
  x885 =
    -kf_qss[98] * exp(-g_RT[13] + g_RT[22] - g_RT[23] + g_RT_qss[2]) + x497;
  x887 = x500 * x885 + x502 * x885 + x544;
  x959 = -x372 * (x549 * x885 - x550 * x885 + x553) + x548 * x887 + x567;
  x980 = x990 * (x649 * (x575 * (x482 + x571 * x959) + x590) + x678 +
                 x682 * x885 + x684 * x887);
  x77 = (kf_qss[80] * sc[16] * x693 + sc[15] * x698 + sc[17] * x688 +
         sc[19] * x71 * x77 * x93 + sc[6] * x701 + x1021) /
        x102;
  x93 = x1018 - x1035 * x885 - x1037 * x885 - x197 * x513 * x707 + x197 * x77 -
        x277 * x539 * x762 + x815 * x885 - x998 / x194;
  x277 = x1055 + x1060 + x369 * x77 + x371 * x887 - x372 * x93 -
         (kf_qss[68] * sc[19] * x826 + x1051) / x366;
  x369 =
    (x1065 * x959 - x277 * x479 -
     (kf_qss[63] * sc[19] + kf_qss[64] * sc[14] + kf_qss[66] * sc[15]) / x388) /
    x392;
  x688 = (x1068 * (x482 + x571 * x959) + x1080 - x369 * x398) / x399;
  x971 =
    x1103 * (x1084 * (x575 * (x482 + x571 * x959) + x590) + x1094 * x887 +
             x1101 - x647 * x688 - x680 * x93 -
             (kf_qss[65] * sc[14] + x1092 + 2.69e+21 * x526 * x971) / x644);
  x175 = -x171 * x175 + x497;
  x118 = x175 * x500 + x175 * x502 + x544;
  x995 = x118 * x548 - x372 * (x175 * x549 - x175 * x550 + x553) + x567;
  x996 = x990 * (x118 * x684 + x175 * x682 +
                 x649 * (x575 * (x482 + x571 * x995) + x590) + x678);
  x222 = x1018 + x1031 - x1035 * x175 - x1037 * x175 + x175 * x815 -
         (kf_qss[98] * sc[13] + x998) / x194;
  x259 =
    x1061 + x118 * x371 - x222 * x372 - (kf_qss[99] * sc[16] + x1051) / x366;
  x1004 = (x1065 * x995 - x259 * x479) / x392;
  x1009 = (-kf_qss[62] * sc[19] * x932 / x65 - x1004 * x398 +
           x1068 * (x482 + x571 * x995) + x1080) /
          x399;
  x949 = x1103 *
         (-x1009 * x647 + x1084 * (x575 * (x482 + x571 * x995) + x590) +
          x1094 * x118 + x1101 - x222 * x680 - (sc[19] * x949 + x1092) / x644);
  x749 = -kf_qss[102] + x497;
  x1011 = x500 * x749 + x544 + x275 * x276 * x749 / ((x194) * (x194));
  x754 = x1011 * x548 - x372 * (x549 * x749 - x550 * x749 + x553) + x567;
  x89 = x990 * (x1011 * x684 + x649 * (x575 * (x482 + x571 * x754) + x590) +
                x678 + x439 * x680 * x749 / ((x194) * (x194)));
  x276 =
    x1033 - x1035 * x749 + x749 * x815 - x276 * x749 * x763 / ((x194) * (x194));
  x834 = x1011 * x371 + x1061 - x276 * x372 -
         (kf_qss[101] * sc[16] + sc[19] * x834 + x1051) / x366;
  x1042 = (x1065 * x754 - x479 * x834) / x392;
  x306 = (-kf_qss[88] * sc[19] * x919 / x65 - x1042 * x398 +
          x1068 * (x482 + x571 * x754) + x1080) /
         x399;
  x985 = x1103 *
         (x1011 * x1094 + x1084 * (x575 * (x482 + x571 * x754) + x590) + x1101 -
          x276 * x680 - x306 * x647 - (sc[19] * x985 + x1092) / x644);
  x1046 = x1018 + x1031 + x1038 - (kf_qss[125] * sc[14] + x998) / x194;
  x336 = (x1065 * x568 - x479 * (-x1046 * x372 + x1052 + x1062)) / x392;
  x359 = (x1081 - x336 * x398) / x399;
  x1055 = x1103 * (-x1046 * x680 + x1102 - x359 * x647);
  x867 =
    -kf_qss[118] * exp(-g_RT[14] + g_RT[26] - g_RT[9] + g_RT_qss[2]) + x497;
  x500 = x500 * x867 + x502 * x867 + x544;
  x502 = -x372 * (x549 * x867 - x550 * x867 + x553) + x500 * x548 + x567;
  x544 = x990 * (x500 * x684 + x649 * (x575 * (x482 + x502 * x571) + x590) +
                 x678 + x682 * x867);
  x548 = x1033 - x1035 * x867 - x1037 * x867 + x815 * x867;
  x567 =
    (x1065 * x502 - x479 * (x1052 + x1061 + x371 * x500 - x372 * x548)) / x392;
  x678 = (x1068 * (x482 + x502 * x571) + x1080 - x398 * x567) / x399;
  x815 = x1103 * (x1084 * (x575 * (x482 + x502 * x571) + x590) + x1093 +
                  x1094 * x500 + x1101 - x548 * x680 - x647 * x678);
  x998 = x1018 + x1031 + x1038 -
         (kf_qss[107] * x812 + kf_qss[112] * sc[19] + x998) / x194;
  x479 = (x1065 * x568 - x479 * (x1052 + x1062 - x372 * x998)) / x392;
  x1018 = (x1081 - x398 * x479) / x399;
  x647 = x1103 * (-x1018 * x647 + x1102 - x680 * x998);
  x671 = -kf_qss[24] * x402 + x671;
  x1031 = -kf_qss[24] * x1131 - kf_qss[24] * x1133 + x591;
  x649 = x990 * (-kf_qss[24] * x1137 - kf_qss[24] * x402 * x945 / x65 -
                 kf_qss[24] * x413 / x644 + x1031 * x649 + x497 * x682 +
                 x545 * x684 + x671 * x675 + x671 * x677);
  x398 = kf_qss[24] * x1139 - kf_qss[24] * x1143 -
         kf_qss[24] * x942 / ((x65) * (x65)) - x1067 * x398 + x1081;
  x675 = x1103 * (-kf_qss[24] * x943 / (x399 * x644) + x1031 * x1084 + x1093 +
                  x1094 * x545 + x1096 * x671 + x1098 * x671 + x1100 * x671 -
                  x398 * x945 - x680 * (x1033 + x1038));
  x7 = sc[10] + sc[1] + sc[7] + x11 + x7;
  x11 = x7 * exp(-3522.5166606330399 * invT - 16.3 * logT);
  x677 = log(exp(-6113.0 * invT) + exp(-0.0017096939647802999 * T));
  x680 = -0.29097730287517898 * x677 +
         0.43429448190325198 * log(6.6e+63 * x11 / kf_qss[11]) - 0.4;
  x682 = 1.7777777777777777 * ((x680) * (x680)) /
           ((-0.73540532268950665 * x677 - 0.18666666666666668 * x680 + 1) *
            (-0.73540532268950665 * x677 - 0.18666666666666668 * x680 + 1)) +
         1.0;
  x684 = exp(M_LN10 * (0.43429448190325198 * x677 / x682)) /
         (1.0 + 6.6e+63 * x11 / kf_qss[11]);
  x942 =
    -kf_qss[105] * sc[12] -
    kf_qss[106] * sc[12] * exp(g_RT[12] - g_RT[19] - g_RT[27] + g_RT_qss[8]) -
    kf_qss[117] * sc[17] * exp(-g_RT[9] + g_RT_qss[8] - x56) -
    kf_qss[119] * sc[6] - kf_qss[120] * sc[13] - kf_qss[121] * sc[14] -
    kf_qss[122] * sc[15] - kf_qss[123] * sc[16] - kf_qss[124] * sc[2] -
    6.6e+63 * sc[19] * x11 * x684 - sc[8] * x433 + 10.0e-13;
  x990 = (kf_qss[116] + 10.0e-13) / x942;
  x1035 = (1.0 / ((-x436 * x990 + 1)));
  x1037 = 0.43429448190325198 / x7;
  x1059 = 2.3703703703703702 * ((x680) * (x680)) /
          ((-0.73540532269 * x677 - 0.18666666666666668 * x680 + 1) *
           (-0.73540532269 * x677 - 0.18666666666666668 * x680 + 1) *
           (-0.73540532269 * x677 - 0.18666666666666668 * x680 + 1));
  x1060 = 1.7777777777777777 * x680 /
          ((-0.73540532268950665 * x677 - 0.18666666666666668 * x680 + 1) *
           (-0.73540532268950665 * x677 - 0.18666666666666668 * x680 + 1));
  x1065 =
    refC * exp(-g_RT_qss[8] - 3522.5166606330399 * invT - 16.3 * logT - x186);
  x1068 = 6.6e+63 * sc[9] * x1065 * x677 * x684 * x7 / ((x682) * (x682));
  x33 = 2.2956841138659317e-128 *
        exp(M_LN10 * (0.43429448190325198 * x677 / x682)) /
        (kf_qss[11] * ((1.5151515151515151e-64 + x11 / kf_qss[11]) *
                       (1.5151515151515151e-64 + x11 / kf_qss[11])));
  x1073 = refC * sc[9] * x7 *
          exp(-g_RT_qss[8] - 7045.0333212660798 * invT - 32.6 * logT - x186);
  x1080 = 6.6e+63 * sc[9] * x1065 * x684 -
          x1068 * (0.28 * x1037 * x1059 + 2.0 * x1037 * x1060) -
          4.356e+127 * x1073 * x33;
  x1081 = 6.6e+63 * sc[19] * x11 * x677 * x684 / ((x682) * (x682));
  x1084 = sc[19] * exp(-3522.5166606330399 * invT - 16.3 * logT);
  x631 = sc[19] * x7 * exp(-7045.0333212660798 * invT - 32.6 * logT);
  x1087 = x1081 * (0.28 * x1037 * x1059 + 2.0 * x1037 * x1060) -
          6.6e+63 * x1084 * x684 + 4.356e+127 * x33 * x631;
  x1088 = kf_qss[119] * exp(g_RT[19] - g_RT[6] + g_RT[9] - g_RT_qss[8]);
  x609 = -g_RT[13] + g_RT[16];
  x1091 = exp(g_RT[9] - g_RT_qss[8] - x609);
  x1092 = kf_qss[120] * exp(g_RT[28] - g_RT_qss[8] - x45);
  x1093 = exp(-g_RT[14] + g_RT[26] + g_RT[8] - g_RT_qss[8]);
  x1094 = exp(-g_RT[15] + g_RT[19] + g_RT[28] - g_RT_qss[8]);
  x1096 = kf_qss[124] * exp(g_RT[12] - g_RT[2] + g_RT[9] - g_RT_qss[8]);
  x1098 = kf_qss[100] * ((sc[23]) * (sc[23])) +
          kf_qss[105] * refC * sc[11] * exp(g_RT[11] - g_RT[12] - g_RT_qss[8]) +
          kf_qss[106] * sc[19] * sc[27] + kf_qss[107] * sc[29] * x812 +
          kf_qss[117] * sc[15] * sc[9] + kf_qss[121] * sc[26] * sc[8] * x1093 +
          kf_qss[122] * sc[19] * sc[28] * x1094 +
          kf_qss[123] * sc[13] * sc[9] * x1091 + sc[12] * sc[9] * x1096 +
          sc[14] * sc[28] * x1092 + sc[19] * sc[9] * x1088 +
          6.6e+63 * sc[9] * x1065 * x684 * x7 + 10.0e-13;
  x1100 = x1098 / ((x942) * (x942));
  x1101 = -g_RT[16] + g_RT[18];
  x1102 = kf_qss[115] * exp(g_RT[29] - g_RT_qss[9] - x1101);
  x1116 = kf_qss[108] * sc[29] + kf_qss[109] * sc[13] * sc[29] +
          kf_qss[110] * sc[15] * sc[29] + kf_qss[111] * sc[19] * sc[29] +
          kf_qss[113] * sc[14] * sc[29] + kf_qss[114] * sc[12] * sc[29] +
          sc[16] * sc[29] * x1102 + 10.0e-13;
  x1131 = x1116 * (kf_qss[116] + 10.0e-13) / (x428 * ((x942) * (x942)));
  x1133 = x1087 * x1100 - x1087 * x1131;
  x1137 = x1035 * (-x1080 / x942 + x1133);
  x1139 = (-x1098 / x942 + x1116 * x990 / x428) /
          ((-x436 * x990 + 1) * (-x436 * x990 + 1));
  x1143 = x436 * (kf_qss[116] + 10.0e-13) / ((x942) * (x942));
  x1152 = x1087 * x1139 * x1143;
  x509 = x1137 - x1152;
  x1169 = -(1.32e+64 * sc[9] * x1065 * x684 -
            x1068 * (0.56 * x1037 * x1059 + 4.0 * x1037 * x1060) -
            8.712e+127 * x1073 * x33) /
          x942;
  x1180 = x1116 / ((x428) * (x428));
  x1189 = x1081 * (0.56 * x1037 * x1059 + 4.0 * x1037 * x1060) -
          1.32e+64 * x1084 * x684 + 8.712e+127 * x33 * x631;
  x1214 =
    x1035 * (x1100 * (-kf_qss[124] + x1189) - x1131 * (-kf_qss[124] + x1189) +
             x1169 + x1180 * x420 * x990);
  x493 = x990 * (sc[8] * x433 + 10.0e-13) / ((x428) * (x428));
  x535 = x1139 * (x1143 * (-kf_qss[124] + x1189) - x420 * x493);
  x1225 =
    x1035 * (x1100 * (-kf_qss[119] + x1189) - x1131 * (-kf_qss[119] + x1189) +
             x1169 + x1180 * x416 * x990);
  x1223 = x1139 * (x1143 * (-kf_qss[119] + x1189) - x416 * x493);
  x1270 = x1081 * (0.42 * x1037 * x1059 + 3.0 * x1037 * x1060) -
          9.9e+63 * x1084 * x684 + 6.534e+127 * x33 * x631 - x433;
  x1286 =
    x1035 * (x1100 * x1270 - x1131 * x1270 -
             (kf_qss[121] * sc[26] * x1093 + 9.9e+63 * sc[9] * x1065 * x684 -
              x1068 * (0.42 * x1037 * x1059 + 3.0 * x1037 * x1060) -
              6.534e+127 * x1073 * x33) /
               x942);
  x523 = x1139 * (x1143 * x1270 - x433 * x990 / x428);
  x83 = x1035 * (x1133 - (kf_qss[117] * sc[15] + kf_qss[123] * sc[13] * x1091 +
                          sc[12] * x1096 + sc[19] * x1088 +
                          6.6e+63 * x1065 * x684 * x7 + x1080) /
                           x942);
  x121 = x1035 *
         (x1133 - (kf_qss[105] * refC * exp(g_RT[11] - g_RT[12] - g_RT_qss[8]) +
                   x1080) /
                    x942);
  x653 = -kf_qss[105] -
         kf_qss[106] * exp(g_RT[12] - g_RT[19] - g_RT[27] + g_RT_qss[8]) +
         x1087;
  x771 = kf_qss[114] * sc[29] / x428;
  x671 = x1035 * (x1100 * x653 - x1131 * x653 + x771 * x990 -
                  (sc[9] * x1096 + x1080) / x942);
  x680 = x1139 * x1143 * x653;
  x682 = kf_qss[109] * sc[29] / x428;
  x1096 =
    x1035 * (x1100 * (-kf_qss[120] + x1087) - x1131 * (-kf_qss[120] + x1087) +
             x682 * x990 - (kf_qss[123] * sc[9] * x1091 + x1080) / x942);
  x1270 = x1139 * x1143 * (-kf_qss[120] + x1087);
  x653 = kf_qss[113] * sc[29] / x428;
  const amrex::Real x1889 =
    x1035 * (x1100 * (-kf_qss[121] + x1087) - x1131 * (-kf_qss[121] + x1087) +
             x653 * x990 - (sc[28] * x1092 + x1080) / x942);
  const amrex::Real x1890 = x1139 * x1143 * (-kf_qss[121] + x1087);
  const amrex::Real x1894 =
    x1035 * (kf_qss[110] * sc[29] * x990 / x428 +
             x1100 * (-kf_qss[122] + x1087) - x1131 * (-kf_qss[122] + x1087) +
             x1180 * x418 * x990 - (kf_qss[117] * sc[9] + x1080) / x942);
  const amrex::Real x1895 =
    x1139 * (x1143 * (-kf_qss[122] + x1087) - x418 * x493);
  const amrex::Real x1899 =
    x1035 * (sc[29] * x1102 * x990 / x428 - x1080 / x942 +
             x1100 * (-kf_qss[123] + x1087) - x1131 * (-kf_qss[123] + x1087) +
             x1180 * x427 * x990);
  const amrex::Real x1900 =
    x1139 * (x1143 * (-kf_qss[123] + x1087) - x427 * x493);
  x1081 = -kf_qss[117] * exp(-g_RT[9] + g_RT_qss[8] - x56) +
          x1081 * (1.68 * x1037 * x1059 + 12.0 * x1037 * x1060) -
          3.96e+64 * x1084 * x684 + 2.6136e+128 * x33 * x631;
  x1059 = x1035 * (x1081 * x1100 -
                   x1081 * x1116 * (kf_qss[116] + 10.0e-13) /
                     (x428 * ((x942) * (x942))) +
                   x1180 * x422 * x990 -
                   (3.96e+64 * sc[9] * x1065 * x684 -
                    x1068 * (1.68 * x1037 * x1059 + 12.0 * x1037 * x1060) -
                    2.6136e+128 * x1073 * x33) /
                     x942);
  x1060 = x1139 * (x1081 * x436 * (kf_qss[116] + 10.0e-13) / ((x942) * (x942)) -
                   x422 * x493);
  x1068 = x1035 * (kf_qss[115] * x1180 * x990 - x1080 / x942 + x1133);
  x33 = x1139 * (-kf_qss[115] * x493 + x1087 * x1143);
  x1088 = x1035 *
          (kf_qss[111] * sc[29] * x990 / x428 + refCinv * x1180 * x425 * x990 +
           x1100 * (x1087 - 6.6e+63 * x11 * x684) -
           x1131 * (x1087 - 6.6e+63 * x11 * x684) -
           (kf_qss[106] * sc[27] + kf_qss[122] * sc[28] * x1094 +
            sc[9] * x1088 + x1080) /
             x942);
  x684 =
    x1139 * (-refCinv * x425 * x493 + x1143 * (x1087 - 6.6e+63 * x11 * x684));
  x1087 = x1035 * (x1100 * x1189 - x1131 * x1189 + x1169);
  x1100 = x1139 * x1143 * x1189;
  x1131 = x1035 * (x1133 - (2.0 * kf_qss[100] * ((sc[23])) + x1080) / x942);
  x1139 = x1035 * (x1133 - (kf_qss[121] * sc[8] * x1093 + x1080) / x942);
  x1143 = x1035 * (x1133 - (kf_qss[106] * sc[19] + x1080) / x942);
  x1092 =
    x1035 *
    (x1133 - (kf_qss[122] * sc[19] * x1094 + sc[14] * x1092 + x1080) / x942);
  x1169 = (kf_qss[108] + kf_qss[109] * sc[13] + kf_qss[110] * sc[15] +
           kf_qss[111] * sc[19] + kf_qss[113] * sc[14] + kf_qss[114] * sc[12] +
           sc[16] * x1102) /
          x428;
  x1080 = x1035 * (x1133 + x1169 * x990 - (kf_qss[107] * x812 + x1080) / x942);
  x1133 = (-sc_qss[0] * x411 / x65 + x943) / ((x399) * (x399));
  x591 = x1133 * x591;
  x1134 = x1133 * x1134;
  x1189 = sc_qss[0] * x411 / ((x65) * (x65));
  x1161 = (-kf_qss[88] * x1189 + x1161) / x399;
  x1211 = x1133 * x1211;
  x1275 = x1133 * x1275;
  x1288 = (-kf_qss[27] * x1189 + x1288) / x399;
  x1310 = x1133 * x1310;
  x1361 = x1133 * x1361;
  x664 =
    (-kf_qss[31] * sc_qss[0] * x402 / x65 + sc_qss[0] * x411 * x664 + x1370) /
    x399;
  x1370 = x1133 * (x575 * (x1388 * x571 + x482) + x590);
  x1406 = x1133 * x1406;
  x1015 = (-kf_qss[62] * x1189 + x1015) / x399;
  x1424 = x1133 * x1424;
  x1454 = x1133 * x1454;
  x1443 = (x1189 * x1443 + x1463) / x399;
  x1463 = x1133 * x397;
  x397 = (-kf_qss[25] * x1189 + x1488) / x399;
  x1488 = x1133 * x1505;
  x1505 = (-kf_qss[26] * x1189 + x1519) / x399;
  x1519 = x1133 * (x1528 * x575 + x590);
  x475 = x1133 * x475;
  x465 = (-kf_qss[30] * sc_qss[0] * x402 / x65 + x1189 * x465 + x67) / x399;
  x67 = x1133 * (x575 * (x468 * x571 + x482) + x590);
  x28 = x1133 * x28;
  x493 = x1133 * (x575 * x626 + x590);
  x566 = x1133 * x566;
  x787 = (-kf_qss[32] * sc_qss[0] * x402 / x65 + x1189 * x787 + x68) / x399;
  x68 = x1133 * (x575 * (x482 + x571 * x959) + x590);
  x1081 = x1133 * (x575 * (x482 + x571 * x995) + x590);
  const amrex::Real x1963 = x1133 * (x575 * (x482 + x571 * x754) + x590);
  x575 = x1133 * (x575 * (x482 + x502 * x571) + x590);
  x590 = x1031 * x1133;
  x402 =
    (-kf_qss[24] * sc_qss[0] * x402 / x65 - kf_qss[24] * x1189 + x398) / x399;
  x1031 = sc_qss[8] * (sc[8] * x433 + 10.0e-13) / ((x428) * (x428));
  x420 = -x1031 * x420 - x1180 * x420;
  x416 = -x1031 * x416 - x1180 * x416;
  x418 = -kf_qss[110] * sc[29] / x428 - x1031 * x418 - x1180 * x418;
  x427 = -sc[29] * x1102 / x428 - x1031 * x427 - x1180 * x427;
  x422 = -x1031 * x422 - x1180 * x422;
  x398 = -kf_qss[115] * x1031 - kf_qss[115] * x1180;
  x425 = -kf_qss[111] * sc[29] / x428 - refCinv * x1031 * x425 -
         refCinv * x1180 * x425;
  x1102 = sc_qss[1] * (kf_qss[50] * sc[17] * x3 + 10.0e-13) / ((x49) * (x49));
  x1180 = -x1074 / x49 + x1102 * x586 + x586 * x907;
  x1133 = x1102 * x1209 + x1209 * x907 - x1237 / x49;
  x1209 =
    x1102 * x1209 + x1209 * x907 - (kf_qss[48] * sc[20] * x895 + x1237) / x49;
  x1237 = x1102 * x1309 + x1309 * x907 - x1320;
  x1309 = x1102 * x38 - x1377 + x38 * x907;
  x1320 = x1102 * x586 + x586 * x907 -
          (kf_qss[41] * sc[13] + kf_qss[42] * sc[16] +
           kf_qss[49] * sc[15] * x899 + x1074) /
            x49;
  x38 = x1102 * (-kf_qss[52] + x586) + x907 * (-kf_qss[52] + x586) -
        (kf_qss[41] * sc[12] + x1074) / x49;
  x1377 = -x1074 / x49 + x1102 * x1478 + x1478 * x907;
  x1478 =
    x1102 * x1504 + x1504 * x907 - (kf_qss[49] * sc[12] * x899 + x1074) / x49;
  x893 = x1102 * x586 + x586 * x907 -
         (kf_qss[42] * sc[12] + sc[20] * x893 + x1074) / x49;
  x1504 = -kf_qss[50] * sc_qss[1] * x3 / x49 + x1102 * x472 - x36 + x472 * x907;
  x49 = x1102 * x577 + x577 * x907 - (sc[20] * x904 + x1074) / x49;
  x586 = x1102 * x586 + x586 * x907 - x666;
  x904 = (-sc_qss[1] * x394 / x388 + x886) / ((x392) * (x392));
  x1074 = x904 * (x482 + x568 * x571);
  x907 = x1067 - x1074;
  x472 = x904 * (x1113 * x481 + x1127 * x571);
  x36 = x904 * (x1197 * x481 + x1205 * x571);
  x577 = sc_qss[1] * x394 / ((x388) * (x388));
  x379 = (x1287 - x379 * x577) / x392;
  x1272 = x1272 * x904;
  x1287 = x904 * (x1113 * x481 + x1306 * x571);
  x333 = (-kf_qss[54] * sc_qss[1] * x62 / x388 + x333) / x392;
  x1356 = x1356 * x904;
  x666 = x904 * (x1388 * x571 + x482);
  x1189 = x904 * (x1113 * x481 + x1404 * x571);
  x1431 = (-kf_qss[47] * sc_qss[1] * x394 / ((x388) * (x388)) + x1431) / x392;
  x1423 = x1423 * x904;
  x1462 = (-kf_qss[56] * x577 + x1462) / x392;
  x1451 = x1451 * x904;
  x1475 = (-kf_qss[55] * x577 + x1475) / x392;
  x1477 = x1477 * x904;
  x383 = (-x383 * x577 + x872) / x392;
  x1503 = x1503 * x904;
  x872 = x1528 * x904;
  x387 = (-x387 * x577 + x455) / x392;
  x1528 = x459 * x904;
  x459 = x904 * (x468 * x571 + x482);
  x455 = (x362 * x577 + x390) / x392;
  x362 = x534 * x904;
  x534 = x626 * x904;
  x481 = x904 * (x1196 * x481 + x558 * x571);
  x390 = x904 * (x482 + x571 * x959);
  x626 = x904 * (x482 + x571 * x995);
  x1031 = x904 * (x482 + x571 * x754);
  x482 = x904 * (x482 + x502 * x571);
  x571 = (-10.0e-13 * sc_qss[6] / x366 + x868) / ((x373) * (x373));
  x568 = x568 * x571;
  x1102 = 10.0e-13 * sc_qss[6] / ((x366) * (x366));
  x476 = x1102 * x476;
  x904 = (x1052 + x1062 - x372 * (x1033 + x1038) + x476) / x373;
  x577 = -x568 + x904;
  x1127 = x1127 * x571;
  x1159 = (x1102 * x1113 + x1159) / x373;
  x1205 = x1205 * x571;
  x1197 = (x1102 * x1197 + x1233) / x373;
  x340 = (x1062 - x1245 * x372 + x476 - (x1051 + x1246 * x340) / x366) / x373;
  x1051 = (x1062 - x1254 * x372 + x476 - (x1051 + x1251 * x757) / x366) / x373;
  x1233 = x1268 * x571;
  x1264 = (x1102 * x1264 + x1284) / x373;
  x1268 = x1306 * x571;
  x1284 = (x1102 * x1113 + x1314) / x373;
  x1306 = x1355 * x571;
  x1314 = (x1102 * x1351 + x331) / x373;
  x1351 = x1388 * x571;
  x1355 = (x1052 + x1061 + x1386 * x371 - x1392 * x372 + x476) / x373;
  x331 = x1404 * x571;
  x1113 = (x1102 * x1113 + x298) / x373;
  x1388 = x1422 * x571;
  x1404 = (x1102 * x1418 + x1420) / x373;
  x298 = x1450 * x571;
  x1418 = (x1102 * x1445 + x1461) / x373;
  x1422 = x1476 * x571;
  x1420 = (x1102 * x1471 + x99) / x373;
  x1445 = x1502 * x571;
  x1450 = (x1102 * x1494 + x1517) / x373;
  x1461 = x1527 * x571;
  x1471 = (x1102 * x1524 + x864) / x373;
  x1476 = x450 * x571;
  x99 = (x1102 * x311 + x445) / x373;
  x1494 = x468 * x571;
  x1502 = (x1052 + x1061 - x113 * x372 + x354 * x371 + x476) / x373;
  x1517 = x217 * x571;
  x1524 = (10.0e-13 * sc_qss[6] * x348 / ((x366) * (x366)) + x368) / x373;
  x1527 = x555 * x571;
  x864 = (x1102 * x655 + x138) / x373;
  x311 = x558 * x571;
  x1196 = (x1102 * x1196 + x559) / x373;
  x450 = x571 * x959;
  x445 = (x277 + x476) / x373;
  x468 = x571 * x995;
  x348 = (x259 + x476) / x373;
  x217 = x571 * x754;
  x368 = (x476 + x834) / x373;
  x655 = (-x1046 * x372 + x1052 + x1062 + x476) / x373;
  x555 = x502 * x571;
  x371 = (x1052 + x1061 + x371 * x500 - x372 * x548 + x476) / x373;
  x372 = (x1052 + x1062 - x372 * x998 + x476) / x373;
  x1052 = sc_qss[0] * x439 / ((x194) * (x194));
  x497 = -sc_qss[4] * (x497 * x549 - x497 * x550 + x553) + x1052 * x497;
  x1033 = (x1033 + x1038 + x497) / x280;
  x1038 =
    (-sc_qss[0] * x439 / x194 - sc_qss[4] * x207 + x816) / ((x280) * (x280));
  x545 = x1038 * x545;
  x1061 = x1033 - x545;
  x1062 = (-sc_qss[4] * (x1106 * x549 - x1106 * x550 + x1117 * x552) +
           x1052 * x1106 + x1156) /
          x280;
  x1106 = x1038 * x1121;
  x1121 = (-sc_qss[4] * (x1170 * x549 - x1170 * x550 + x1173 * x197 * x70) +
           x1052 * x1170 + x1227) /
          x280;
  x1156 = x1038 * x1183;
  x1170 = (x1245 + x497) / x280;
  x1183 = (x1254 + x497) / x280;
  x1227 = (-sc_qss[4] * (x1173 * x197 * x70 + x1260 * x549 - x1260 * x550) +
           x1052 * x1260 + x1279) /
          x280;
  x1245 = x1038 * x1263;
  x1254 = (-sc_qss[4] * (x1117 * x552 + x1298 * x549 - x1298 * x550) +
           x1052 * x1298 + x1317) /
          x280;
  x1260 = x1038 * x1304;
  x1263 = (-sc_qss[4] * x203 + x1052 * x1328 + x267) / x280;
  x1279 = x1038 * x1343;
  x1298 =
    (-sc_qss[4] * (x549 * x621 - x550 * x621 + x553) + x1052 * x621 + x1392) /
    x280;
  x1304 = x1038 * x1386;
  x1317 = (-sc_qss[4] * (x1117 * x552 + x1400 * x549 - x1400 * x550) +
           x1052 * x1400 + x1155) /
          x280;
  x1328 = x1038 * x1401;
  x1343 =
    (-sc_qss[4] * (x447 * x549 - x447 * x550 + x553) + x1052 * x447 + x1429) /
    x280;
  x203 = x1038 * x1157;
  x267 = (-kf_qss[22] * sc_qss[0] / x194 + sc_qss[0] * x1438 * x439 -
          sc_qss[4] * x1448 + x196) /
         x280;
  x621 = x1038 * x1442;
  x1386 = (-kf_qss[19] * sc_qss[0] / x194 -
           sc_qss[4] * (x1467 * x549 - x1467 * x550 + x1468 * x552) +
           x1052 * x1467 + x1484) /
          x280;
  x1392 = x1038 * x1470;
  x1400 = (-sc_qss[4] * (x1490 * x549 - x1490 * x550 +
                         x1495 * x197 * x70 / ((x102) * (x102))) +
           x1052 * x1490 + x1513) /
          x280;
  x1401 = x1038 * x1499;
  x1155 =
    (-sc_qss[4] * (x549 * x646 - x550 * x646 + x553) + x1052 * x646 + x1535) /
    x280;
  x447 = x1038 * x1492;
  x552 = (-sc_qss[4] * (x491 * x549 - x491 * x550 + x496 * x552) +
          x1052 * x491 + x486) /
         x280;
  x1157 = x1038 * x508;
  x1429 =
    (-sc_qss[4] * (x461 * x549 - x461 * x550 + x553) + x1052 * x461 + x113) /
    x280;
  x1438 = x1038 * x354;
  x1442 = (-sc_qss[4] * x516 + x1052 * x107 + x585) / x280;
  x1448 = x1038 * x225;
  x196 =
    (-sc_qss[4] * (x549 * x613 - x550 * x613 + x553) + x1052 * x613 + x660) /
    x280;
  x1467 = x1038 * x635;
  x197 = (-sc_qss[4] * (x1173 * x197 * x70 + x549 * x732 - x550 * x732) +
          x1052 * x732 + x851) /
         x280;
  x1470 = x1038 * x542;
  x1484 =
    (-sc_qss[4] * (x549 * x885 - x550 * x885 + x553) + x1052 * x885 + x93) /
    x280;
  x1490 = x1038 * x887;
  x1499 =
    (-sc_qss[4] * (x175 * x549 - x175 * x550 + x553) + x1052 * x175 + x222) /
    x280;
  x1513 = x1038 * x118;
  x646 =
    (-sc_qss[4] * (x549 * x749 - x550 * x749 + x553) + x1052 * x749 + x276) /
    x280;
  x1492 = x1011 * x1038;
  x1535 = (x1046 + x497) / x280;
  x549 =
    (-sc_qss[4] * (x549 * x867 - x550 * x867 + x553) + x1052 * x867 + x548) /
    x280;
  x550 = x1038 * x500;
  x553 = (x497 + x998) / x280;
  x491 = sc_qss[2] * (kf_qss[86] * sc[1] + 10.0e-13) / ((x273) * (x273));
  x508 = -x1016 / x273 + x491 * x539 + x539 * x762;
  x272 = -kf_qss[86] * sc_qss[2] / x273 + x491 * (-x272 + x539) +
         x762 * (-x272 + x539) -
         (kf_qss[92] * sc[16] * x716 + sc[19] * x714 + x1016) / x273;
  x1182 = x1182 * x491 + x1182 * x762 - x1224;
  x757 = x491 * x539 + x539 * x762 -
         (kf_qss[104] * sc[19] + x1016 + x1251 * x757) / x273;
  x1262 = -x1224 + x1262 * x491 + x1262 * x762;
  x1303 = x1303 * x491 + x1303 * x762 - x1315;
  x1315 = x1341 * x491 + x1341 * x762 - x1371;
  x1341 = -x1428 + x491 * x539 + x539 * x762;
  x1371 =
    -x1016 / x273 + x491 * (-kf_qss[92] + x539) + x762 * (-kf_qss[92] + x539);
  x1428 = x491 * (-kf_qss[91] + x539) + x762 * (-kf_qss[91] + x539) -
          (kf_qss[95] * sc[7] + x1016) / x273;
  x1498 =
    x1498 * x491 + x1498 * x762 -
    (kf_qss[93] * sc[20] * x723 * x725 + kf_qss[96] * sc[7] + x1016) / x273;
  x486 = x491 * (-kf_qss[93] + x539) + x762 * (-kf_qss[93] + x539) -
         (kf_qss[92] * sc[1] * x716 + x1016) / x273;
  x264 = -x262 + x264 * x491 + x264 * x762;
  x714 =
    x211 * x491 + x211 * x762 -
    (kf_qss[104] * sc[5] + kf_qss[94] * sc[7] + sc[1] * x714 + x1016) / x273;
  x273 =
    x491 * x539 + x539 * x762 -
    (kf_qss[91] * sc[12] * x710 + kf_qss[93] * sc[15] * x723 * x725 + x1016) /
      x273;
  x539 = x1181 * x491 + x1181 * x762 - x1224;
  x1016 = sc_qss[2] * x278 / ((x102) * (x102));
  x762 = sc_qss[4] * x70 / ((x102) * (x102));
  x513 = x1016 * x513 + x513 * x707 + x513 * x762;
  x1181 = x513 - x1021 / x102;
  x1117 = x1016 * x1117 + x1117 * x707 + x1117 * x762 - x1154;
  x1154 = sc_qss[2] * x1173 * x278 + sc_qss[4] * x1173 * x70 + x1172 * x707 -
          x1218 / x102;
  x70 = sc_qss[2] * x1173 * x278 + sc_qss[4] * x1173 * x70 + x1172 * x707 -
        (sc[22] * x701 + x1218) / x102;
  x701 = x1016 * x95 - x1367 + x707 * x95 + x762 * x95;
  x691 =
    -kf_qss[76] * sc_qss[2] * x142 / x102 + x513 - (x1021 + x171 * x691) / x102;
  x1172 = -kf_qss[72] * sc_qss[4] / x102 + x1016 * x1440 + x1440 * x707 +
          x1440 * x762 - x1021 / x102;
  x1173 = x1016 * x1468 + x1468 * x707 + x1468 * x762 - x1021 / x102;
  x278 = sc_qss[2] * x1495 * x278 / ((x102) * (x102)) + x1495 * x707 +
         x1495 * x762 - (sc[22] * x698 + x1021) / x102;
  x102 = x513 - (kf_qss[80] * sc[22] * x693 + x1021) / x102;
  x698 = x1016 * x496 + x496 * x707 + x496 * x762 - x504;
  x1021 = x1016 * x530 + x530 * x707 + x530 * x762 - x582;
  x707 = x513 - x77;
  x1218 = sc[1] * exp(-4025.7333264377598 * invT + 2.0 * logT);
  x1224 = -110.707666477038 * invT + 1.83 * logT;
  x95 = 19.2 * exp(g_RT[12] - g_RT[14] - g_RT[1] + g_RT_qss[2] + x1224);
  x1367 = sc[12] * x95;
  x1440 = exp(-30595.573280927001 * invT - x157 - x287);
  x1468 = 1 / (x366 * x373);
  x1495 = exp(-1258.0416645118 * invT + 2.0 * logT - x287 - x56);
  x496 = -1670.679330471668 * invT - 3.86 * logT;
  x346 = 230263157894.737 * x71 *
         exp(140.90066642532199 * invT - 0.27 * logT + x346);
  x504 = -0.29097730287517898 * x351 + 0.43429448190325198 * log(x346) - 0.4;
  x262 = 1.7777777777777777 * ((x504) * (x504)) /
           ((-0.73540532268950665 * x351 - 0.18666666666666668 * x504 + 1) *
            (-0.73540532268950665 * x351 - 0.18666666666666668 * x504 + 1)) +
         1.0;
  x461 = exp(M_LN10 * (0.43429448190325198 * x351 / x262)) / (x346 + 1.0);
  x354 = exp(-4629.5933254034198 * invT + 2.0 * logT - x182 - x287);
  x113 = exp(-1882.0303301096501 * invT + 1.9 * logT - x148 - x287);
  x287 = exp(-6516.6558221711202 * invT + 1.9 * logT - x240 - x287);
  x107 =
    10.0 *
    exp(-g_RT[1] + g_RT_qss[5] - 4025.7333264377598 * invT + 2.0 * logT - x201);
  x530 = sc[8] * x107;
  x211 = -5625.96232369677 * invT - 2.39 * logT;
  x225 = 1.6e+16 * exp(-g_RT[19] + g_RT[1] - g_RT[5] + g_RT_qss[5] + x211);
  x516 = sc[1] * x225;
  x582 = -2903.0569450274247 * invT - 6.642 * logT;
  x246 = 2.1167883211678801e+24 * x13 *
         exp(681.85858216539498 * invT - 1.463 * logT + x246);
  x585 = -0.29097730287517898 * x251 + 0.43429448190325198 * log(x246) - 0.4;
  x613 = 1.7777777777777777 * ((x585) * (x585)) /
           ((-0.73540532268950665 * x251 - 0.18666666666666668 * x585 + 1) *
            (-0.73540532268950665 * x251 - 0.18666666666666668 * x585 + 1)) +
         1.0;
  x635 = exp(M_LN10 * (0.43429448190325198 * x251 / x613)) / (x246 + 1.0);
  x660 = 2.9e+27 * refC * x13 * x635 * exp(x245 + x582);
  x138 = 0.00332 * exp(-2948.8496616156599 * invT + 2.81 * logT - x149 - x182);
  x732 = sc[2] * x138;
  x542 = 2.0e-12 * exp(-1237.91299787961 * invT + 5.6 * logT - x182 - x414);
  x558 = sc[2] * x542;
  x851 = 6.14 * exp(-5258.61415765932 * invT + 1.74 * logT - x182 - x230);
  x559 = sc[2] * x851;
  x885 = -0.29097730287517898 * x329 +
         0.43429448190325198 * log(1.708e+39 * x324) - 0.4;
  x887 = -0.55155399201712996 * x329 - 0.14 * x885 + 0.75;
  x959 = exp(
           M_LN10 * (0.43429448190325198 * x329 /
                     (((x885) * (x885)) / ((x887) * (x887)) + 1.0))) /
         (1.708e+39 * x324 + 1.0);
  x77 = 23000.0 * exp(
                    -g_RT[19] - g_RT[20] + g_RT[6] + g_RT_qss[2] -
                    1648.03458051046 * invT + 1.05 * logT);
  x93 = sc[6] * x77;
  x277 = -1207.71999793133 * invT + 1.16 * logT - x240 - x414;
  x175 = 4100.0 * sc[6] * exp(x277);
  x118 = exp(
    -g_RT[19] - g_RT[22] + g_RT[6] + g_RT_qss[6] - 4025.7333264377598 * invT);
  x995 = 50000000.0 * sc[6] * x118;
  x222 = 20000000.0 * sc[19] * exp(-2012.8666632188799 * invT);
  x259 = 115.0 * exp(-3789.2214935095399 * invT + 1.9 * logT - x230 - x240);
  x749 = sc[6] * x259;
  x1011 = 3.54 * exp(-437.79849925010598 * invT + 2.12 * logT - x230 - x56);
  x754 = sc[17] * x1011;
  x230 = 89.8 * exp(-2863.3028284288498 * invT + 1.92 * logT - x148 - x230);
  x276 = sc[15] * x230;
  x834 = -795.08233197145705 * invT - 0.99 * logT;
  x209 = 3.8195777351247603e+17 * x13 * exp(x209 - x834);
  x1046 = -0.29097730287517898 * x214 + 0.43429448190325198 * log(x209) - 0.4;
  x867 = 1.7777777777777777 * ((x1046) * (x1046)) /
           ((-0.18666666666666668 * x1046 - 0.73540532268950665 * x214 + 1) *
            (-0.18666666666666668 * x1046 - 0.73540532268950665 * x214 + 1)) +
         1.0;
  x500 = exp(M_LN10 * (0.43429448190325198 * x214 / x867)) *
         exp(-4159.08574287601 * invT - 8.07 * logT - x834) / (x209 + 1.0);
  x502 = 1.99e+29 * sc[19] * x13 * x500;
  x548 = 620.0 * exp(
                   -g_RT[14] + g_RT[23] - g_RT[25] + g_RT[8] + g_RT_qss[2] +
                   431.75989926045003 * invT + 1.45 * logT);
  x998 = sc[23] * x171 * x548;
  x571 = 12040.0 * exp(365.83851604003098 * invT + 0.807 * logT);
  x1102 = sc[13] * x571;
  x476 = sc[10] * exp(-3019.29999482832 * invT + 2.0 * logT);
  x1052 = 100000000.0 * sc[8] * x62;
  x497 = exp(-8554.6833186802305 * invT - logT);
  x1038 = 187000000000.0 * x164 * x497;
  x491 = 2244000000000.0 * sc[17] * x497;
  x1016 = 527000000000000.0 * exp(-14599.8251249923 * invT);
  x762 = 3200000.0 * sc[13] * exp(-429.747032597231 * invT);
  x513 =
    exp(-g_RT[10] + g_RT_qss[4] - 3019.29999482832 * invT + 2.0 * logT - x201);
  const amrex::Real x2415 = 8.0e-7 * sc[15] * x1468 * x171 * x284;
  const amrex::Real x2421 =
    7.8e+41 * exp(-23600.8616262414 * invT - 9.147 * logT);
  const amrex::Real x2428 =
    13900000.0 *
    exp(
      -g_RT[14] + g_RT[26] - g_RT[9] + g_RT_qss[2] - 2279.5714960953801 * invT);
  const amrex::Real x2429 = sc[26] * x2428;
  const amrex::Real x2433 =
    1.93 *
    exp(
      -g_RT[29] + g_RT_qss[2] - 2094.8909797450501 * invT + 2.17 * logT - x186);
  const amrex::Real x2434 = sc[9] * x2433;
  const amrex::Real x2441 =
    16.32 *
    exp(
      -g_RT[10] + g_RT_qss[6] - 956.11166502896697 * invT + 2.0 * logT - x190);
  const amrex::Real x2442 = sc[19] * x2441;
  x295 = 6645077720207.25 * x71 *
         exp(18643.271678066401 * invT - 1.62 * logT + x295);
  amrex::Real x2451 =
    -0.29097730287517898 * x299 + 0.43429448190325198 * log(x295) - 0.4;
  amrex::Real x2452 = -0.14 * x2451 - 0.55155399201712996 * x299 + 0.75;
  amrex::Real x2456 = exp(
    M_LN10 * (0.43429448190325198 * x299 /
              (((x2451) * (x2451)) / ((x2452) * (x2452)) + 1.0)));
  const amrex::Real x2459 =
    x2456 * exp(-18014.512518476698 * invT - 3.4 * logT) / (x295 + 1.0);
  const amrex::Real x2463 = 192.93326966953001 * invT + 1.61 * logT;
  const amrex::Real x2469 = 90000000.0 * sc[12] * x142;
  const amrex::Real x2474 = 25010000.0 * sc[17] * x58;
  const amrex::Real x2479 = 13400000.0 * sc[15] * x42;
  const amrex::Real x2485 =
    30830000.0 * exp(-g_RT[12] + g_RT_qss[3] - 14492.6399751759 * invT - x45);
  const amrex::Real x2486 = sc[14] * x2485;
  const amrex::Real x2489 = -9368.8878839522695 * invT - 2.83 * logT;
  const amrex::Real x2497 = exp(
    -2.0 * g_RT[12] + g_RT[19] + g_RT_qss[5] - 5334.0966575300299 * invT +
    0.1 * logT);
  const amrex::Real x2499 = 9980000.0 * sc[19] * x2497;
  const amrex::Real x2508 =
    10600000.0 * exp(
                   -g_RT[13] + g_RT[15] - g_RT_qss[0] + g_RT_qss[2] -
                   754.82499870708 * invT);
  const amrex::Real x2509 = sc[15] * x2508;
  const amrex::Real x2512 =
    100000000.0 * exp(-20128.666632188801 * invT - x149 - x157);
  const amrex::Real x2513 = sc[16] * x2512;
  const amrex::Real x2516 = -508.24883246276698 * invT - 1.39 * logT;
  const amrex::Real x2517 =
    46000000000.0 *
    exp(-g_RT[13] + g_RT[20] + g_RT_qss[2] - g_RT_qss[4] + x2516);
  const amrex::Real x2518 = sc[20] * x2517;
  const amrex::Real x2521 = 30000.0 * exp(
                                        -g_RT[13] + g_RT[22] - g_RT[23] +
                                        g_RT_qss[2] - 1443.22539752794 * invT);
  const amrex::Real x2522 = sc[22] * x2521;
  const amrex::Real x2527 =
    10200000.0 * exp(-19600.2891330938 * invT - x157 - x414);
  const amrex::Real x2528 = sc[16] * x2527;
  const amrex::Real x2532 =
    4.28e-19 * exp(1776.3548302906599 * invT + 7.6 * logT);
  const amrex::Real x2533 = sc[13] * x2532;
  const amrex::Real x2535 = 1600000.0 * sc[13] * exp(-429.747032597231 * invT);
  const amrex::Real x2537 = -5.5353833238519199 * invT + 0.29 * logT;
  const amrex::Real x2543 =
    300000.0 * exp(-g_RT_qss[4] + g_RT_qss[7] + x2537 - x45);
  const amrex::Real x2544 = sc[14] * x2543;
  const amrex::Real x2556 = 80000000.0 * sc[19] * x191;
  const amrex::Real x2559 =
    39000000.0 * exp(-1781.38699694871 * invT - x148 - x149);
  const amrex::Real x2560 = sc[15] * x2559;
  const amrex::Real x2565 =
    5800000.0 * exp(-905.789998448495 * invT - x148 - x414);
  const amrex::Real x2566 = sc[15] * x2565;
  const amrex::Real x2571 =
    10000000.0 *
    exp(-g_RT[22] + g_RT_qss[6] - 4025.7333264377598 * invT - x148);
  const amrex::Real x2572 = sc[15] * x2571;
  const amrex::Real x2576 = 20000000.0 * exp(-2012.8666632188799 * invT);
  const amrex::Real x2577 = sc[14] * x2576;
  const amrex::Real x2584 =
    3430.0 * exp(224.93784961470999 * invT + 1.18 * logT - x149 - x56);
  const amrex::Real x2585 = sc[17] * x2584;
  const amrex::Real x2592 =
    23500.0 * exp(558.57049904323901 * invT + 0.73 * logT - x414 - x56);
  const amrex::Real x2593 = sc[17] * x2592;
  const amrex::Real x2598 =
    7500000.0 * exp(-g_RT[22] + g_RT_qss[6] - 1006.43333160944 * invT - x56);
  const amrex::Real x2599 = sc[17] * x2598;
  const amrex::Real x2604 = 6.6e-6 * refCinv * sc[15] * sc[20] * x1468 * x319;
  const amrex::Real x2606 = exp(-1006.43333160944 * invT);
  const amrex::Real x2608 = 10000000.0 * sc[15] * x2606;
  x149 =
    1000000.0 * exp(-g_RT[16] + g_RT[18] - 4025.7333264377598 * invT - x149);
  const amrex::Real x2614 = sc[18] * x149;
  const amrex::Real x2619 = 180000.0 * sc[18] * exp(-4139.46029290962 * invT);
  const amrex::Real x2630 = 16000000.0 * sc[17] * x3;
  const amrex::Real x2638 = sc[19] * x13;
  amrex::Real x2641 = -717.08374877172594 * invT - 2.57 * logT;
  x105 = 1238532.11009174 * x13 *
         exp(-130.83633310922701 * invT - 0.48 * logT + x105);
  amrex::Real x2644 =
    -0.29097730287517898 * x110 + 0.43429448190325198 * log(x105) - 0.4;
  amrex::Real x2648 =
    1.7777777777777777 * ((x2644) * (x2644)) /
      ((-0.73540532268950665 * x110 - 0.18666666666666668 * x2644 + 1) *
       (-0.73540532268950665 * x110 - 0.18666666666666668 * x2644 + 1)) +
    1.0;
  amrex::Real x2651 =
    exp(M_LN10 * (0.43429448190325198 * x110 / x2648)) / (x105 + 1.0);
  const amrex::Real x2653 = 1350000000000.0 * x2638 * x2651 * exp(x2641);
  const amrex::Real x2659 = g_RT[19] - 43729.528258430102 * invT - x414;
  const amrex::Real x2661 = 3980000000000000.0 * x423 * exp(x2659);
  x18 = 4074074074074.07 * x13 *
        exp(1308.3633310922701 * invT - 0.454 * logT + x18);
  amrex::Real x2670 =
    -0.29097730287517898 * x25 + 0.43429448190325198 * log(x18) - 0.4;
  amrex::Real x2674 =
    1.7777777777777777 * ((x2670) * (x2670)) /
      ((-0.73540532268950665 * x25 - 0.18666666666666668 * x2670 + 1) *
       (-0.73540532268950665 * x25 - 0.18666666666666668 * x2670 + 1)) +
    1.0;
  amrex::Real x2678 = exp(M_LN10 * (0.43429448190325198 * x25 / x2674)) *
                      exp(-2797.8846618742396 * invT - 4.8 * logT + x17) /
                      (x18 + 1.0);
  const amrex::Real x2679 = 2.2e+18 * refC * x13 * x2678;
  amrex::Real x2685 = -5988.2783230761797 * invT - 7.64 * logT;
  amrex::Real x2686 = exp(x2685 + x74);
  x75 = 1.1515151515151501e+21 * x71 *
        exp(4277.3416593401198 * invT + 0.06 * logT + x75);
  amrex::Real x2689 =
    -0.29097730287517898 * x80 + 0.43429448190325198 * log(x75) - 0.4;
  amrex::Real x2691 = -0.14 * x2689 - 0.55155399201712996 * x80 + 0.75;
  amrex::Real x2696 =
    exp(
      M_LN10 * (0.43429448190325198 * x80 /
                (((x2689) * (x2689)) / ((x2691) * (x2691)) + 1.0))) /
    (x75 + 1.0);
  const amrex::Real x2698 = 3.8e+29 * refC * x2686 * x2696 * x71;
  const amrex::Real x2702 = 4990000.0 * sc[19] * x2497;
  const amrex::Real x2704 =
    sc[16] * exp(-6446.2054889584597 * invT + 2.94 * logT);
  const amrex::Real x2708 =
    sc[15] * exp(-107.285793149566 * invT + 1.02 * logT);
  const amrex::Real x2712 =
    sc[12] * exp(-2892.6906817118502 * invT + 5.95 * logT);
  const amrex::Real x2714 =
    sc[13] * exp(-22409.5464916153 * invT + 0.06 * logT);
  const amrex::Real x2719 =
    sc[19] * exp(-651.61526055053196 * invT + 4.76 * logT);
  const amrex::Real x2721 = exp(-44130.591941076498 * invT - 2.58 * logT);
  const amrex::Real x2723 =
    sc[14] * exp(-385.01107100719099 * invT + 3.86 * logT);
  const amrex::Real x2726 =
    sc[0] * exp(-2892.6906817118502 * invT + 5.95 * logT);
  const amrex::Real x2727 = sc[0] * exp(-22409.5464916153 * invT + 0.06 * logT);
  const amrex::Real x2730 =
    sc[0] * exp(-385.01107100719099 * invT + 3.86 * logT);
  const amrex::Real x2733 = sc[0] * exp(-107.285793149566 * invT + 1.02 * logT);
  const amrex::Real x2736 =
    sc[0] * exp(-6446.2054889584597 * invT + 2.94 * logT);
  const amrex::Real x2739 =
    sc[0] * exp(-651.61526055053196 * invT + 4.76 * logT);
  const amrex::Real x2743 = 20000000.0 * sc[1] * exp(-3019.29999482832 * invT);
  const amrex::Real x2746 = 1.4e+18 * sc[19] * x461 * x71 * exp(x496);
  const amrex::Real x2750 = 42200000.0 * sc[16] * x1440;
  const amrex::Real x2753 = -x2750 * x568;
  const amrex::Real x2756 = 3.6 * sc[17] * x1495;
  const amrex::Real x2759 = -x2756 * x568;
  const amrex::Real x2762 = -50000000.0 * sc[12] * x1074;
  const amrex::Real x2766 = 0.227 * sc[2] * x354;
  const amrex::Real x2768 = -x2766 * x568;
  amrex::Real x2774 = x635 * exp(x582);
  const amrex::Real x2777 = -sc_qss[2] * x275 - x763;
  amrex::Real x2779 = refC * x2777 * x635 * exp(x245 + x582);
  x246 = exp(M_LN10 * (0.43429448190325198 * x251 / x613)) /
         ((x246 + 1.0) * (x246 + 1.0));
  amrex::Real x2783 =
    x13 * x713 * exp(-5124.2553078894598 * invT - 14.747 * logT);
  amrex::Real x2785 =
    1.7777777777777777 * x585 /
    ((-0.73540532268950665 * x251 - 0.18666666666666668 * x585 + 1) *
     (-0.73540532268950665 * x251 - 0.18666666666666668 * x585 + 1));
  x585 = 2.3703703703703702 * ((x585) * (x585)) /
         ((-0.73540532269 * x251 - 0.18666666666666668 * x585 + 1) *
          (-0.73540532269 * x251 - 0.18666666666666668 * x585 + 1) *
          (-0.73540532269 * x251 - 0.18666666666666668 * x585 + 1));
  amrex::Real x2789 = 2.9e+27 * x13 * x251 * x2779 / ((x613) * (x613));
  x251 = 2.9e+27 * x13 * x251 * x2774 * x713 / ((x613) * (x613));
  x613 = x2777 * x526 * exp(-5124.2553078894598 * invT - 14.747 * logT + x245);
  const amrex::Real x2792 =
    6.13868613138686e+51 * x246 * x2783 - 6.13868613138686e+51 * x246 * x613 +
    x251 * (2.0 * x2785 * x483 + 0.28 * x483 * x585) - 2.9e+27 * x2774 * x713 +
    2.9e+27 * x2779 - x2789 * (2.0 * x2785 * x483 + 0.28 * x483 * x585);
  const amrex::Real x2794 =
    20000.0 * sc[13] * x508 + x2792 - x508 * x516 + x508 * x530 + x508 * x660;
  const amrex::Real x2796 =
    1.7777777777777777 * x453 * x504 /
    ((-0.73540532268950665 * x351 - 0.18666666666666668 * x504 + 1) *
     (-0.73540532268950665 * x351 - 0.18666666666666668 * x504 + 1));
  x504 = 2.3703703703703702 * x453 * ((x504) * (x504)) /
         ((-0.73540532269 * x351 - 0.18666666666666668 * x504 + 1) *
          (-0.73540532269 * x351 - 0.18666666666666668 * x504 + 1) *
          (-0.73540532269 * x351 - 0.18666666666666668 * x504 + 1));
  amrex::Real x2798 = 2.0 * x2796 + 0.28 * x504;
  x868 = (-10.0e-13 * sc_qss[6] / x366 + x868) / x373;
  const amrex::Real x2801 = x461 * x868 * exp(x496);
  const amrex::Real x2804 =
    1.4e+18 * sc[19] * x2801 * x351 * x71 / ((x262) * (x262));
  x346 = exp(M_LN10 * (0.43429448190325198 * x351 / x262)) /
         ((x346 + 1.0) * (x346 + 1.0));
  amrex::Real x2810 = -3200.4579945180158 * invT - 7.99 * logT;
  amrex::Real x2812 =
    3.2236842105263198e+29 * sc[19] * x346 * x71 * x868 * exp(x2810);
  const amrex::Real x2813 = x461 * exp(x496 + x854);
  amrex::Real x2815 = 1.4e+18 * x2813 * x853;
  const amrex::Real x2817 = x2815 * x351 * x71 / ((x262) * (x262));
  amrex::Real x2820 =
    3.2236842105263198e+29 * x346 * x71 * x853 * exp(x2810 + x854);
  const amrex::Real x2821 = 1.4e+18 * sc[19] * x2801 - x2798 * x2804 +
                            x2798 * x2817 - x2812 - x2815 + x2820;
  const amrex::Real x2827 = 50000000.0 * sc[12] * x1067 - 10.0 * x1033 * x1218 +
                            10.0 * x1218 * x545 - x2746 * x568 + x2746 * x904 +
                            x2750 * x904 + x2753 + x2756 * x904 + x2759 +
                            x2762 + x2766 * x904 + x2768 + x2794 + x2821;
  const amrex::Real x2831 = 0.384 * exp(-g_RT[1] + g_RT[20] + x1224 - x593);
  const amrex::Real x2832 = sc[20] * x2831;
  const amrex::Real x2838 = 15.1 * sc[15] * x113;
  const amrex::Real x2842 = -x1367 * x545 - x2838 * x568;
  const amrex::Real x2850 = 50.7 * sc[6] * x287;
  const amrex::Real x2856 =
    40000000.0 * sc[12] * x1104 - 40000000.0 * sc[12] * x991 -
    50000000.0 * sc[1] * x1083 + 50000000.0 * sc[1] * x591 + x1033 * x1367 -
    x1104 * x2743 + x1104 * x2832 + x2743 * x991 + x2827 - x2832 * x991 +
    x2838 * x904 + x2842 - x2850 * x568 + x2850 * x904;
  x194 = (-sc_qss[0] * x439 / x194 - sc_qss[4] * x207 + x816) / x280;
  x207 = x1103 * (-x943 * x945 - x673 * x946 / x644 - x987 / x644);
  x65 = (-sc_qss[0] * x411 / x65 + x943) / x399;
  x280 = x346 * x71 * x853 * exp(x2810 + x854);
  x399 = sc[19] * x346 * x71 * x868 * exp(x2810);
  x411 = 4.2e+18 * sc[19] * x2801 + 9.6710526315789494e+29 * x280 -
         x2804 * (6.0 * x2796 + 0.84 * x504) - 4.2e+18 * x2813 * x853 +
         x2817 * (6.0 * x2796 + 0.84 * x504) - 9.6710526315789494e+29 * x399;
  x439 = 42200000.0 * exp(-30595.573280927001 * invT);
  x644 = 15.1 * exp(-1882.0303301096501 * invT + 1.9 * logT);
  x673 = -sc[14] * x644 - 19.584 * sc[14] * exp(x1224) + x1062 * x1367 -
         x1106 * x1367 - x1127 * x2838 - x1138 * x2832 + x1159 * x2838 +
         x1162 * x2832;
  x816 = 3.6 * exp(-1258.0416645118 * invT + 2.0 * logT);
  x854 =
    8000000000000000.0 * exp(g_RT[12] - g_RT[19] + g_RT[1] - g_RT[3] + x211);
  x943 = 0.227 * exp(-4629.5933254034198 * invT + 2.0 * logT);
  x945 = -sc[12] * x854 - sc[12] * x943 - x1127 * x2766 + x1159 * x2766;
  x946 = 50.7 * exp(-6516.6558221711202 * invT + 1.9 * logT);
  x987 = -40000000.0 * sc[12] * x1138 + 40000000.0 * sc[12] * x1162 -
         2.9e+27 * sc[19] * x13 * x2774 - sc[19] * x946 -
         40000000.0 * sc[19] * x965 - x1127 * x2850 + x1159 * x2850 +
         x272 * x660 + x2792;
  x245 = 5.8e+27 * refC * x2777 * x635 * exp(x245 + x582) +
         1.2277372262773699e+52 * x246 * x2783 -
         1.2277372262773699e+52 * x246 * x613 +
         x251 * (4.0 * x2785 * x483 + 0.56 * x483 * x585) -
         5.8e+27 * x2774 * x713 -
         x2789 * (4.0 * x2785 * x483 + 0.56 * x483 * x585);
  x351 = x351 * (4.0 * x2796 + 0.56 * x504) / ((x262) * (x262));
  x1103 = -1.4e+18 * sc[19] * x2801 * x351 * x71 + 2.8e+18 * sc[19] * x2801 +
          6.4473684210526297e+29 * x280 - 2.8e+18 * x2813 * x853 +
          x2815 * x351 * x71 - 6.4473684210526297e+29 * x399;
  x262 = -40000000.0 * sc[12] * x1212 + 40000000.0 * sc[12] * x1243 +
         x1182 * x660 + x1197 * x2850 - x1205 * x2850;
  x582 = x1121 * x1367 - x1156 * x1367 + x1197 * x2838 - x1205 * x2838 -
         x1212 * x2832 + x1243 * x2832;
  x635 = 50000000.0 * sc[1] * x591 + 10.0 * x1218 * x545 + x2743 * x991 -
         x2746 * x568 + x2753 + x2794 + x2821;
  x346 = sc[19] * exp(x211);
  x2810 = -40000000.0 * sc[12] * x991 - x2850 * x568;
  const amrex::Real x3006 = -x2832 * x991 + x2842;
  const amrex::Real x3059 = x1227 * x1367 - x1233 * x2838 - x1245 * x1367 +
                            x1264 * x2838 - x1276 * x2832 + x1289 * x2832;
  const amrex::Real x3065 = -40000000.0 * sc[12] * x1276 +
                            40000000.0 * sc[12] * x1289 - x1233 * x2850 +
                            x1262 * x660 + x1264 * x2850 + 50.7 * x287 * x868;
  const amrex::Real x3095 = x1254 * x1367 - x1260 * x1367 - x1268 * x2838 +
                            x1284 * x2838 + x1295 * x2832 - x1311 * x2832;
  const amrex::Real x3102 =
    40000000.0 * sc[12] * x1295 - 40000000.0 * sc[12] * x1311 - x1268 * x2850 +
    x1284 * x2850 + x1303 * x660 + 1.84160583941606e+52 * x246 * x2783 -
    1.84160583941606e+52 * x246 * x613 +
    x251 * (6.0 * x2785 * x483 + 0.84 * x483 * x585) - 8.7e+27 * x2774 * x713 +
    8.7e+27 * x2779 - x2789 * (6.0 * x2785 * x483 + 0.84 * x483 * x585);
  const amrex::Real x3141 = x1263 * x1367 - x1279 * x1367 - x1306 * x2838 +
                            x1314 * x2838 - x1362 * x2832 + x2832 * x650;
  const amrex::Real x3147 =
    -40000000.0 * sc[12] * x1362 + 40000000.0 * sc[12] * x650 - x1306 * x2850 +
    x1314 * x2850 + x1315 * x660 + 9.2080291970802894e+51 * x246 * x2783 -
    9.2080291970802894e+51 * x246 * x613 +
    x251 * (3.0 * x2785 * x483 + 0.42 * x483 * x585) - 4.35e+27 * x2774 * x713 +
    4.35e+27 * x2779 - x2789 * (3.0 * x2785 * x483 + 0.42 * x483 * x585);
  const amrex::Real x3179 = x1298 * x1367 - x1304 * x1367 - x1351 * x2838 +
                            x1355 * x2838 - x1391 * x2832 + x1398 * x2832;
  const amrex::Real x3211 = x1113 * x2838 + x1124 * x2832 + x1317 * x1367 -
                            x1328 * x1367 - x1407 * x2832 - x2838 * x331;
  x388 = (-sc_qss[1] * x394 / x388 + x886) / x392;
  x392 = -sc[1] * x854 - sc[1] * x943 - x1388 * x2766 + x1404 * x2766;
  x394 = -40000000.0 * sc[12] * x1425 + 40000000.0 * sc[12] * x1434 +
         x1341 * x660 - x1388 * x2850 + x1404 * x2850 + 40000000.0 * x207;
  x886 = x1343 * x1367 - x1367 * x203 - x1388 * x2838 + x1404 * x2838 -
         x1425 * x2832 + x1434 * x2832 + x194 * x95;
  const amrex::Real x3285 = 40000000.0 * sc[12] * x1436 -
                            40000000.0 * sc[12] * x1455 + x1371 * x660 +
                            x1418 * x2850 - x2850 * x298;
  const amrex::Real x3292 = x1367 * x267 - x1367 * x621 + x1418 * x2838 +
                            x1436 * x2832 - x1455 * x2832 - x2838 * x298;
  const amrex::Real x3320 = -40000000.0 * sc[12] * x1480 +
                            40000000.0 * sc[12] * x1489 + x1420 * x2850 -
                            x1422 * x2850 + x1428 * x660;
  const amrex::Real x3328 = -sc[1] * x644 - 19.584 * sc[1] * exp(x1224) +
                            x1367 * x1386 - x1367 * x1392 + x1420 * x2838 -
                            x1422 * x2838 - x1480 * x2832 + x1489 * x2832;
  const amrex::Real x3357 = -40000000.0 * sc[12] * x1508 +
                            40000000.0 * sc[12] * x169 - x1445 * x2850 +
                            x1450 * x2850 + x1498 * x660;
  const amrex::Real x3365 = 15.1 * x113 * x868 + x1367 * x1400 - x1367 * x1401 -
                            x1445 * x2838 + x1450 * x2838 - x1508 * x2832 +
                            x169 * x2832;
  const amrex::Real x3396 = -40000000.0 * sc[12] * x1530 +
                            40000000.0 * sc[12] * x1540 - x1461 * x2850 +
                            x1471 * x2850 + x486 * x660;
  const amrex::Real x3403 = x1155 * x1367 - x1367 * x447 - x1461 * x2838 +
                            x1471 * x2838 - x1530 * x2832 + x1540 * x2832;
  const amrex::Real x3441 = -x1157 * x1367 + x1367 * x552 - x1476 * x2838 +
                            x2832 * x301 - x2832 * x527 + x2838 * x99;
  x713 = 40000000.0 * sc[12] * x301 - 40000000.0 * sc[12] * x527 -
         x1476 * x2850 + 3.68321167883212e+52 * x246 * x2783 -
         3.68321167883212e+52 * x246 * x613 +
         x251 * (12.0 * x2785 * x483 + 1.68 * x483 * x585) + x264 * x660 -
         1.74e+28 * x2774 * x713 + 1.74e+28 * x2779 -
         x2789 * (12.0 * x2785 * x483 + 1.68 * x483 * x585) + x2850 * x99;
  x2779 = x1367 * x1429 - x1367 * x1438 - x1494 * x2838 + x1502 * x2838 +
          x250 * x2832 - x2832 * x469;
  x246 =
    exp(g_RT[19] - g_RT[1] + g_RT[24] - g_RT_qss[0] - 3019.29999482832 * invT);
  x2783 = x1367 * x1442 - x1367 * x1448 - x1517 * x2838 + x1524 * x2838 -
          x2832 * x581 + x2832 * x599;
  x2774 = -40000000.0 * sc[12] * x581 + 40000000.0 * sc[12] * x599 -
          2.9e+27 * sc[1] * x13 * x2774 - sc[1] * x946 -
          40000000.0 * sc[1] * x965 - x1517 * x2850 + x1524 * x2850 +
          x660 * x714;
  x2785 = -40000000.0 * sc[12] * x659 + 40000000.0 * sc[12] * x670 -
          x1527 * x2850 + x273 * x660 + x2850 * x864;
  x585 = -x1367 * x1467 + x1367 * x196 - x1527 * x2838 + x207 * x2831 -
         x2832 * x659 + x2832 * x670 + x2838 * x864;
  x2789 = x1196 * x2838 - x1367 * x1470 + x1367 * x197 - x2832 * x589 +
          x2832 * x855 - x2838 * x311;
  x251 = -40000000.0 * sc[12] * x589 + 40000000.0 * sc[12] * x855 +
         x1196 * x2850 + x245 - x2850 * x311 + x539 * x660;
  x613 = x1367 * x1484 - x1367 * x1490 + x2832 * x971 - x2832 * x980 +
         x2838 * x445 - x2838 * x450;
  const amrex::Real x3657 = x1367 * x1499 - x1367 * x1513 + x2832 * x949 -
                            x2832 * x996 + x2838 * x348 - x2838 * x468;
  const amrex::Real x3691 = -x1367 * x1492 + x1367 * x646 - x217 * x2838 -
                            x2832 * x89 + x2832 * x985 + x2838 * x368;
  const amrex::Real x3741 = x1367 * x549 - x1367 * x550 - x2832 * x544 +
                            x2832 * x815 + x2838 * x371 - x2838 * x555;
  const amrex::Real x3770 = -4161.6018262050302 * invT + 2.0 * logT;
  const amrex::Real x3773 = 2.46 * sc[2] * exp(x3770);
  const amrex::Real x3776 = -8480000.0 * sc[12] * x545;
  const amrex::Real x3780 = 8480000.0 * sc[12] * x1033 - x1033 * x732 -
                            x1104 * x3773 - x2766 * x904 + x3776;
  const amrex::Real x3782 = -x508 * x559;
  const amrex::Real x3784 =
    3.89e-9 * exp(-2644.9067954696102 * invT + 4.57 * logT);
  const amrex::Real x3785 = sc[2] * x3784;
  amrex::Real x3794 =
    195039370078.74 * x13 * exp(-1035.1166815603121 * invT - 4.13 * logT);
  amrex::Real x3795 = log(
    exp(-6964.0 * invT) + 0.217 * exp(-0.0135135135135135 * T) +
    0.783 * exp(-0.00034002040122407302 * T));
  amrex::Real x3796 =
    -0.29097730287517898 * x3795 + 0.43429448190325198 * log(x3794) - 0.4;
  amrex::Real x3797 = -0.55155399201712996 * x3795 - 0.14 * x3796 + 0.75;
  amrex::Real x3802 = ((x3796) * (x3796)) / ((x3797) * (x3797) * (x3797));
  amrex::Real x3805 =
    x3795 / ((((x3796) * (x3796)) / ((x3797) * (x3797)) + 1.0) *
             (((x3796) * (x3796)) / ((x3797) * (x3797)) + 1.0));
  amrex::Real x3806 =
    x3805 * (2.0 * x3796 * x483 / ((x3797) * (x3797)) + 0.28 * x3802 * x483);
  const amrex::Real x3808 = -1227.8486645635121 * invT - 4.76 * logT;
  const amrex::Real x3812 =
    exp(
      M_LN10 * (0.43429448190325198 * x3795 /
                (((x3796) * (x3796)) / ((x3797) * (x3797)) + 1.0))) /
    (x3794 + 1.0);
  const amrex::Real x3814 =
    2.477e+21 * x3812 * x526 * exp(-g_RT[19] - x182 + x3808);
  x3794 = exp(
            M_LN10 * (0.43429448190325198 * x3795 /
                      (((x3796) * (x3796)) / ((x3797) * (x3797)) + 1.0))) /
          ((x3794 + 1.0) * (x3794 + 1.0));
  x3795 = sc[2] * x526 *
          exp(-g_RT[19] - 2262.965346123824 * invT - 8.89 * logT - x182);
  const amrex::Real x3822 = refC * sc[2] * exp(-g_RT[19] - x182 + x3808);
  const amrex::Real x3827 = sc[12] * sc[19] * exp(x3808);
  const amrex::Real x3832 =
    sc[12] * sc[19] * x13 * exp(-2262.965346123824 * invT - 8.89 * logT);
  const amrex::Real x3835 =
    sc[2] * x3806 * x3814 - 2.477e+21 * x13 * x3806 * x3812 * x3827 +
    4.83112519685039e+32 * x3794 * x3795 -
    4.83112519685039e+32 * x3794 * x3832 - 2.477e+21 * x3812 * x3822 +
    2.477e+21 * x3812 * x3827;
  const amrex::Real x3836 = -x1137 * x3785 + x1152 * x3785 + x3835;
  const amrex::Real x3838 = x2766 * x568 + x3773 * x991 + x545 * x732;
  const amrex::Real x3850 =
    316000.0 * exp(-g_RT[11] + g_RT[27] - 4780.5583251448397 * invT - x182);
  const amrex::Real x3855 =
    4.54e-5 *
    exp(g_RT[24] - g_RT[3] - 3599.0055938353598 * invT + 3.268 * logT - x182);
  const amrex::Real x3859 =
    0.0245 * exp(-2606.66232886845 * invT + 2.47 * logT - x1101 - x182);
  const amrex::Real x3864 =
    1020.0 * exp(-4327.6633259205901 * invT + 1.5 * logT);
  const amrex::Real x3869 = -sc_qss[8] * x436 - x1116 / x428;
  const amrex::Real x3874 =
    660.0 * sc[19] * exp(-5454.8686573231598 * invT + 1.62 * logT);
  const amrex::Real x3881 =
    100.0 * sc[15] * exp(-1570.03599731073 * invT + 1.6 * logT);
  x942 = x1035 * (-x1098 / x942 + x1116 * x990 / x428);
  x990 = 1000000.0 * exp(-x182 - x609);
  x1035 = 4.0 * x3796 * x483 / ((x3797) * (x3797)) + 0.56 * x3802 * x483;
  x1098 = 2.477e+21 * x13 * x3805 * x3812 * x3827;
  x1116 = sc[2] * x3805 * x3814;
  x3805 = -x1035 * x1098 + x1035 * x1116 +
          9.6622503937007901e+32 * x3794 * x3795 -
          9.6622503937007901e+32 * x3794 * x3832 - 4.954e+21 * x3812 * x3822 +
          4.954e+21 * x3812 * x3827;
  const amrex::Real x3909 =
    4.54e-5 * sc[12] * exp(-3599.0055938353598 * invT + 3.268 * logT);
  const amrex::Real x3919 = 660.0 * exp(
                                      g_RT[12] - g_RT[19] - g_RT[2] + g_RT[6] -
                                      5454.8686573231598 * invT + 1.62 * logT);
  const amrex::Real x3929 =
    6.0 * x3796 * x483 / ((x3797) * (x3797)) + 0.84 * x3802 * x483;
  const amrex::Real x3941 = 6.14 * exp(-5258.61415765932 * invT + 1.74 * logT);
  const amrex::Real x3951 = g_RT[8] + g_RT_qss[8] - g_RT_qss[9];
  const amrex::Real x3953 = kf_qss[116] * refCinv * sc_qss[8] / x428;
  x182 = 2.0e-12 * sc[2] * x3953 *
         exp(-1237.91299787961 * invT + 5.6 * logT - x182 + x3951 - x414);
  const amrex::Real x3956 =
    3.0 * x3796 * x483 / ((x3797) * (x3797)) + 0.42 * x3802 * x483;
  const amrex::Real x3968 =
    3.89e-9 * exp(
                g_RT[12] - g_RT[2] + g_RT[9] - g_RT_qss[8] -
                2644.9067954696102 * invT + 4.57 * logT);
  const amrex::Real x3972 = x1152 * x3785 + x3782 + x3835;
  const amrex::Real x3983 = 316000.0 * sc[12] * exp(-4780.5583251448397 * invT);
  const amrex::Real x3987 = 316000.0 * sc[11] * exp(-4780.5583251448397 * invT);
  const amrex::Real x3988 =
    4.54e-5 * sc[3] * exp(-3599.0055938353598 * invT + 3.268 * logT);
  const amrex::Real x3990 =
    0.0245 * sc[18] * exp(-2606.66232886845 * invT + 2.47 * logT);
  const amrex::Real x3991 =
    1020.0 *
    exp(g_RT[12] - g_RT[2] - 4327.6633259205901 * invT + 1.5 * logT - x148);
  const amrex::Real x3996 =
    100.0 *
    exp(g_RT[12] - g_RT[2] - 1570.03599731073 * invT + 1.6 * logT - x56);
  const amrex::Real x3998 =
    2.0e-12 * exp(-1237.91299787961 * invT + 5.6 * logT);
  const amrex::Real x4008 =
    0.00332 * exp(-2948.8496616156599 * invT + 2.81 * logT);
  const amrex::Real x4042 =
    100.0 * sc[2] * exp(-1570.03599731073 * invT + 1.6 * logT);
  x3796 = 12.0 * x3796 * x483 / ((x3797) * (x3797)) + 1.68 * x3802 * x483;
  x3797 = 0.0245 * sc[12] * exp(-2606.66232886845 * invT + 2.47 * logT);
  x3802 = 660.0 * sc[2] * exp(-5454.8686573231598 * invT + 1.62 * logT);
  const amrex::Real x4155 = 4.27e+46 * sc[12] * x324 * x959;
  const amrex::Real x4160 = -60000000.0 * sc[24] * x545;
  const amrex::Real x4164 =
    x453 * ((x885) * (x885)) / ((x887) * (x887) * (x887));
  const amrex::Real x4165 = x453 * x885 / ((x887) * (x887));
  amrex::Real x4167 = x329 / ((((x885) * (x885)) / ((x887) * (x887)) + 1.0) *
                              (((x885) * (x885)) / ((x887) * (x887)) + 1.0));
  const amrex::Real x4169 = 4.27e+46 * x324 * x868 * x959;
  const amrex::Real x4171 = sc[12] * x4167 * x4169;
  x329 = 3.4278694009181206e-79 *
         exp(
           M_LN10 * (0.43429448190325198 * x329 /
                     (((x885) * (x885)) / ((x887) * (x887)) + 1.0))) /
         ((x324 + 5.85480093676815e-40) * (x324 + 5.85480093676815e-40));
  const amrex::Real x4175 = x329 * x444 * x868;
  x821 = x821 * x959;
  const amrex::Real x4180 = 4.27e+46 * x4167 * x71 * x821;
  x451 = x451 * x868 * x959;
  amrex::Real x4186 =
    log(exp(-6859.5 * invT) + exp(-0.00091190953857377404 * T));
  const amrex::Real x4187 = -3003.0964181894101 * invT - 12.0 * logT;
  const amrex::Real x4189 = x13 * exp(x4187);
  amrex::Real x4191 = -0.29097730287517898 * x4186 +
                      0.43429448190325198 * log(6.65e+39 * x4189) - 0.4;
  amrex::Real x4192 = -0.55155399201712996 * x4186 - 0.14 * x4191 + 0.75;
  const amrex::Real x4198 =
    exp(
      M_LN10 * (0.43429448190325198 * x4186 /
                (((x4191) * (x4191)) / ((x4192) * (x4192)) + 1.0))) /
    (6.65e+39 * x4189 + 1.0);
  const amrex::Real x4203 =
    2.2612923285657754e-80 *
    exp(
      M_LN10 * (0.43429448190325198 * x4186 /
                (((x4191) * (x4191)) / ((x4192) * (x4192)) + 1.0))) /
    ((x4189 + 1.5037593984962406e-40) * (x4189 + 1.5037593984962406e-40));
  const amrex::Real x4205 =
    sc[24] * x2638 * exp(-6006.1928363788102 * invT - 24.0 * logT);
  const amrex::Real x4209 = 1.33e+48 * sc[19] * sc[24] * x4189 * x4198;
  const amrex::Real x4211 = ((x4191) * (x4191)) / ((x4192) * (x4192) * (x4192));
  const amrex::Real x4212 = x4191 / ((x4192) * (x4192));
  x4186 = x4186 / ((((x4191) * (x4191)) / ((x4192) * (x4192)) + 1.0) *
                   (((x4191) * (x4191)) / ((x4192) * (x4192)) + 1.0));
  x4191 = x4186 * (0.28 * x4211 * x483 + 2.0 * x4212 * x483);
  x4192 = -g_RT[19] - g_RT[24] + g_RT[3];
  const amrex::Real x4218 =
    refC * sc[3] * x13 * exp(-6006.1928363788102 * invT - 24.0 * logT + x4192);
  const amrex::Real x4222 = refC * sc[3] * exp(x4187 + x4192);
  const amrex::Real x4224 = 1.33e+48 * x13 * x4198 * x4222;
  const amrex::Real x4226 =
    1.33e+48 * sc[19] * sc[24] * x4198 * exp(x4187) - x4191 * x4209 +
    x4191 * x4224 - 1.33e+48 * x4198 * x4222 - 8.8445e+87 * x4203 * x4205 +
    8.8445e+87 * x4203 * x4218;
  const amrex::Real x4227 =
    7.29316e+85 * x1049 * x329 - x4171 * (0.28 * x4164 + 2.0 * x4165) -
    7.29316e+85 * x4175 + x4180 * (0.28 * x4164 + 2.0 * x4165) + x4226 +
    4.27e+46 * x451 - 4.27e+46 * x821;
  const amrex::Real x4229 =
    60000000.0 * sc[24] * x1033 - x4155 * x568 + x4155 * x904 + x4160 + x4227;
  const amrex::Real x4239 =
    2.187948e+86 * x1049 * x329 - x4171 * (0.84 * x4164 + 6.0 * x4165) -
    2.187948e+86 * x4175 + x4180 * (0.84 * x4164 + 6.0 * x4165) +
    1.281e+47 * x451 - 1.281e+47 * x821;
  x4167 = x4167 * (0.56 * x4164 + 4.0 * x4165);
  amrex::Real x4257 = x4186 * (0.56 * x4211 * x483 + 4.0 * x4212 * x483);
  const amrex::Real x4264 =
    -sc[12] * x4167 * x4169 + 2.66e+48 * sc[19] * sc[24] * x4198 * exp(x4187) +
    1.458632e+86 * x1049 * x329 - 1.458632e+86 * x329 * x444 * x868 +
    4.27e+46 * x4167 * x71 * x821 - 2.66e+48 * x4198 * x4222 -
    1.7689e+88 * x4203 * x4205 + 1.7689e+88 * x4203 * x4218 - x4209 * x4257 +
    x4224 * x4257 + 8.54e+46 * x451 - 8.54e+46 * x821;
  const amrex::Real x4270 = 2660000.0 * exp(-g_RT[24] + g_RT[3] - x609);
  const amrex::Real x4276 = 3.1 * exp(149.958566409806 * invT + 2.0 * logT);
  const amrex::Real x4279 = -x4155 * x568 + x4160 + x4227;
  const amrex::Real x4287 =
    1.92 * sc[19] * exp(-2352.0346959712601 * invT + 2.309 * logT);
  const amrex::Real x4293 =
    180000.0 * sc[14] * exp(-2958.91399493175 * invT + 0.7 * logT);
  const amrex::Real x4294 = -164.55184971814299 * invT + 1.65 * logT;
  const amrex::Real x4296 = sc[14] * exp(x4294);
  const amrex::Real x4298 =
    -35.0 * sc[14] * exp(489.12659916218797 * invT + 1.65 * logT) - x4293 -
    80.0 * x4296;
  const amrex::Real x4301 =
    6.16e+16 * exp(
                 g_RT[12] - g_RT[19] + g_RT[3] - g_RT[4] -
                 5851.9066066430896 * invT - 2.538 * logT);
  const amrex::Real x4303 =
    3.2e+16 * exp(g_RT[12] - g_RT[19] + g_RT[3] - g_RT[5] + x211);
  const amrex::Real x4306 =
    6.16e+16 * exp(-5851.9066066430896 * invT - 2.538 * logT);
  const amrex::Real x4314 =
    1.92 *
    exp(g_RT[24] - g_RT[3] - 2352.0346959712601 * invT + 2.309 * logT - x240);
  const amrex::Real x4325 = sc[19] * sc[24] * x4198 * exp(x4187);
  x885 =
    3.0 * x4165 + 0.42 * x453 * ((x885) * (x885)) / ((x887) * (x887) * (x887));
  x887 = 80.0 * exp(g_RT[12] + g_RT[22] - g_RT[3] - x190 + x4294);
  const amrex::Real x4399 =
    180000.0 * sc[3] * exp(-2958.91399493175 * invT + 0.7 * logT);
  const amrex::Real x4400 =
    -80.0 * sc[3] * exp(x4294) -
    35.0 * sc[3] * exp(489.12659916218797 * invT + 1.65 * logT) - x4399;
  const amrex::Real x4404 =
    180000.0 *
    exp(g_RT[24] - g_RT[3] - 2958.91399493175 * invT + 0.7 * logT - x148);
  const amrex::Real x4422 = x4186 * (1.68 * x4211 * x483 + 12.0 * x4212 * x483);
  const amrex::Real x4425 =
    3.1 * exp(g_RT[24] - g_RT[3] + 149.958566409806 * invT + 2.0 * logT - x56);
  const amrex::Real x4457 =
    1.92 * sc[3] * exp(-2352.0346959712601 * invT + 2.309 * logT);
  const amrex::Real x4513 =
    refCinv * exp(2.0 * g_RT[12] - g_RT[14] + g_RT[22] - g_RT[4] + x4294);
  amrex::Real x4526 =
    3.91e+40 * x13 * exp(-3277.0978927200781 * invT - 12.49 * logT);
  amrex::Real x4527 = log(
    exp(-6118.4 * invT) + 0.896 * exp(-0.00062266500622664995 * T) +
    0.104 * exp(-1.6666666666666701e-5 * T));
  amrex::Real x4528 =
    -0.29097730287517898 * x4527 + 0.43429448190325198 * log(x4526) - 0.4;
  const amrex::Real x4532 =
    1.7777777777777777 * x4528 /
    ((-0.73540532268950665 * x4527 - 0.18666666666666668 * x4528 + 1) *
     (-0.73540532268950665 * x4527 - 0.18666666666666668 * x4528 + 1));
  const amrex::Real x4534 =
    2.3703703703703702 * ((x4528) * (x4528)) /
    ((-0.73540532269 * x4527 - 0.18666666666666668 * x4528 + 1) *
     (-0.73540532269 * x4527 - 0.18666666666666668 * x4528 + 1) *
     (-0.73540532269 * x4527 - 0.18666666666666668 * x4528 + 1));
  amrex::Real x4537 = -3145.1041612794979 * invT - 12.81 * logT;
  const amrex::Real x4539 =
    refC * sc[5] * exp(-g_RT[12] - g_RT[24] + g_RT[5] + x4537);
  x4528 = 1.7777777777777777 * ((x4528) * (x4528)) /
            ((-0.73540532268950665 * x4527 - 0.18666666666666668 * x4528 + 1) *
             (-0.73540532268950665 * x4527 - 0.18666666666666668 * x4528 + 1)) +
          1.0;
  const amrex::Real x4543 =
    exp(M_LN10 * (0.43429448190325198 * x4527 / x4528)) / (x4526 + 1.0);
  const amrex::Real x4547 =
    3.91e+48 * x13 * x4527 * x4539 * x4543 / ((x4528) * (x4528));
  x4526 = exp(M_LN10 * (0.43429448190325198 * x4527 / x4528)) /
          ((x4526 + 1.0) * (x4526 + 1.0));
  const amrex::Real x4551 =
    refC * sc[5] * x13 *
    exp(
      -g_RT[12] - g_RT[24] + g_RT[5] - 6422.2020539995756 * invT - 25.3 * logT);
  const amrex::Real x4554 =
    sc[12] * sc[24] * x13 * exp(-6422.2020539995756 * invT - 25.3 * logT);
  amrex::Real x4558 = -0.29097730287517898 * x746 +
                      0.43429448190325198 * log(1.03333333333333e+37 * x744) -
                      0.4;
  const amrex::Real x4561 =
    1.7777777777777777 * x4558 /
    ((-0.18666666666666668 * x4558 - 0.73540532268950665 * x746 + 1) *
     (-0.18666666666666668 * x4558 - 0.73540532268950665 * x746 + 1));
  const amrex::Real x4563 =
    2.3703703703703702 * ((x4558) * (x4558)) /
    ((-0.18666666666666668 * x4558 - 0.73540532269 * x746 + 1) *
     (-0.18666666666666668 * x4558 - 0.73540532269 * x746 + 1) *
     (-0.18666666666666668 * x4558 - 0.73540532269 * x746 + 1));
  x4558 = 1.7777777777777777 * ((x4558) * (x4558)) /
            ((-0.18666666666666668 * x4558 - 0.73540532268950665 * x746 + 1) *
             (-0.18666666666666668 * x4558 - 0.73540532268950665 * x746 + 1)) +
          1.0;
  const amrex::Real x4567 = exp(M_LN10 * (0.43429448190325198 * x746 / x4558)) /
                            (1.03333333333333e+37 * x744 + 1.0);
  const amrex::Real x4570 =
    1.55e+44 * x13 * x4567 * x742 * x746 / ((x4558) * (x4558));
  x744 = 9.3652445369407457e-75 *
         exp(M_LN10 * (0.43429448190325198 * x746 / x4558)) * x1013 /
         ((x744 + 9.67741935483874e-38) * (x744 + 9.67741935483874e-38));
  x746 = sc[12] * sc[24] * exp(x4537);
  x1013 = 3.91e+48 * x13 * x4527 * x4543 * x746 / ((x4528) * (x4528));
  x4527 = -x1013 * (2.0 * x4532 * x483 + 0.28 * x4534 * x483) +
          1.52881e+89 * x4526 * x4551 - 1.52881e+89 * x4526 * x4554 -
          3.91e+48 * x4539 * x4543 + 3.91e+48 * x4543 * x746 +
          x4547 * (2.0 * x4532 * x483 + 0.28 * x4534 * x483) -
          1.55e+44 * x4567 * x742 +
          x4570 * (2.0 * x4561 * x483 + 0.28 * x4563 * x483) +
          1.6016666666666699e+81 * x744;
  x4528 = x4527 + x508 * x516;
  x4558 = -x1013 * (4.0 * x4532 * x483 + 0.56 * x4534 * x483) +
          3.05762e+89 * x4526 * x4551 - 3.05762e+89 * x4526 * x4554 -
          7.82e+48 * x4539 * x4543 + 7.82e+48 * x4543 * x746 +
          x4547 * (4.0 * x4532 * x483 + 0.56 * x4534 * x483) -
          3.1e+44 * x4567 * x742 +
          x4570 * (4.0 * x4561 * x483 + 0.56 * x4563 * x483) +
          3.2033333333333302e+81 * x744;
  const amrex::Real x4592 =
    3.91e+48 * x4543 * x526 * exp(-g_RT[12] - g_RT[24] + g_RT[5] + x4537);
  const amrex::Real x4611 = 3.91e+48 * sc[24] * x13 * x4543 * exp(x4537);
  x4537 = 3.91e+48 * sc[12] * x13 * x4543 * exp(x4537);
  const amrex::Real x4626 =
    0.05707 * exp(-3156.6781445930101 * invT + 2.43 * logT);
  const amrex::Real x4627 = sc[6] * x4626;
  const amrex::Real x4632 = exp(-2.0 * g_RT[19] + g_RT[6] - logT);
  const amrex::Real x4634 = exp(-logT);
  const amrex::Real x4637 = -1780000.0 * refC * sc[6] * x4632 +
                            1780000.0 * ((sc[19]) * (sc[19])) * x4634;
  const amrex::Real x4638 = -x1137 * x4627 + x1152 * x4627 + x4637;
  const amrex::Real x4643 = 20000000.0 * sc[19] * x1180 + x1074 * x995 +
                            x1181 * x222 + x2850 * x568 + x4638 + x545 * x93;
  const amrex::Real x4647 =
    0.5 * sc[6] * exp(-3638.25649376812 * invT + 2.0 * logT);
  const amrex::Real x4658 =
    x784 *
    exp(g_RT[20] - g_RT[6] - g_RT[8] - 44836.604923200604 * invT - 8.34 * logT);
  amrex::Real x4661 =
    117906976744186.0 * x13 * exp(-2390.2791625723985 * invT - 4.92 * logT);
  amrex::Real x4662 = log(
    exp(-10300.0 * invT) + 0.068 * exp(-0.0050761421319797002 * T) +
    0.932 * exp(-0.00064935064935064902 * T));
  amrex::Real x4663 =
    -0.29097730287517898 * x4662 + 0.43429448190325198 * log(x4661) - 0.4;
  amrex::Real x4664 = -0.55155399201712996 * x4662 - 0.14 * x4663 + 0.75;
  amrex::Real x4667 = ((x4663) * (x4663)) / ((x4664) * (x4664)) + 1.0;
  const amrex::Real x4670 =
    exp(M_LN10 * (0.43429448190325198 * x4662 / x4667)) * x13 /
    ((x4661 + 1.0) * (x4661 + 1.0));
  amrex::Real x4674 = ((x4663) * (x4663)) / ((x4664) * (x4664) * (x4664));
  amrex::Real x4677 = x4663 * x483 / ((x4664) * (x4664));
  amrex::Real x4678 = 0.28 * x4674 * x483 + 2.0 * x4677;
  x4661 = exp(M_LN10 * (0.43429448190325198 * x4662 / x4667)) / (x4661 + 1.0);
  const amrex::Real x4681 = -42446.325760628104 * invT - 3.42 * logT;
  const amrex::Real x4683 = x784 * exp(g_RT[20] - g_RT[6] - g_RT[8] + x4681);
  const amrex::Real x4686 =
    5070000000000000.0 * x13 * x4661 * x4662 * x4683 / ((x4667) * (x4667));
  const amrex::Real x4689 =
    sc[6] * sc[8] * exp(-44836.604923200604 * invT - 8.34 * logT);
  const amrex::Real x4692 = sc[6] * sc[8] * exp(x4681);
  x4662 =
    5070000000000000.0 * x13 * x4661 * x4662 * x4692 / ((x4667) * (x4667));
  x4667 = -5.9778837209302301e+29 * x4658 * x4670 +
          5070000000000000.0 * x4661 * x4683 -
          5070000000000000.0 * x4661 * x4692 + x4662 * x4678 +
          5.9778837209302301e+29 * x4670 * x4689 - x4678 * x4686;
  const amrex::Real x4698 =
    -15000000.0 * sc[14] * x591 - 120000000.0 * sc[19] * x545 + x4667;
  const amrex::Real x4700 =
    70000000.0 * sc[6] * x591 + x4643 + x4647 * x991 + x4698 - x508 * x749;
  const amrex::Real x4710 = -90000000.0 * sc[19] * x568;
  const amrex::Real x4712 = 90000000.0 * sc[19] * x904 - x1033 * x93 -
                            x1067 * x995 - x2850 * x904 + x4710;
  const amrex::Real x4713 = 15000000.0 * sc[14] * x1083 +
                            120000000.0 * sc[19] * x1033 -
                            70000000.0 * sc[6] * x1083 - x1104 * x4647 + x4712;
  const amrex::Real x4734 =
    -15000000.0 * sc[14] * x1134 + 15000000.0 * sc[14] * x1161 +
    120000000.0 * sc[19] * x1062 - 120000000.0 * sc[19] * x1106 + x4667;
  x4663 = 4.0 * x4663 * x483 / ((x4664) * (x4664)) + 0.56 * x4674 * x483;
  x4664 = -1.19557674418605e+30 * x4658 * x4670 + 1.014e+16 * x4661 * x4683 -
          1.014e+16 * x4661 * x4692 + x4662 * x4663 - x4663 * x4686 +
          1.19557674418605e+30 * x4670 * x4689;
  const amrex::Real x4788 =
    125900000.0 * exp(-g_RT[11] + g_RT[27] - 4206.3881094616499 * invT - x240);
  const amrex::Real x4793 =
    6.05 * exp(-2616.7266621845401 * invT + 2.0 * logT - x1101 - x240);
  const amrex::Real x4798 =
    0.5916 * sc[13] * exp(-26923.098053884099 * invT + 2.433 * logT);
  const amrex::Real x4801 = exp(-2.0 * g_RT[19] + g_RT[6] - 1.25 * logT);
  const amrex::Real x4804 =
    0.04589 * exp(-3150.13632793755 * invT + 2.7 * logT);
  const amrex::Real x4830 =
    173.4 * sc[15] * exp(-1726.0331637101899 * invT + 1.51 * logT);
  x240 = exp(g_RT[22] - g_RT_qss[7] - 2012.8666632188799 * invT - x240);
  const amrex::Real x4852 = 5070000000000000.0 * x13 * x4661 * exp(x4681);
  const amrex::Real x4856 =
    -15000000.0 * sc[14] * x1275 + 15000000.0 * sc[14] * x1288 +
    120000000.0 * sc[19] * x1227 - 120000000.0 * sc[19] * x1245 -
    sc[8] * x4852 - 120000000.0 * sc[8] * x793 - 15000000.0 * sc[8] * x938 +
    x4664;
  const amrex::Real x4858 =
    115.0 * exp(-3789.2214935095399 * invT + 1.9 * logT);
  const amrex::Real x4877 = 0.84 * x4674 * x483 + 6.0 * x4677;
  const amrex::Real x4885 =
    -15000000.0 * sc[14] * x1310 + 15000000.0 * sc[14] * x1322 +
    120000000.0 * sc[19] * x1254 - 120000000.0 * sc[19] * x1260 -
    1.79336511627907e+30 * x4658 * x4670 + 1.521e+16 * x4661 * x4683 -
    1.521e+16 * x4661 * x4692 + x4662 * x4877 +
    1.79336511627907e+30 * x4670 * x4689 - x4686 * x4877;
  const amrex::Real x4915 = 0.42 * x4674 * x483 + 3.0 * x4677;
  const amrex::Real x4920 =
    -15000000.0 * sc[14] * x1361 + 15000000.0 * sc[14] * x664 +
    120000000.0 * sc[19] * x1263 - 120000000.0 * sc[19] * x1279 -
    sc[6] * x4852 - 120000000.0 * sc[6] * x793 - 15000000.0 * sc[6] * x938 -
    8.9668255813953501e+29 * x4658 * x4670 +
    7605000000000000.0 * x4661 * x4683 - 7605000000000000.0 * x4661 * x4692 +
    x4662 * x4915 + 8.9668255813953501e+29 * x4670 * x4689 - x4686 * x4915;
  const amrex::Real x4930 =
    0.05707 * exp(
                g_RT[19] - g_RT[6] + g_RT[9] - g_RT_qss[8] -
                3156.6781445930101 * invT + 2.43 * logT);
  const amrex::Real x4935 = x4667 - x508 * x749;
  const amrex::Real x4936 =
    20000000.0 * sc[19] * x1180 + x1152 * x4627 + x1181 * x222 + x4637;
  const amrex::Real x4960 = 125900000.0 * exp(-4206.3881094616499 * invT);
  const amrex::Real x4963 = 70000000.0 * sc[6] * x591 + x1074 * x995 +
                            x2850 * x568 + x4647 * x991 + x4698 + x4936 -
                            x508 * x749 + x545 * x93;
  const amrex::Real x4969 =
    0.5 * exp(
            g_RT[12] + g_RT[19] - g_RT[6] - g_RT_qss[0] -
            3638.25649376812 * invT + 2.0 * logT);
  const amrex::Real x5002 =
    0.5916 * sc[6] * exp(-26923.098053884099 * invT + 2.433 * logT);
  const amrex::Real x5041 = -15000000.0 * sc[14] * x1463 +
                            15000000.0 * sc[14] * x397 +
                            120000000.0 * sc[19] * x1386 -
                            120000000.0 * sc[19] * x1392 + 15000000.0 * x65;
  const amrex::Real x5049 =
    0.04589 *
    exp(g_RT[15] - g_RT[6] - 3150.13632793755 * invT + 2.7 * logT - x190);
  const amrex::Real x5055 =
    173.4 * sc[6] * exp(-1726.0331637101899 * invT + 1.51 * logT);
  const amrex::Real x5079 =
    0.5916 *
    exp(g_RT[19] - g_RT[6] - 26923.098053884099 * invT + 2.433 * logT - x157);
  const amrex::Real x5100 =
    173.4 *
    exp(g_RT[19] - g_RT[6] - 1726.0331637101899 * invT + 1.51 * logT - x56);
  x4674 = 1.68 * x4674 * x483 + 12.0 * x4677;
  x4677 = 15000000.0 * sc[14] * x465 - 15000000.0 * sc[14] * x475 -
          120000000.0 * sc[19] * x1157 + 120000000.0 * sc[19] * x552 -
          3.5867302325581401e+30 * x4658 * x4670 + 3.042e+16 * x4661 * x4683 -
          3.042e+16 * x4661 * x4692 + x4662 * x4674 +
          3.5867302325581401e+30 * x4670 * x4689 - x4674 * x4686;
  const amrex::Real x5139 = 6.05 * exp(-2616.7266621845401 * invT + 2.0 * logT);
  const amrex::Real x5154 = sc_qss[2] * x279 + sc_qss[4] * x104;
  const amrex::Real x5155 = -x5154 - x708;
  const amrex::Real x5159 = exp(-4025.7333264377598 * invT);
  const amrex::Real x5164 =
    23000.0 * exp(-1648.03458051046 * invT + 1.05 * logT);
  const amrex::Real x5175 =
    4100.0 * exp(-1207.71999793133 * invT + 1.16 * logT);
  const amrex::Real x5198 = -15000000.0 * sc[14] * x28 +
                            15000000.0 * sc[14] * x597 +
                            120000000.0 * sc[19] * x1442 -
                            120000000.0 * sc[19] * x1448 + 120000000.0 * x194;
  const amrex::Real x5220 =
    -15000000.0 * sc[14] * x493 + 15000000.0 * sc[14] * x604 -
    120000000.0 * sc[19] * x1467 + 120000000.0 * sc[19] * x196 +
    5070000000000000.0 * x4661 * x526 *
      exp(g_RT[20] - g_RT[6] - g_RT[8] + x4681) +
    x4667;
  const amrex::Real x5342 =
    15000000.0 * sc[14] * x402 - 15000000.0 * sc[14] * x590 +
    120000000.0 * sc[19] * x1033 - 120000000.0 * sc[19] * x545 + x4667;
  amrex::Real x5349 =
    8.3490566037735897e+27 * x13 * exp(-2818.0133285064344 * invT - 8.7 * logT);
  amrex::Real x5350 = log(
    exp(-4970.0 * invT) + 0.4675 * exp(-0.0066225165562913899 * T) +
    0.5325 * exp(-0.00096339113680154098 * T));
  amrex::Real x5352 =
    -0.29097730287517898 * x5350 + 0.43429448190325198 * log(x5349) - 0.4;
  amrex::Real x5354 = -0.55155399201712996 * x5350 - 0.14 * x5352 + 0.75;
  amrex::Real x5357 = exp(
    M_LN10 * (0.43429448190325198 * x5350 /
              (((x5352) * (x5352)) / ((x5354) * (x5354)) + 1.0)));
  const amrex::Real x5359 = x13 * x5357 / ((x5349 + 1.0) * (x5349 + 1.0));
  const amrex::Real x5360 = -5948.0209898117882 * invT - 18.37 * logT;
  const amrex::Real x5362 = ((sc[12]) * (sc[12])) * x5359 * exp(x5360);
  const amrex::Real x5364 = x483 * x5352 / ((x5354) * (x5354));
  const amrex::Real x5365 =
    x483 * ((x5352) * (x5352)) / ((x5354) * (x5354) * (x5354));
  amrex::Real x5366 = 2.0 * x5364 + 0.28 * x5365;
  const amrex::Real x5370 =
    x5357 *
    exp(-2.0 * g_RT[12] + g_RT[7] - 3130.0076613053543 * invT - 9.67 * logT) /
    (x5349 + 1.0);
  const amrex::Real x5371 = x5370 * x728;
  x5350 = x13 * x5350 /
          ((((x5352) * (x5352)) / ((x5354) * (x5354)) + 1.0) *
           (((x5352) * (x5352)) / ((x5354) * (x5354)) + 1.0));
  x5352 = exp(M_LN10 * (0.43429448190325198 * x214 / x867)) *
          exp(-4159.08574287601 * invT - 8.07 * logT + x731 - x834) /
          (x209 + 1.0);
  x5354 = 1.99e+29 * x5352 * x728;
  amrex::Real x5379 =
    2.3703703703703702 * ((x1046) * (x1046)) /
    ((-0.18666666666666668 * x1046 - 0.73540532269 * x214 + 1) *
     (-0.18666666666666668 * x1046 - 0.73540532269 * x214 + 1) *
     (-0.18666666666666668 * x1046 - 0.73540532269 * x214 + 1));
  x1046 = 1.7777777777777777 * x1046 /
          ((-0.18666666666666668 * x1046 - 0.73540532268950665 * x214 + 1) *
           (-0.18666666666666668 * x1046 - 0.73540532268950665 * x214 + 1));
  const amrex::Real x5381 = x214 / ((x867) * (x867));
  amrex::Real x5382 = x5381 * (2.0 * x1046 * x483 + 0.28 * x483 * x5379);
  x5349 = x5357 * exp(-3130.0076613053543 * invT - 9.67 * logT) / (x5349 + 1.0);
  x5357 = ((sc[12]) * (sc[12])) * x5349;
  x731 =
    x728 * exp(-7523.0891537805601 * invT - 15.15 * logT + x731 - 2 * x834);
  x214 = exp(M_LN10 * (0.43429448190325198 * x214 / x867)) * x13 /
         ((x209 + 1.0) * (x209 + 1.0));
  x834 =
    sc[19] * x2777 * exp(-7523.0891537805601 * invT - 15.15 * logT - 2 * x834);
  x209 = x5359 * x728 * exp(-2.0 * g_RT[12] + g_RT[7] + x5360);
  x867 = sc[19] * x2777 * x500;
  const amrex::Real x5398 = 1.99e+29 * x13 * x867;
  const amrex::Real x5402 = x13 * x5354 * x5382 + 1.47778301886792e+66 * x209 +
                            7.6009596928982695e+46 * x214 * x731 -
                            7.6009596928982695e+46 * x214 * x834 -
                            1.77e+38 * x5350 * x5357 * x5366 +
                            1.77e+38 * x5350 * x5366 * x5371 - x5354 +
                            1.77e+38 * x5357 - 1.47778301886792e+66 * x5362 -
                            1.77e+38 * x5371 - x5382 * x5398 + 1.99e+29 * x867;
  const amrex::Real x5403 =
    x276 * x508 + x502 * x508 + x508 * x559 + x508 * x749 + x508 * x754 + x5402;
  amrex::Real x5414 = x5381 * (4.0 * x1046 * x483 + 0.56 * x483 * x5379);
  const amrex::Real x5425 =
    x13 * x5354 * x5414 + 2.9555660377358502e+66 * x209 +
    1.5201919385796501e+47 * x214 * x731 -
    1.5201919385796501e+47 * x214 * x834 -
    1.77e+38 * x5350 * x5357 * (4.0 * x5364 + 0.56 * x5365) +
    1.77e+38 * x5350 * x5371 * (4.0 * x5364 + 0.56 * x5365) -
    3.98e+29 * x5352 * x728 + 3.54e+38 * x5357 -
    2.9555660377358502e+66 * x5362 - 3.54e+38 * x5371 - x5398 * x5414 +
    3.98e+29 * x867;
  const amrex::Real x5440 = 6.0 * x1046 * x483 + 0.84 * x483 * x5379;
  const amrex::Real x5441 = x13 * x5354 * x5381;
  const amrex::Real x5454 =
    89.8 * exp(-2863.3028284288498 * invT + 1.92 * logT);
  const amrex::Real x5458 =
    3.54 * exp(-437.79849925010598 * invT + 2.12 * logT);
  const amrex::Real x5468 = 3.0 * x1046 * x483 + 0.42 * x483 * x5379;
  x5379 = 12.0 * x1046 * x483 + 1.68 * x483 * x5379;
  x1046 = 10.0 * sc[8] * x513;
  const amrex::Real x5538 = 30000000.0 * sc[8] * x292;
  const amrex::Real x5541 =
    527000000000000.0 * x171 * exp(-14599.8251249923 * invT + x3951);
  const amrex::Real x5544 = -100000000.0 * sc[14] * x1152;
  const amrex::Real x5546 = 100000000.0 * sc[14] * x1137 + x5544;
  const amrex::Real x5548 = 12.0 * sc[17] + x164;
  const amrex::Real x5550 =
    (1.0 / ((86123348.0176211 * x5548 *
               exp(-909.31251510912796 * invT - 2.79 * logT) +
             1.0)));
  amrex::Real x5552 = -g_RT[21] + g_RT[8];
  const amrex::Real x5555 =
    refC * exp(-g_RT[14] - 2108.9810463875801 * invT - 2.79 * logT - x5552);
  const amrex::Real x5558 =
    1.3482120080323927e-16 * x5548 /
    ((x5548 * exp(-909.31251510912796 * invT - 2.79 * logT) +
      1.1611253196930952e-8) *
     (x5548 * exp(-909.31251510912796 * invT - 2.79 * logT) +
      1.1611253196930952e-8));
  const amrex::Real x5561 =
    refC * sc[21] *
    exp(-g_RT[14] - 3018.29356149671 * invT - 5.58 * logT - x5552);
  const amrex::Real x5564 =
    sc[14] * sc[8] * exp(-3018.29356149671 * invT - 5.58 * logT);
  const amrex::Real x5567 =
    sc[14] * sc[8] * exp(-2108.9810463875801 * invT - 2.79 * logT);
  const amrex::Real x5569 =
    1173000000000.0 * sc[21] * x5550 * x5555 - 1173000000000.0 * x5550 * x5567 -
    1.0102268722467e+20 * x5558 * x5561 + 1.0102268722467e+20 * x5558 * x5564;
  amrex::Real x5571 = exp(g_RT[19] - 8554.6833186802305 * invT - logT - x201);
  const amrex::Real x5574 =
    -187000000000.0 * sc[19] * x171 * x5571 + 187000000000.0 * x194 * x497;
  const amrex::Real x5576 =
    -x1137 * x5541 + x1152 * x5541 + x5546 + x5569 + x5574;
  amrex::Real x5579 = -3570.32224388449 * invT - 5.11 * logT;
  x619 =
    3320987654320990.0 * x13 * exp(2269.50716277929 * invT - 0.5 * logT + x619);
  amrex::Real x5583 =
    -0.29097730287517898 * x624 + 0.43429448190325198 * log(x619) - 0.4;
  amrex::Real x5584 = -0.14 * x5583 - 0.55155399201712996 * x624 + 0.75;
  amrex::Real x5588 = exp(
    M_LN10 * (0.43429448190325198 * x624 /
              (((x5583) * (x5583)) / ((x5584) * (x5584)) + 1.0)));
  const amrex::Real x5591 = x207 * x5588 * exp(x5579) / (x619 + 1.0);
  const amrex::Real x5594 = x13 * x5588 / ((x619 + 1.0) * (x619 + 1.0));
  const amrex::Real x5596 =
    sc[8] * x207 * exp(-4871.1373249896797 * invT - 10.72 * logT);
  const amrex::Real x5599 =
    x969 * exp(-4871.1373249896797 * invT - 10.72 * logT + x970);
  x970 = x5588 * exp(x5579 + x970) / (x619 + 1.0);
  const amrex::Real x5603 = x969 * x970;
  amrex::Real x5606 = ((x5583) * (x5583)) / ((x5584) * (x5584) * (x5584));
  amrex::Real x5607 = x5583 / ((x5584) * (x5584));
  x624 = x624 / ((((x5583) * (x5583)) / ((x5584) * (x5584)) + 1.0) *
                 (((x5583) * (x5583)) / ((x5584) * (x5584)) + 1.0));
  x5583 = 2.69e+21 * sc[8] * x13 * x5591 * x624;
  x5584 = 2.69e+21 * x13 * x5603 * x624;
  const amrex::Real x5617 = -2.69e+21 * sc[8] * x5591 +
                            x5583 * (0.28 * x483 * x5606 + 2.0 * x483 * x5607) -
                            x5584 * (0.28 * x483 * x5606 + 2.0 * x483 * x5607) +
                            8.9334567901234601e+36 * x5594 * x5596 -
                            8.9334567901234601e+36 * x5594 * x5599 +
                            2.69e+21 * x5603;
  const amrex::Real x5619 = -200000000.0 * sc[14] * x1074 -
                            100000000.0 * sc[19] * x1074 + x1046 * x568 -
                            x1074 * x762 - 10.0 * x1218 * x545 -
                            10.0 * x476 * x545 + x5538 * x568 + x5576 + x5617;
  const amrex::Real x5621 =
    4.08 *
    exp(-g_RT[10] + g_RT[8] - 956.11166502896697 * invT + 2.0 * logT - x593);
  const amrex::Real x5622 = sc[8] * x5621;
  x5579 = 2.69e+21 * sc[8] * x13 * x5588 * exp(x5579) / (x619 + 1.0);
  x619 =
    -40000000.0 * sc[13] * x591 + x1052 * x591 + x5579 * x991 + x5622 * x991;
  x5588 = -14000000.0 * sc[21] * x591;
  const amrex::Real x5640 = x545 * x998;
  const amrex::Real x5644 = -30200000.0 * sc[15] * x545;
  const amrex::Real x5649 = -x1102 * x545;
  const amrex::Real x5652 = -48000000.0 * sc[14] * x568;
  const amrex::Real x5656 = 800000.0 * sc[15] * x171 * x284;
  const amrex::Real x5659 = -30000000.0 * sc[14] * x545;
  const amrex::Real x5663 = -x1038 * x545 - x491 * x545;
  const amrex::Real x5665 =
    8480000.0 * sc[12] * x1033 + 50000000.0 * sc[12] * x1067 +
    30000000.0 * sc[14] * x1033 + 200000000.0 * sc[14] * x1067 +
    48000000.0 * sc[14] * x904 + 30200000.0 * sc[15] * x1033 +
    100000000.0 * sc[19] * x1067 + 60000000.0 * sc[24] * x1033 + x1033 * x1038 +
    x1033 * x1102 + 10.0 * x1033 * x1218 + 10.0 * x1033 * x476 + x1033 * x491 -
    x1033 * x998 - x1046 * x904 + x1067 * x762 + x2762 + x3776 + x4160 -
    x5538 * x904 + x5640 + x5644 + x5649 + x5652 + x5656 * x568 - x5656 * x904 +
    x5659 + x5663;
  const amrex::Real x5666 =
    40000000.0 * sc[13] * x1083 + 15000000.0 * sc[14] * x1083 +
    120000000.0 * sc[19] * x1033 + 14000000.0 * sc[21] * x1083 - x1052 * x1083 -
    x1104 * x5579 - x1104 * x5622 + x5588 + x5665;
  const amrex::Real x5669 = x1181 * x2421 - x508 * x530;
  const amrex::Real x5700 =
    30000000.0 * sc[14] * x1062 - 30000000.0 * sc[14] * x1106;
  const amrex::Real x5703 =
    -48000000.0 * sc[14] * x1127 + 48000000.0 * sc[14] * x1159;
  const amrex::Real x5737 =
    30000000.0 * sc[14] * x1121 - 30000000.0 * sc[14] * x1156;
  const amrex::Real x5750 = -5.38e+21 * sc[8] * x5591 +
                            x5583 * (0.56 * x483 * x5606 + 4.0 * x483 * x5607) -
                            x5584 * (0.56 * x483 * x5606 + 4.0 * x483 * x5607) +
                            1.7866913580246899e+37 * x5594 * x5596 -
                            1.7866913580246899e+37 * x5594 * x5599 +
                            5.38e+21 * x5603;
  const amrex::Real x5790 = x5656 * x568 + x5659;
  const amrex::Real x5829 = 2346000000000.0 * sc[21] * x5550 * x5555 -
                            2346000000000.0 * x5550 * x5567 -
                            2.0204537444933901e+20 * x5558 * x5561 +
                            2.0204537444933901e+20 * x5558 * x5564;
  const amrex::Real x5835 =
    30000000.0 * sc[14] * x1227 - 30000000.0 * sc[14] * x1245;
  const amrex::Real x5839 = -374000000000.0 * sc[19] * x171 * x5571 +
                            x1038 * x1227 - x1038 * x1245 + x1227 * x491 -
                            x1245 * x491 + 374000000000.0 * x194 * x497;
  const amrex::Real x5845 = 0.84 * x483 * x5606 + 6.0 * x483 * x5607;
  const amrex::Real x5878 =
    30000000.0 * sc[14] * x1254 - 30000000.0 * sc[14] * x1260;
  const amrex::Real x5880 =
    -48000000.0 * sc[14] * x1268 + 48000000.0 * sc[14] * x1284;
  const amrex::Real x5883 = 2244000000000.0 * sc[17] * x1254 * x497 +
                            x1038 * x1254 - x1038 * x1260 - x1260 * x491;
  const amrex::Real x5886 = 1119000.0 * sc[13] * exp(-24003.4349588851 * invT);
  const amrex::Real x5891 = 0.42 * x483 * x5606 + 3.0 * x483 * x5607;
  const amrex::Real x5902 =
    ((refCinv) * (refCinv)) * exp(
                                2.0 * g_RT[10] - g_RT[25] + g_RT[8] -
                                49667.484914925801 * invT - 7.87 * logT);
  const amrex::Real x5921 = exp(
    -g_RT[13] + g_RT[15] + 2.0 * g_RT[8] - g_RT_qss[6] -
    429.747032597231 * invT);
  const amrex::Real x5923 =
    3.76e+54 * refCinv *
    exp(
      g_RT[26] - g_RT[28] + g_RT[8] - 36634.173270583597 * invT - 12.06 * logT);
  const amrex::Real x5929 = 100000000.0 * sc[14] * x1286 -
                            100000000.0 * sc[14] * x523 -
                            100000000.0 * sc[26] * x1093 - sc[26] * x5923;
  const amrex::Real x5940 =
    30200000.0 * sc[15] * x1263 - 30200000.0 * sc[15] * x1279 -
    30200000.0 * sc[17] * x800 - 12000000.0 * sc[17] * x935;
  x201 = 12040.0 * exp(365.83851604003098 * invT + 0.807 * logT - x157 - x201);
  const amrex::Real x5946 =
    0.157 * exp(-9029.0203800344207 * invT + 2.18 * logT);
  const amrex::Real x5948 =
    -sc[16] * x201 - sc[16] * x5946 + x1102 * x1263 - x1102 * x1279;
  const amrex::Real x5959 = 1173000000000.0 * x5548 * x5550 *
                            exp(-2108.9810463875801 * invT - 2.79 * logT);
  const amrex::Real x5961 =
    -sc[14] * x5959 + 2052750000000.0 * sc[21] * x5550 * x5555 -
    2052750000000.0 * x5550 * x5567 - 1.7678970264317202e+20 * x5558 * x5561 +
    1.7678970264317202e+20 * x5558 * x5564;
  const amrex::Real x5967 =
    5757000.0 * exp(-166.98238621397999 * invT - 0.664 * logT);
  const amrex::Real x5971 =
    0.07046 * exp(178.97907152676501 * invT + 2.053 * logT);
  const amrex::Real x5973 = -sc[15] * x5967 - sc[15] * x5971 -
                            30000000.0 * sc[15] * x767 + x1306 * x5656 -
                            x1314 * x5656 - 800000.0 * x284 * x318 * x868;
  const amrex::Real x5975 =
    4.83e-10 * exp(
                 -g_RT[10] + g_RT[12] - g_RT[15] + g_RT[8] +
                 1006.43333160944 * invT + 4.0 * logT);
  amrex::Real x5980 = 1500.0 * exp(
                                 g_RT[12] - g_RT[19] - g_RT[22] + g_RT[8] -
                                 1353.6528310147 * invT + 1.43 * logT);
  const amrex::Real x5984 =
    -sc[12] * x5975 - sc[12] * x5980 - 48000000.0 * sc[12] * x842 -
    48000000.0 * sc[14] * x1306 + 48000000.0 * sc[14] * x1314 + x2421 * x701 -
    7.8e+41 * x723 *
      exp(
        g_RT[12] + g_RT[8] - g_RT_qss[7] - 23600.8616262414 * invT -
        9.147 * logT);
  const amrex::Real x5988 =
    30000000.0 * sc[14] * x1263 - 30000000.0 * sc[14] * x1279 -
    2244000000000.0 * sc[17] * x423 * x5571 -
    327250000000.0 * sc[19] * x171 * x5571 + x1038 * x1263 - x1038 * x1279 +
    x1263 * x491 - x1279 * x491 - 187000000000.0 * x164 * x423 * x5571 +
    327250000000.0 * x194 * x497;
  const amrex::Real x6014 =
    -48000000.0 * sc[14] * x1351 + 48000000.0 * sc[14] * x1355;
  const amrex::Real x6020 =
    30000000.0 * sc[14] * x1298 - 30000000.0 * sc[14] * x1304;
  const amrex::Real x6024 = x1152 * x5541 + x5569 + x5574 + x5617 + x5669;
  const amrex::Real x6044 = exp(-956.11166502896697 * invT + 2.0 * logT);
  const amrex::Real x6061 =
    30000000.0 * sc[14] * x1317 - 30000000.0 * sc[14] * x1328;
  const amrex::Real x6065 =
    4.83e-10 * exp(1006.43333160944 * invT + 4.0 * logT);
  const amrex::Real x6067 =
    48000000.0 * sc[14] * x1113 - 48000000.0 * sc[14] * x331;
  const amrex::Real x6071 =
    -200000000.0 * sc[14] * x1074 - 100000000.0 * sc[19] * x1074 +
    x1046 * x568 - x1074 * x762 - 10.0 * x1218 * x545 + x4698 -
    10.0 * x476 * x545 + x5538 * x568 + x5544 + x6024 + x619;
  const amrex::Real x6105 =
    30000000.0 * sc[14] * x1343 - 30000000.0 * sc[14] * x203;
  const amrex::Real x6107 = x4667 + x5569 + x5574 + x5617;
  const amrex::Real x6112 = -sc[8] * x5975 - sc[8] * x5980 -
                            48000000.0 * sc[8] * x842 -
                            7.8e+41 * x171 *
                              exp(
                                g_RT[12] + g_RT[8] - g_RT_qss[7] -
                                23600.8616262414 * invT - 9.147 * logT) +
                            x2421 * x691;
  const amrex::Real x6113 = 1119000.0 * sc[8] * exp(-24003.4349588851 * invT);
  const amrex::Real x6149 =
    30000000.0 * sc[14] * x267 - 30000000.0 * sc[14] * x621;
  const amrex::Real x6151 =
    48000000.0 * sc[14] * x1418 - 48000000.0 * sc[14] * x298;
  const amrex::Real x6154 =
    1119000.0 * exp(-24003.4349588851 * invT - x45 - x5552);
  const amrex::Real x6177 =
    620.0 * exp(431.75989926045003 * invT + 1.45 * logT);
  const amrex::Real x6188 = 48000000.0 * sc[14] * x1420 -
                            48000000.0 * sc[14] * x1422 + 48000000.0 * x868;
  const amrex::Real x6194 = 30000000.0 * sc[14] * x1386 -
                            30000000.0 * sc[14] * x1392 + 30000000.0 * x194;
  const amrex::Real x6222 =
    0.157 *
    exp(g_RT[15] - g_RT[16] - 9029.0203800344207 * invT + 2.18 * logT - x5552);
  const amrex::Real x6235 = 28000000.0 * x171 * x927;
  const amrex::Real x6239 =
    30000000.0 * sc[14] * x1400 - 30000000.0 * sc[14] * x1401 - sc[19] * x6235 +
    x1038 * x1400 - x1038 * x1401 + x1400 * x491 - x1401 * x491;
  const amrex::Real x6246 = -sc[8] * x5967 - sc[8] * x5971 -
                            30000000.0 * sc[8] * x767 + x1445 * x5656 -
                            x1450 * x5656 - 800000.0 * x171 * x284 * x868;
  const amrex::Real x6277 =
    -sc[8] * x201 - sc[8] * x5946 + x1102 * x1155 - x1102 * x447;
  const amrex::Real x6282 =
    -48000000.0 * sc[14] * x1461 + 48000000.0 * sc[14] * x1471;
  const amrex::Real x6285 = 30000000.0 * sc[14] * x1155 -
                            30000000.0 * sc[14] * x447 + x1038 * x1155 -
                            x1038 * x447 + x1155 * x491 - x447 * x491;
  x624 = x624 * (1.68 * x483 * x5606 + 12.0 * x483 * x5607);
  const amrex::Real x6321 =
    -30200000.0 * sc[15] * x1157 + 30200000.0 * sc[15] * x552 -
    30200000.0 * sc[8] * x800 - 12000000.0 * sc[8] * x935;
  const amrex::Real x6326 = 14076000000000.0 * sc[21] * x5550 * x5555 -
                            14076000000000.0 * x5550 * x5567 -
                            1.2122722466960399e+21 * x5558 * x5561 +
                            1.2122722466960399e+21 * x5558 * x5564;
  const amrex::Real x6334 =
    -30000000.0 * sc[14] * x1157 + 30000000.0 * sc[14] * x552;
  const amrex::Real x6336 = -2244000000000.0 * sc[19] * x171 * x5571 -
                            x1038 * x1157 + x1038 * x552 - x1157 * x491 +
                            2244000000000.0 * x194 * x497 + x491 * x552;
  const amrex::Real x6361 =
    -48000000.0 * sc[14] * x1494 + 48000000.0 * sc[14] * x1502;
  const amrex::Real x6370 =
    30000000.0 * sc[14] * x1429 - 30000000.0 * sc[14] * x1438;
  const amrex::Real x6410 =
    5757000.0 *
    exp(
      -g_RT[15] + g_RT[19] - 166.98238621397999 * invT - 0.664 * logT - x5552);
  x5552 = 0.07046 * exp(
                      -g_RT[15] + g_RT[19] + 178.97907152676501 * invT +
                      2.053 * logT - x5552);
  const amrex::Real x6415 = 30000000.0 * sc[14] * x1442 -
                            30000000.0 * sc[14] * x1448 + sc[21] * x5552 +
                            sc[21] * x6410 + x1517 * x5656 - x1524 * x5656;
  const amrex::Real x6416 = 1500.0 * exp(-1353.6528310147 * invT + 1.43 * logT);
  const amrex::Real x6419 = -2244000000000.0 * sc[17] * x171 * x5571 +
                            x1038 * x1442 - x1038 * x1448 + x1442 * x491 -
                            x1448 * x491 - 187000000000.0 * x164 * x171 * x5571;
  const amrex::Real x6445 =
    -30000000.0 * sc[14] * x1467 + 30000000.0 * sc[14] * x196;
  const amrex::Real x6492 = 4222800000000.0 * sc[21] * x5550 * x5555 +
                            1173000000000.0 * x5548 * x5550 * x5555 -
                            4222800000000.0 * x5550 * x5567 -
                            3.6368167400881101e+20 * x5558 * x5561 +
                            3.6368167400881101e+20 * x5558 * x5564;
  x497 = -30000000.0 * sc[14] * x1470 + 30000000.0 * sc[14] * x197 -
         673200000000.0 * sc[19] * x171 * x5571 - x1038 * x1470 + x1038 * x197 -
         x1470 * x491 + 673200000000.0 * x194 * x497 + x197 * x491;
  x5571 = 30000000.0 * sc[14] * x1484 - 30000000.0 * sc[14] * x1490;
  const amrex::Real x6553 =
    30000000.0 * sc[14] * x1499 - 30000000.0 * sc[14] * x1513;
  const amrex::Real x6564 =
    48000000.0 * sc[14] * x348 - 48000000.0 * sc[14] * x468;
  const amrex::Real x6596 =
    -48000000.0 * sc[14] * x217 + 48000000.0 * sc[14] * x368;
  const amrex::Real x6602 =
    -30000000.0 * sc[14] * x1492 + 30000000.0 * sc[14] * x646;
  const amrex::Real x6655 =
    48000000.0 * sc[14] * x371 - 48000000.0 * sc[14] * x555;
  const amrex::Real x6661 =
    30000000.0 * sc[14] * x549 - 30000000.0 * sc[14] * x550;
  amrex::Real x6700 = -0.29097730287517898 * x677 +
                      0.43429448190325198 * log(6.6e+55 * x11) - 0.4;
  amrex::Real x6702 = -0.14 * x6700 - 0.55155399201712996 * x677 + 0.75;
  const amrex::Real x6707 =
    exp(
      M_LN10 * (0.43429448190325198 * x677 /
                (((x6700) * (x6700)) / ((x6702) * (x6702)) + 1.0))) /
    (6.6e+55 * x11 + 1.0);
  const amrex::Real x6708 = 6.6e+63 * sc[19] * x11 * x6707;
  const amrex::Real x6711 = -1000000.0 * sc[16] * x1152;
  const amrex::Real x6715 =
    0.3985 *
    exp(-g_RT[9] + g_RT_qss[8] - 532.403232421393 * invT + 2.286 * logT - x56);
  const amrex::Real x6716 = sc[17] * x6715;
  const amrex::Real x6719 = -x1152 * x6716;
  const amrex::Real x6721 = -x1152 * x3785;
  const amrex::Real x6723 = -x1152 * x4627;
  amrex::Real x6729 =
    0.28 * x1037 * ((x6700) * (x6700)) / ((x6702) * (x6702) * (x6702)) +
    2.0 * x1037 * x6700 / ((x6702) * (x6702));
  amrex::Real x6730 =
    x677 / ((((x6700) * (x6700)) / ((x6702) * (x6702)) + 1.0) *
            (((x6700) * (x6700)) / ((x6702) * (x6702)) + 1.0));
  const amrex::Real x6734 = 6.6e+63 * sc[19] * x11 * x6707 * x6730 * x942;
  x677 = 2.295684113865932e-112 *
         exp(
           M_LN10 * (0.43429448190325198 * x677 /
                     (((x6700) * (x6700)) / ((x6702) * (x6702)) + 1.0))) /
         ((x11 + 1.5151515151515152e-56) * (x11 + 1.5151515151515152e-56));
  const amrex::Real x6738 = x631 * x677 * x942;
  x1084 = x1084 * x6707 * x942;
  const amrex::Real x6742 = sc[9] * x1065 * x6707;
  const amrex::Real x6744 = 6.6e+63 * x6730 * x6742 * x7;
  const amrex::Real x6749 = 4.356e+119 * x1073 * x677 + 6.6e+63 * x1084 -
                            x6729 * x6734 + x6729 * x6744 - 4.356e+119 * x6738 -
                            6.6e+63 * x6742;
  const amrex::Real x6750 = -x1152 * x6708 + x6749;
  const amrex::Real x6751 = 1000000.0 * sc[16] * x1137 + x1137 * x3785 +
                            x1137 * x4627 + x1137 * x6708 + x1137 * x6716 +
                            x6711 + x6719 + x6721 + x6723 + x6750;
  const amrex::Real x6755 = -x2429 * x545 + x2434 * x545;
  const amrex::Real x6759 = x1033 * x2429 - x1033 * x2434;
  amrex::Real x6772 =
    0.56 * x1037 * ((x6700) * (x6700)) / ((x6702) * (x6702) * (x6702)) +
    4.0 * x1037 * x6700 / ((x6702) * (x6702));
  const amrex::Real x6778 = 8.712e+119 * x1073 * x677 + 1.32e+64 * x1084 -
                            x6734 * x6772 - 8.712e+119 * x6738 -
                            1.32e+64 * x6742 + x6744 * x6772;
  const amrex::Real x6814 =
    0.42 * x1037 * ((x6700) * (x6700)) / ((x6702) * (x6702) * (x6702)) +
    3.0 * x1037 * x6700 / ((x6702) * (x6702));
  const amrex::Real x6846 =
    0.3985 * exp(-532.403232421393 * invT + 2.286 * logT);
  const amrex::Real x6853 = 13900000.0 * exp(-2470.7938291011701 * invT);
  const amrex::Real x6858 =
    -sc[14] * x6853 - 13900000.0 * sc[14] * exp(-2279.5714960953801 * invT) +
    x1298 * x2429 - x1304 * x2429;
  x186 =
    1.93 *
    exp(-g_RT[11] + g_RT[12] - 2094.8909797450501 * invT + 2.17 * logT - x186);
  const amrex::Real x6875 =
    1.93 * exp(-2094.8909797450501 * invT + 2.17 * logT);
  const amrex::Real x6893 =
    -sc[9] * x186 - sc[9] * x3968 + x3785 * x671 - x3785 * x680;
  const amrex::Real x6926 =
    -sc[9] * x6853 - 13900000.0 * sc[9] * exp(-2279.5714960953801 * invT) +
    x1386 * x2429 - x1392 * x2429;
  x1037 = x6730 *
          (1.68 * x1037 * ((x6700) * (x6700)) / ((x6702) * (x6702) * (x6702)) +
           12.0 * x1037 * x6700 / ((x6702) * (x6702)));
  x6700 =
    13900000.0 * exp(g_RT[28] - g_RT[9] - 2470.7938291011701 * invT - x190);
  x6702 = 12000000.0 * sc[10] * exp(-3331.2943276272399 * invT);
  x6730 = -30110000.0 * sc[15] * x568;
  const amrex::Real x7108 = 1.34 * sc[13] * exp(x2463);
  const amrex::Real x7111 = -x568 * x7108;
  const amrex::Real x7113 = 2.565e+21 * x2459 * x71;
  amrex::Real x7114 = x2456 * x71 / ((x295 + 1.0) * (x295 + 1.0));
  amrex::Real x7115 = -17385.753358887094 * invT - 8.42 * logT;
  amrex::Real x7116 = sc[10] * x423 * exp(x7115 + x849);
  amrex::Real x7121 =
    ((x2451) * (x2451)) * x453 / ((x2452) * (x2452) * (x2452));
  amrex::Real x7122 = x2451 * x453 / ((x2452) * (x2452));
  x299 = x299 / ((((x2451) * (x2451)) / ((x2452) * (x2452)) + 1.0) *
                 (((x2451) * (x2451)) / ((x2452) * (x2452)) + 1.0));
  x849 =
    x2456 * exp(-18014.512518476698 * invT - 3.4 * logT + x849) / (x295 + 1.0);
  x295 = 2.565e+21 * x2459 * x299 * x71 * x868;
  x2451 = sc[10] * x299 * x848 * x849 * (0.28 * x7121 + 2.0 * x7122) -
          2.565e+21 * sc[10] * x423 * x849 + 2.565e+21 * x2459 * x868 -
          x295 * (0.28 * x7121 + 2.0 * x7122) +
          1.70446243523316e+34 * x7114 * x7116 -
          1.70446243523316e+34 * x7114 * x868 * exp(x7115);
  x2452 = x2451 - x568 * x7113;
  x2456 = 30110000.0 * sc[15] * x904 + 90000000.0 * sc[19] * x904 -
          10.0 * x1033 * x476 - x1046 * x568 + x1046 * x904 + x2452 + x4710 +
          10.0 * x476 * x545 + x6730 + x7108 * x904 + x7111 + x7113 * x904;
  const amrex::Real x7148 = -20000000.0 * sc[10] * x1083 +
                            20000000.0 * sc[10] * x591 + x1067 * x2442 -
                            x1074 * x2442 + x1104 * x5622 - x1104 * x6702 +
                            x2456 - x5622 * x991 + x6702 * x991;
  const amrex::Real x7164 =
    sc[10] * x299 * x848 * x849 * (0.84 * x7121 + 6.0 * x7122) -
    7.695e+21 * sc[10] * x423 * x849 + 7.695e+21 * x2459 * x868 -
    x295 * (0.84 * x7121 + 6.0 * x7122) +
    5.1133873056994796e+34 * x7114 * x7116 -
    5.1133873056994796e+34 * x7114 * x868 * exp(x7115);
  const amrex::Real x7180 =
    sc[10] * x299 * x848 * x849 * (0.56 * x7121 + 4.0 * x7122) -
    5.13e+21 * sc[10] * x423 * x849 + 5.13e+21 * x2459 * x868 -
    x295 * (0.56 * x7121 + 4.0 * x7122) +
    3.4089248704663201e+34 * x7114 * x7116 -
    3.4089248704663201e+34 * x7114 * x868 * exp(x7115);
  const amrex::Real x7190 = -x1074 * x2442 - x5622 * x991;
  const amrex::Real x7192 = 20000000.0 * sc[10] * x591 - x1046 * x568 +
                            10.0 * x476 * x545 + x6702 * x991;
  const amrex::Real x7242 =
    -x1356 * x2442 - x1362 * x5622 + x207 * x5621 + x2442 * x333 + x5622 * x650;
  const amrex::Real x7245 =
    sc[10] * x299 * x848 * x849 * (0.42 * x7121 + 3.0 * x7122) -
    3.8475e+21 * sc[10] * x423 * x849 - x1306 * x7113 + x1314 * x7113 -
    2.565e+21 * x2459 * x299 * x71 * x868 * (0.42 * x7121 + 3.0 * x7122) +
    3.8475e+21 * x2459 * x868 + 2.5566936528497398e+34 * x7114 * x7116 -
    2.5566936528497398e+34 * x7114 * x868 * exp(x7115);
  const amrex::Real x7261 =
    6.87e+49 * exp(-21147.6803804433 * invT - 12.5 * logT);
  const amrex::Real x7269 =
    2.68e+47 * exp(-17979.931469202598 * invT - 12.82 * logT);
  const amrex::Real x7280 = 1.34 * exp(g_RT[10] - g_RT_qss[4] - x157 + x2463);
  const amrex::Real x7285 =
    2.18e-10 * exp(503.21666580471998 * invT + 4.5 * logT);
  const amrex::Real x7292 = -20.4 * sc[14] * x6044 + x1124 * x5622 -
                            x1189 * x2442 - x1407 * x5622 + x2442 * x308;
  const amrex::Real x7337 = -20.4 * sc[10] * x6044 + x1475 * x2442 -
                            x1477 * x2442 - x1480 * x5622 + x1489 * x5622;
  x7114 = sc[10] * x299 * x848 * x849 * (1.68 * x7121 + 12.0 * x7122) -
          1.539e+22 * sc[10] * x423 * x849 - x1476 * x7113 +
          1.539e+22 * x2459 * x868 - x295 * (1.68 * x7121 + 12.0 * x7122) +
          x7113 * x99 + 1.0226774611399e+35 * x7114 * x7116 -
          1.0226774611399e+35 * x7114 * x868 * exp(x7115);
  x7115 = 2.18e-10 * exp(
                       -g_RT[10] - g_RT[15] + g_RT[19] + g_RT[22] +
                       503.21666580471998 * invT + 4.5 * logT);
  x7116 = 12000000.0 * exp(
                         -g_RT[10] + g_RT[19] + g_RT[23] - g_RT_qss[0] -
                         3331.2943276272399 * invT);
  x7121 = -2.565e+21 * refCinv * sc[10] * x71 * x849 - x1517 * x7113 +
          x1524 * x7113 + x2451;
  x7122 =
    x2441 * x388 - x2442 * x362 + x2442 * x455 - x5622 * x581 + x5622 * x599;
  x299 = 2.68e+47 * refC *
         exp(
           -g_RT[10] - g_RT[12] + g_RT[24] - 17979.931469202598 * invT -
           12.82 * logT);
  x295 =
    6.87e+49 * refC *
    exp(
      -g_RT[10] - g_RT[23] + g_RT[26] - 21147.6803804433 * invT - 12.5 * logT);
  const amrex::Real x7536 =
    13800000.0 * sc[12] * exp(-23.147966627017102 * invT);
  const amrex::Real x7543 =
    x13 * exp(-7341.9311540908602 * invT - 24.63 * logT);
  amrex::Real x7545 = log(
    exp(-4730.0 * invT) + 0.431 * exp(-0.0065789473684210497 * T) +
    0.569 * exp(-0.0026109660574412498 * T));
  amrex::Real x7546 = -0.29097730287517898 * x7545 +
                      0.43429448190325198 * log(1.1e+83 * x7543) - 0.4;
  amrex::Real x7548 = -0.55155399201712996 * x7545 - 0.14 * x7546 + 0.75;
  const amrex::Real x7553 =
    exp(
      M_LN10 * (0.43429448190325198 * x7545 /
                (((x7546) * (x7546)) / ((x7548) * (x7548)) + 1.0))) /
    (1.1e+83 * x7543 + 1.0);
  const amrex::Real x7555 = 1.1e+91 * sc[19] * sc[27] * x7543 * x7553;
  const amrex::Real x7557 = x483 * x7546 / ((x7548) * (x7548));
  const amrex::Real x7558 =
    x483 * ((x7546) * (x7546)) / ((x7548) * (x7548) * (x7548));
  const amrex::Real x7559 =
    x7545 / ((((x7546) * (x7546)) / ((x7548) * (x7548)) + 1.0) *
             (((x7546) * (x7546)) / ((x7548) * (x7548)) + 1.0));
  amrex::Real x7560 = x7559 * (2.0 * x7557 + 0.28 * x7558);
  const amrex::Real x7562 =
    sc[19] * sc[27] * exp(-7341.9311540908602 * invT - 24.63 * logT);
  x7545 = 8.2644628099173555e-167 *
          exp(
            M_LN10 * (0.43429448190325198 * x7545 /
                      (((x7546) * (x7546)) / ((x7548) * (x7548)) + 1.0))) /
          ((x7543 + 9.0909090909090904e-84) * (x7543 + 9.0909090909090904e-84));
  x7546 = sc[19] * sc[27] * x13 * exp(-14683.8623081817 * invT - 49.26 * logT);
  x7548 =
    sc[11] * x526 *
    exp(
      g_RT[11] - g_RT[19] - g_RT[27] - 14683.8623081817 * invT - 49.26 * logT);
  const amrex::Real x7574 = exp(
    g_RT[11] - g_RT[19] - g_RT[27] - 7341.9311540908602 * invT - 24.63 * logT);
  const amrex::Real x7577 = 1.1e+91 * sc[11] * x526 * x7553 * x7574;
  const amrex::Real x7580 = refC * sc[11] * x7553 * x7574;
  const amrex::Real x7582 =
    -1.21e+174 * x7545 * x7546 + 1.21e+174 * x7545 * x7548 +
    1.1e+91 * x7553 * x7562 - x7555 * x7560 + x7560 * x7577 - 1.1e+91 * x7580;
  const amrex::Real x7583 = -x1152 * x7536 + x7582;
  const amrex::Real x7584 = x1137 * x7536 + x7583;
  const amrex::Real x7598 =
    -2.2e+91 * refC * sc[11] * x7553 * x7574 - 2.42e+174 * x7545 * x7546 +
    2.42e+174 * x7545 * x7548 + 2.2e+91 * x7553 * x7562 -
    x7555 * x7559 * (4.0 * x7557 + 0.56 * x7558) +
    x7559 * x7577 * (4.0 * x7557 + 0.56 * x7558);
  const amrex::Real x7609 = x7559 * (3.0 * x7557 + 0.42 * x7558);
  const amrex::Real x7620 =
    300000000.0 * sc[13] * exp(-21634.2908962765 * invT);
  const amrex::Real x7625 =
    16200000.0 * sc[15] * exp(-1393.9101642790699 * invT);
  const amrex::Real x7635 =
    300000000.0 * sc[11] * exp(-21634.2908962765 * invT);
  const amrex::Real x7641 =
    16200000.0 * sc[11] * exp(-1393.9101642790699 * invT);
  const amrex::Real x7645 =
    300000000.0 * exp(-g_RT[11] + g_RT[27] - 21634.2908962765 * invT - x157);
  const amrex::Real x7650 =
    16200000.0 * exp(-g_RT[11] + g_RT[27] - 1393.9101642790699 * invT - x56);
  const amrex::Real x7652 = x7559 * (12.0 * x7557 + 1.68 * x7558);
  const amrex::Real x7676 = 4.92 * sc[2] * exp(x3770);
  amrex::Real x7679 =
    128000.0 * x13 * exp(-618.95649893980499 * invT - 2.34 * logT);
  amrex::Real x7680 =
    -0.29097730287517898 * x602 + 0.43429448190325198 * log(x7679) - 0.4;
  amrex::Real x7682 = -0.55155399201712996 * x602 - 0.14 * x7680 + 0.75;
  amrex::Real x7685 = exp(
    M_LN10 * (0.43429448190325198 * x602 /
              (((x7680) * (x7680)) / ((x7682) * (x7682)) + 1.0)));
  const amrex::Real x7688 =
    x7685 * exp(-618.95649893980499 * invT - 3.14 * logT) / (x7679 + 1.0);
  const amrex::Real x7689 = 3200000000000000.0 * x2638 * x7688;
  const amrex::Real x7692 =
    56.0 *
    exp(-g_RT[12] + g_RT_qss[0] - 2727.4343286615799 * invT + 1.6 * logT - x56);
  const amrex::Real x7693 = sc[17] * x7692;
  x3806 = -sc[2] * x3806 * x3814 + 2.477e+21 * x13 * x3806 * x3812 * x3827 -
          4.83112519685039e+32 * x3794 * x3795 +
          4.83112519685039e+32 * x3794 * x3832 + 2.477e+21 * x3812 * x3822 -
          2.477e+21 * x3812 * x3827;
  const amrex::Real x7698 = -70000000.0 * sc[6] * x591 + x3806 - x4647 * x991;
  const amrex::Real x7703 =
    32000000.0 * sc[19] * x1180 - x2474 * x591 - x7693 * x991;
  const amrex::Real x7707 =
    16040000.0 * sc[14] * x508 + 24000000.0 * sc[16] * x508;
  const amrex::Real x7712 = 3.54e+38 * x5350 * x5357;
  const amrex::Real x7716 = x483 * x7680 / ((x7682) * (x7682));
  const amrex::Real x7718 =
    x483 * ((x7680) * (x7680)) / ((x7682) * (x7682) * (x7682));
  x602 = x602 / ((((x7680) * (x7680)) / ((x7682) * (x7682)) + 1.0) *
                 (((x7680) * (x7680)) / ((x7682) * (x7682)) + 1.0));
  const amrex::Real x7721 =
    x7685 * exp(-618.95649893980499 * invT - 3.14 * logT + x951) /
    (x7679 + 1.0);
  const amrex::Real x7724 = 3200000000000000.0 * sc[12] * x526 * x602 * x7721;
  amrex::Real x7725 = x7724 * (2.0 * x7716 + 0.28 * x7718);
  const amrex::Real x7726 = refC * sc[12] * x7721;
  x7679 = x7685 / ((x7679 + 1.0) * (x7679 + 1.0));
  x951 = sc[12] * x526 * exp(-1237.91299787961 * invT - 5.48 * logT + x951);
  x7685 = 3200000000000000.0 * x207 * x2638 * x602 * x7688;
  amrex::Real x7738 = x7685 * (2.0 * x7716 + 0.28 * x7718);
  const amrex::Real x7740 = 3.54e+38 * x5350 * x5371;
  amrex::Real x7743 = 4.096e+20 * x207 * x2638 * x7679 *
                      exp(-1237.91299787961 * invT - 5.48 * logT);
  const amrex::Real x7745 = sc[19] * x207 * x7688;
  const amrex::Real x7747 = x1013 * (2.0 * x4532 * x483 + 0.28 * x4534 * x483) -
                            1.52881e+89 * x4526 * x4551 +
                            1.52881e+89 * x4526 * x4554 +
                            3.91e+48 * x4539 * x4543 - 3.91e+48 * x4543 * x746 -
                            x4547 * (2.0 * x4532 * x483 + 0.28 * x4534 * x483);
  const amrex::Real x7749 =
    1.5e+60 * exp(
                g_RT[12] - g_RT[19] - g_RT[27] + g_RT_qss[8] -
                32497.732277668802 * invT - 13.94 * logT);
  const amrex::Real x7750 = sc[12] * x7749;
  const amrex::Real x7753 = x1152 * x7536 + x1152 * x7750 + x1180 * x2479 +
                            x1180 * x2486 - 2.9555660377358502e+66 * x209 -
                            3.54e+38 * x5357 + 2.9555660377358502e+66 * x5362 +
                            x5366 * x7712 - x5366 * x7740 + 3.54e+38 * x5371 +
                            4.096e+20 * x7679 * x951 + x7725 -
                            3200000000000000.0 * x7726 - x7738 - x7743 +
                            3200000000000000.0 * x7745 + x7747;
  const amrex::Real x7754 = x2499 * x508 + x508 * x559 + x7707 + x7753;
  const amrex::Real x7756 =
    -7.29316e+85 * x1049 * x329 + x4171 * (0.28 * x4164 + 2.0 * x4165) +
    7.29316e+85 * x4175 - x4180 * (0.28 * x4164 + 2.0 * x4165) -
    4.27e+46 * x451 + 4.27e+46 * x821;
  const amrex::Real x7757 = 90000000.0 * sc[19] * x1181 + x7756;
  const amrex::Real x7761 = 1.5e+18 * sc[12] * exp(x2489);
  const amrex::Real x7765 =
    50000000.0 * sc[12] * x1074 + 8480000.0 * sc[12] * x545 +
    40000000.0 * sc[12] * x991 + x1367 * x545 + x2469 * x545 + x4155 * x568 +
    x568 * x7761 - x7676 * x991 - x7689 * x991;
  const amrex::Real x7766 = x1181 * x2421 + x7703 + x7754 + x7757 + x7765;
  const amrex::Real x7769 = -x545 * x732;
  const amrex::Real x7771 =
    -8480000.0 * sc[12] * x1033 - 50000000.0 * sc[12] * x1067 +
    48000000.0 * sc[14] * x904 - x1033 * x1367 - x1033 * x2469 + x1033 * x732 +
    x2766 * x904 + x2768 - x4155 * x904 + x5652 - x7761 * x904 + x7769;
  const amrex::Real x7772 = -40000000.0 * sc[12] * x1104 +
                            70000000.0 * sc[6] * x1083 + x1083 * x2474 +
                            x1104 * x4647 + x1104 * x7676 + x1104 * x7689 +
                            x1104 * x7693 + x7698 + x7766 + x7771;
  const amrex::Real x7774 =
    x1137 * x3785 - x1137 * x7536 - x1137 * x7750 + x6721;
  const amrex::Real x7791 = 32000000.0 * sc[19] * x1180 + x3806;
  const amrex::Real x7794 =
    90000000.0 * sc[19] * x1117 - 2.187948e+86 * x1049 * x329 +
    x4171 * (0.84 * x4164 + 6.0 * x4165) + 2.187948e+86 * x4175 -
    x4180 * (0.84 * x4164 + 6.0 * x4165) - 1.281e+47 * x451 + 1.281e+47 * x821;
  const amrex::Real x7813 = sc[14] * x3864 - x1211 * x2474 - x1212 * x7693 +
                            x1242 * x2474 + x1243 * x7693;
  x7680 = 0.56 * x483 * ((x7680) * (x7680)) / ((x7682) * (x7682) * (x7682)) +
          4.0 * x7716;
  x7682 = x207 * x2638 * x7679 * exp(-1237.91299787961 * invT - 5.48 * logT);
  const amrex::Real x7827 = x1013 * (4.0 * x4532 * x483 + 0.56 * x4534 * x483) -
                            3.05762e+89 * x4526 * x4551 +
                            3.05762e+89 * x4526 * x4554 +
                            7.82e+48 * x4539 * x4543 - 7.82e+48 * x4543 * x746 -
                            x4547 * (4.0 * x4532 * x483 + 0.56 * x4534 * x483);
  x444 = sc[12] * x4167 * x4169 - 1.458632e+86 * x1049 * x329 -
         5.9111320754717004e+66 * x209 + 1.458632e+86 * x329 * x444 * x868 -
         4.27e+46 * x4167 * x71 * x821 - 8.54e+46 * x451 - 7.08e+38 * x5357 +
         5.9111320754717004e+66 * x5362 + 7.08e+38 * x5371 +
         8.192e+20 * x7679 * x951 - x7680 * x7685 + x7680 * x7724 -
         8.192e+20 * x7682 + x7712 * (4.0 * x5364 + 0.56 * x5365) -
         6400000000000000.0 * x7726 - x7740 * (4.0 * x5364 + 0.56 * x5365) +
         6400000000000000.0 * x7745 + x7827 + 8.54e+46 * x821;
  x1035 = x1035 * x1098 - x1035 * x1116 -
          9.6622503937007901e+32 * x3794 * x3795 +
          9.6622503937007901e+32 * x3794 * x3832 + 4.954e+21 * x3812 * x3822 -
          4.954e+21 * x3812 * x3827;
  x4167 = -70000000.0 * sc[6] * x1211 + 70000000.0 * sc[6] * x1242 + x1035 -
          x1212 * x4647 + x1243 * x4647 + x3814;
  const amrex::Real x7871 = 32000000.0 * sc[19] * x1209 - x1275 * x2474 -
                            x1276 * x7693 + x1288 * x2474 + x1289 * x7693;
  const amrex::Real x7872 =
    -70000000.0 * sc[6] * x1275 + 70000000.0 * sc[6] * x1288 + x1035 -
    x1276 * x4647 + x1289 * x4647 +
    0.5 * x207 * exp(-3638.25649376812 * invT + 2.0 * logT) + 70000000.0 * x65;
  x602 = x602 * (6.0 * x7716 + 0.84 * x7718);
  const amrex::Real x7888 =
    x1013 * (6.0 * x4532 * x483 + 0.84 * x4534 * x483) -
    4.58643e+89 * x4526 * x4551 + 4.58643e+89 * x4526 * x4554 +
    1.173e+49 * x4539 * x4543 - 1.173e+49 * x4543 * x746 -
    x4547 * (6.0 * x4532 * x483 + 0.84 * x4534 * x483);
  const amrex::Real x7896 = 32000000.0 * sc[19] * x1237 + x1295 * x7693 -
                            x1310 * x2474 - x1311 * x7693 + x1322 * x2474;
  const amrex::Real x7897 =
    -70000000.0 * sc[6] * x1310 + 70000000.0 * sc[6] * x1322 + x1098 * x3929 -
    x1116 * x3929 + x1295 * x4647 - x1311 * x4647 -
    1.4493375590551199e+33 * x3794 * x3795 +
    1.4493375590551199e+33 * x3794 * x3832 + 7.431e+21 * x3812 * x3822 -
    7.431e+21 * x3812 * x3827;
  const amrex::Real x7917 =
    x1013 * (3.0 * x4532 * x483 + 0.42 * x4534 * x483) -
    2.293215e+89 * x4526 * x4551 + 2.293215e+89 * x4526 * x4554 +
    5.865e+48 * x4539 * x4543 - 5.865e+48 * x4543 * x746 -
    x4547 * (3.0 * x4532 * x483 + 0.42 * x4534 * x483);
  const amrex::Real x7925 = 32000000.0 * sc[19] * x1309 - x1361 * x2474 -
                            x1362 * x7693 + x2474 * x664 + x650 * x7693;
  const amrex::Real x7926 =
    -70000000.0 * sc[6] * x1361 + 70000000.0 * sc[6] * x664 + x1098 * x3956 -
    x1116 * x3956 - x1362 * x4647 - 7.2466877952755894e+32 * x3794 * x3795 +
    7.2466877952755894e+32 * x3794 * x3832 + 3.7155e+21 * x3812 * x3822 -
    3.7155e+21 * x3812 * x3827 + x4647 * x650;
  const amrex::Real x7940 = x1181 * x2421 + x7754 + x7757 + x7791;
  const amrex::Real x7961 = 24000000.0 * sc[20] * x725;
  const amrex::Real x7984 = 30830000.0 * exp(-14492.6399751759 * invT);
  const amrex::Real x7987 = 36000.0 * exp(-4498.7569922941902 * invT);
  const amrex::Real x7993 = 16040000.0 * sc[14] * x1341 - sc[20] * x4008 -
                            16040000.0 * sc[20] * x710 + x1343 * x732 -
                            x203 * x732;
  const amrex::Real x8000 = 56.0 * exp(-2727.4343286615799 * invT + 1.6 * logT);
  const amrex::Real x8003 = -sc[15] * x3991 - sc[15] * x8000 -
                            32000000.0 * sc[15] * x899 - 25010000.0 * sc[15] +
                            32000000.0 * sc[19] * x1320 - x1424 * x2474 -
                            x1425 * x7693 + x1433 * x2474 + x1434 * x7693;
  x5366 = -2.9555660377358502e+66 * x209 - 3.54e+38 * x5357 +
          2.9555660377358502e+66 * x5362 + x5366 * x7712 - x5366 * x7740 +
          3.54e+38 * x5371 + 4.096e+20 * x7679 * x951 + x7725 -
          3200000000000000.0 * x7726 - x7738 - x7743 +
          3200000000000000.0 * x7745 + x7747;
  const amrex::Real x8006 = x3806 + x5366 + x7756;
  const amrex::Real x8007 =
    -sc[19] * x4969 - 70000000.0 * sc[19] * x911 - 70000000.0 * sc[6] * x1424 +
    70000000.0 * sc[6] * x1433 - x1425 * x4647 + x1434 * x4647 -
    2.477e+21 * x2638 * x3812 * exp(x3808);
  const amrex::Real x8027 = 32000000.0 * sc[19] * x38 + x1436 * x7693 +
                            x1443 * x2474 - x1454 * x2474 - x1455 * x7693;
  const amrex::Real x8049 = -sc_qss[1] * x51 - x908;
  const amrex::Real x8055 = 16040000.0 * sc[14] * x1428 -
                            16040000.0 * sc_qss[2] * x275 + x1386 * x732 -
                            x1392 * x732 - 16040000.0 * x763;
  const amrex::Real x8060 = 32000000.0 * sc[19] * x1377 + sc[2] * x3864 -
                            x1463 * x2474 - x1480 * x7693 + x1489 * x7693 +
                            x2474 * x397;
  const amrex::Real x8074 =
    36000.0 *
    exp(-g_RT[12] - g_RT[13] + g_RT[15] + g_RT[20] - 4498.7569922941902 * invT);
  const amrex::Real x8082 = 16040000.0 * sc[14] * x1498 +
                            24000000.0 * sc[16] * x1498 + x1400 * x732 -
                            x1401 * x732 - x723 * x7961;
  const amrex::Real x8091 = -sc[12] * x3991 - sc[12] * x8000 -
                            32000000.0 * sc[12] * x899 - 25010000.0 * sc[12] +
                            32000000.0 * sc[19] * x1478 - x1488 * x2474 +
                            x1505 * x2474 - x1508 * x7693 + x169 * x7693;
  const amrex::Real x8108 = 16040000.0 * sc[14] * x486 +
                            24000000.0 * sc[16] * x486 -
                            24000000.0 * sc_qss[2] * x275 + x1155 * x732 -
                            x447 * x732 - 24000000.0 * x763;
  const amrex::Real x8115 = 32000000.0 * sc[19] * x893 - x1519 * x2474 -
                            x1530 * x7693 + x1539 * x2474 + x1540 * x7693;
  const amrex::Real x8137 =
    x1013 * (12.0 * x4532 * x483 + 1.68 * x4534 * x483) -
    9.17286e+89 * x4526 * x4551 + 9.17286e+89 * x4526 * x4554 +
    2.346e+49 * x4539 * x4543 - 2.346e+49 * x4543 * x746 -
    x4547 * (12.0 * x4532 * x483 + 1.68 * x4534 * x483);
  const amrex::Real x8147 = 32000000.0 * sc[19] * x1504 + x207 * x7692 +
                            x2474 * x465 - x2474 * x475 + x301 * x7693 -
                            x527 * x7693 + 25010000.0 * x58 * x65;
  const amrex::Real x8148 =
    70000000.0 * sc[6] * x465 - 70000000.0 * sc[6] * x475 + x1098 * x3796 -
    x1116 * x3796 + x301 * x4647 - 2.8986751181102398e+33 * x3794 * x3795 +
    2.8986751181102398e+33 * x3794 * x3832 + 1.4862e+22 * x3812 * x3822 -
    1.4862e+22 * x3812 * x3827 - x4647 * x527;
  const amrex::Real x8168 = 84300000.0 * exp(-g_RT[12] + g_RT[20] - x190);
  const amrex::Real x8175 =
    1.5e+18 * exp(-g_RT[12] + g_RT[19] + g_RT[24] - g_RT_qss[4] + x2489);
  const amrex::Real x8180 =
    1.5e+60 * exp(-32497.732277668802 * invT - 13.94 * logT);
  const amrex::Real x8195 =
    32000000.0 * sc[19] * x49 - 32000000.0 * sc_qss[1] * x51 - x2474 * x28 +
    x2474 * x597 - x581 * x7693 + x599 * x7693 - 32000000.0 * x908;
  const amrex::Real x8196 =
    -2.477e+21 * sc[12] * x13 * x3812 * exp(x3808) - sc[12] * x4969 -
    70000000.0 * sc[12] * x911 - 70000000.0 * sc[6] * x28 +
    70000000.0 * sc[6] * x597 - x4647 * x581 + x4647 * x599;
  const amrex::Real x8215 = -24000000.0 * sc[15] * x723 * x725 +
                            24000000.0 * sc[16] * x273 +
                            32000000.0 * sc[19] * x586 - x2474 * x493 +
                            x2474 * x604 - x659 * x7693 + x670 * x7693;
  const amrex::Real x8218 = -sc[12] * x4008 - 16040000.0 * sc[12] * x710 +
                            16040000.0 * sc[14] * x273 - x1467 * x732 +
                            x196 * x732;
  x1035 = -70000000.0 * sc[6] * x566 + 70000000.0 * sc[6] * x787 + x1035 -
          x4647 * x589 + x4647 * x855;
  const amrex::Real x8325 = x1180 * x2533;
  const amrex::Real x8329 =
    26000000.0 * sc[13] * exp(-3079.6859947248799 * invT);
  const amrex::Real x8332 = refC * exp(g_RT[13] - 2.0 * g_RT[14] - logT);
  const amrex::Real x8333 = sc[13] * x8332;
  const amrex::Real x8334 = ((sc[14]) * (sc[14])) * x4634;
  amrex::Real x8336 = sc[0] + sc[10] + sc[11] + sc[12] + 0.85 * sc[13] +
                      sc[14] + sc[15] + sc[16] + 11.89 * sc[17] + sc[18] +
                      sc[19] + sc[1] + sc[20] + 2.18 * sc[21] + sc[22] +
                      sc[23] + sc[24] + sc[25] + sc[26] + sc[27] + sc[28] +
                      sc[29] + sc[2] + sc[30] + sc[3] + sc[4] + sc[5] + sc[6] +
                      sc[7] + 1.09 * sc[8] + sc[9];
  amrex::Real x8338 = log(0.5 + 0.5 * exp(-1.0e+30 * T));
  amrex::Real x8339 =
    -0.29097730287517898 * x8338 +
    0.43429448190325198 * log(12.369038311180599 * x8336 * exp(-1.84 * logT)) -
    0.4;
  amrex::Real x8343 =
    1.7777777777777777 * ((x8339) * (x8339)) /
      ((-0.73540532268950665 * x8338 - 0.18666666666666668 * x8339 + 1) *
       (-0.73540532268950665 * x8338 - 0.18666666666666668 * x8339 + 1)) +
    1.0;
  const amrex::Real x8346 =
    0.0065362421105963058 *
    exp(M_LN10 * (0.43429448190325198 * x8338 / x8343)) * x8336 /
    ((x8336 * exp(-1.84 * logT) + 0.080847029077117646) *
     (x8336 * exp(-1.84 * logT) + 0.080847029077117646));
  const amrex::Real x8350 = refC * sc[16] * exp(-g_RT[19] - 3.24 * logT - x157);
  const amrex::Real x8353 =
    exp(M_LN10 * (0.43429448190325198 * x8338 / x8343)) /
    (12.369038311180599 * x8336 * exp(-1.84 * logT) + 1.0);
  const amrex::Real x8355 = exp(-g_RT[19] - 1.4 * logT - x157);
  const amrex::Real x8356 = refC * sc[16] * x8355;
  const amrex::Real x8360 =
    0.77207907893911465 * x8339 /
    (x8336 *
     ((-0.73540532268950665 * x8338 - 0.18666666666666668 * x8339 + 1) *
      (-0.73540532268950665 * x8338 - 0.18666666666666668 * x8339 + 1)));
  x8339 =
    1.0294387719188194 * ((x8339) * (x8339)) /
    (x8336 * ((-0.73540532269 * x8338 - 0.18666666666666668 * x8339 + 1) *
              (-0.73540532269 * x8338 - 0.18666666666666668 * x8339 + 1) *
              (-0.73540532269 * x8338 - 0.18666666666666668 * x8339 + 1)));
  const amrex::Real x8364 =
    63280000.0 * x8336 * x8338 * x8353 * x8356 / ((x8343) * (x8343));
  const amrex::Real x8367 = sc[13] * sc[19] * exp(-3.24 * logT);
  const amrex::Real x8370 = exp(-1.4 * logT);
  const amrex::Real x8371 = sc[13] * sc[19] * x8370;
  x8338 = 63280000.0 * x8336 * x8338 * x8353 * x8371 / ((x8343) * (x8343));
  x8343 = x8338 * (0.28 * x8339 + 2.0 * x8360) -
          782712744.331509 * x8346 * x8350 + 782712744.331509 * x8346 * x8367 +
          63280000.0 * x8353 * x8356 - 63280000.0 * x8353 * x8371 -
          x8364 * (0.28 * x8339 + 2.0 * x8360);
  const amrex::Real x8377 = -120000.0 * x8333 + 120000.0 * x8334 + x8343;
  const amrex::Real x8378 =
    1000000.0 * sc[16] * x1137 - x1137 * x8329 + x1152 * x8329 + x6711 + x8377;
  const amrex::Real x8379 = x1180 * x2486 - x8325 + x8378;
  const amrex::Real x8382 = 140000.0 * sc[13] * x1181;
  const amrex::Real x8384 = -20000.0 * sc[13] * x508 + x1181 * x2544 - x8382;
  const amrex::Real x8387 = 300000.0 * sc[13] * exp(x2537);
  const amrex::Real x8392 = 13240000.0 * sc[13] * exp(-754.82499870708 * invT);
  const amrex::Real x8396 = 46000000000.0 * sc[13] * exp(x2516);
  const amrex::Real x8400 =
    40000000.0 * sc[13] * x591 + x1074 * x2535 + x1102 * x545 - x2509 * x545 -
    x2518 * x545 + x568 * x7108 + x568 * x8387 + x568 * x8396 + x8392 * x991;
  const amrex::Real x8409 = -x2522 * x545;
  const amrex::Real x8413 = -x2513 * x545;
  const amrex::Real x8415 = -x1033 * x1102 + x1033 * x2509 + x1033 * x2513 +
                            x1033 * x2518 + x1033 * x2522 - x1067 * x2535 +
                            x2750 * x904 + x2753 - x7108 * x904 - x8387 * x904 -
                            x8396 * x904 + x8409 + x8413;
  const amrex::Real x8416 =
    -40000000.0 * sc[13] * x1083 - x1104 * x8392 + x8415;
  const amrex::Real x8519 = 10200000.0 * sc[16] * x3953 *
                            exp(-19600.2891330938 * invT - x157 + x3951 - x414);
  const amrex::Real x8550 =
    x8338 * (0.3052 * x8339 + 2.18 * x8360) - 853156891.321345 * x8346 * x8350 +
    853156891.321345 * x8346 * x8367 + 68975200.0 * x8353 * x8356 -
    68975200.0 * x8353 * x8371 - x8364 * (0.3052 * x8339 + 2.18 * x8360);
  const amrex::Real x8566 =
    x1152 * x8329 + x1180 * x2486 - x8325 + x8377 + x8384;
  const amrex::Real x8614 =
    1800000.0 * sc[26] * exp(-9057.8999844849495 * invT + 0.08 * logT);
  const amrex::Real x8616 = 40000000.0 * exp(-x148 - x609);
  const amrex::Real x8642 =
    15.4 * sc[17] + 3.6 * sc[21] + 2.4 * sc[6] + 1.75 * sc[8] + x162;
  const amrex::Real x8646 = 10200000.0 * exp(-19600.2891330938 * invT);
  const amrex::Real x8651 =
    exp(g_RT[13] - 2.0 * g_RT[16] + g_RT[18] - 6038.59998965664 * invT);
  const amrex::Real x8654 =
    exp(g_RT[13] - 2.0 * g_RT[16] + g_RT[18] + 820.24316526169298 * invT);
  const amrex::Real x8658 = 30000.0 * exp(-1443.22539752794 * invT);
  const amrex::Real x8664 =
    5.37e+64 * exp(-16555.828304975301 * invT - 16.72 * logT - x56 - x609);
  const amrex::Real x8667 =
    1410000000000.0 *
    exp(-30.192999948283202 * invT - 1.76 * logT - x56 - x609);
  x609 = 2510000.0 * exp(-20128.666632188801 * invT + 2.0 * logT - x56 - x609);
  const amrex::Real x8673 = 100000000.0 * exp(-20128.666632188801 * invT);
  const amrex::Real x8680 =
    26440000000.0 * sc[19] * exp(-8575.3152019782301 * invT - 0.6707 * logT);
  x8336 = 63280000.0 * x8336 * x8353;
  const amrex::Real x8692 =
    -sc[19] * x8336 * x8370 + x8338 * (0.238 * x8339 + 1.7 * x8360) -
    665305832.681783 * x8346 * x8350 + 665305832.681783 * x8346 * x8367 +
    53788000.0 * x8353 * x8356 - 53788000.0 * x8353 * x8371 -
    x8364 * (0.238 * x8339 + 1.7 * x8360) - x8680;
  const amrex::Real x8713 =
    26440000000.0 *
    exp(g_RT[15] - g_RT[19] - 8575.3152019782301 * invT - 0.6707 * logT - x45);
  x45 =
    26000000.0 * exp(g_RT[28] - g_RT_qss[8] - 3079.6859947248799 * invT - x45);
  const amrex::Real x8726 =
    1800000.0 * exp(
                  -g_RT[13] + g_RT[15] + g_RT[25] - g_RT[26] -
                  9057.8999844849495 * invT + 0.08 * logT);
  const amrex::Real x8755 =
    5.37e+64 * exp(-16555.828304975301 * invT - 16.72 * logT);
  const amrex::Real x8757 =
    1410000000000.0 * exp(-30.192999948283202 * invT - 1.76 * logT);
  const amrex::Real x8759 =
    2510000.0 * exp(-20128.666632188801 * invT + 2.0 * logT);
  x157 =
    4.28e-19 *
    exp(g_RT[20] - g_RT_qss[3] + 1776.3548302906599 * invT + 7.6 * logT - x157);
  const amrex::Real x8834 =
    x8338 * (3.3292 * x8339 + 23.78 * x8360) -
    9306454530.10164 * x8346 * x8350 + 9306454530.10164 * x8346 * x8367 +
    752399200.0 * x8353 * x8356 - 752399200.0 * x8353 * x8371 -
    x8364 * (3.3292 * x8339 + 23.78 * x8360);
  const amrex::Real x8864 = refCinv * exp(
                                        -g_RT[13] + 2.0 * g_RT[19] + g_RT[21] -
                                        g_RT_qss[0] - 754.82499870708 * invT);
  const amrex::Real x8881 =
    26440000000.0 * sc[13] * exp(-8575.3152019782301 * invT - 0.6707 * logT);
  const amrex::Real x8931 =
    x8338 * (0.6104 * x8339 + 4.36 * x8360) - 1706313782.64269 * x8346 * x8350 +
    1706313782.64269 * x8346 * x8367 + 137950400.0 * x8353 * x8356 -
    137950400.0 * x8353 * x8371 - x8364 * (0.6104 * x8339 + 4.36 * x8360);
  const amrex::Real x8995 =
    1800000.0 * sc[13] * exp(-9057.8999844849495 * invT + 0.08 * logT);
  const amrex::Real x9040 = sc[14] * sc[19] * x4634;
  const amrex::Real x9042 = refC * exp(-g_RT[14] + g_RT[15] - g_RT[19] - logT);
  const amrex::Real x9043 = sc[15] * x9042;
  const amrex::Real x9046 = x5569 + 240000.0 * x8333 - 240000.0 * x8334 -
                            9428000.0 * x9040 + 9428000.0 * x9043;
  const amrex::Real x9047 =
    -x1180 * x2486 - x1181 * x2544 - x1181 * x2577 + x9046;
  const amrex::Real x9049 = -100000000.0 * sc[14] * x1137 +
                            100000000.0 * sc[14] * x1152 + x1137 * x8329 -
                            x1152 * x8329;
  const amrex::Real x9051 = 100000000.0 * sc[14] * x1074 +
                            60000000.0 * sc[14] * x545 +
                            96000000.0 * sc[14] * x568 - x2429 * x545 -
                            x2556 * x545 - x568 * x8387 + x9047 + x9049;
  const amrex::Real x9055 =
    15000000.0 * sc[14] * x591 + 80000000.0 * sc[14] * x991 + x9051;
  x593 =
    1750000.0 * exp(g_RT[21] - g_RT[22] - 679.34249883637199 * invT - x593);
  const amrex::Real x9059 = sc[21] * x593;
  const amrex::Real x9065 = -x1074 * x2572 - x9059 * x991;
  const amrex::Real x9070 = x1033 * x998 - x5640;
  const amrex::Real x9071 = -16040000.0 * sc[14] * x508 + x276 * x508;
  const amrex::Real x9073 = -x2560 * x545;
  const amrex::Real x9076 =
    -60000000.0 * sc[14] * x1033 - 100000000.0 * sc[14] * x1067 -
    96000000.0 * sc[14] * x904 + x1033 * x2429 + x1033 * x2556 + x1033 * x2560 +
    x8387 * x904 + x9070 + x9071 + x9073;
  const amrex::Real x9077 =
    -15000000.0 * sc[14] * x1083 - 80000000.0 * sc[14] * x1104 + x1033 * x1367 +
    x1067 * x2442 + x1067 * x2572 - x1074 * x2442 + x1104 * x2832 +
    x1104 * x5622 + x1104 * x9059 - x2832 * x991 + x2838 * x904 + x2842 -
    x5622 * x991 + x9065 + x9076;
  const amrex::Real x9093 = -x1117 * x2544 - x1117 * x2577 + x9046 + x9049;
  const amrex::Real x9172 = 5800000.0 * sc[15] * x3953 *
                            exp(-905.789998448495 * invT - x148 + x3951 - x414);
  const amrex::Real x9207 =
    100000000.0 * sc[14] * x1152 - x1152 * x8329 + x9047;
  const amrex::Real x9227 =
    100000000.0 * sc[14] * x1074 + 60000000.0 * sc[14] * x545 +
    96000000.0 * sc[14] * x568 + 15000000.0 * sc[14] * x591 +
    80000000.0 * sc[14] * x991 - x2429 * x545 - x2556 * x545 - x568 * x8387 +
    x9207;
  const amrex::Real x9269 =
    58100000.0 * sc[26] * exp(-10.0643333160944 * invT - 0.02 * logT);
  const amrex::Real x9274 = 9.63 * exp(-1997.7701632447399 * invT + 2.0 * logT);
  const amrex::Real x9280 = exp(
    g_RT[14] - 2.0 * g_RT[15] + g_RT[17] + 1061.78716484796 * invT +
    2.4 * logT);
  const amrex::Real x9300 = 5800000.0 * exp(-905.789998448495 * invT);
  const amrex::Real x9311 =
    -10000000.0 * sc[22] * x5159 -
    1750000.0 * sc[22] * exp(-679.34249883637199 * invT) + x1475 * x2572 -
    x1477 * x2572 - x1480 * x9059 + x1489 * x9059;
  const amrex::Real x9313 = 39000000.0 * exp(-1781.38699694871 * invT);
  x148 = 9.63 * exp(-1997.7701632447399 * invT + 2.0 * logT - x1101 - x148);
  const amrex::Real x9320 = sc[15] * exp(1061.78716484796 * invT + 2.4 * logT);
  const amrex::Real x9324 = exp(
    -g_RT[14] + g_RT[15] + g_RT[22] - g_RT_qss[7] - 2012.8666632188799 * invT);
  const amrex::Real x9343 =
    -x1503 * x2572 - x1508 * x9059 + x169 * x9059 + x2571 * x388 + x2572 * x383;
  const amrex::Real x9409 =
    58100000.0 *
    exp(g_RT[25] - g_RT[26] - 10.0643333160944 * invT - 0.02 * logT - x190);
  x190 = 400000000.0 * exp(-g_RT[27] + g_RT[29] - x190);
  const amrex::Real x9471 =
    x207 * x593 - x2572 * x481 + x2572 * x561 - x589 * x9059 + x855 * x9059;
  const amrex::Real x9495 =
    -10000000.0 * sc[14] * x5159 -
    1750000.0 * sc[14] * exp(-679.34249883637199 * invT) + x2572 * x369 -
    x2572 * x390 + x9059 * x971 - x9059 * x980;
  const amrex::Real x9539 =
    58100000.0 * sc[14] * exp(-10.0643333160944 * invT - 0.02 * logT);
  const amrex::Real x9578 = x1181 * x2608;
  const amrex::Real x9584 = 6.0 * sc[17] + x164;
  amrex::Real x9585 = 0.0018108108108108099 * x9584 *
                      exp(1153.8758146902201 * invT - 0.214 * logT);
  amrex::Real x9586 = log(
    exp(-5182.0 * invT) + 0.2654 * exp(-0.010638297872340399 * T) +
    0.7346 * exp(-0.000569476082004556 * T));
  amrex::Real x9587 =
    -0.29097730287517898 * x9586 + 0.43429448190325198 * log(x9585) - 0.4;
  amrex::Real x9588 = -0.55155399201712996 * x9586 - 0.14 * x9587 + 0.75;
  const amrex::Real x9591 =
    0.43429448190325198 * x9587 / (x9584 * ((x9588) * (x9588)));
  const amrex::Real x9593 = 0.43429448190325198 * ((x9587) * (x9587)) /
                            (x9584 * ((x9588) * (x9588) * (x9588)));
  const amrex::Real x9596 = exp(
    M_LN10 * (0.43429448190325198 * x9586 /
              (((x9587) * (x9587)) / ((x9588) * (x9588)) + 1.0)));
  const amrex::Real x9602 =
    exp(-2.0 * g_RT[15] + g_RT[18] + 1153.8758146902201 * invT - 0.584 * logT) /
    (x9585 + 1.0);
  const amrex::Real x9603 = refC * sc[18] * x9596 * x9602;
  x9586 = x9584 * x9586 /
          ((((x9587) * (x9587)) / ((x9588) * (x9588)) + 1.0) *
           (((x9587) * (x9587)) / ((x9588) * (x9588)) + 1.0));
  x9587 = exp(1153.8758146902201 * invT - 0.584 * logT) / (x9585 + 1.0);
  x9588 = ((sc[15]) * (sc[15])) * x9587 * x9596;
  x9585 = x9584 / ((x9585 + 1.0) * (x9585 + 1.0));
  const amrex::Real x9615 = ((sc[15]) * (sc[15])) * x9585 * x9596 *
                            exp(2307.7516293804401 * invT - 0.798 * logT);
  const amrex::Real x9617 =
    refC * sc[18] * x9596 *
    exp(-2.0 * g_RT[15] + g_RT[18] + 2307.7516293804401 * invT - 0.798 * logT);
  const amrex::Real x9620 =
    9428000.0 * x9040 - 9428000.0 * x9043 - 727.94594594594605 * x9585 * x9617 +
    402000.0 * x9586 * x9588 * (2.0 * x9591 + 0.28 * x9593) -
    402000.0 * x9586 * x9603 * (2.0 * x9591 + 0.28 * x9593) - 402000.0 * x9588 +
    402000.0 * x9603 + 727.94594594594605 * x9615;
  const amrex::Real x9621 = -30000000.0 * sc[15] * x1137 +
                            30000000.0 * sc[15] * x1152 + x1137 * x6716 +
                            x6719 + x9620;
  const amrex::Real x9626 =
    -5000000.0 * sc[15] * x1180 - x1180 * x2479 + x1181 * x2577;
  const amrex::Real x9628 = 30200000.0 * sc[15] * x545 +
                            30110000.0 * sc[15] * x568 - x1074 * x2535 +
                            x1074 * x2572 + x2509 * x545 + x2560 * x545 +
                            x2838 * x568 - x9578 + x9621 + x9626;
  const amrex::Real x9631 = 10600000.0 * sc[13] * exp(-754.82499870708 * invT);
  const amrex::Real x9632 =
    30000000.0 * sc[15] * x591 + 20000000.0 * sc[15] * x991 - x9631 * x991;
  const amrex::Real x9634 =
    24000000.0 * sc[16] * x508 - x276 * x508 + x508 * x754;
  const amrex::Real x9640 = -x1074 * x2599;
  const amrex::Real x9644 = 6600000.0 * sc[20] * x318 * x319;
  const amrex::Real x9649 = -x2585 * x545 + x568 * x9644;
  const amrex::Real x9651 =
    30000000.0 * sc[14] * x1033 - 30200000.0 * sc[15] * x1033 -
    30110000.0 * sc[15] * x904 - x1033 * x2509 - x1033 * x2560 + x1033 * x2585 +
    x1067 * x2535 - x1067 * x2572 + x1067 * x2599 + x2756 * x904 + x2759 -
    x2838 * x904 + x5656 * x568 - x5656 * x904 + x5659 - x904 * x9644 + x9640 +
    x9649;
  const amrex::Real x9654 = sc[15] * sc[19] * exp(-2.0 * logT);
  const amrex::Real x9656 = refC * exp(-g_RT[19] - 2.0 * logT - x56);
  const amrex::Real x9657 = sc[17] * x9656;
  const amrex::Real x9659 = -44000000000.0 * x9654 + 44000000000.0 * x9657;
  const amrex::Real x9660 = -28000000.0 * sc[13] * x591 + x9659;
  const amrex::Real x9662 = 28000000.0 * sc[13] * x1083 -
                            30000000.0 * sc[15] * x1083 -
                            20000000.0 * sc[15] * x1104 + x1083 * x2474 +
                            x1104 * x7693 + x1104 * x9631 + x9651 + x9660;
  const amrex::Real x9680 = -5000000.0 * sc[15] * x1180 - x1180 * x2479;
  const amrex::Real x9696 = 24000000.0 * sc[16] * x1182 + x1121 * x2585 -
                            x1156 * x2585 - x1197 * x9644 + x1205 * x9644;
  const amrex::Real x9699 = -5000000.0 * sc[15] * x1133 +
                            32000000.0 * sc[19] * x1133 - x1133 * x2479 -
                            x1154 * x2608;
  const amrex::Real x9741 = -28000000.0 * sc[13] * x1275 +
                            28000000.0 * sc[13] * x1288 + sc[14] * x4804 -
                            88000000000.0 * x9654 + 88000000000.0 * x9657;
  const amrex::Real x9754 =
    sc[17] * x1254 * x2584 - x1260 * x2585 + x1268 * x9644 - x1284 * x9644;
  x414 = 23500.0 * sc[17] * x3953 *
         exp(558.57049904323901 * invT + 0.73 * logT + x3951 - x414 - x56);
  const amrex::Real x9759 = x9586 * (3.5 * x9591 + 0.49 * x9593);
  const amrex::Real x9778 = -28000000.0 * sc[13] * x1361 +
                            28000000.0 * sc[13] * x664 -
                            28000000.0 * sc[15] * x423 * x927 -
                            77000000000.0 * x9654 + 77000000000.0 * x9657;
  const amrex::Real x9792 = 32000000.0 * sc[19] * x1180 + x9634 + x9659;
  const amrex::Real x9793 = 30000000.0 * sc[15] * x1152 - x9578 + x9620 + x9626;
  const amrex::Real x9810 = 30200000.0 * sc[15] * x545 +
                            30110000.0 * sc[15] * x568 - x1074 * x2535 +
                            x1074 * x2572 + x2509 * x545 + x2560 * x545 +
                            x2838 * x568 + x7703 + x9632 + x9634 + x9793;
  const amrex::Real x9829 = sc[13] * x7987 + 24000000.0 * sc[16] * x1341 +
                            x1343 * x2585 + x1388 * x9644 - x1404 * x9644 -
                            x203 * x2585 - x318 * x7961;
  const amrex::Real x9849 =
    sc[12] * x7987 - x1418 * x9644 + x2585 * x267 - x2585 * x621 + x298 * x9644;
  const amrex::Real x9869 = 24000000.0 * sc[16] * x1428 + x1386 * x2585 -
                            x1392 * x2585 - x1420 * x9644 + x1422 * x9644;
  const amrex::Real x9874 =
    2.67e+35 * sc[18] * exp(-18920.9466342575 * invT - 7.0 * logT);
  const amrex::Real x9878 =
    24100000.0 *
    exp(g_RT[15] + g_RT[17] - g_RT[18] - g_RT[19] - 1997.7701632447399 * invT);
  const amrex::Real x9895 =
    sc[15] *
    exp(2.0 * g_RT[15] - g_RT[16] - g_RT[19] - 148.44891641239201 * invT);
  const amrex::Real x9898 =
    exp(g_RT[15] - g_RT[16] + g_RT[19] - g_RT[27] + g_RT[29]);
  const amrex::Real x9900 = 5000000.0 * sc[29] * x423 * x9898;
  const amrex::Real x9903 =
    23500.0 * exp(558.57049904323901 * invT + 0.73 * logT);
  const amrex::Real x9911 = -7500000.0 * sc[22] * x2606 -
                            20000000.0 * sc[22] * x9324 - x1503 * x2599 +
                            x2577 * x278 + x2599 * x383;
  const amrex::Real x9912 =
    -sc[16] * x148 - sc[16] * x8755 - sc[16] * x8757 - sc[16] * x8759;
  const amrex::Real x9915 =
    3430.0 * exp(224.93784961470999 * invT + 1.18 * logT);
  const amrex::Real x9920 = -6600000.0 * refCinv * sc[20] * x319 * x868 -
                            sc[20] * x8074 - sc[20] * x9915 + x1400 * x2585 -
                            x1401 * x2585 + x1445 * x9644 - x1450 * x9644;
  x164 = 277200000000.0 * sc[17] + 44000000000.0 * x164;
  const amrex::Real x9923 = -28000000.0 * sc[13] * x1488 +
                            28000000.0 * sc[13] * x1505 -
                            sc[19] * x164 * exp(-2.0 * logT) - sc[19] * x5049;
  const amrex::Real x9924 =
    2.67e+35 * exp(-18920.9466342575 * invT - 7.0 * logT - x1101 - x56);
  const amrex::Real x9927 = exp(-148.44891641239201 * invT);
  const amrex::Real x9947 = 6600000.0 * sc[24] + x1155 * x2585 + x1461 * x9644 -
                            x1471 * x9644 - x2585 * x447;
  const amrex::Real x9948 =
    -sc[15] * x148 - sc[15] * x8755 - sc[15] * x8757 - sc[15] * x8759;
  x56 =
    10000000.0 * exp(g_RT[22] - g_RT_qss[7] - 1006.43333160944 * invT - x56);
  const amrex::Real x9979 =
    -x1157 * x2585 + x1476 * x9644 + x194 * x2584 + x2585 * x552 - x9644 * x99;
  const amrex::Real x9983 = 28000000.0 * sc[13] * x465 -
                            28000000.0 * sc[13] * x475 + x164 * x9656 -
                            277200000000.0 * x9654 + 277200000000.0 * x9657;
  const amrex::Real x9985 =
    2.67e+35 * sc[15] * exp(-18920.9466342575 * invT - 7.0 * logT);
  const amrex::Real x9987 = 24100000.0 * exp(-1997.7701632447399 * invT);
  const amrex::Real x10020 = 5000000.0 * refCinv * sc[15] * sc[29] * x9898;
  const amrex::Real x10032 =
    -28000000.0 * sc[13] * x28 + 28000000.0 * sc[13] * x597 -
    sc[15] * x164 * exp(-2.0 * logT) - sc[15] * x5049 - sc[15] * x6235;
  const amrex::Real x10051 = -sc[15] * x8074 - sc[15] * x9915 - x1467 * x2585 +
                             x1527 * x9644 + x196 * x2585 -
                             6600000.0 * x318 * x319 * x868 - x864 * x9644;
  const amrex::Real x10080 = -7500000.0 * sc[15] * x2606 -
                             20000000.0 * sc[15] * x9324 + x2577 * x707 +
                             x2599 * x369 - x2599 * x390;
  const amrex::Real x10113 = 6600000.0 * sc[16] - x1492 * x2585 + x217 * x9644 +
                             x2585 * x646 - x368 * x9644;
  const amrex::Real x10162 =
    -x8338 * (0.28 * x8339 + 2.0 * x8360) + 782712744.331509 * x8346 * x8350 -
    782712744.331509 * x8346 * x8367 - 63280000.0 * x8353 * x8356 +
    63280000.0 * x8353 * x8371 + x8364 * (0.28 * x8339 + 2.0 * x8360);
  const amrex::Real x10163 =
    -1000000.0 * sc[16] * x1137 + 1000000.0 * sc[16] * x1152 + x10162;
  const amrex::Real x10165 =
    20000.0 * sc[13] * x508 - 24000000.0 * sc[16] * x508 + x1180 * x2479;
  const amrex::Real x10167 = x2513 * x545 + x2750 * x568;
  const amrex::Real x10169 = -x5656 * x568;
  const amrex::Real x10171 = -x568 * x9644;
  const amrex::Real x10175 = -x2614 * x545 + x8325;
  const amrex::Real x10177 =
    x10169 + x10171 + x10175 + x1033 * x1102 - x1033 * x2513 + x1033 * x2614 -
    x2750 * x904 + x5649 + x5656 * x904 + x7108 * x904 + x7111 + x904 * x9644;
  const amrex::Real x10212 =
    180000.0 * sc[18] * x3953 * exp(-4139.46029290962 * invT + x3951);
  const amrex::Real x10222 = 1000000.0 * sc[16] * x1152 + x10162 + x8382;
  x1101 =
    180000.0 * exp(g_RT[29] - g_RT_qss[9] - 4139.46029290962 * invT - x1101);
  const amrex::Real x10277 = -sc[20] * x157 - 1000000.0 * sc[20] * x5159 +
                             x1155 * x2614 + x2533 * x893 - x2614 * x447;
  const amrex::Real x10308 = -sc[16] * x157 - 1000000.0 * sc[16] * x5159 -
                             x1467 * x2614 + x196 * x2614 + x2533 * x586;
  const amrex::Real x10344 = 44000000000.0 * x9654 - 44000000000.0 * x9657;
  const amrex::Real x10345 = x10344 - x1137 * x6716 + x1152 * x6716;
  const amrex::Real x10348 =
    5000000.0 * sc[15] * x1180 + 16000000.0 * sc[19] * x1180 - x508 * x754;
  const amrex::Real x10350 = x1074 * x2599 + x2585 * x545 + x2756 * x568;
  const amrex::Real x10351 = x10345 + x10348 + x10350 + x9578;
  const amrex::Real x10352 = 30200000.0 * sc[15] * x1033 +
                             30110000.0 * sc[15] * x904 - x1033 * x2585 -
                             x1067 * x2599 - x2756 * x904 + x5644 + x6730;
  const amrex::Real x10355 =
    -12000000.0 * sc[13] * x591 + x2474 * x591 + x2630 * x591 + x7693 * x991;
  const amrex::Real x10357 =
    12000000.0 * sc[13] * x1083 - x1083 * x2474 - x1083 * x2630 - x1104 * x7693;
  const amrex::Real x10378 = x10344 + x10348 + x1152 * x6716 + x9578;
  const amrex::Real x10432 =
    363.97297297297303 * x9585 * x9617 -
    201000.0 * x9586 * x9588 * (2.0 * x9591 + 0.28 * x9593) +
    201000.0 * x9586 * x9603 * (2.0 * x9591 + 0.28 * x9593) + 201000.0 * x9588 -
    201000.0 * x9603 - 363.97297297297303 * x9615;
  const amrex::Real x10434 = -x1033 * x2614 + x10432 + x2614 * x545;
  x7560 = 1.21e+174 * x7545 * x7546 - 1.21e+174 * x7545 * x7548 -
          1.1e+91 * x7553 * x7562 + x7555 * x7560 - x7560 * x7577 +
          1.1e+91 * x7580;
  const amrex::Real x10443 = x1137 * x7750 - x1152 * x7750 + x7560;
  amrex::Real x10445 =
    1.7777777777777777 * x2670 * x483 /
    ((-0.73540532268950665 * x25 - 0.18666666666666668 * x2670 + 1) *
     (-0.73540532268950665 * x25 - 0.18666666666666668 * x2670 + 1));
  x2670 = 2.3703703703703702 * ((x2670) * (x2670)) * x483 /
          ((-0.73540532269 * x25 - 0.18666666666666668 * x2670 + 1) *
           (-0.73540532269 * x25 - 0.18666666666666668 * x2670 + 1) *
           (-0.73540532269 * x25 - 0.18666666666666668 * x2670 + 1));
  amrex::Real x10448 = x25 / ((x2674) * (x2674));
  amrex::Real x10450 = refC * x2678 * x8049;
  amrex::Real x10453 = exp(M_LN10 * (0.43429448190325198 * x25 / x2674)) *
                       exp(-2797.8846618742396 * invT - 4.8 * logT) /
                       (x18 + 1.0);
  x25 = exp(M_LN10 * (0.43429448190325198 * x25 / x2674)) /
        ((x18 + 1.0) * (x18 + 1.0));
  x18 = -4287.4059926562095 * invT - 10.054 * logT;
  x17 = x526 * x8049 * exp(x17 + x18);
  x2674 = x13 * x25 * x903 * exp(x18);
  const amrex::Real x10463 =
    -2.2e+18 * x10448 * x10450 * x13 * (2.0 * x10445 + 0.28 * x2670) +
    2.2e+18 * x10448 * x10453 * x13 * x903 * (2.0 * x10445 + 0.28 * x2670) +
    2.2e+18 * x10450 - 2.2e+18 * x10453 * x903 -
    8.9629629629629601e+30 * x17 * x25 + 8.9629629629629601e+30 * x2674;
  const amrex::Real x10464 = x10463 + x1180 * x2679;
  const amrex::Real x10469 =
    30000000.0 * sc[15] * x1137 - 30000000.0 * sc[15] * x1152 -
    4.356e+119 * x1073 * x677 - 6.6e+63 * x1084 + x1137 * x4627 -
    x1137 * x6708 + x1152 * x6708 + x6723 + x6729 * x6734 - x6729 * x6744 +
    4.356e+119 * x6738 + 6.6e+63 * x6742;
  const amrex::Real x10470 =
    -68000000.0 * sc[19] * x1180 + x10443 + x10464 + x10469;
  const amrex::Real x10471 = x10470 - x2702 * x508 + x2792 - x502 * x508 +
                             x508 * x516 + x508 * x660 + x508 * x749;
  const amrex::Real x10472 = x194 * x2651 * exp(x2641);
  const amrex::Real x10477 =
    1.7777777777777777 * x2644 /
    ((-0.73540532268950665 * x110 - 0.18666666666666668 * x2644 + 1) *
     (-0.73540532268950665 * x110 - 0.18666666666666668 * x2644 + 1));
  x2644 = 2.3703703703703702 * ((x2644) * (x2644)) /
          ((-0.73540532269 * x110 - 0.18666666666666668 * x2644 + 1) *
           (-0.73540532269 * x110 - 0.18666666666666668 * x2644 + 1) *
           (-0.73540532269 * x110 - 0.18666666666666668 * x2644 + 1));
  amrex::Real x10480 =
    x110 * (2.0 * x10477 * x483 + 0.28 * x2644 * x483) / ((x2648) * (x2648));
  x2641 = x2651 * exp(x2641 + x786);
  x2651 = 1350000000000.0 * x2641 * x784;
  x105 = exp(M_LN10 * (0.43429448190325198 * x110 / x2648)) /
         ((x105 + 1.0) * (x105 + 1.0));
  amrex::Real x10494 = -1565.003830652674 * invT - 5.62 * logT;
  amrex::Real x10496 =
    1.67201834862385e+18 * x105 * x13 * x784 * exp(x10494 + x786);
  amrex::Real x10499 = 1.67201834862385e+18 * x105 * x194 * x2638 * exp(x10494);
  const amrex::Real x10503 =
    -1350000000000.0 * sc[19] * x10472 +
    1350000000000.0 * x10472 * x10480 * x2638 - x10480 * x13 * x2651 - x10496 +
    x10499 - x13 * x5354 * x5382 - 7.6009596928982695e+46 * x214 * x731 +
    7.6009596928982695e+46 * x214 * x834 + x2651 + x5354 + x5382 * x5398 -
    4.096e+20 * x7679 * x951 - x7725 + 3200000000000000.0 * x7726 + x7738 +
    x7743 - 3200000000000000.0 * x7745 - 1.99e+29 * x867;
  const amrex::Real x10508 = 5280000.0 * sc[13] * exp(-754.82499870708 * invT);
  amrex::Real x10510 = x2689 * x453 / ((x2691) * (x2691));
  x453 = ((x2689) * (x2689)) * x453 / ((x2691) * (x2691) * (x2691));
  amrex::Real x10512 =
    x80 / ((((x2689) * (x2689)) / ((x2691) * (x2691)) + 1.0) *
           (((x2689) * (x2689)) / ((x2691) * (x2691)) + 1.0));
  amrex::Real x10516 = 3.8e+29 * refC * x2686 * x2696 * x5155 * x71;
  amrex::Real x10519 = sc[19] * sc[22] * x2696 * exp(x2685);
  x80 = exp(
          M_LN10 * (0.43429448190325198 * x80 /
                    (((x2689) * (x2689)) / ((x2691) * (x2691)) + 1.0))) /
        ((x75 + 1.0) * (x75 + 1.0));
  x75 = -7699.2149868121596 * invT - 15.22 * logT;
  x74 = refC * x5155 * x71 * exp(x74 + x75);
  x2689 = 3.8e+29 * refC * x2686 * x2696 * x5155 +
          4.3757575757575802e+50 * sc[19] * sc[22] * x71 * x80 * exp(x75) -
          x10512 * x10516 * (2.0 * x10510 + 0.28 * x453) +
          3.8e+29 * x10512 * x10519 * x71 * (2.0 * x10510 + 0.28 * x453) -
          3.8e+29 * x10519 - 4.3757575757575802e+50 * x74 * x80;
  x2691 = -90000000.0 * sc[19] * x1181 - x1181 * x222;
  const amrex::Real x10533 = 3560000.0 * refC * sc[6] * x4632 -
                             3560000.0 * ((sc[19]) * (sc[19])) * x4634;
  const amrex::Real x10534 =
    x10533 + x5574 - 9428000.0 * x9040 + 9428000.0 * x9043;
  const amrex::Real x10537 =
    -80000000.0 * sc[14] * x991 - 1.4e+18 * sc[19] * x2801 - x10508 * x991 -
    x1052 * x591 + x10534 + x1181 * x2698 - x2630 * x591 + x2689 + x2691 +
    x2798 * x2804 - x2798 * x2817 + x2812 + x2815 - x2820 + x7689 * x991 +
    x8343;
  const amrex::Real x10539 = -x2434 * x545;
  const amrex::Real x10540 = x1033 * x2434 + x10539;
  const amrex::Real x10542 = -x1074 * x995;
  const amrex::Real x10545 =
    -100000000.0 * sc[14] * x1074 + 100000000.0 * sc[19] * x1074 +
    120000000.0 * sc[19] * x545 + 90000000.0 * sc[19] * x568 + x1074 * x2442 -
    x2469 * x545 + x2556 * x545 + x2653 * x545 + x2746 * x568;
  const amrex::Real x10546 =
    30000000.0 * sc[14] * x1033 + 100000000.0 * sc[14] * x1067 +
    48000000.0 * sc[14] * x904 - 120000000.0 * sc[19] * x1033 -
    100000000.0 * sc[19] * x1067 - 90000000.0 * sc[19] * x904 + x1033 * x1038 +
    x1033 * x2469 - x1033 * x2556 - x1033 * x2653 + x1033 * x491 + x10542 +
    x10545 - x1067 * x2442 + x1067 * x995 + x2452 - x2746 * x904 + x5652 +
    x5659 + x5663 + x7113 * x904;
  const amrex::Real x10548 = -20000000.0 * sc[10] * x591 - x6702 * x991;
  x4191 = -1.33e+48 * sc[19] * sc[24] * x4198 * exp(x4187) + x4191 * x4209 -
          x4191 * x4224 + 1.33e+48 * x4198 * x4222 +
          8.8445e+87 * x4203 * x4205 - 8.8445e+87 * x4203 * x4218;
  const amrex::Real x10551 = x4191 - x568 * x7761;
  const amrex::Real x10553 = -50000000.0 * sc[1] * x591 - x2743 * x991;
  const amrex::Real x10554 =
    50000000.0 * sc[1] * x1083 + x10551 + x10553 + x1104 * x2743 + x7761 * x904;
  amrex::Real x10558 = 30000000.0 * sc[15] * x1083 +
                       20000000.0 * sc[15] * x1104 -
                       30000000.0 * sc[15] * x591 - 20000000.0 * sc[15] * x991 +
                       x1033 * x93 - x545 * x93;
  const amrex::Real x10559 =
    20000000.0 * sc[10] * x1083 + 40000000.0 * sc[12] * x1104 -
    40000000.0 * sc[12] * x991 + 28000000.0 * sc[13] * x1083 +
    80000000.0 * sc[14] * x1104 + 70000000.0 * sc[6] * x1083 + x10508 * x1104 +
    x1052 * x1083 + x10548 + x10554 + x10558 + x1083 * x2630 + x1104 * x4647 +
    x1104 * x6702 - x1104 * x7689 - x2850 * x568 + x2850 * x904 + x7698 + x9660;
  const amrex::Real x10566 =
    -50000000.0 * sc[1] * x1134 + 50000000.0 * sc[1] * x1161 - x1127 * x7761 -
    x1138 * x2743 + x1159 * x7761 + x1162 * x2743 +
    20000000.0 * x207 * exp(-3019.29999482832 * invT) + 50000000.0 * x65;
  const amrex::Real x10568 =
    -30000000.0 * sc[15] * x1134 - 20000000.0 * sc[15] * x1138 +
    30000000.0 * sc[15] * x1161 + 20000000.0 * sc[15] * x1162 + x1062 * x93 -
    x1106 * x93;
  const amrex::Real x10569 =
    x10533 + x5574 + x8343 - 9428000.0 * x9040 + 9428000.0 * x9043 + x9659;
  x75 = sc[19] * sc[22] * x71 * x80 * exp(x75);
  amrex::Real x10576 =
    1.14e+30 * refC * x2686 * x2696 * x5155 -
    1.14e+30 * sc[19] * sc[22] * x2696 * exp(x2685) -
    x10512 * x10516 * (6.0 * x10510 + 0.84 * x453) +
    3.8e+29 * x10512 * x10519 * x71 * (6.0 * x10510 + 0.84 * x453) +
    x1117 * x2698 - 1.3127272727272701e+51 * x74 * x80 +
    1.3127272727272701e+51 * x75;
  const amrex::Real x10577 =
    -90000000.0 * sc[19] * x1117 - 4.2e+18 * sc[19] * x2801 + x10576 -
    x1117 * x222 - 9.6710526315789494e+29 * x280 +
    x2804 * (6.0 * x2796 + 0.84 * x504) + 4.2e+18 * x2813 * x853 -
    x2817 * (6.0 * x2796 + 0.84 * x504) + 9.6710526315789494e+29 * x399;
  const amrex::Real x10583 =
    2.2e+91 * refC * sc[11] * x7553 * x7574 + 2.42e+174 * x7545 * x7546 -
    2.42e+174 * x7545 * x7548 - 2.2e+91 * x7553 * x7562 +
    x7555 * x7559 * (4.0 * x7557 + 0.56 * x7558) -
    x7559 * x7577 * (4.0 * x7557 + 0.56 * x7558);
  const amrex::Real x10587 = -50000000.0 * sc[1] * x1211 +
                             50000000.0 * sc[1] * x1242 + x1197 * x7761 -
                             x1205 * x7761 - x1212 * x2743 + x1243 * x2743;
  amrex::Real x10589 =
    7.6e+29 * refC * x2686 * x2696 * x5155 -
    x10512 * x10516 * (4.0 * x10510 + 0.56 * x453) +
    3.8e+29 * x10512 * x10519 * x71 * (4.0 * x10510 + 0.56 * x453) -
    7.6e+29 * x10519 - 8.7515151515151504e+50 * x74 * x80 +
    8.7515151515151504e+50 * x75;
  const amrex::Real x10591 = 48000000.0 * sc[14] * x1197 -
                             48000000.0 * sc[14] * x1205 + x10589 +
                             x1154 * x2698 + x1234 * x995 - x36 * x995;
  amrex::Real x10594 =
    -2.2e+18 * x10448 * x10450 * x13 * (4.0 * x10445 + 0.56 * x2670) +
    2.2e+18 * x10448 * x10453 * x13 * x903 * (4.0 * x10445 + 0.56 * x2670) +
    4.4e+18 * x10450 - 4.4e+18 * x10453 * x903 -
    1.79259259259259e+31 * x17 * x25 + 1.79259259259259e+31 * x2674;
  const amrex::Real x10596 =
    -30000000.0 * sc[15] * x1211 - 20000000.0 * sc[15] * x1212 +
    30000000.0 * sc[15] * x1242 + 20000000.0 * sc[15] * x1243 + x10594 +
    x1121 * x93 + x1133 * x2679 - x1156 * x93;
  const amrex::Real x10602 = x110 * x13 * x2651 / ((x2648) * (x2648));
  x786 = x105 * x13 * x784 * exp(x10494 + x786);
  x105 = x105 * x194 * x2638 * exp(x10494);
  x110 = 1350000000000.0 * x10472 * x110 * x2638 / ((x2648) * (x2648));
  x2648 = -2.66e+48 * sc[19] * sc[24] * x4198 * exp(x4187) +
          2.66e+48 * x4198 * x4222 + 1.7689e+88 * x4203 * x4205 -
          1.7689e+88 * x4203 * x4218 + x4209 * x4257 - x4224 * x4257;
  x351 = -2700000000000.0 * sc[19] * x10472 +
         1.4e+18 * sc[19] * x2801 * x351 * x71 - 2.8e+18 * sc[19] * x2801 +
         3.3440366972477102e+18 * x105 -
         x10602 * (4.0 * x10477 * x483 + 0.56 * x2644 * x483) -
         8.712e+119 * x1073 * x677 - 1.32e+64 * x1084 +
         x110 * (4.0 * x10477 * x483 + 0.56 * x2644 * x483) -
         x13 * x5354 * x5414 - 1.5201919385796501e+47 * x214 * x731 +
         1.5201919385796501e+47 * x214 * x834 + 2700000000000.0 * x2641 * x784 +
         x2648 - 6.4473684210526297e+29 * x280 + 2.8e+18 * x2813 * x853 -
         x2815 * x351 * x71 + 6.4473684210526297e+29 * x399 +
         3.98e+29 * x5352 * x728 + x5398 * x5414 + x6734 * x6772 +
         8.712e+119 * x6738 + 1.32e+64 * x6742 - x6744 * x6772 -
         8.192e+20 * x7679 * x951 + x7680 * x7685 - x7680 * x7724 +
         8.192e+20 * x7682 + 6400000000000000.0 * x7726 -
         6400000000000000.0 * x7745 - 3.3440366972477102e+18 * x786 -
         3.98e+29 * x867;
  x4257 = 50000000.0 * sc[1] * x1249 + x1250 * x2743 + x340 * x7761 +
          1.33e+48 * x4198 * x526 * exp(x4187 + x4192);
  x5414 = -30000000.0 * sc[15] * x591 - 20000000.0 * sc[15] * x991 - x545 * x93;
  x6772 =
    x1227 * x2434 - x1245 * x2434 + x175 * x416 + 4100.0 * x3869 * exp(x277);
  x7680 = -50000000.0 * sc[1] * x1275 + 50000000.0 * sc[1] * x1288 -
          x1233 * x7761 + x1264 * x7761 - x1276 * x2743 + x1289 * x2743;
  x10494 = -48000000.0 * sc[14] * x1233 + 48000000.0 * sc[14] * x1264 + x10589 +
           50000000.0 * x118 * x388 - x1272 * x995 + x2698 * x70 + x379 * x995;
  const amrex::Real x10639 =
    -30000000.0 * sc[15] * x1275 - 20000000.0 * sc[15] * x1276 +
    30000000.0 * sc[15] * x1288 + 20000000.0 * sc[15] * x1289 + x10594 +
    x1209 * x2679 + x1227 * x93 - x1245 * x93 + x194 * x77;
  const amrex::Real x10650 =
    x1137 * x7750 - x1152 * x7750 + 3.63e+174 * x7545 * x7546 -
    3.63e+174 * x7545 * x7548 - 3.3e+91 * x7553 * x7562 +
    x7555 * x7559 * (6.0 * x7557 + 0.84 * x7558) -
    x7559 * x7577 * (6.0 * x7557 + 0.84 * x7558) + 3.3e+91 * x7580;
  const amrex::Real x10652 =
    -50000000.0 * sc[1] * x1310 + 50000000.0 * sc[1] * x1322 - x1268 * x7761 +
    x1284 * x7761 + x1295 * x2743 - x1311 * x2743 +
    x4186 * x4209 * (0.84 * x4211 * x483 + 6.0 * x4212 * x483) -
    x4186 * x4224 * (0.84 * x4211 * x483 + 6.0 * x4212 * x483) +
    3.99e+48 * x4198 * x4222 + 2.65335e+88 * x4203 * x4205 -
    2.65335e+88 * x4203 * x4218 - 3.99e+48 * x4325;
  const amrex::Real x10655 =
    20000000.0 * sc[15] * x1295 - 30000000.0 * sc[15] * x1310 -
    20000000.0 * sc[15] * x1311 + 30000000.0 * sc[15] * x1322 -
    2.2e+18 * x10448 * x10450 * x13 * (6.0 * x10445 + 0.84 * x2670) +
    2.2e+18 * x10448 * x10453 * x13 * x903 * (6.0 * x10445 + 0.84 * x2670) +
    6.6e+18 * x10450 - 6.6e+18 * x10453 * x903 + x1237 * x2679 + x1254 * x93 -
    x1260 * x93 - 2.6888888888888901e+31 * x17 * x25 +
    2.6888888888888901e+31 * x2674;
  const amrex::Real x10667 =
    x1286 * x7750 - x523 * x7750 + 1.815e+174 * x7545 * x7546 -
    1.815e+174 * x7545 * x7548 - 1.65e+91 * x7553 * x7562 + x7555 * x7609 -
    x7577 * x7609 + 1.65e+91 * x7580;
  const amrex::Real x10668 =
    -4100.0 * sc[6] * x3953 * exp(x277 + x3951) + x1263 * x2434 - x1279 * x2434;
  const amrex::Real x10671 =
    -50000000.0 * sc[1] * x1361 + 50000000.0 * sc[1] * x664 - x1306 * x7761 +
    x1314 * x7761 - x1362 * x2743 + x2743 * x650 +
    x4186 * x4209 * (0.42 * x4211 * x483 + 3.0 * x4212 * x483) -
    x4186 * x4224 * (0.42 * x4211 * x483 + 3.0 * x4212 * x483) +
    1.995e+48 * x4198 * x4222 + 1.326675e+88 * x4203 * x4205 -
    1.326675e+88 * x4203 * x4218 - 1.995e+48 * x4325;
  const amrex::Real x10673 =
    5.7e+29 * refC * x2686 * x2696 * x5155 + sc[12] * x5980 -
    48000000.0 * sc[14] * x1306 + 48000000.0 * sc[14] * x1314 -
    x10512 * x10516 * (3.0 * x10510 + 0.42 * x453) +
    3.8e+29 * x10512 * x10519 * x71 * (3.0 * x10510 + 0.42 * x453) -
    5.7e+29 * x10519 - x1356 * x995 + x2698 * x701 + x333 * x995 -
    6.5636363636363603e+50 * x74 * x80 + 6.5636363636363603e+50 * x75;
  x18 = -30000000.0 * sc[15] * x1361 - 20000000.0 * sc[15] * x1362 +
        20000000.0 * sc[15] * x650 + 30000000.0 * sc[15] * x664 -
        2.2e+18 * x10448 * x10450 * x13 * (3.0 * x10445 + 0.42 * x2670) +
        2.2e+18 * x10448 * x10453 * x13 * x903 * (3.0 * x10445 + 0.42 * x2670) +
        3.3e+18 * x10450 - 3.3e+18 * x10453 * x903 + x1263 * x93 - x1279 * x93 +
        1.3444444444444401e+31 * x13 * x25 * x903 * exp(x18) + x1309 * x2679 -
        1.3444444444444401e+31 * x17 * x25;
  const amrex::Real x10681 = -x1152 * x7750 + x7560;
  const amrex::Real x10684 = -50000000.0 * sc[1] * x1370 +
                             50000000.0 * sc[1] * x1396 - x1351 * x7761 +
                             x1355 * x7761 - x1391 * x2743 + x1398 * x2743;
  const amrex::Real x10686 =
    -30000000.0 * sc[15] * x1370 - 20000000.0 * sc[15] * x1391 +
    30000000.0 * sc[15] * x1396 + 20000000.0 * sc[15] * x1398 + x1298 * x93 -
    x1304 * x93;
  const amrex::Real x10687 = -30000000.0 * sc[15] * x1152 -
                             68000000.0 * sc[19] * x1180 + x1152 * x6708 -
                             x2702 * x508 + x2792 - x502 * x508 + x508 * x516 +
                             x508 * x660 + x508 * x749;
  x2798 =
    -1350000000000.0 * sc[19] * x10472 - 1.4e+18 * sc[19] * x2801 +
    1350000000000.0 * x10472 * x10480 * x2638 - x10480 * x13 * x2651 - x10496 +
    x10499 - x13 * x5354 * x5382 - 7.6009596928982695e+46 * x214 * x731 +
    7.6009596928982695e+46 * x214 * x834 + x2651 + x2798 * x2804 -
    x2798 * x2817 + x2812 + x2815 - x2820 + x3806 + x5354 + x5382 * x5398 -
    4.096e+20 * x7679 * x951 - x7725 + 3200000000000000.0 * x7726 + x7738 +
    x7743 - 3200000000000000.0 * x7745 - 1.99e+29 * x867;
  x2812 = x10569 + x1181 * x2698 + x2689 + x2691 + x2798;
  x2815 = -4.356e+119 * x1073 * x677 - 6.6e+63 * x1084 + x4191 + x6729 * x6734 -
          x6729 * x6744 + 4.356e+119 * x6738 + 6.6e+63 * x6742;
  x2820 = 20000000.0 * sc[10] * x1015 - 20000000.0 * sc[10] * x1406 +
          x1124 * x6702 - x1407 * x6702 +
          12000000.0 * x207 * exp(-3331.2943276272399 * invT) +
          20000000.0 * x65;
  x5354 = 50000000.0 * sc[1] * x1015 - 50000000.0 * sc[1] * x1406 +
          x1113 * x7761 + x1124 * x2743 - x1407 * x2743 - x331 * x7761;
  x5382 = 30000000.0 * sc[15] * x1015 + 20000000.0 * sc[15] * x1124 -
          30000000.0 * sc[15] * x1406 - 20000000.0 * sc[15] * x1407 +
          x1317 * x93 - x1328 * x93;
  x6729 = x10464 + x10503 + x10537 + x10687 - 4.356e+119 * x1073 * x677 -
          6.6e+63 * x1084 + x6729 * x6734 - x6729 * x6744 + 4.356e+119 * x6738 +
          6.6e+63 * x6742;
  x7725 = -50000000.0 * sc[1] * x1424 + 50000000.0 * sc[1] * x1433 -
          x1388 * x7761 + x1404 * x7761 - x1425 * x2743 + x1434 * x2743 +
          1.5e+18 * x868 * exp(x2489);
  x5980 = -48000000.0 * sc[14] * x1388 + 48000000.0 * sc[14] * x1404 -
          sc[22] * x423 * x887 + sc[8] * x5980 - x1423 * x995 + x1431 * x995 +
          x2698 * x691;
  x7738 = 84300000.0 * sc[14] - 30000000.0 * sc[15] * x1424 -
          20000000.0 * sc[15] * x1425 + 30000000.0 * sc[15] * x1433 +
          20000000.0 * sc[15] * x1434 + x1320 * x2679 + x1343 * x93 -
          x203 * x93;
  x7743 = x10463 + x10569 + x2689 + x2792 + x2798 + x2815;
  const amrex::Real x10726 = 50000000.0 * sc[1] * x1443 -
                             50000000.0 * sc[1] * x1454 + x1418 * x7761 +
                             x1436 * x2743 - x1455 * x2743 - x298 * x7761;
  const amrex::Real x10728 =
    20000000.0 * sc[15] * x1436 + 30000000.0 * sc[15] * x1443 -
    30000000.0 * sc[15] * x1454 - 20000000.0 * sc[15] * x1455 + x267 * x93 +
    x2679 * x38 - x621 * x93;
  const amrex::Real x10737 = -50000000.0 * sc[1] * x1463 +
                             50000000.0 * sc[1] * x397 + x1420 * x7761 -
                             x1422 * x7761 - x1480 * x2743 + x1489 * x2743;
  const amrex::Real x10738 = 80.0 * sc[3] * exp(x4294) + x1173 * x2698 +
                             x1475 * x995 - x1477 * x995 + x6188;
  const amrex::Real x10739 =
    84300000.0 * sc[12] - 30000000.0 * sc[15] * x1463 -
    20000000.0 * sc[15] * x1480 + 20000000.0 * sc[15] * x1489 +
    30000000.0 * sc[15] * x397 + x1377 * x2679 + x1386 * x93 - x1392 * x93;
  const amrex::Real x10748 = -50000000.0 * sc[1] * x1488 +
                             50000000.0 * sc[1] * x1505 - x1445 * x7761 +
                             x1450 * x7761 - x1508 * x2743 + x169 * x2743;
  const amrex::Real x10749 = sc[10] * x7285 - 48000000.0 * sc[14] * x1445 +
                             48000000.0 * sc[14] * x1450 - x1503 * x995 +
                             x2698 * x278 + x383 * x995;
  const amrex::Real x10750 =
    -30000000.0 * sc[15] * x1488 + 30000000.0 * sc[15] * x1505 -
    20000000.0 * sc[15] * x1508 + 20000000.0 * sc[15] * x169 + x1400 * x93 -
    x1401 * x93 + x1478 * x2679 + 20000000.0 * x207 + 30000000.0 * x65;
  const amrex::Real x10758 = -50000000.0 * sc[1] * x1519 +
                             50000000.0 * sc[1] * x1539 - x1461 * x7761 +
                             x1471 * x7761 - x1530 * x2743 + x1540 * x2743;
  const amrex::Real x10760 =
    -30000000.0 * sc[15] * x1519 - 20000000.0 * sc[15] * x1530 +
    30000000.0 * sc[15] * x1539 + 20000000.0 * sc[15] * x1540 + x1155 * x93 +
    x2679 * x893 - x447 * x93;
  const amrex::Real x10772 =
    x1059 * x7750 - x1060 * x7750 + 7.26e+174 * x7545 * x7546 -
    7.26e+174 * x7545 * x7548 - 6.6e+91 * x7553 * x7562 + x7555 * x7652 -
    x7577 * x7652 + 6.6e+91 * x7580;
  const amrex::Real x10775 =
    50000000.0 * sc[1] * x465 - 50000000.0 * sc[1] * x475 - x1476 * x7761 +
    x2743 * x301 - x2743 * x527 + 7.98e+48 * x4198 * x4222 +
    5.3067e+88 * x4203 * x4205 - 5.3067e+88 * x4203 * x4218 + x4209 * x4422 -
    x4224 * x4422 - 7.98e+48 * x4325 + x7761 * x99;
  x2686 = 2.28e+30 * refC * x2686 * x2696 * x5155 -
          48000000.0 * sc[14] * x1476 + 48000000.0 * sc[14] * x99 -
          x10512 * x10516 * (12.0 * x10510 + 1.68 * x453) +
          3.8e+29 * x10512 * x10519 * x71 * (12.0 * x10510 + 1.68 * x453) -
          2.28e+30 * x10519 - x1528 * x995 + x2698 * x698 + x387 * x995 -
          2.6254545454545501e+51 * x74 * x80 + 2.6254545454545501e+51 * x75;
  x903 =
    1.32e+19 * refC * x2678 * x8049 + 20000000.0 * sc[15] * x301 +
    30000000.0 * sc[15] * x465 - 30000000.0 * sc[15] * x475 -
    20000000.0 * sc[15] * x527 -
    2.2e+18 * x10448 * x10450 * x13 * (12.0 * x10445 + 1.68 * x2670) +
    2.2e+18 * x10448 * x10453 * x13 * x903 * (12.0 * x10445 + 1.68 * x2670) -
    1.32e+19 * x10453 * x903 - x1157 * x93 + x1504 * x2679 -
    5.3777777777777801e+31 * x17 * x25 + 5.3777777777777801e+31 * x2674 +
    x552 * x93;
  x2678 = 50000000.0 * sc[1] * x254 - 50000000.0 * sc[1] * x67 - x1494 * x7761 +
          x1502 * x7761 + x250 * x2743 - x2743 * x469;
  x10445 = 20000000.0 * sc[15] * x250 + 30000000.0 * sc[15] * x254 -
           20000000.0 * sc[15] * x469 - 30000000.0 * sc[15] * x67 +
           x1429 * x93 - x1438 * x93;
  x2670 = 30000000.0 * sc[15] * x1088 - 30000000.0 * sc[15] * x684 -
          30000000.0 * sc[28] * x1094 - sc[28] * x6700;
  x10448 = -20000000.0 * sc[10] * x28 + 20000000.0 * sc[10] * x597 -
           sc[23] * x7116 - 20000000.0 * sc[23] * x932 - x581 * x6702 +
           x599 * x6702;
  x10450 = -1.1e+91 * sc[27] * x7543 * x7553 - sc[27] * x8180 + x1088 * x7750 -
           x684 * x7750 + x7560;
  x25 = -sc[29] * x190 - sc[29] * x5175 - sc[29] * x6875 + x1442 * x2434 -
        x1448 * x2434 + x175 * x425;
  x17 = 30000000.0 * sc[14] * x1442 - 30000000.0 * sc[14] * x1448 -
        sc[21] * x5552 - sc[21] * x6410 - 30000000.0 * sc[21] * x774;
  x2674 = -50000000.0 * sc[1] * x28 + 50000000.0 * sc[1] * x597 -
          20000000.0 * sc[24] * x246 - 1.33e+48 * sc[24] * x4189 * x4198 -
          sc[24] * x8175 - 50000000.0 * sc[24] * x919 - x1517 * x7761 +
          x1524 * x7761 - x2743 * x581 + x2743 * x599;
  x10510 = -48000000.0 * sc[14] * x1517 + 48000000.0 * sc[14] * x1524 -
           3.8e+29 * sc[22] * x2696 * x71 * exp(x2685) -
           50000000.0 * sc[22] * x5159 - sc[22] * x6416 - sc[22] * x7115 -
           sc[22] * x723 * x887 - 48000000.0 * sc[22] * x826 + x1021 * x2698 -
           x362 * x995 + x455 * x995;
  x453 = -30000000.0 * sc[15] * x28 - 20000000.0 * sc[15] * x581 +
         30000000.0 * sc[15] * x597 + 20000000.0 * sc[15] * x599 -
         2.2e+18 * sc[20] * x10453 * x13 - sc[20] * x5164 - sc[20] * x8168 -
         30000000.0 * sc[20] * x924 - 20000000.0 * sc[20] * x961 + x1442 * x93 -
         x1448 * x93 + x2679 * x49;
  x10512 = -50000000.0 * sc[1] * x493 + 50000000.0 * sc[1] * x604 -
           x1527 * x7761 - x2743 * x659 + x2743 * x670 + x7761 * x864;
  x10516 = -48000000.0 * sc[14] * x1527 + 48000000.0 * sc[14] * x864 +
           x1181 * x2698 + x2689 - x534 * x995 + x563 * x995;
  x10453 = -30000000.0 * sc[15] * x493 + 30000000.0 * sc[15] * x604 -
           20000000.0 * sc[15] * x659 + 20000000.0 * sc[15] * x670 -
           2.2e+18 * sc[19] * x10453 * x13 - sc[19] * x5164 - sc[19] * x8168 -
           30000000.0 * sc[19] * x924 - 20000000.0 * sc[19] * x961 -
           x1467 * x93 + x196 * x93 + x2679 * x586;
  x10519 = -50000000.0 * sc[1] * x566 + 50000000.0 * sc[1] * x787 +
           x1196 * x7761 - x2743 * x589 + x2743 * x855 - x311 * x7761;
  x80 = 48000000.0 * sc[14] * x1196 - 48000000.0 * sc[14] * x311 + x10589 +
        x1154 * x2698 - x481 * x995 + x561 * x995;
  x74 = -30000000.0 * sc[15] * x566 - 20000000.0 * sc[15] * x589 +
        30000000.0 * sc[15] * x787 + 20000000.0 * sc[15] * x855 + x10594 +
        x1133 * x2679 - x1470 * x93 + x197 * x93;
  x75 = -50000000.0 * sc[1] * x68 + 50000000.0 * sc[1] * x688 + x2743 * x971 -
        x2743 * x980 + x445 * x7761 - x450 * x7761;
  x2685 = 48000000.0 * sc[14] * x445 - 48000000.0 * sc[14] * x450 -
          3.8e+29 * sc[19] * x2696 * x71 * exp(x2685) -
          50000000.0 * sc[19] * x5159 - sc[19] * x6416 - sc[19] * x7115 -
          sc[19] * x723 * x887 - 48000000.0 * sc[19] * x826 + x2698 * x707 +
          x369 * x995 - x390 * x995;
  x2696 = -30000000.0 * sc[15] * x68 + 30000000.0 * sc[15] * x688 +
          20000000.0 * sc[15] * x971 - 20000000.0 * sc[15] * x980 +
          x1484 * x93 - x1490 * x93;
  x10589 = 20000000.0 * sc[10] * x1009 - 20000000.0 * sc[10] * x1081 -
           sc[19] * x7116 - 20000000.0 * sc[19] * x932 + x6702 * x949 -
           x6702 * x996;
  x10594 = 50000000.0 * sc[1] * x1009 - 50000000.0 * sc[1] * x1081 +
           x2743 * x949 - x2743 * x996 + x348 * x7761 - x468 * x7761;
  const amrex::Real x10837 =
    30000000.0 * sc[15] * x1009 - 30000000.0 * sc[15] * x1081 +
    20000000.0 * sc[15] * x949 - 20000000.0 * sc[15] * x996 + x1499 * x93 -
    x1513 * x93;
  const amrex::Real x10843 =
    -20000000.0 * sc[19] * x246 - 1.33e+48 * sc[19] * x4189 * x4198 -
    sc[19] * x8175 - 50000000.0 * sc[19] * x919 - 50000000.0 * sc[1] * x1963 +
    50000000.0 * sc[1] * x306 - x217 * x7761 - x2743 * x89 + x2743 * x985 +
    x368 * x7761;
  const amrex::Real x10844 =
    -30000000.0 * sc[15] * x1963 + 30000000.0 * sc[15] * x306 -
    20000000.0 * sc[15] * x89 + 20000000.0 * sc[15] * x985 - x1492 * x93 +
    x646 * x93;
  const amrex::Real x10859 = -50000000.0 * sc[1] * x575 +
                             50000000.0 * sc[1] * x678 - x2743 * x544 +
                             x2743 * x815 + x371 * x7761 - x555 * x7761;
  const amrex::Real x10861 =
    -20000000.0 * sc[15] * x544 - 30000000.0 * sc[15] * x575 +
    30000000.0 * sc[15] * x678 + 20000000.0 * sc[15] * x815 + x10464 +
    x549 * x93 - x550 * x93;
  const amrex::Real x10871 = -sc[19] * x190 - sc[19] * x5175 - sc[19] * x6875 +
                             x10539 - x1169 * x175 + x2434 * x553;
  const amrex::Real x10876 = 50000000.0 * sc[1] * x402 -
                             50000000.0 * sc[1] * x590 + x10551 - x2743 * x649 +
                             x2743 * x675 + x7761 * x904;
  const amrex::Real x10877 =
    30000000.0 * sc[15] * x402 - 30000000.0 * sc[15] * x590 -
    20000000.0 * sc[15] * x649 + 20000000.0 * sc[15] * x675 + x1033 * x93 -
    x545 * x93;
  x4678 = 1350000000000.0 * sc[19] * x10472 -
          1350000000000.0 * x10472 * x10480 * x2638 + x10480 * x13 * x2651 +
          x10496 - x10499 - x2651 + 5.9778837209302301e+29 * x4658 * x4670 -
          5070000000000000.0 * x4661 * x4683 +
          5070000000000000.0 * x4661 * x4692 - x4662 * x4678 -
          5.9778837209302301e+29 * x4670 * x4689 + x4678 * x4686;
  x10480 = 5000000.0 * sc[15] * x1180 + 20000000.0 * sc[19] * x1180 + x4678;
  x2651 = x2518 * x545 - x2653 * x545 + x2832 * x991 - x568 * x8396;
  x10496 = x10175 + x1033 * x2513 - x1033 * x2518 + x1033 * x2560 +
           x1033 * x2585 + x1033 * x2614 + x1033 * x2653 + x1033 * x732 +
           x7769 + x8396 * x904 + x8413 - x904 * x9644 + x9073 + x9649;
  x10499 = 14000000.0 * sc[21] * x1083 + x10464 + x10480 + x10496 + x10558 -
           x1104 * x2832 + x2651 + x5588 + x7707;
  x4663 = 2700000000000.0 * sc[19] * x10472 - 3.3440366972477102e+18 * x105 +
          x10602 * (4.0 * x10477 * x483 + 0.56 * x2644 * x483) -
          x110 * (4.0 * x10477 * x483 + 0.56 * x2644 * x483) -
          2700000000000.0 * x2641 * x784 +
          1.19557674418605e+30 * x4658 * x4670 - 1.014e+16 * x4661 * x4683 +
          1.014e+16 * x4661 * x4692 - x4662 * x4663 + x4663 * x4686 -
          1.19557674418605e+30 * x4670 * x4689 + 3.3440366972477102e+18 * x786;
  x10558 = x10175 + x10464 + x10480 + x2651 + x7707 + x8413;
  const amrex::Real x10896 = x10464 + x10480 + x7707 + x8325;
  const amrex::Real x10898 = 2640000.0 * sc[13] * exp(-754.82499870708 * invT);
  const amrex::Real x10899 = -1173000000000.0 * sc[21] * x5550 * x5555 +
                             1173000000000.0 * x5550 * x5567 +
                             1.0102268722467e+20 * x5558 * x5561 -
                             1.0102268722467e+20 * x5558 * x5564;
  const amrex::Real x10900 =
    14000000.0 * sc[21] * x591 - x10898 * x991 + x10899 + x9059 * x991;
  const amrex::Real x10902 = 30000000.0 * sc[14] * x1033 -
                             14000000.0 * sc[21] * x1083 + x10898 * x1104 +
                             x10900 - x1104 * x9059 + x5659;
  const amrex::Real x10903 =
    2.69e+21 * sc[8] * x5591 -
    x5583 * (0.28 * x483 * x5606 + 2.0 * x483 * x5607) +
    x5584 * (0.28 * x483 * x5606 + 2.0 * x483 * x5607) -
    8.9334567901234601e+36 * x5594 * x5596 +
    8.9334567901234601e+36 * x5594 * x5599 - 2.69e+21 * x5603;
  const amrex::Real x10905 = x10903 + x1181 * x222 + x1181 * x2577 +
                             x1181 * x2698 + x2689 + x8382 + x9578;
  const amrex::Real x10907 = x10905 + x2522 * x545 - x5579 * x991;
  const amrex::Real x10908 = 48000000.0 * sc[14] * x904 - x1033 * x2522 +
                             x10542 + x1067 * x2599 + x1067 * x995 + x5652 +
                             x9640;
  const amrex::Real x10909 =
    x1067 * x2572 + x10907 + x10908 + x1104 * x5579 + x1104 * x9059 + x9065;
  x10576 = 140000.0 * sc[13] * x1117 + x10576 + x1117 * x222 + x1117 * x2608;
  x5606 = 5.38e+21 * sc[8] * x5591 -
          x5583 * (0.56 * x483 * x5606 + 4.0 * x483 * x5607) +
          x5584 * (0.56 * x483 * x5606 + 4.0 * x483 * x5607) -
          1.7866913580246899e+37 * x5594 * x5596 +
          1.7866913580246899e+37 * x5594 * x5599 - 5.38e+21 * x5603;
  x5607 = 20000000.0 * sc[10] * x1083 + x10169 + x1033 * x2522 - x1033 * x998 +
          x10548 + x1104 * x6702 + x5640 + x5656 * x904 + x8409;
  const amrex::Real x10919 = -60000000.0 * sc[24] * x1033 +
                             60000000.0 * sc[24] * x545 + x10171 + x7747 +
                             x904 * x9644;
  const amrex::Real x10921 = x4191 + x7747;
  const amrex::Real x10924 =
    60000000.0 * sc[24] * x545 + x10171 + x10551 + x10553 + x7747;
  const amrex::Real x10927 = -x1033 * x2429 + x2429 * x545 + x5546;
  const amrex::Real x10929 = -x1033 * x2429 + x2429 * x545 + x5544;
  const amrex::Real x10930 = -30000000.0 * sc[15] * x1152 - x1152 * x8329;
  const amrex::Real x10931 =
    30000000.0 * sc[15] * x1137 + x10930 + x1137 * x8329;
  // Write the full Jacobian expression...
  J[0] = -0.0698 * x2704 - 2960.0 * x2708 - 3.17e-13 * x2712 -
         1780000000.0 * x2714 - 7.66e-8 * x2719 - 1.53e+27 * x2721 -
         8.94e-5 * x2723;
  J[32] = 0;
  J[64] = 0;
  J[96] = 0;
  J[128] = 0;
  J[160] = 0;
  J[192] = 0;
  J[224] = 0;
  J[256] = 0;
  J[288] = 0;
  J[320] = 0;
  J[352] = 0;
  J[384] = -3.17e-13 * x2726;
  J[416] = -1780000000.0 * x2727;
  J[448] = -8.94e-5 * x2730;
  J[480] = -2960.0 * x2733;
  J[512] = -0.0698 * x2736;
  J[544] = 0;
  J[576] = 0;
  J[608] = -7.66e-8 * x2739;
  J[640] = 0;
  J[672] = 0;
  J[704] = 0;
  J[736] = 0;
  J[768] = 0;
  J[800] = 0;
  J[832] = 0;
  J[864] = 0;
  J[896] = 0;
  J[928] = 0;
  J[960] = 0;
  J[1] =
    0.111301684 * x2704 + 4719.9568 * x2708 + 5.0548186e-13 * x2712 +
    2838352400.0 * x2714 + 1.22144828e-7 * x2719 + 2.6663004e+27 * x2721 +
    0.000142555452 * x2723 + x2856 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1104 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[33] =
    -1.4e+18 * refC * x2813 * x71 + 50000000.0 * sc[12] * x1160 -
    50000000.0 * sc[12] * x472 + 20000.0 * sc[13] * x272 - sc[13] * x439 -
    sc[15] * x816 - 20000.0 * sc[16] * x716 + 50000000.0 * sc[1] * x1134 -
    50000000.0 * sc[1] * x1161 - 50000000.0 * sc[8] * x880 -
    10.0 * x1062 * x1218 + 10.0 * x1106 * x1218 - x1127 * x2746 -
    x1127 * x2750 - x1127 * x2756 + x1138 * x2743 + x1159 * x2746 +
    x1159 * x2750 + x1159 * x2756 - x1162 * x2743 -
    10.0 * x194 * exp(-4025.7333264377598 * invT + 2.0 * logT) -
    20000000.0 * x207 * exp(-3019.29999482832 * invT) - x225 * x2777 -
    x272 * x516 + x272 * x530 + x411 - 50000000.0 * x65 + x673 + x945 + x987 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1138 + x1162) +
    (-50000000.0 * sc[12] * x396) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[65] =
    50000000.0 * sc[12] * x1234 - 50000000.0 * sc[12] * x36 +
    20000.0 * sc[13] * x1182 + 50000000.0 * sc[1] * x1211 -
    50000000.0 * sc[1] * x1242 + x1103 - 10.0 * x1121 * x1218 +
    10.0 * x1156 * x1218 - x1182 * x516 + x1182 * x530 + x1197 * x2746 +
    x1197 * x2750 + x1197 * x2756 + x1197 * x2766 - x1205 * x2746 -
    x1205 * x2750 - x1205 * x2756 - x1205 * x2766 + x1212 * x2743 -
    x1243 * x2743 + x245 + x262 + 0.227 * x354 * x868 + x582 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1212 + x1243) +
    (-50000000.0 * sc[12] * x396) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[97] =
    50000000.0 * sc[12] * x1248 + 40000000.0 * sc[12] * x1250 -
    50000000.0 * sc[1] * x1249 - 10.0 * x1170 * x1218 + x1170 * x1367 -
    x1250 * x2743 + x1250 * x2832 + x2746 * x340 + x2750 * x340 + x2756 * x340 +
    x2759 + x2762 + x2766 * x340 + x2768 + x2810 + x2838 * x340 + x2850 * x340 +
    x3006 + 8000000000000000.0 * x346 + x635 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1250 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[129] =
    x2856 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1104 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[161] =
    50000000.0 * sc[12] * x1256 + 40000000.0 * sc[12] * x1258 +
    20000.0 * sc[13] * x757 - 50000000.0 * sc[1] * x1257 +
    50000000.0 * sc[1] * x591 + x1051 * x2746 + x1051 * x2750 + x1051 * x2756 +
    x1051 * x2766 + x1051 * x2838 + x1051 * x2850 - 10.0 * x1183 * x1218 +
    x1183 * x1367 + 10.0 * x1218 * x545 - x1258 * x2743 + x1258 * x2832 +
    x2743 * x991 - x2746 * x568 + x2753 + x2759 + x2762 + x2768 + x2792 +
    x2810 + x2821 + x3006 + 1.6e+16 * x346 - x516 * x757 + x530 * x757 +
    x660 * x757 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1258 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[193] =
    -50000000.0 * sc[12] * x1272 + 50000000.0 * sc[12] * x379 +
    20000.0 * sc[13] * x1262 + 50000000.0 * sc[1] * x1275 -
    50000000.0 * sc[1] * x1288 + x1103 - 10.0 * x1218 * x1227 +
    10.0 * x1218 * x1245 - x1233 * x2746 - x1233 * x2750 - x1233 * x2756 -
    x1233 * x2766 - x1262 * x516 + x1262 * x530 + x1264 * x2746 +
    x1264 * x2750 + x1264 * x2756 + x1264 * x2766 + x1276 * x2743 -
    x1289 * x2743 + x245 + x3059 + x3065 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1276 + x1289) +
    (-50000000.0 * sc[12] * x396) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[225] =
    -50000000.0 * sc[12] * x1287 + 50000000.0 * sc[12] * x1319 +
    20000.0 * sc[13] * x1303 + 50000000.0 * sc[1] * x1310 -
    50000000.0 * sc[1] * x1322 - 10.0 * x1218 * x1254 + 10.0 * x1218 * x1260 -
    x1268 * x2746 - x1268 * x2750 - x1268 * x2756 - x1268 * x2766 +
    x1284 * x2746 + x1284 * x2750 + x1284 * x2756 + x1284 * x2766 -
    x1295 * x2743 - x1303 * x516 + x1303 * x530 + x1311 * x2743 + x3095 +
    x3102 + x411 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1295 - x1311) +
    (-50000000.0 * sc[12] * x396) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[257] =
    -50000000.0 * sc[12] * x1356 + 50000000.0 * sc[12] * x333 +
    20000.0 * sc[13] * x1315 + 2.1e+18 * sc[19] * x2801 +
    50000000.0 * sc[1] * x1361 - 50000000.0 * sc[1] * x664 -
    50000000.0 * sc[1] * x880 + x107 * x2777 - 10.0 * x1218 * x1263 +
    10.0 * x1218 * x1279 - x1306 * x2746 - x1306 * x2750 - x1306 * x2756 -
    x1306 * x2766 + x1314 * x2746 + x1314 * x2750 + x1314 * x2756 +
    x1314 * x2766 - x1315 * x516 + x1315 * x530 + x1362 * x2743 - x2743 * x650 +
    4.8355263157894698e+29 * x280 - x2804 * (3.0 * x2796 + 0.42 * x504) -
    2.1e+18 * x2813 * x853 + x2817 * (3.0 * x2796 + 0.42 * x504) + x3141 +
    x3147 - 4.8355263157894698e+29 * x399 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1362 + x650) +
    (-50000000.0 * sc[12] * x396) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[289] =
    -40000000.0 * sc[12] * x1391 + 50000000.0 * sc[12] * x1395 +
    40000000.0 * sc[12] * x1398 - 50000000.0 * sc[12] * x666 +
    50000000.0 * sc[1] * x1370 - 50000000.0 * sc[1] * x1396 -
    10.0 * x1218 * x1298 + 10.0 * x1218 * x1304 - x1351 * x2746 -
    x1351 * x2750 - x1351 * x2756 - x1351 * x2766 - x1351 * x2850 +
    x1355 * x2746 + x1355 * x2750 + x1355 * x2756 + x1355 * x2766 +
    x1355 * x2850 + x1391 * x2743 - x1398 * x2743 + x2794 + x2821 + x3179 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1391 + x1398) +
    (-50000000.0 * sc[12] * x396) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[321] =
    40000000.0 * sc[12] * x1124 - 50000000.0 * sc[12] * x1189 -
    40000000.0 * sc[12] * x1407 + 50000000.0 * sc[12] * x308 -
    50000000.0 * sc[1] * x1015 + 50000000.0 * sc[1] * x1406 + x1113 * x2746 +
    x1113 * x2750 + x1113 * x2756 + x1113 * x2766 + x1113 * x2850 -
    x1124 * x2743 - 10.0 * x1218 * x1317 + 10.0 * x1218 * x1328 +
    x1407 * x2743 - x2746 * x331 - x2750 * x331 - x2756 * x331 - x2766 * x331 +
    x2794 - x2850 * x331 + x3211 + x411 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1124 - x1407) +
    (-50000000.0 * sc[12] * x396) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[353] =
    x2856 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1104 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[385] =
    -50000000.0 * sc[12] * x1423 + 50000000.0 * sc[12] * x1431 +
    20000.0 * sc[13] * x1341 + 50000000.0 * sc[1] * x1424 -
    50000000.0 * sc[1] * x1433 - 10.0 * x1218 * x1343 + 10.0 * x1218 * x203 -
    x1341 * x516 + x1341 * x530 - x1388 * x2746 - x1388 * x2750 -
    x1388 * x2756 + x1404 * x2746 + x1404 * x2750 + x1404 * x2756 +
    x1425 * x2743 - x1434 * x2743 + 5.0548186000000003e-13 * x2726 + x2792 +
    x2821 + 50000000.0 * x388 + x392 + x394 + x886 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1425 + x1434) +
    (-50000000.0 * sc[12] * x396) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[417] =
    -50000000.0 * sc[12] * x1451 + 50000000.0 * sc[12] * x1462 +
    20000.0 * sc[13] * x1371 - 50000000.0 * sc[1] * x1443 +
    50000000.0 * sc[1] * x1454 - sc[1] * x439 - 20000.0 * sc_qss[2] * x275 -
    10.0 * x1218 * x267 + 10.0 * x1218 * x621 - x1371 * x516 + x1371 * x530 +
    x1418 * x2746 + x1418 * x2750 + x1418 * x2756 + x1418 * x2766 -
    x1436 * x2743 + x1455 * x2743 + 2838352400.0 * x2727 - x2746 * x298 -
    x2750 * x298 - x2756 * x298 - x2766 * x298 + x2792 + x2821 + x3285 + x3292 -
    20000.0 * x763 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1436 - x1455) +
    (-50000000.0 * sc[12] * x396) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[449] =
    50000000.0 * sc[12] * x1475 - 50000000.0 * sc[12] * x1477 +
    20000.0 * sc[13] * x1428 + 50000000.0 * sc[1] * x1463 -
    50000000.0 * sc[1] * x397 - 10.0 * x1218 * x1386 + 10.0 * x1218 * x1392 +
    x1420 * x2746 + x1420 * x2750 + x1420 * x2756 + x1420 * x2766 -
    x1422 * x2746 - x1422 * x2750 - x1422 * x2756 - x1422 * x2766 -
    x1428 * x516 + x1428 * x530 + x1480 * x2743 - x1489 * x2743 +
    0.000142555452 * x2730 + x2792 + x2821 + x3320 + x3328 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1480 + x1489) +
    (-50000000.0 * sc[12] * x396) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[481] =
    -50000000.0 * sc[12] * x1503 + 50000000.0 * sc[12] * x383 +
    20000.0 * sc[13] * x1498 + 50000000.0 * sc[1] * x1488 -
    50000000.0 * sc[1] * x1505 - sc[1] * x816 - 10.0 * x1218 * x1400 +
    10.0 * x1218 * x1401 - x1445 * x2746 - x1445 * x2750 - x1445 * x2756 -
    x1445 * x2766 + x1450 * x2746 + x1450 * x2750 + x1450 * x2756 +
    x1450 * x2766 - x1498 * x516 + x1498 * x530 + x1508 * x2743 - x169 * x2743 +
    4719.9568 * x2733 + x2792 + x2821 + x3357 + x3365 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1508 + x169) +
    (-50000000.0 * sc[12] * x396) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[513] =
    50000000.0 * sc[12] * x1537 - 50000000.0 * sc[12] * x872 +
    20000.0 * sc[13] * x486 + 50000000.0 * sc[1] * x1519 -
    50000000.0 * sc[1] * x1539 - 20000.0 * sc[1] * x716 - 10.0 * x1155 * x1218 +
    10.0 * x1218 * x447 + 42200000.0 * x1440 * x868 - x1461 * x2746 -
    x1461 * x2750 - x1461 * x2756 - x1461 * x2766 + x1471 * x2746 +
    x1471 * x2750 + x1471 * x2756 + x1471 * x2766 + x1530 * x2743 -
    x1540 * x2743 + 0.111301684 * x2736 + x2792 + x2821 + x3396 + x3403 -
    x486 * x516 + x486 * x530 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x1530 + x1540) +
    (-50000000.0 * sc[12] * x396) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[545] =
    -50000000.0 * sc[12] * x1528 + 50000000.0 * sc[12] * x387 +
    20000.0 * sc[13] * x264 + 8.4e+18 * sc[19] * x2801 -
    50000000.0 * sc[1] * x465 + 50000000.0 * sc[1] * x475 +
    10.0 * x1157 * x1218 - 10.0 * x1218 * x552 - x1476 * x2746 - x1476 * x2750 -
    x1476 * x2756 - x1476 * x2766 + 3.6 * x1495 * x868 - x264 * x516 +
    x264 * x530 - x2743 * x301 + x2743 * x527 + x2746 * x99 + x2750 * x99 +
    x2756 * x99 + x2766 * x99 + 1.9342105263157899e+30 * x280 -
    x2804 * (12.0 * x2796 + 1.68 * x504) - 8.4e+18 * x2813 * x853 +
    x2817 * (12.0 * x2796 + 1.68 * x504) + x3441 -
    1.9342105263157899e+30 * x399 + x713 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x301 - x527) +
    (-50000000.0 * sc[12] * x396) * (x465 - x475 + (-x413) * (x301 - x527)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[577] =
    40000000.0 * sc[12] * x250 - 50000000.0 * sc[12] * x459 -
    40000000.0 * sc[12] * x469 + 50000000.0 * sc[12] * x519 -
    50000000.0 * sc[1] * x254 + 50000000.0 * sc[1] * x67 -
    10.0 * x1218 * x1429 + 10.0 * x1218 * x1438 - x1494 * x2746 -
    x1494 * x2750 - x1494 * x2756 - x1494 * x2766 - x1494 * x2850 +
    x1502 * x2746 + x1502 * x2750 + x1502 * x2756 + x1502 * x2766 +
    x1502 * x2850 - x250 * x2743 + x2743 * x469 + x2779 + x2794 + x2821 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x250 - x469) +
    (-50000000.0 * sc[12] * x396) * (x254 - x67 + (-x413) * (x250 - x469)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[609] =
    -50000000.0 * sc[12] * x362 + 50000000.0 * sc[12] * x455 +
    20000.0 * sc[13] * x714 + 50000000.0 * sc[1] * x28 -
    50000000.0 * sc[1] * x597 + 20000000.0 * sc[24] * x246 +
    50000000.0 * sc[24] * x919 + 8000000000000000.0 * sc[3] * exp(x211) +
    1.6e+16 * sc[5] * exp(x211) - 10.0 * x1218 * x1442 + 10.0 * x1218 * x1448 -
    x1517 * x2746 - x1517 * x2750 - x1517 * x2756 - x1517 * x2766 +
    x1524 * x2746 + x1524 * x2750 + x1524 * x2756 + x1524 * x2766 +
    1.22144828e-7 * x2739 + x2743 * x581 - x2743 * x599 + x2774 + x2783 +
    x2792 + 1.4e+18 * x2801 * x71 + x2821 - x516 * x714 + x530 * x714 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x581 + x599) +
    (-50000000.0 * sc[12] * x396) * (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[641] =
    -50000000.0 * sc[12] * x534 + 50000000.0 * sc[12] * x563 +
    20000.0 * sc[13] * x273 + 50000000.0 * sc[1] * x493 -
    50000000.0 * sc[1] * x604 + 10.0 * x1218 * x1467 - 10.0 * x1218 * x196 -
    x1527 * x2746 - x1527 * x2750 - x1527 * x2756 - x1527 * x2766 -
    x273 * x516 + x273 * x530 + x2743 * x659 - x2743 * x670 + x2746 * x864 +
    x2750 * x864 + x2756 * x864 + x2766 * x864 + x2785 + x2792 + x2821 + x585 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x659 + x670) +
    (-50000000.0 * sc[12] * x396) * (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[673] =
    -50000000.0 * sc[12] * x481 + 50000000.0 * sc[12] * x561 +
    20000.0 * sc[13] * x539 + 50000000.0 * sc[1] * x566 -
    50000000.0 * sc[1] * x787 + x1103 + x1196 * x2746 + x1196 * x2750 +
    x1196 * x2756 + x1196 * x2766 + 10.0 * x1218 * x1470 - 10.0 * x1218 * x197 +
    x251 + x2743 * x589 - x2743 * x855 - x2746 * x311 - x2750 * x311 -
    x2756 * x311 - x2766 * x311 + x2789 - x516 * x539 + x530 * x539 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x589 + x855) +
    (-50000000.0 * sc[12] * x396) * (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[705] =
    50000000.0 * sc[12] * x369 - 50000000.0 * sc[12] * x390 +
    40000000.0 * sc[12] * x971 - 40000000.0 * sc[12] * x980 +
    50000000.0 * sc[1] * x68 - 50000000.0 * sc[1] * x688 -
    10.0 * x1218 * x1484 + 10.0 * x1218 * x1490 - x2743 * x971 + x2743 * x980 +
    x2746 * x445 - x2746 * x450 + x2750 * x445 - x2750 * x450 + x2756 * x445 -
    x2756 * x450 + x2766 * x445 - x2766 * x450 + x2794 + x2821 + x2850 * x445 -
    x2850 * x450 + x613 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x971 - x980) +
    (-50000000.0 * sc[12] * x396) * (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[737] =
    50000000.0 * sc[12] * x1004 - 50000000.0 * sc[12] * x626 +
    40000000.0 * sc[12] * x949 - 40000000.0 * sc[12] * x996 -
    50000000.0 * sc[1] * x1009 + 50000000.0 * sc[1] * x1081 -
    10.0 * x1218 * x1499 + 10.0 * x1218 * x1513 - x2743 * x949 + x2743 * x996 +
    x2746 * x348 - x2746 * x468 + x2750 * x348 - x2750 * x468 + x2756 * x348 -
    x2756 * x468 + x2766 * x348 - x2766 * x468 + x2794 + x2821 + x2850 * x348 -
    x2850 * x468 + x3657 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x949 - x996) +
    (-50000000.0 * sc[12] * x396) * (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[769] =
    -50000000.0 * sc[12] * x1031 + 50000000.0 * sc[12] * x1042 -
    40000000.0 * sc[12] * x89 + 40000000.0 * sc[12] * x985 +
    20000000.0 * sc[19] * x246 + 50000000.0 * sc[19] * x919 +
    50000000.0 * sc[1] * x1963 - 50000000.0 * sc[1] * x306 +
    10.0 * x1218 * x1492 - 10.0 * x1218 * x646 - x217 * x2746 - x217 * x2750 -
    x217 * x2756 - x217 * x2766 - x217 * x2850 + x2743 * x89 - x2743 * x985 +
    x2746 * x368 + x2750 * x368 + x2756 * x368 + x2766 * x368 + x2794 + x2821 +
    x2850 * x368 + x3691 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x89 + x985) +
    (-50000000.0 * sc[12] * x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[801] =
    40000000.0 * sc[12] * x1055 + 50000000.0 * sc[12] * x336 -
    50000000.0 * sc[1] * x359 - x1055 * x2743 + x1055 * x2832 -
    10.0 * x1218 * x1535 + x1367 * x1535 + x2746 * x655 + x2750 * x655 +
    x2756 * x655 + x2759 + x2762 + x2766 * x655 + x2768 + x2810 + x2838 * x655 +
    x2850 * x655 + x3006 + x635 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1055 - x991) +
    (-50000000.0 * sc[12] * x396) * (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[833] =
    -50000000.0 * sc[12] * x482 - 40000000.0 * sc[12] * x544 +
    50000000.0 * sc[12] * x567 + 40000000.0 * sc[12] * x815 +
    50000000.0 * sc[1] * x575 - 50000000.0 * sc[1] * x678 -
    10.0 * x1218 * x549 + 10.0 * x1218 * x550 + x2743 * x544 - x2743 * x815 +
    x2746 * x371 - x2746 * x555 + x2750 * x371 - x2750 * x555 + x2756 * x371 -
    x2756 * x555 + x2766 * x371 - x2766 * x555 + x2794 + x2821 + x2850 * x371 -
    x2850 * x555 + x3741 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x544 + x815) +
    (-50000000.0 * sc[12] * x396) * (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[865] =
    x2856 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1104 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[897] =
    x2856 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x1104 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[929] =
    50000000.0 * sc[12] * x479 + 40000000.0 * sc[12] * x647 -
    50000000.0 * sc[1] * x1018 - 10.0 * x1218 * x553 + x1367 * x553 -
    x2743 * x647 + x2746 * x372 + x2750 * x372 + x2756 * x372 + x2759 + x2762 +
    x2766 * x372 + x2768 + x2810 + x2832 * x647 + x2838 * x372 + x2850 * x372 +
    x3006 + x635 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (x647 - x991) +
    (-50000000.0 * sc[12] * x396) * (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[961] =
    -40000000.0 * sc[12] * x649 + 40000000.0 * sc[12] * x675 -
    50000000.0 * sc[1] * x402 + 50000000.0 * sc[1] * x590 + x1033 * x1367 +
    x2743 * x649 - x2743 * x675 + x2827 - x2832 * x649 + x2832 * x675 +
    x2838 * x904 + x2842 - x2850 * x568 + x2850 * x904 +
    (50000000.0 * sc[1] * x413 + 10.0 * x1218 * x441 - x1367 * x441) *
      (-x649 + x675) +
    (-50000000.0 * sc[12] * x396) * (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-1.51e-11 * sc[15] * x113 * x1468 - 4.22e-5 * sc[16] * x1440 * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 -
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) -
     2.27e-13 * sc[2] * x1468 * x354 - 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-10.0 * x1218 * x442 + x1367 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-20000.0 * sc[13] * x275 + x275 * x516 - x275 * x530 - x275 * x660) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[2] =
    0.03141 * x2704 + 1332.0 * x2708 + 4.5965e-13 * x2712 +
    801000000.0 * x2714 + 3.447e-8 * x2719 + 4.023e-5 * x2723 + x3780 + x3782 +
    x3836 + x3838 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1104 - x991) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[34] =
    8480000.0 * sc[12] * x1062 - 8480000.0 * sc[12] * x1106 + sc[12] * x943 -
    x1062 * x732 + x1106 * x732 + x1127 * x2766 + x1138 * x3773 -
    x1159 * x2766 - x1162 * x3773 - x272 * x559 + x3836 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1138 + x1162) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (x275 * x559) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[66] =
    8480000.0 * sc[12] * x1121 - 8480000.0 * sc[12] * x1156 - sc[13] * x990 -
    sc[14] * x3864 - sc[16] * x3859 - sc[24] * x3855 - sc[27] * x3850 -
    8480000.0 * sc[8] * x807 - x1121 * x732 + x1156 * x732 - x1182 * x559 -
    x1197 * x2766 + x1205 * x2766 + x1212 * x3773 - x1214 * x3785 -
    x1243 * x3773 - x138 * x194 - 2.46 * x207 * exp(x3770) - x2777 * x851 -
    0.227 * x354 * x868 - x3784 * x942 + x3785 * x535 + x3805 - x3814 -
    x3869 * x542 - x3874 - x3881 - x420 * x558 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1212 + x1243) +
    (x436 * x558) * (x1214 - x535) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (x275 * x559) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[98] =
    8480000.0 * sc[12] * x1170 - x1170 * x732 - x1250 * x3773 - x2766 * x340 +
    x3776 + x3782 + x3836 + x3838 + x3909 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1250 - x991) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (x275 * x559) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[130] =
    x3780 + x3782 + x3836 + x3838 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1104 - x991) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[162] =
    8480000.0 * sc[12] * x1183 - x1051 * x2766 - x1183 * x732 - x1258 * x3773 +
    x3776 + x3836 + x3838 - x559 * x757 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1258 - x991) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (x275 * x559) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[194] =
    8480000.0 * sc[12] * x1227 - 8480000.0 * sc[12] * x1245 + sc[12] * x3919 +
    x1223 * x3785 - x1225 * x3785 - x1227 * x732 + x1233 * x2766 +
    x1245 * x732 - x1262 * x559 - x1264 * x2766 + x1276 * x3773 -
    x1289 * x3773 + x3805 - x416 * x558 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1276 + x1289) +
    (x436 * x558) * (-x1223 + x1225) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (x275 * x559) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[226] =
    8480000.0 * sc[12] * x1254 - 8480000.0 * sc[12] * x1260 + sc[12] * x3941 -
    x1098 * x3929 + x1116 * x3929 - x1137 * x3785 + x1152 * x3785 -
    x1254 * x732 + x1260 * x732 + x1268 * x2766 - x1284 * x2766 -
    x1295 * x3773 - x1303 * x559 + x1311 * x3773 +
    1.4493375590551199e+33 * x3794 * x3795 -
    1.4493375590551199e+33 * x3794 * x3832 - 7.431e+21 * x3812 * x3822 +
    7.431e+21 * x3812 * x3827 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1295 - x1311) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (x275 * x559) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[258] =
    8480000.0 * sc[12] * x1263 - 8480000.0 * sc[12] * x1279 -
    8480000.0 * sc[2] * x807 - x1098 * x3956 + x1116 * x3956 - x1263 * x732 +
    x1279 * x732 - x1286 * x3785 + x1306 * x2766 - x1314 * x2766 -
    x1315 * x559 + x1362 * x3773 + x182 - x3773 * x650 + x3785 * x523 +
    7.2466877952755894e+32 * x3794 * x3795 -
    7.2466877952755894e+32 * x3794 * x3832 - 3.7155e+21 * x3812 * x3822 +
    3.7155e+21 * x3812 * x3827 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1362 + x650) +
    (x436 * x558) * (x1286 - x523) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (x275 * x559) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[290] =
    8480000.0 * sc[12] * x1298 - 8480000.0 * sc[12] * x1304 + sc[12] * x3968 -
    x1298 * x732 + x1304 * x732 + x1351 * x2766 - x1355 * x2766 +
    x1391 * x3773 - x1398 * x3773 - x3785 * x83 + x3972 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1391 + x1398) +
    (x436 * x558) * (-x1152 + x83) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (x275 * x559) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[322] =
    8480000.0 * sc[12] * x1317 - 8480000.0 * sc[12] * x1328 - x1113 * x2766 -
    x1124 * x3773 - x1317 * x732 + x1328 * x732 + x1407 * x3773 + x2766 * x331 +
    x3782 + x3836 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1124 - x1407) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (x275 * x559) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[354] =
    -x121 * x3785 + x3780 + x3838 + x3972 + x3983 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1104 - x991) +
    (x436 * x558) * (-x1152 + x121) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[386] =
    8480000.0 * sc[12] * x1343 - 8480000.0 * sc[12] * x203 +
    4.92 * sc[12] * exp(2.0 * g_RT[12] - g_RT[2] - g_RT_qss[0] + x3770) +
    sc[15] * x3991 + 1000000.0 * sc[16] + sc[17] * x3996 + sc[1] * x943 +
    sc[20] * x4008 + sc[29] * x3998 + sc[6] * x3919 + sc[7] * x3941 +
    sc[9] * x3968 - x1341 * x559 - x1343 * x732 + x1388 * x2766 -
    x1404 * x2766 + x1425 * x3773 - x1434 * x3773 + 8480000.0 * x194 +
    x203 * x732 + 2.477e+21 * x2638 * x3812 * exp(x3808) + 4.5965e-13 * x2726 -
    x3785 * x671 + x3785 * x680 + x3835 + x3987 + x3988 + x3990 + x558 * x771 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1425 + x1434) +
    (x436 * x558) * (x671 - x680) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (x275 * x559) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[418] =
    8480000.0 * sc[12] * x267 - 8480000.0 * sc[12] * x621 - sc[2] * x990 -
    x1096 * x3785 + x1270 * x3785 - x1371 * x559 - x1418 * x2766 -
    x1436 * x3773 + x1455 * x3773 - x267 * x732 + 801000000.0 * x2727 +
    x2766 * x298 + x3835 + x558 * x682 + x621 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1436 - x1455) +
    (x436 * x558) * (x1096 - x1270) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (x275 * x559) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[450] =
    8480000.0 * sc[12] * x1386 - 8480000.0 * sc[12] * x1392 - sc[2] * x3864 -
    x1386 * x732 + x1392 * x732 - x1420 * x2766 + x1422 * x2766 - x1428 * x559 +
    x1480 * x3773 - x1489 * x3773 - x1889 * x3785 + x1890 * x3785 +
    4.023e-5 * x2730 + x3835 + x558 * x653 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1480 + x1489) +
    (x436 * x558) * (x1889 - x1890) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (x275 * x559) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[482] =
    8480000.0 * sc[12] * x1400 - 8480000.0 * sc[12] * x1401 + sc[12] * x3991 -
    x1400 * x732 + x1401 * x732 + x1445 * x2766 - x1450 * x2766 - x1498 * x559 +
    x1508 * x3773 - x169 * x3773 - x1894 * x3785 + x1895 * x3785 +
    1332.0 * x2733 + x3835 - x4042 - x418 * x558 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1508 + x169) +
    (x436 * x558) * (x1894 - x1895) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (x275 * x559) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[514] =
    8480000.0 * sc[12] * x1155 - 8480000.0 * sc[12] * x447 +
    1000000.0 * sc[12] - sc[2] * x3859 - x1155 * x732 + x1461 * x2766 -
    x1471 * x2766 + x1530 * x3773 - x1540 * x3773 - x1899 * x3785 +
    x1900 * x3785 + 0.03141 * x2736 + x3835 - x427 * x558 + x447 * x732 -
    x486 * x559 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x1530 + x1540) +
    (x436 * x558) * (x1899 - x1900) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (x275 * x559) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[546] =
    -8480000.0 * sc[12] * x1157 + sc[12] * x3996 + 8480000.0 * sc[12] * x552 -
    x1059 * x3785 + x1060 * x3785 - x1098 * x3796 + x1116 * x3796 +
    x1157 * x732 + x1476 * x2766 - x264 * x559 - x2766 * x99 - x301 * x3773 +
    x3773 * x527 + 2.8986751181102398e+33 * x3794 * x3795 -
    2.8986751181102398e+33 * x3794 * x3832 - 1.4862e+22 * x3812 * x3822 +
    1.4862e+22 * x3812 * x3827 - x422 * x558 - x552 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x301 - x527) +
    (x436 * x558) * (x1059 - x1060) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (x275 * x559) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[578] =
    8480000.0 * sc[12] * x1429 - 8480000.0 * sc[12] * x1438 - x1068 * x3785 -
    x1429 * x732 + x1438 * x732 + x1494 * x2766 - x1502 * x2766 - x250 * x3773 +
    x33 * x3785 + x3773 * x469 + x3782 + x3797 + x3835 - x398 * x558 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x250 - x469) +
    (x436 * x558) * (x1068 - x33) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (x275 * x559) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[610] =
    2.477e+21 * sc[12] * x13 * x3812 * exp(x3808) + 8480000.0 * sc[12] * x1442 -
    8480000.0 * sc[12] * x1448 - x1088 * x3785 - x1442 * x732 + x1448 * x732 +
    x1517 * x2766 - x1524 * x2766 + 3.447e-8 * x2739 + x3773 * x581 -
    x3773 * x599 + x3785 * x684 - x3802 + x3835 - x425 * x558 - x559 * x714 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x581 + x599) +
    (x436 * x558) * (x1088 - x684) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (x275 * x559) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[642] =
    -8480000.0 * sc[12] * x1467 + 8480000.0 * sc[12] * x196 + sc[12] * x4008 +
    x1467 * x732 + x1527 * x2766 - x196 * x732 - x273 * x559 - x2766 * x864 +
    x3773 * x659 - x3773 * x670 + x3836 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x659 + x670) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (x275 * x559) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[674] =
    -8480000.0 * sc[12] * x1470 + 8480000.0 * sc[12] * x197 - x1087 * x3785 +
    x1100 * x3785 - x1196 * x2766 + x1470 * x732 - x197 * x732 + x2766 * x311 +
    x3773 * x589 - x3773 * x855 + x3805 - x539 * x559 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x589 + x855) +
    (x436 * x558) * (x1087 - x1100) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (x275 * x559) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[706] =
    8480000.0 * sc[12] * x1484 - 8480000.0 * sc[12] * x1490 - x1484 * x732 +
    x1490 * x732 - x2766 * x445 + x2766 * x450 - x3773 * x971 + x3773 * x980 +
    x3782 + x3836 + (-8480000.0 * sc[12] * x441 + x441 * x732) * (x971 - x980) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (x275 * x559) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[738] =
    8480000.0 * sc[12] * x1499 - 8480000.0 * sc[12] * x1513 - x1131 * x3785 -
    x1499 * x732 + x1513 * x732 - x2766 * x348 + x2766 * x468 - x3773 * x949 +
    x3773 * x996 + x3972 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x949 - x996) +
    (x436 * x558) * (x1131 - x1152) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (x275 * x559) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[770] =
    -8480000.0 * sc[12] * x1492 + 8480000.0 * sc[12] * x646 - sc[2] * x3855 +
    x1492 * x732 + x217 * x2766 - x2766 * x368 + x3773 * x89 - x3773 * x985 +
    x3782 + x3836 - x646 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x89 + x985) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (x275 * x559) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[802] =
    8480000.0 * sc[12] * x1535 - x1055 * x3773 - x1535 * x732 - x2766 * x655 +
    x3776 + x3782 + x3836 + x3838 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1055 - x991) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (x275 * x559) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[834] =
    8480000.0 * sc[12] * x549 - 8480000.0 * sc[12] * x550 - x1139 * x3785 -
    x2766 * x371 + x2766 * x555 + x3773 * x544 - x3773 * x815 + x3972 -
    x549 * x732 + x550 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x544 + x815) +
    (x436 * x558) * (x1139 - x1152) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (x275 * x559) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[866] =
    -sc[2] * x3850 - x1143 * x3785 + x3780 + x3838 + x3972 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1104 - x991) +
    (x436 * x558) * (x1143 - x1152) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[898] =
    -x1092 * x3785 + x3780 + x3838 + x3972 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x1104 - x991) +
    (x436 * x558) * (x1092 - x1152) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[930] =
    sc[12] * x3998 + 8480000.0 * sc[12] * x553 - x1080 * x3785 + x1169 * x558 -
    x2766 * x372 - x3773 * x647 + x3776 + x3838 + x3972 - x553 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (x647 - x991) +
    (x436 * x558) * (x1080 - x1152) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (x275 * x559) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[962] =
    8480000.0 * sc[12] * x1033 - x1033 * x732 + x2766 * x568 - x2766 * x904 +
    x3773 * x649 - x3773 * x675 + x3776 + x3782 + x3836 + x545 * x732 +
    (-8480000.0 * sc[12] * x441 + x441 * x732) * (-x649 + x675) +
    (x436 * x558) * (x509) +
    (2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (8480000.0 * sc[12] * x442 - x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (x275 * x559) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[3] =
    0.052311679799999997 * x2704 + 2218.37496 * x2708 +
    2.3757596699999998e-13 * x2712 + 1334022780.0 * x2714 +
    5.74079466e-8 * x2719 + 1.25315874e+27 * x2721 + 6.70009194e-5 * x2723 +
    x4229 + (-60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[35] =
    sc[12] * x854 + 60000000.0 * sc[24] * x1062 - 60000000.0 * sc[24] * x1106 -
    x1127 * x4155 + x1159 * x4155 + x4226 + x4239 +
    (-60000000.0 * sc[24] * x441) * (-x1138 + x1162) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (60000000.0 * sc[24] * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[67] =
    60000000.0 * sc[24] * x1121 - 60000000.0 * sc[24] * x1156 + sc[24] * x3855 +
    x1197 * x4155 - x1205 * x4155 + x4264 +
    (-60000000.0 * sc[24] * x441) * (-x1212 + x1243) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (60000000.0 * sc[24] * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[99] =
    -sc[12] * x4301 - sc[12] * x4303 - sc[13] * x4270 - sc[15] * x4276 +
    60000000.0 * sc[24] * x1170 - 60000000.0 * sc[8] * x779 - x1246 * x959 +
    x340 * x4155 - 8000000000000000.0 * x346 - x3909 -
    1.33e+48 * x4198 * x526 * exp(x4187 + x4192) + x4279 - x4287 + x4298 +
    (-60000000.0 * sc[24] * x441) * (x1250 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[131] =
    sc[19] * x4306 + x4229 + (-60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[163] =
    60000000.0 * sc[24] * x1183 + x1051 * x4155 + 3.2e+16 * x346 + x4279 +
    (-60000000.0 * sc[24] * x441) * (x1258 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[195] = 60000000.0 * sc[24] * x1227 - 60000000.0 * sc[24] * x1245 +
           sc[24] * x4314 - x1233 * x4155 + x1264 * x4155 + x4264 +
           (-60000000.0 * sc[24] * x441) * (-x1276 + x1289) +
           (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
             (-x1272 + x379 +
              (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
           (60000000.0 * sc[24] * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[227] = 60000000.0 * sc[24] * x1254 - 60000000.0 * sc[24] * x1260 -
           x1268 * x4155 + x1284 * x4155 -
           x4186 * x4209 * (0.84 * x4211 * x483 + 6.0 * x4212 * x483) +
           x4186 * x4224 * (0.84 * x4211 * x483 + 6.0 * x4212 * x483) -
           3.99e+48 * x4198 * x4222 - 2.65335e+88 * x4203 * x4205 +
           2.65335e+88 * x4203 * x4218 + x4239 + 3.99e+48 * x4325 +
           (-60000000.0 * sc[24] * x441) * (x1295 - x1311) +
           (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
             (-x1287 + x1319 +
              (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
           (60000000.0 * sc[24] * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[259] =
    60000000.0 * sc[24] * x1263 - 60000000.0 * sc[24] * x1279 -
    60000000.0 * sc[3] * x779 + 1.093974e+86 * x1049 * x329 - x1306 * x4155 +
    x1314 * x4155 - x4171 * x885 - 1.093974e+86 * x4175 + x4180 * x885 -
    x4186 * x4209 * (0.42 * x4211 * x483 + 3.0 * x4212 * x483) +
    x4186 * x4224 * (0.42 * x4211 * x483 + 3.0 * x4212 * x483) -
    1.995e+48 * x4198 * x4222 - 1.326675e+88 * x4203 * x4205 +
    1.326675e+88 * x4203 * x4218 + 1.995e+48 * x4325 + 6.405e+46 * x451 -
    6.405e+46 * x821 + (-60000000.0 * sc[24] * x441) * (-x1362 + x650) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (60000000.0 * sc[24] * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[291] =
    60000000.0 * sc[24] * x1298 - 60000000.0 * sc[24] * x1304 - x1351 * x4155 +
    x1355 * x4155 + x4227 + (-60000000.0 * sc[24] * x441) * (-x1391 + x1398) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (60000000.0 * sc[24] * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[323] =
    60000000.0 * sc[24] * x1317 - 60000000.0 * sc[24] * x1328 + x1113 * x4155 -
    x331 * x4155 + x4226 + x4239 +
    (-60000000.0 * sc[24] * x441) * (x1124 - x1407) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (60000000.0 * sc[24] * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[355] =
    x4229 + (-60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[387] = sc[1] * x854 + sc[22] * x423 * x887 + 60000000.0 * sc[24] * x1343 -
           60000000.0 * sc[24] * x203 - sc[3] * x4301 - sc[3] * x4303 -
           x1388 * x4155 + x1404 * x4155 + 2.3757596699999998e-13 * x2726 -
           x3988 + x4169 + x4227 +
           (-60000000.0 * sc[24] * x441) * (-x1425 + x1434) +
           (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
             (-x1423 + x1431 +
              (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
           (60000000.0 * sc[24] * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[419] =
    60000000.0 * sc[24] * x267 - 60000000.0 * sc[24] * x621 - sc[3] * x4270 +
    x1418 * x4155 + 1334022780.0 * x2727 - x298 * x4155 + x4227 +
    (-60000000.0 * sc[24] * x441) * (x1436 - x1455) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (60000000.0 * sc[24] * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[451] =
    60000000.0 * sc[24] * x1386 - 60000000.0 * sc[24] * x1392 + x1420 * x4155 -
    x1422 * x4155 + 6.7000919399999996e-5 * x2730 + x4227 + x4400 +
    (-60000000.0 * sc[24] * x441) * (-x1480 + x1489) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (60000000.0 * sc[24] * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[483] =
    60000000.0 * sc[24] * x1400 - 60000000.0 * sc[24] * x1401 + sc[24] * x4404 -
    sc[3] * x4276 - x1445 * x4155 + x1450 * x4155 + 2218.37496 * x2733 + x4227 +
    (-60000000.0 * sc[24] * x441) * (-x1508 + x169) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (60000000.0 * sc[24] * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[515] =
    60000000.0 * sc[24] * x1155 - 60000000.0 * sc[24] * x447 +
    2660000.0 * sc[24] - x1461 * x4155 + x1471 * x4155 +
    0.052311679799999997 * x2736 + x4227 +
    (-60000000.0 * sc[24] * x441) * (-x1530 + x1540) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (60000000.0 * sc[24] * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[547] =
    -60000000.0 * sc[24] * x1157 + sc[24] * x4425 + 60000000.0 * sc[24] * x552 +
    4.375896e+86 * x1049 * x329 - x1476 * x4155 + x4155 * x99 -
    x4171 * (1.68 * x4164 + 12.0 * x4165) - 4.375896e+86 * x4175 +
    x4180 * (1.68 * x4164 + 12.0 * x4165) - 7.98e+48 * x4198 * x4222 -
    5.3067e+88 * x4203 * x4205 + 5.3067e+88 * x4203 * x4218 - x4209 * x4422 +
    x4224 * x4422 + 7.98e+48 * x4325 + 2.562e+47 * x451 - 2.562e+47 * x821 +
    (-60000000.0 * sc[24] * x441) * (x301 - x527) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (60000000.0 * sc[24] * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[579] =
    60000000.0 * sc[24] * x1429 - 60000000.0 * sc[24] * x1438 - x1494 * x4155 +
    x1502 * x4155 + x4227 + (-60000000.0 * sc[24] * x441) * (x250 - x469) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (60000000.0 * sc[24] * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[611] =
    sc[22] * x723 * x887 + 60000000.0 * sc[24] * x1442 -
    60000000.0 * sc[24] * x1448 + 1.33e+48 * sc[24] * x4189 * x4198 -
    8000000000000000.0 * sc[3] * exp(x211) + sc[4] * x4306 +
    3.2e+16 * sc[5] * exp(x211) - x1517 * x4155 + x1524 * x4155 +
    5.74079466e-8 * x2739 + x4227 - x4457 +
    (-60000000.0 * sc[24] * x441) * (-x581 + x599) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (60000000.0 * sc[24] * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[643] =
    -60000000.0 * sc[24] * x1467 + 60000000.0 * sc[24] * x196 - x1527 * x4155 +
    x4155 * x864 + x4227 + (-60000000.0 * sc[24] * x441) * (-x659 + x670) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (60000000.0 * sc[24] * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[675] =
    -60000000.0 * sc[24] * x1470 + 60000000.0 * sc[24] * x197 + x1196 * x4155 -
    x311 * x4155 + x4264 + (-60000000.0 * sc[24] * x441) * (-x589 + x855) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (60000000.0 * sc[24] * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[707] =
    sc[19] * x723 * x887 + 60000000.0 * sc[24] * x1484 -
    60000000.0 * sc[24] * x1490 + x4155 * x445 - x4155 * x450 + x4227 +
    (-60000000.0 * sc[24] * x441) * (x971 - x980) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (60000000.0 * sc[24] * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[739] =
    60000000.0 * sc[24] * x1499 - 60000000.0 * sc[24] * x1513 + x348 * x4155 -
    x4155 * x468 + x4227 + (-60000000.0 * sc[24] * x441) * (x949 - x996) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (60000000.0 * sc[24] * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[771] =
    sc[15] * x4404 + 2660000.0 * sc[16] + sc[17] * x4425 +
    1.33e+48 * sc[19] * x4189 * x4198 - 60000000.0 * sc[24] * x1492 +
    60000000.0 * sc[24] * x646 + sc[2] * x3855 + sc[6] * x4314 +
    60000000.0 * x194 - x217 * x4155 + x368 * x4155 + x4227 +
    (-60000000.0 * sc[24] * x441) * (-x89 + x985) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (60000000.0 * sc[24] * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[803] =
    60000000.0 * sc[24] * x1535 + x4155 * x655 + x4279 +
    (-60000000.0 * sc[24] * x441) * (x1055 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[835] =
    60000000.0 * sc[24] * x549 - 60000000.0 * sc[24] * x550 + x371 * x4155 -
    x4155 * x555 + x4227 + (-60000000.0 * sc[24] * x441) * (-x544 + x815) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (60000000.0 * sc[24] * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[867] =
    x4229 + (-60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[899] =
    x4229 + (-60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[931] =
    60000000.0 * sc[24] * x553 + x372 * x4155 + x4279 +
    (-60000000.0 * sc[24] * x441) * (x647 - x991) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (60000000.0 * sc[24] * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[963] =
    x4229 + (-60000000.0 * sc[24] * x441) * (-x649 + x675) +
    (-4.27e+34 * sc[12] * x1468 * x324 * x959) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[4] = 0.00556507024 * x2704 + 235.997248 * x2708 +
         2.5274029599999999e-14 * x2712 + 141917264.0 * x2714 +
         6.10722608e-9 * x2719 + 1.33314714e+26 * x2721 + 7.12775472e-6 * x2723;
  J[36] = 0;
  J[68] = 0;
  J[100] = sc[12] * x4301;
  J[132] = -sc[19] * x4306 - 240.0 * x4296;
  J[164] = 0;
  J[196] = 0;
  J[228] = 0;
  J[260] = 0;
  J[292] = 0;
  J[324] = 0;
  J[356] = 0;
  J[388] = 480.0 * sc[12] * sc[22] * x4513 + sc[3] * x4301 +
           2.5274029599999999e-14 * x2726;
  J[420] = 141917264.0 * x2727;
  J[452] = -240.0 * sc[4] * exp(x4294) + 7.1277547199999998e-6 * x2730;
  J[484] = 235.997248 * x2733;
  J[516] = 0.00556507024 * x2736;
  J[548] = 0;
  J[580] = 0;
  J[612] = -sc[4] * x4306 + 6.1072260800000001e-9 * x2739;
  J[644] = 0;
  J[676] = 0;
  J[708] = 240.0 * ((sc[12]) * (sc[12])) * x4513;
  J[740] = 0;
  J[772] = 0;
  J[804] = 0;
  J[836] = 0;
  J[868] = 0;
  J[900] = 0;
  J[932] = 0;
  J[964] = 0;
  J[5] = 0.0166951828 * x2704 + 707.99056 * x2708 + 7.5821962e-14 * x2712 +
         425751080.0 * x2714 + 1.83216476e-8 * x2719 + 3.9994353e+26 * x2721 +
         2.13832284e-5 * x2723 + x4528 +
         (-x275 * x516) *
           (x1061 + (-x441) * (x1104 - x991) +
            (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                               (x907 + (-x396) * (x1083 - x591 +
                                                  (-x413) * (x1104 - x991)))));
  J[37] =
    x225 * x2777 + x272 * x516 + x4527 +
    (-x275 * x516) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[69] =
    x1182 * x516 + x4558 +
    (-x275 * x516) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[101] =
    sc[12] * x4303 + x4528 +
    (-x275 * x516) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[133] =
    x4528 +
    (-x275 * x516) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[165] =
    -x1251 * x4567 - 4.8e+16 * x346 + x4527 - x4592 + x516 * x757 +
    (-x275 * x516) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[197] =
    x1262 * x516 + x4558 +
    (-x275 * x516) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[229] =
    -x1013 * (6.0 * x4532 * x483 + 0.84 * x4534 * x483) + x1303 * x516 +
    4.58643e+89 * x4526 * x4551 - 4.58643e+89 * x4526 * x4554 -
    1.173e+49 * x4539 * x4543 + 1.173e+49 * x4543 * x746 +
    x4547 * (6.0 * x4532 * x483 + 0.84 * x4534 * x483) -
    4.65e+44 * x4567 * x742 +
    x4570 * (6.0 * x4561 * x483 + 0.84 * x4563 * x483) + 4.805e+81 * x744 +
    (-x275 * x516) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[261] =
    -x1013 * (3.0 * x4532 * x483 + 0.42 * x4534 * x483) + x1315 * x516 +
    2.293215e+89 * x4526 * x4551 - 2.293215e+89 * x4526 * x4554 -
    5.865e+48 * x4539 * x4543 + 5.865e+48 * x4543 * x746 +
    x4547 * (3.0 * x4532 * x483 + 0.42 * x4534 * x483) -
    2.325e+44 * x4567 * x742 +
    x4570 * (3.0 * x4561 * x483 + 0.42 * x4563 * x483) + 2.4025e+81 * x744 +
    (-x275 * x516) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[293] =
    x4528 +
    (-x275 * x516) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[325] =
    x4528 +
    (-x275 * x516) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[357] =
    x4528 +
    (-x275 * x516) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[389] =
    sc[3] * x4303 + x1341 * x516 + 7.5821961999999999e-14 * x2726 + x4527 +
    x4611 +
    (-x275 * x516) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[421] =
    x1371 * x516 + 425751080.0 * x2727 + x4527 +
    (-x275 * x516) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[453] =
    x1428 * x516 + 2.1383228399999999e-5 * x2730 + x4527 +
    (-x275 * x516) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[485] =
    x1498 * x516 + 707.99056 * x2733 + x4527 +
    (-x275 * x516) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[517] =
    0.0166951828 * x2736 + x4527 + x486 * x516 +
    (-x275 * x516) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[549] = -x1013 * (12.0 * x4532 * x483 + 1.68 * x4534 * x483) + x264 * x516 +
           9.17286e+89 * x4526 * x4551 - 9.17286e+89 * x4526 * x4554 -
           2.346e+49 * x4539 * x4543 + 2.346e+49 * x4543 * x746 +
           x4547 * (12.0 * x4532 * x483 + 1.68 * x4534 * x483) -
           9.3e+44 * x4567 * x742 +
           x4570 * (12.0 * x4561 * x483 + 1.68 * x4563 * x483) +
           9.61e+81 * x744 +
           (-x275 * x516) *
             (-x1157 + x552 + (-x441) * (x301 - x527) +
              (x442) * (-x1476 + x99 +
                        (-10.0e-13 / (x366 * x373)) *
                          (-x1528 + x387 +
                           (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[581] =
    x4528 + (-x275 * x516) *
              (x1429 - x1438 + (-x441) * (x250 - x469) +
               (x442) * (-x1494 + x1502 +
                         (-10.0e-13 / (x366 * x373)) *
                           (-x459 + x519 +
                            (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[613] =
    -4.8e+16 * sc[5] * exp(x211) + 1.83216476e-8 * x2739 + x4527 + x516 * x714 +
    (-x275 * x516) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[645] =
    x273 * x516 + x4527 +
    (-x275 * x516) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[677] =
    x4558 + x516 * x539 +
    (-x275 * x516) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[709] =
    x4528 +
    (-x275 * x516) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[741] =
    x4528 +
    (-x275 * x516) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[773] =
    x4528 + x4537 +
    (-x275 * x516) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[805] =
    x4528 +
    (-x275 * x516) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[837] =
    x4528 +
    (-x275 * x516) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[869] =
    x4528 +
    (-x275 * x516) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[901] =
    x4528 +
    (-x275 * x516) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[933] =
    x4528 +
    (-x275 * x516) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[965] =
    x4528 +
    (-x275 * x516) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[6] =
    7.66e-8 * x2719 + x4700 + x4713 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1104 - x991) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[38] =
    -90000000.0 * sc[19] * x1127 + 90000000.0 * sc[19] * x1159 +
    20000000.0 * sc[19] * x1180 + sc[19] * x946 + 70000000.0 * sc[6] * x1134 -
    70000000.0 * sc[6] * x1161 - x1062 * x93 + x1106 * x93 + x1117 * x222 +
    x1127 * x2850 + x1138 * x4647 - x1159 * x2850 - x1160 * x995 -
    x1162 * x4647 - x272 * x749 + x4638 + x472 * x995 + x4734 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1138 + x1162) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-x222 * x279 + x275 * x749) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[70] =
    -15000000.0 * sc[14] * x1211 + 15000000.0 * sc[14] * x1242 +
    120000000.0 * sc[19] * x1121 + 20000000.0 * sc[19] * x1133 -
    120000000.0 * sc[19] * x1156 + 90000000.0 * sc[19] * x1197 -
    90000000.0 * sc[19] * x1205 + 70000000.0 * sc[6] * x1211 -
    70000000.0 * sc[6] * x1242 - x1121 * x93 + x1154 * x222 + x1156 * x93 -
    x1182 * x749 - x1197 * x2850 + x1205 * x2850 + x1212 * x4647 -
    x1214 * x4627 - x1234 * x995 - x1243 * x4647 - x175 * x420 + x36 * x995 +
    x3874 + x4627 * x535 + x4637 + x4664 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1212 + x1243) +
    (x175 * x436) * (x1214 - x535) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-x222 * x279 + x275 * x749) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[102] =
    15000000.0 * sc[14] * x1249 + 120000000.0 * sc[19] * x1170 +
    90000000.0 * sc[19] * x340 - 70000000.0 * sc[6] * x1249 - x1170 * x93 -
    x1248 * x995 - x1250 * x4647 - x2850 * x340 + x4287 + x4700 + x4710 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1250 - x991) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[134] =
    x4700 + x4713 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1104 - x991) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[166] =
    15000000.0 * sc[14] * x1257 + 90000000.0 * sc[19] * x1051 +
    120000000.0 * sc[19] * x1183 - 70000000.0 * sc[6] * x1257 +
    70000000.0 * sc[6] * x591 - x1051 * x2850 - x1183 * x93 - x1256 * x995 -
    x1258 * x4647 + x4643 + x4647 * x991 + x4698 + x4710 - x749 * x757 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1258 - x991) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[198] =
    -56240000.0 * refC * sc[17] * x4801 -
    1780000.0 * refC * x4632 * (sc[8] + x162) - 90000000.0 * sc[10] * x860 -
    sc[12] * x3919 - sc[14] * x4804 - sc[16] * x4793 +
    20000000.0 * sc[19] * x1209 - 90000000.0 * sc[19] * x1233 +
    90000000.0 * sc[19] * x1264 - 20000000.0 * sc[20] * x895 -
    20000000.0 * sc[22] * x240 - sc[24] * x4314 - sc[27] * x4788 +
    70000000.0 * sc[6] * x1275 - 70000000.0 * sc[6] * x1288 -
    50000000.0 * x118 * x388 + x1223 * x4627 - x1225 * x4627 - x1227 * x93 +
    x1233 * x2850 + x1245 * x93 - x1262 * x749 - x1264 * x2850 + x1272 * x995 +
    x1276 * x4647 - x1289 * x4647 - x175 * x416 - x194 * x77 -
    0.5 * x207 * exp(-3638.25649376812 * invT + 2.0 * logT) + x222 * x70 -
    x259 * x2777 - 50.7 * x287 * x868 - x379 * x995 -
    4100.0 * x3869 * exp(x277) - x4626 * x942 - x4798 - x4830 + x4856 -
    70000000.0 * x65 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1276 + x1289) +
    (x175 * x436) * (-x1223 + x1225) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-x222 * x279 + x275 * x749) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[230] =
    20000000.0 * sc[19] * x1237 - 90000000.0 * sc[19] * x1268 +
    90000000.0 * sc[19] * x1284 + sc[19] * x4858 + 70000000.0 * sc[6] * x1310 -
    70000000.0 * sc[6] * x1322 + x1117 * x222 - x1254 * x93 + x1260 * x93 +
    x1268 * x2850 - x1284 * x2850 + x1287 * x995 - x1295 * x4647 -
    x1303 * x749 + x1311 * x4647 - x1319 * x995 + x4638 + x4885 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1295 - x1311) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-x222 * x279 + x275 * x749) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[262] =
    -90000000.0 * sc[19] * x1306 + 20000000.0 * sc[19] * x1309 +
    90000000.0 * sc[19] * x1314 + 70000000.0 * sc[6] * x1361 +
    4100.0 * sc[6] * x3953 * exp(x277 + x3951) - 70000000.0 * sc[6] * x664 -
    x1263 * x93 + x1279 * x93 - x1286 * x4627 + x1306 * x2850 - x1314 * x2850 -
    x1315 * x749 + x1356 * x995 + x1362 * x4647 + x222 * x701 - x333 * x995 +
    x4627 * x523 + x4637 - x4647 * x650 + x4920 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1362 + x650) +
    (x175 * x436) * (x1286 - x523) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-x222 * x279 + x275 * x749) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[294] =
    -15000000.0 * sc[14] * x1370 + 15000000.0 * sc[14] * x1396 +
    120000000.0 * sc[19] * x1298 - 120000000.0 * sc[19] * x1304 -
    90000000.0 * sc[19] * x1351 + 90000000.0 * sc[19] * x1355 + sc[19] * x4930 +
    70000000.0 * sc[6] * x1370 - 70000000.0 * sc[6] * x1396 - x1298 * x93 +
    x1304 * x93 + x1351 * x2850 - x1355 * x2850 + x1391 * x4647 - x1395 * x995 -
    x1398 * x4647 - x4627 * x83 + x4935 + x4936 + x666 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1391 + x1398) +
    (x175 * x436) * (-x1152 + x83) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-x222 * x279 + x275 * x749) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[326] =
    15000000.0 * sc[14] * x1015 - 15000000.0 * sc[14] * x1406 +
    90000000.0 * sc[19] * x1113 + 20000000.0 * sc[19] * x1180 +
    120000000.0 * sc[19] * x1317 - 120000000.0 * sc[19] * x1328 -
    90000000.0 * sc[19] * x331 - 70000000.0 * sc[6] * x1015 +
    70000000.0 * sc[6] * x1406 - 90000000.0 * sc[6] * x860 - x1113 * x2850 +
    x1117 * x222 - x1124 * x4647 + x1189 * x995 - x1317 * x93 + x1328 * x93 +
    x1407 * x4647 + x2850 * x331 - x308 * x995 + x4638 + x4935 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1124 - x1407) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-x222 * x279 + x275 * x749) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[358] =
    sc[19] * x4960 - x121 * x4627 + x4713 + x4963 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1104 - x991) +
    (x175 * x436) * (-x1152 + x121) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[390] =
    -15000000.0 * sc[14] * x1424 + 15000000.0 * sc[14] * x1433 +
    20000000.0 * sc[19] * x1320 + 120000000.0 * sc[19] * x1343 -
    90000000.0 * sc[19] * x1388 + 90000000.0 * sc[19] * x1404 -
    120000000.0 * sc[19] * x203 + sc[19] * x4969 + 70000000.0 * sc[19] * x911 +
    70000000.0 * sc[6] * x1424 - 70000000.0 * sc[6] * x1433 - sc[6] * x3919 -
    x1341 * x749 - x1343 * x93 + x1388 * x2850 - x1404 * x2850 + x1423 * x995 +
    x1425 * x4647 - x1431 * x995 - x1434 * x4647 + x175 * x771 + x203 * x93 +
    x222 * x691 - x4627 * x671 + x4627 * x680 + x4637 + x4667 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1425 + x1434) +
    (x175 * x436) * (x671 - x680) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-x222 * x279 + x275 * x749) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[422] =
    15000000.0 * sc[14] * x1443 - 15000000.0 * sc[14] * x1454 +
    90000000.0 * sc[19] * x1418 + 120000000.0 * sc[19] * x267 -
    90000000.0 * sc[19] * x298 + 20000000.0 * sc[19] * x38 -
    120000000.0 * sc[19] * x621 - 70000000.0 * sc[6] * x1443 +
    70000000.0 * sc[6] * x1454 - x1096 * x4627 + x1172 * x222 + x1270 * x4627 -
    x1371 * x749 - x1418 * x2850 - x1436 * x4647 + x1451 * x995 +
    x1455 * x4647 - x1462 * x995 + x175 * x682 - x267 * x93 + x2850 * x298 +
    x4637 + x4667 - x5002 + x621 * x93 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1436 - x1455) +
    (x175 * x436) * (x1096 - x1270) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-x222 * x279 + x275 * x749) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[454] =
    20000000.0 * sc[19] * x1377 + 90000000.0 * sc[19] * x1420 -
    90000000.0 * sc[19] * x1422 + 70000000.0 * sc[6] * x1463 -
    70000000.0 * sc[6] * x397 - sc[6] * x4804 + x1173 * x222 - x1386 * x93 +
    x1392 * x93 - x1420 * x2850 + x1422 * x2850 - x1428 * x749 - x1475 * x995 +
    x1477 * x995 + x1480 * x4647 - x1489 * x4647 + x175 * x653 - x1889 * x4627 +
    x1890 * x4627 + x4637 + x4667 + x5041 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1480 + x1489) +
    (x175 * x436) * (x1889 - x1890) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-x222 * x279 + x275 * x749) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[486] =
    -15000000.0 * sc[14] * x1488 + 15000000.0 * sc[14] * x1505 +
    120000000.0 * sc[19] * x1400 - 120000000.0 * sc[19] * x1401 -
    90000000.0 * sc[19] * x1445 + 90000000.0 * sc[19] * x1450 +
    20000000.0 * sc[19] * x1478 + sc[19] * x5049 + 70000000.0 * sc[6] * x1488 -
    70000000.0 * sc[6] * x1505 - x1400 * x93 + x1401 * x93 + x1445 * x2850 -
    x1450 * x2850 - x1498 * x749 + x1503 * x995 + x1508 * x4647 - x169 * x4647 -
    x175 * x418 - x1894 * x4627 + x1895 * x4627 + x222 * x278 - x383 * x995 +
    x4637 + x4667 - x5055 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1508 + x169) +
    (x175 * x436) * (x1894 - x1895) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-x222 * x279 + x275 * x749) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[518] =
    -15000000.0 * sc[14] * x1519 + 15000000.0 * sc[14] * x1539 +
    120000000.0 * sc[19] * x1155 - 90000000.0 * sc[19] * x1461 +
    90000000.0 * sc[19] * x1471 - 120000000.0 * sc[19] * x447 + sc[19] * x5079 +
    20000000.0 * sc[19] * x893 + 70000000.0 * sc[6] * x1519 -
    70000000.0 * sc[6] * x1539 - sc[6] * x4793 + x102 * x222 - x1155 * x93 +
    x1461 * x2850 - x1471 * x2850 + x1530 * x4647 - x1537 * x995 -
    x1540 * x4647 - x175 * x427 - x1899 * x4627 + x1900 * x4627 + x447 * x93 +
    x4637 + x4667 - x486 * x749 + x872 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x1530 + x1540) +
    (x175 * x436) * (x1899 - x1900) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-x222 * x279 + x275 * x749) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[550] =
    -56240000.0 * refC * sc[6] * x4801 +
    56240000.0 * ((sc[19]) * (sc[19])) * exp(-1.25 * logT) -
    90000000.0 * sc[19] * x1476 + 20000000.0 * sc[19] * x1504 + sc[19] * x5100 +
    90000000.0 * sc[19] * x99 - 70000000.0 * sc[6] * x465 +
    70000000.0 * sc[6] * x475 - x1059 * x4627 + x1060 * x4627 + x1157 * x93 +
    x1476 * x2850 + x1528 * x995 - x175 * x422 + x222 * x698 - x264 * x749 -
    x2850 * x99 - x301 * x4647 - x387 * x995 + x4647 * x527 + x4677 -
    x552 * x93 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x301 - x527) +
    (x175 * x436) * (x1059 - x1060) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-x222 * x279 + x275 * x749) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[582] =
    15000000.0 * sc[14] * x254 - 15000000.0 * sc[14] * x67 +
    20000000.0 * sc[19] * x1180 + 120000000.0 * sc[19] * x1429 -
    120000000.0 * sc[19] * x1438 - 90000000.0 * sc[19] * x1494 +
    90000000.0 * sc[19] * x1502 + sc[19] * x5139 - 70000000.0 * sc[6] * x254 +
    70000000.0 * sc[6] * x67 - x1068 * x4627 + x1181 * x222 - x1429 * x93 +
    x1438 * x93 + x1494 * x2850 - x1502 * x2850 - x175 * x398 - x250 * x4647 +
    x33 * x4627 + x459 * x995 + x4637 + x4647 * x469 + x4935 - x519 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x250 - x469) +
    (x175 * x436) * (x1068 - x33) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-x222 * x279 + x275 * x749) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[614] =
    sc[11] * x4960 + sc[12] * x4969 + 70000000.0 * sc[12] * x911 +
    sc[15] * x5049 + sc[16] * x5079 +
    112480000.0 * sc[17] * sc[19] * exp(-1.25 * logT) + sc[17] * x5100 +
    sc[18] * x5139 - 90000000.0 * sc[19] * x1517 + 90000000.0 * sc[19] * x1524 +
    3560000.0 * sc[19] * x4634 * (sc[8] + x162) + 20000000.0 * sc[19] * x49 +
    sc[1] * x946 + sc[20] * x5164 + 50000000.0 * sc[22] * x5159 +
    sc[29] * x5175 + 70000000.0 * sc[6] * x28 - 70000000.0 * sc[6] * x597 +
    sc[7] * x4858 + sc[9] * x4930 - 20000000.0 * sc_qss[1] * x51 +
    x1021 * x222 - x1088 * x4627 - x1442 * x93 + x1448 * x93 + x1517 * x2850 -
    x1524 * x2850 - x175 * x425 + x2576 * x5155 + 7.66e-8 * x2739 +
    x362 * x995 + x3802 + x4457 - x455 * x995 + x4627 * x684 + x4637 +
    x4647 * x581 - x4647 * x599 + x4667 + x5198 - x714 * x749 +
    90000000.0 * x868 - 20000000.0 * x908 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x581 + x599) +
    (x175 * x436) * (x1088 - x684) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-x222 * x279 + x275 * x749) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[646] =
    -90000000.0 * sc[19] * x1527 + sc[19] * x5164 + 20000000.0 * sc[19] * x586 +
    90000000.0 * sc[19] * x864 + 70000000.0 * sc[6] * x493 -
    70000000.0 * sc[6] * x604 - 20000000.0 * sc[6] * x895 + x1181 * x222 +
    x1467 * x93 + x1527 * x2850 - x196 * x93 - x273 * x749 - x2850 * x864 +
    x4638 + x4647 * x659 - x4647 * x670 + x5220 + x534 * x995 - x563 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x659 + x670) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-x222 * x279 + x275 * x749) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[678] =
    -15000000.0 * sc[14] * x566 + 15000000.0 * sc[14] * x787 +
    20000000.0 * sc[19] * x1133 + 90000000.0 * sc[19] * x1196 -
    120000000.0 * sc[19] * x1470 + 120000000.0 * sc[19] * x197 -
    90000000.0 * sc[19] * x311 + 70000000.0 * sc[6] * x566 -
    70000000.0 * sc[6] * x787 - x1087 * x4627 + x1100 * x4627 + x1154 * x222 -
    x1196 * x2850 + x1470 * x93 - x197 * x93 + x2850 * x311 + x4647 * x589 -
    x4647 * x855 + x4664 + x481 * x995 - x539 * x749 - x561 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x589 + x855) +
    (x175 * x436) * (x1087 - x1100) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-x222 * x279 + x275 * x749) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[710] =
    -15000000.0 * sc[14] * x68 + 15000000.0 * sc[14] * x688 +
    20000000.0 * sc[19] * x1180 + 120000000.0 * sc[19] * x1484 -
    120000000.0 * sc[19] * x1490 + 90000000.0 * sc[19] * x445 -
    90000000.0 * sc[19] * x450 + 50000000.0 * sc[19] * x5159 -
    20000000.0 * sc[6] * x240 + 70000000.0 * sc[6] * x68 -
    70000000.0 * sc[6] * x688 - x1484 * x93 + x1490 * x93 + x222 * x707 -
    x2850 * x445 + x2850 * x450 - x369 * x995 + x390 * x995 + x4638 -
    x4647 * x971 + x4647 * x980 + x4935 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x971 - x980) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-x222 * x279 + x275 * x749) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[742] =
    15000000.0 * sc[14] * x1009 - 15000000.0 * sc[14] * x1081 +
    120000000.0 * sc[19] * x1499 - 120000000.0 * sc[19] * x1513 +
    90000000.0 * sc[19] * x348 - 90000000.0 * sc[19] * x468 -
    70000000.0 * sc[6] * x1009 + 70000000.0 * sc[6] * x1081 - x1004 * x995 -
    x1131 * x4627 - x1499 * x93 + x1513 * x93 - x2850 * x348 + x2850 * x468 -
    x4647 * x949 + x4647 * x996 + x4935 + x4936 + x626 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x949 - x996) +
    (x175 * x436) * (x1131 - x1152) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-x222 * x279 + x275 * x749) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[774] =
    -15000000.0 * sc[14] * x1963 + 15000000.0 * sc[14] * x306 +
    20000000.0 * sc[19] * x1180 - 120000000.0 * sc[19] * x1492 -
    90000000.0 * sc[19] * x217 + 90000000.0 * sc[19] * x368 +
    120000000.0 * sc[19] * x646 + 70000000.0 * sc[6] * x1963 -
    70000000.0 * sc[6] * x306 - sc[6] * x4314 + x1031 * x995 - x1042 * x995 +
    x1181 * x222 + x1492 * x93 + x217 * x2850 - x2850 * x368 + x4638 +
    x4647 * x89 - x4647 * x985 + x4935 - x646 * x93 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x89 + x985) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-x222 * x279 + x275 * x749) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[806] =
    15000000.0 * sc[14] * x359 + 120000000.0 * sc[19] * x1535 +
    90000000.0 * sc[19] * x655 - 70000000.0 * sc[6] * x359 - x1055 * x4647 -
    x1535 * x93 - x2850 * x655 - x336 * x995 + x4700 + x4710 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1055 - x991) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[838] =
    -15000000.0 * sc[14] * x575 + 15000000.0 * sc[14] * x678 +
    90000000.0 * sc[19] * x371 + 120000000.0 * sc[19] * x549 -
    120000000.0 * sc[19] * x550 - 90000000.0 * sc[19] * x555 +
    70000000.0 * sc[6] * x575 - 70000000.0 * sc[6] * x678 - x1139 * x4627 -
    x2850 * x371 + x2850 * x555 + x4647 * x544 - x4647 * x815 + x482 * x995 +
    x4935 + x4936 - x549 * x93 + x550 * x93 - x567 * x995 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x544 + x815) +
    (x175 * x436) * (x1139 - x1152) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-x222 * x279 + x275 * x749) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[870] =
    -sc[6] * x4788 - x1143 * x4627 + x4713 + x4963 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1104 - x991) +
    (x175 * x436) * (x1143 - x1152) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[902] =
    -x1092 * x4627 + x4713 + x4963 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x1104 - x991) +
    (x175 * x436) * (x1092 - x1152) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[934] =
    15000000.0 * sc[14] * x1018 + 90000000.0 * sc[19] * x372 + sc[19] * x5175 +
    120000000.0 * sc[19] * x553 - 70000000.0 * sc[6] * x1018 - x1080 * x4627 +
    x1169 * x175 - x2850 * x372 - x4647 * x647 + x4710 - x479 * x995 + x4963 -
    x553 * x93 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (x647 - x991) +
    (x175 * x436) * (x1080 - x1152) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-x222 * x279 + x275 * x749) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[966] =
    -70000000.0 * sc[6] * x402 + 70000000.0 * sc[6] * x590 + x4643 +
    x4647 * x649 - x4647 * x675 + x4712 - x508 * x749 + x5342 +
    (-15000000.0 * sc[14] * x413 - 120000000.0 * sc[19] * x441 +
     70000000.0 * sc[6] * x413 + x441 * x93) *
      (-x649 + x675) +
    (x175 * x436) * (x509) +
    (-20000000.0 * sc[19] * x51 + x396 * x995) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-9.0e-5 * sc[19] * x1468 + 5.07e-11 * sc[6] * x1468 * x287) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (120000000.0 * sc[19] * x442 - x104 * x222 - x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-x222 * x279 + x275 * x749) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[7] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[39] =
    x272 * x276 + x272 * x502 + x272 * x559 + x272 * x749 + x272 * x754 +
    x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[71] =
    x1182 * x276 + x1182 * x502 + x1182 * x559 + x1182 * x749 + x1182 * x754 +
    x2777 * x851 + x5425 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[103] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[135] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[167] =
    x276 * x757 + x502 * x757 + x5402 + x559 * x757 + x749 * x757 +
    x754 * x757 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[199] =
    x1262 * x276 + x1262 * x502 + x1262 * x559 + x1262 * x749 + x1262 * x754 +
    x259 * x2777 + x5425 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[231] =
    -sc[12] * x3941 - sc[14] * x5454 - sc[15] * x5458 - sc[19] * x4858 +
    x1303 * x276 + x1303 * x502 + x1303 * x559 + x1303 * x749 + x1303 * x754 +
    4.4333490566037699e+66 * x209 + 2.2802879078694799e+47 * x214 * x731 -
    2.2802879078694799e+47 * x214 * x834 - 1.99e+29 * x526 * x5352 -
    1.77e+38 * x526 * x5370 -
    1.77e+38 * x5350 * x5357 * (6.0 * x5364 + 0.84 * x5365) +
    1.77e+38 * x5350 * x5371 * (6.0 * x5364 + 0.84 * x5365) -
    5.97e+29 * x5352 * x728 + 5.31e+38 * x5357 -
    4.4333490566037699e+66 * x5362 - 5.31e+38 * x5371 - x5381 * x5398 * x5440 +
    x5440 * x5441 + 5.97e+29 * x867 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[263] =
    x1315 * x276 + x1315 * x502 + x1315 * x559 + x1315 * x749 + x1315 * x754 +
    2.2166745283018902e+66 * x209 + 1.14014395393474e+47 * x214 * x731 -
    1.14014395393474e+47 * x214 * x834 -
    1.77e+38 * x5350 * x5357 * (3.0 * x5364 + 0.42 * x5365) +
    1.77e+38 * x5350 * x5371 * (3.0 * x5364 + 0.42 * x5365) -
    2.985e+29 * x5352 * x728 + 2.655e+38 * x5357 -
    2.2166745283018902e+66 * x5362 - 2.655e+38 * x5371 - x5381 * x5398 * x5468 +
    x5441 * x5468 + 2.985e+29 * x867 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[295] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[327] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[359] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[391] =
    3.54e+38 * sc[12] * x13 * x5349 - sc[7] * x3941 + x1341 * x276 +
    x1341 * x502 + x1341 * x559 + x1341 * x749 + x1341 * x754 + x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[423] =
    x1371 * x276 + x1371 * x502 + x1371 * x559 + x1371 * x749 + x1371 * x754 +
    x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[455] =
    -sc[7] * x5454 + x1428 * x276 + x1428 * x502 + x1428 * x559 + x1428 * x749 +
    x1428 * x754 + x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[487] =
    -sc[7] * x5458 + x1498 * x276 + x1498 * x502 + x1498 * x559 + x1498 * x749 +
    x1498 * x754 + x230 * x2777 + x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[519] =
    x276 * x486 + x486 * x502 + x486 * x559 + x486 * x749 + x486 * x754 +
    x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[551] =
    1.194e+30 * sc[19] * x2777 * x500 + x1011 * x2777 +
    8.8666981132075502e+66 * x209 + 4.5605758157389599e+47 * x214 * x731 -
    4.5605758157389599e+47 * x214 * x834 + x264 * x276 + x264 * x502 +
    x264 * x559 + x264 * x749 + x264 * x754 -
    1.77e+38 * x5350 * x5357 * (12.0 * x5364 + 1.68 * x5365) +
    1.77e+38 * x5350 * x5371 * (12.0 * x5364 + 1.68 * x5365) -
    1.194e+30 * x5352 * x728 + 1.062e+39 * x5357 -
    8.8666981132075502e+66 * x5362 - 1.062e+39 * x5371 - x5379 * x5381 * x5398 +
    x5379 * x5441 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[583] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[615] =
    -sc[7] * x4858 + 1.99e+29 * x13 * x2777 * x500 + x276 * x714 + x502 * x714 +
    x5402 + x559 * x714 + x714 * x749 + x714 * x754 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[647] =
    x273 * x276 + x273 * x502 + x273 * x559 + x273 * x749 + x273 * x754 +
    x5402 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[679] =
    x276 * x539 + x502 * x539 + x539 * x559 + x539 * x749 + x539 * x754 +
    x5425 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[711] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[743] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[775] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[807] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[839] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[871] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[903] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[935] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[967] =
    x5403 +
    (-x275 * x276 - x275 * x502 - x275 * x559 - x275 * x749 - x275 * x754) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[8] =
    x4698 + x5619 + x5666 + x5669 + x619 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1104 - x991) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[40] =
    8480000.0 * sc[12] * x1062 - 8480000.0 * sc[12] * x1106 +
    50000000.0 * sc[12] * x1160 - 50000000.0 * sc[12] * x472 -
    40000000.0 * sc[13] * x1134 + 40000000.0 * sc[13] * x1161 +
    200000000.0 * sc[14] * x1160 - 200000000.0 * sc[14] * x472 +
    30200000.0 * sc[15] * x1062 - 30200000.0 * sc[15] * x1106 +
    100000000.0 * sc[19] * x1160 - 100000000.0 * sc[19] * x472 -
    14000000.0 * sc[21] * x1134 + 14000000.0 * sc[21] * x1161 +
    60000000.0 * sc[24] * x1062 - 60000000.0 * sc[24] * x1106 -
    50000000.0 * sc[8] * x880 + x1038 * x1062 - x1038 * x1106 + x1046 * x1127 -
    x1046 * x1159 + x1052 * x1134 - x1052 * x1161 + x1062 * x1102 +
    10.0 * x1062 * x1218 + 10.0 * x1062 * x476 + x1062 * x491 - x1062 * x998 -
    x1102 * x1106 - 10.0 * x1106 * x1218 - 10.0 * x1106 * x476 - x1106 * x491 +
    x1106 * x998 + x1117 * x2421 + x1127 * x5538 + x1127 * x5656 +
    x1138 * x5579 + x1138 * x5622 - x1159 * x5538 - x1159 * x5656 +
    x1160 * x762 - x1162 * x5579 - x1162 * x5622 +
    10.0 * x194 * exp(-4025.7333264377598 * invT + 2.0 * logT) - x272 * x530 -
    x472 * x762 + x4734 + x5576 + x5617 + x5700 + x5703 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1138 + x1162) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[72] =
    8480000.0 * sc[12] * x1121 - 8480000.0 * sc[12] * x1156 +
    50000000.0 * sc[12] * x1234 - 50000000.0 * sc[12] * x36 -
    40000000.0 * sc[13] * x1211 + 40000000.0 * sc[13] * x1242 +
    48000000.0 * sc[14] * x1197 - 48000000.0 * sc[14] * x1205 -
    15000000.0 * sc[14] * x1211 + 100000000.0 * sc[14] * x1214 +
    200000000.0 * sc[14] * x1234 + 15000000.0 * sc[14] * x1242 -
    200000000.0 * sc[14] * x36 - 100000000.0 * sc[14] * x535 +
    30200000.0 * sc[15] * x1121 - 30200000.0 * sc[15] * x1156 +
    120000000.0 * sc[19] * x1121 - 120000000.0 * sc[19] * x1156 +
    100000000.0 * sc[19] * x1234 - 100000000.0 * sc[19] * x36 -
    14000000.0 * sc[21] * x1211 + 14000000.0 * sc[21] * x1242 +
    60000000.0 * sc[24] * x1121 - 60000000.0 * sc[24] * x1156 -
    8480000.0 * sc[8] * x807 + x1016 * x420 + x1038 * x1121 - x1038 * x1156 -
    x1046 * x1197 + x1046 * x1205 + x1052 * x1211 - x1052 * x1242 +
    x1102 * x1121 - x1102 * x1156 + 10.0 * x1121 * x1218 + 10.0 * x1121 * x476 +
    x1121 * x491 - x1121 * x998 + x1154 * x2421 - 10.0 * x1156 * x1218 -
    10.0 * x1156 * x476 - x1156 * x491 + x1156 * x998 - x1182 * x530 -
    x1197 * x5538 - x1197 * x5656 + x1205 * x5538 + x1205 * x5656 +
    x1212 * x5579 + x1212 * x5622 - x1214 * x5541 + x1234 * x762 -
    x1243 * x5579 - x1243 * x5622 - x36 * x762 + x4664 + x535 * x5541 + x5569 +
    x5574 + x5737 + x5750 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1212 + x1243) +
    (-x1016 * x436) * (x1214 - x535) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[104] =
    8480000.0 * sc[12] * x1170 + 50000000.0 * sc[12] * x1248 +
    40000000.0 * sc[13] * x1249 + 30000000.0 * sc[14] * x1170 +
    200000000.0 * sc[14] * x1248 + 15000000.0 * sc[14] * x1249 +
    48000000.0 * sc[14] * x340 + 30200000.0 * sc[15] * x1170 +
    120000000.0 * sc[19] * x1170 + 100000000.0 * sc[19] * x1248 +
    14000000.0 * sc[21] * x1249 + 60000000.0 * sc[24] * x1170 -
    60000000.0 * sc[8] * x779 + x1038 * x1170 - x1046 * x340 - x1052 * x1249 +
    x1102 * x1170 + 10.0 * x1170 * x1218 + 10.0 * x1170 * x476 + x1170 * x491 -
    x1170 * x998 + x1248 * x762 - x1250 * x5579 - x1250 * x5622 + x2762 -
    x340 * x5538 - x340 * x5656 + x3776 + x4160 + x4698 + x5588 + x5619 +
    x5640 + x5644 + x5649 + x5652 + x5656 * x568 + x5659 + x5663 + x5669 +
    x619 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1250 - x991) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[136] =
    x4698 + x5619 + x5666 + x5669 + x619 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1104 - x991) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[168] =
    8480000.0 * sc[12] * x1183 + 50000000.0 * sc[12] * x1256 +
    40000000.0 * sc[13] * x1257 + 48000000.0 * sc[14] * x1051 +
    30000000.0 * sc[14] * x1183 + 200000000.0 * sc[14] * x1256 +
    15000000.0 * sc[14] * x1257 + 30200000.0 * sc[15] * x1183 +
    120000000.0 * sc[19] * x1183 + 100000000.0 * sc[19] * x1256 +
    14000000.0 * sc[21] * x1257 + 60000000.0 * sc[24] * x1183 + x1038 * x1183 -
    x1046 * x1051 - x1051 * x5538 - x1051 * x5656 - x1052 * x1257 +
    x1102 * x1183 + x1181 * x2421 + 10.0 * x1183 * x1218 + 10.0 * x1183 * x476 +
    x1183 * x491 - x1183 * x998 + x1256 * x762 - x1258 * x5579 - x1258 * x5622 +
    x2762 + x3776 + x4160 + x4698 - x530 * x757 + x5588 + x5619 + x5640 +
    x5644 + x5649 + x5652 + x5663 + x5790 + x619 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1258 - x991) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[200] =
    8480000.0 * sc[12] * x1227 - 8480000.0 * sc[12] * x1245 -
    50000000.0 * sc[12] * x1272 + 50000000.0 * sc[12] * x379 -
    40000000.0 * sc[13] * x1275 + 40000000.0 * sc[13] * x1288 -
    100000000.0 * sc[14] * x1223 + 100000000.0 * sc[14] * x1225 -
    48000000.0 * sc[14] * x1233 + 48000000.0 * sc[14] * x1264 -
    200000000.0 * sc[14] * x1272 + 200000000.0 * sc[14] * x379 +
    30200000.0 * sc[15] * x1227 - 30200000.0 * sc[15] * x1245 -
    100000000.0 * sc[19] * x1272 + 100000000.0 * sc[19] * x379 -
    14000000.0 * sc[21] * x1275 + 14000000.0 * sc[21] * x1288 +
    60000000.0 * sc[24] * x1227 - 60000000.0 * sc[24] * x1245 + x1016 * x416 +
    x1046 * x1233 - x1046 * x1264 + x1052 * x1275 - x1052 * x1288 +
    x1102 * x1227 - x1102 * x1245 + 10.0 * x1218 * x1227 -
    10.0 * x1218 * x1245 + x1223 * x5541 - x1225 * x5541 + 10.0 * x1227 * x476 -
    x1227 * x998 + x1233 * x5538 + x1233 * x5656 - 10.0 * x1245 * x476 +
    x1245 * x998 - x1262 * x530 - x1264 * x5538 - x1264 * x5656 - x1272 * x762 +
    x1276 * x5579 + x1276 * x5622 - x1289 * x5579 - x1289 * x5622 +
    x2421 * x70 + x379 * x762 + x4856 + x5750 + x5829 + x5835 + x5839 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1276 + x1289) +
    (-x1016 * x436) * (-x1223 + x1225) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[232] =
    8480000.0 * sc[12] * x1254 - 8480000.0 * sc[12] * x1260 -
    50000000.0 * sc[12] * x1287 + 50000000.0 * sc[12] * x1319 -
    40000000.0 * sc[13] * x1310 + 40000000.0 * sc[13] * x1322 -
    200000000.0 * sc[14] * x1287 + 200000000.0 * sc[14] * x1319 +
    30200000.0 * sc[15] * x1254 - 30200000.0 * sc[15] * x1260 -
    100000000.0 * sc[19] * x1287 + 100000000.0 * sc[19] * x1319 -
    14000000.0 * sc[21] * x1310 + 14000000.0 * sc[21] * x1322 +
    60000000.0 * sc[24] * x1254 - 60000000.0 * sc[24] * x1260 -
    8.07e+21 * sc[8] * x5591 + x1046 * x1268 - x1046 * x1284 + x1052 * x1310 -
    x1052 * x1322 + x1102 * x1254 - x1102 * x1260 + x1117 * x2421 +
    10.0 * x1218 * x1254 - 10.0 * x1218 * x1260 + 10.0 * x1254 * x476 -
    x1254 * x998 - 10.0 * x1260 * x476 + x1260 * x998 + x1268 * x5538 +
    x1268 * x5656 - x1284 * x5538 - x1284 * x5656 - x1287 * x762 -
    x1295 * x5579 - x1295 * x5622 - x1303 * x530 + x1311 * x5579 +
    x1311 * x5622 + x1319 * x762 + x4885 + x5576 + x5583 * x5845 -
    x5584 * x5845 + 2.6800370370370399e+37 * x5594 * x5596 -
    2.6800370370370399e+37 * x5594 * x5599 + 8.07e+21 * x5603 + x5878 + x5880 +
    x5883 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1295 - x1311) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[264] =
    -refCinv * sc[23] * x194 * x548 -
    527000000000000.0 * refCinv * x942 * exp(-14599.8251249923 * invT + x3951) -
    6.2e+41 * ((sc[10]) * (sc[10])) * x5902 + 8480000.0 * sc[12] * x1263 -
    8480000.0 * sc[12] * x1279 - 50000000.0 * sc[12] * x1356 +
    50000000.0 * sc[12] * x333 - 40000000.0 * sc[13] * x1361 +
    40000000.0 * sc[13] * x664 - 200000000.0 * sc[14] * x1356 +
    200000000.0 * sc[14] * x333 - 6400000.0 * sc[15] * x171 * x5921 -
    28000000.0 * sc[15] * x423 * x927 - 400000000.0 * sc[19] * sc[8] * x874 -
    100000000.0 * sc[19] * x1356 + 100000000.0 * sc[19] * x333 -
    50000000.0 * sc[1] * x880 - 14000000.0 * sc[20] * x915 -
    14000000.0 * sc[21] * x1361 + 14000000.0 * sc[21] * x664 +
    60000000.0 * sc[24] * x1263 - 60000000.0 * sc[24] * x1279 -
    8480000.0 * sc[2] * x807 - 60000000.0 * sc[3] * x779 -
    4.035e+21 * sc[8] * x5591 + x1046 * x1306 - x1046 * x1314 + x1052 * x1361 -
    x1052 * x664 - x107 * x2777 + 10.0 * x1218 * x1263 - 10.0 * x1218 * x1279 +
    10.0 * x1263 * x476 - x1263 * x998 - 10.0 * x1279 * x476 + x1279 * x998 -
    x1286 * x5541 - 2.69e+21 * x13 * x5591 + x1306 * x5538 - x1314 * x5538 -
    x1315 * x530 - x1356 * x762 + x1362 * x5579 + x1362 * x5622 - x207 * x5621 -
    30000000.0 * x292 * x868 + x333 * x762 -
    527000000000000.0 * x3953 * exp(-14599.8251249923 * invT + x3951) + x4920 -
    10.0 * x513 * x868 + x523 * x5541 - x5579 * x650 + x5583 * x5891 -
    x5584 * x5891 + 1.34001851851852e+37 * x5594 * x5596 -
    1.34001851851852e+37 * x5594 * x5599 + 4.035e+21 * x5603 - x5622 * x650 -
    x5886 + x5929 + x5940 + x5948 + x5961 + x5973 + x5984 + x5988 -
    100000000.0 * x62 * x65 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1362 + x650) +
    (-x1016 * x436) * (x1286 - x523) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[296] =
    8480000.0 * sc[12] * x1298 - 8480000.0 * sc[12] * x1304 +
    50000000.0 * sc[12] * x1395 - 50000000.0 * sc[12] * x666 -
    40000000.0 * sc[13] * x1370 + 40000000.0 * sc[13] * x1396 -
    15000000.0 * sc[14] * x1370 + 200000000.0 * sc[14] * x1395 +
    15000000.0 * sc[14] * x1396 - 200000000.0 * sc[14] * x666 +
    100000000.0 * sc[14] * x83 + 30200000.0 * sc[15] * x1298 -
    30200000.0 * sc[15] * x1304 + 120000000.0 * sc[19] * x1298 -
    120000000.0 * sc[19] * x1304 + 100000000.0 * sc[19] * x1395 -
    100000000.0 * sc[19] * x666 - 14000000.0 * sc[21] * x1370 +
    14000000.0 * sc[21] * x1396 + 60000000.0 * sc[24] * x1298 -
    60000000.0 * sc[24] * x1304 + x1038 * x1298 - x1038 * x1304 +
    x1046 * x1351 - x1046 * x1355 + x1052 * x1370 - x1052 * x1396 +
    x1102 * x1298 - x1102 * x1304 + 10.0 * x1218 * x1298 -
    10.0 * x1218 * x1304 + 10.0 * x1298 * x476 + x1298 * x491 - x1298 * x998 -
    10.0 * x1304 * x476 - x1304 * x491 + x1304 * x998 + x1351 * x5538 +
    x1351 * x5656 - x1355 * x5538 - x1355 * x5656 + x1391 * x5579 +
    x1391 * x5622 + x1395 * x762 - x1398 * x5579 - x1398 * x5622 + x4667 -
    x5541 * x83 + x5544 + x6014 + x6020 + x6024 - x666 * x762 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1391 + x1398) +
    (-x1016 * x436) * (-x1152 + x83) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[328] =
    -1.24e+42 * sc[10] * sc[8] * x5902 - 50000000.0 * sc[12] * x1189 +
    8480000.0 * sc[12] * x1317 - 8480000.0 * sc[12] * x1328 +
    50000000.0 * sc[12] * x308 + 40000000.0 * sc[13] * x1015 -
    40000000.0 * sc[13] * x1406 + 15000000.0 * sc[14] * x1015 -
    200000000.0 * sc[14] * x1189 - 15000000.0 * sc[14] * x1406 +
    200000000.0 * sc[14] * x308 + 4.08 * sc[14] * x6044 +
    30200000.0 * sc[15] * x1317 - 30200000.0 * sc[15] * x1328 + sc[15] * x6065 -
    100000000.0 * sc[19] * x1189 + 120000000.0 * sc[19] * x1317 -
    120000000.0 * sc[19] * x1328 + 100000000.0 * sc[19] * x308 +
    14000000.0 * sc[21] * x1015 - 14000000.0 * sc[21] * x1406 +
    60000000.0 * sc[24] * x1317 - 60000000.0 * sc[24] * x1328 - x1015 * x1052 +
    x1038 * x1317 - x1038 * x1328 - x1046 * x1113 + x1046 * x331 +
    x1052 * x1406 + x1102 * x1317 - x1102 * x1328 - x1113 * x5538 -
    x1113 * x5656 + x1117 * x2421 - x1124 * x5579 - x1124 * x5622 -
    x1189 * x762 + 10.0 * x1218 * x1317 - 10.0 * x1218 * x1328 +
    10.0 * x1317 * x476 + x1317 * x491 - x1317 * x998 - 10.0 * x1328 * x476 -
    x1328 * x491 + x1328 * x998 + x1407 * x5579 + x1407 * x5622 +
    10.0 * x194 * exp(-3019.29999482832 * invT + 2.0 * logT) + x308 * x762 +
    x331 * x5538 + x331 * x5656 + x4667 - x508 * x530 + x5576 + x5617 + x6061 +
    x6067 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1124 - x1407) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[360] =
    100000000.0 * sc[14] * x121 - x121 * x5541 + x5666 + x6071 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1104 - x991) +
    (-x1016 * x436) * (-x1152 + x121) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[392] =
    8480000.0 * sc[12] * x1343 - 50000000.0 * sc[12] * x1423 +
    50000000.0 * sc[12] * x1431 - 8480000.0 * sc[12] * x203 -
    40000000.0 * sc[13] * x1424 + 40000000.0 * sc[13] * x1433 -
    48000000.0 * sc[14] * x1388 + 48000000.0 * sc[14] * x1404 -
    200000000.0 * sc[14] * x1423 - 15000000.0 * sc[14] * x1424 +
    200000000.0 * sc[14] * x1431 + 15000000.0 * sc[14] * x1433 +
    100000000.0 * sc[14] * x671 - 100000000.0 * sc[14] * x680 +
    30200000.0 * sc[15] * x1343 - 30200000.0 * sc[15] * x203 +
    120000000.0 * sc[19] * x1343 - 100000000.0 * sc[19] * x1423 +
    100000000.0 * sc[19] * x1431 - 120000000.0 * sc[19] * x203 -
    14000000.0 * sc[21] * x1424 + 14000000.0 * sc[21] * x1433 +
    60000000.0 * sc[24] * x1343 - 60000000.0 * sc[24] * x203 - x1016 * x771 +
    x1038 * x1343 - x1038 * x203 + x1046 * x1388 - x1046 * x1404 +
    x1052 * x1424 - x1052 * x1433 + x1102 * x1343 - x1102 * x203 +
    10.0 * x1218 * x1343 - 10.0 * x1218 * x203 - x1341 * x530 +
    10.0 * x1343 * x476 + x1343 * x491 - x1343 * x998 + x1388 * x5538 +
    x1388 * x5656 - x1404 * x5538 - x1404 * x5656 - x1423 * x762 +
    x1425 * x5579 + x1425 * x5622 + x1431 * x762 - x1434 * x5579 -
    x1434 * x5622 + 8480000.0 * x194 - 10.0 * x203 * x476 - x203 * x491 +
    x203 * x998 + 50000000.0 * x388 - x5541 * x671 + x5541 * x680 + x6105 +
    x6107 + x6112 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1425 + x1434) +
    (-x1016 * x436) * (x671 - x680) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[424] =
    -50000000.0 * sc[12] * x1451 + 50000000.0 * sc[12] * x1462 +
    8480000.0 * sc[12] * x267 - 8480000.0 * sc[12] * x621 +
    40000000.0 * sc[13] * x1443 - 40000000.0 * sc[13] * x1454 +
    100000000.0 * sc[14] * x1096 - 100000000.0 * sc[14] * x1270 +
    15000000.0 * sc[14] * x1443 - 200000000.0 * sc[14] * x1451 -
    15000000.0 * sc[14] * x1454 + 200000000.0 * sc[14] * x1462 +
    30200000.0 * sc[15] * x267 - 30200000.0 * sc[15] * x621 -
    100000000.0 * sc[19] * x1451 + 100000000.0 * sc[19] * x1462 +
    120000000.0 * sc[19] * x267 - 120000000.0 * sc[19] * x621 +
    14000000.0 * sc[21] * x1443 - 14000000.0 * sc[21] * x1454 +
    60000000.0 * sc[24] * x267 - 60000000.0 * sc[24] * x621 - x1016 * x682 +
    x1038 * x267 - x1038 * x621 - x1046 * x1418 + x1046 * x298 - x1052 * x1443 +
    x1052 * x1454 - x1096 * x5541 + x1102 * x267 - x1102 * x621 +
    x1172 * x2421 + 10.0 * x1218 * x267 - 10.0 * x1218 * x621 + x1270 * x5541 -
    x1371 * x530 - x1418 * x5538 - x1418 * x5656 - x1436 * x5579 -
    x1436 * x5622 - x1451 * x762 + x1455 * x5579 + x1455 * x5622 +
    x1462 * x762 + x194 * x571 + 10.0 * x267 * x476 + x267 * x491 -
    x267 * x998 + x298 * x5538 + x298 * x5656 +
    3200000.0 * x388 * exp(-429.747032597231 * invT) - 10.0 * x476 * x621 -
    x491 * x621 + x6107 - x6113 + x6149 + x6151 + x621 * x998 +
    40000000.0 * x65 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1436 - x1455) +
    (-x1016 * x436) * (x1096 - x1270) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-x2421 * x279 + x275 * x530) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[456] =
    4.08 * sc[10] * x6044 + 8480000.0 * sc[12] * x1386 -
    8480000.0 * sc[12] * x1392 + 50000000.0 * sc[12] * x1475 -
    50000000.0 * sc[12] * x1477 - 40000000.0 * sc[13] * x1463 +
    40000000.0 * sc[13] * x397 + 200000000.0 * sc[14] * x1475 -
    200000000.0 * sc[14] * x1477 + 100000000.0 * sc[14] * x1889 -
    100000000.0 * sc[14] * x1890 + 30200000.0 * sc[15] * x1386 -
    30200000.0 * sc[15] * x1392 + 100000000.0 * sc[19] * x1475 -
    100000000.0 * sc[19] * x1477 - 14000000.0 * sc[21] * x1463 +
    14000000.0 * sc[21] * x397 + sc[21] * x6154 + 60000000.0 * sc[24] * x1386 -
    60000000.0 * sc[24] * x1392 + sc[25] * x6177 - sc[8] * x5959 -
    x1016 * x653 + x1038 * x1386 - x1038 * x1392 - x1046 * x1420 +
    x1046 * x1422 + x1052 * x1463 - x1052 * x397 + x1102 * x1386 -
    x1102 * x1392 + x1173 * x2421 + 10.0 * x1218 * x1386 -
    10.0 * x1218 * x1392 + 10.0 * x1386 * x476 + x1386 * x491 - x1386 * x998 -
    10.0 * x1392 * x476 - x1392 * x491 + x1392 * x998 - x1420 * x5538 -
    x1420 * x5656 + x1422 * x5538 + x1422 * x5656 - x1428 * x530 +
    x1475 * x762 - x1477 * x762 + x1480 * x5579 + x1480 * x5622 -
    x1489 * x5579 - x1489 * x5622 - x1889 * x5541 + x1890 * x5541 +
    200000000.0 * x388 + x5041 + x6107 + x6188 + x6194 + 100000000.0 * x942 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1480 + x1489) +
    (-x1016 * x436) * (x1889 - x1890) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[488] =
    -3200000.0 * refCinv * ((sc[8]) * (sc[8])) * x5921 + sc[10] * x6065 +
    8480000.0 * sc[12] * x1400 - 8480000.0 * sc[12] * x1401 -
    50000000.0 * sc[12] * x1503 + 50000000.0 * sc[12] * x383 -
    40000000.0 * sc[13] * x1488 + 40000000.0 * sc[13] * x1505 -
    48000000.0 * sc[14] * x1445 + 48000000.0 * sc[14] * x1450 -
    15000000.0 * sc[14] * x1488 - 200000000.0 * sc[14] * x1503 +
    15000000.0 * sc[14] * x1505 + 100000000.0 * sc[14] * x1894 -
    100000000.0 * sc[14] * x1895 + 200000000.0 * sc[14] * x383 +
    30200000.0 * sc[15] * x1400 - 30200000.0 * sc[15] * x1401 +
    120000000.0 * sc[19] * x1400 - 120000000.0 * sc[19] * x1401 -
    100000000.0 * sc[19] * x1503 + 100000000.0 * sc[19] * x383 -
    14000000.0 * sc[21] * x1488 + 14000000.0 * sc[21] * x1505 + sc[21] * x6222 +
    60000000.0 * sc[24] * x1400 - 60000000.0 * sc[24] * x1401 + x1016 * x418 +
    x1046 * x1445 - x1046 * x1450 + x1052 * x1488 - x1052 * x1505 +
    x1102 * x1400 - x1102 * x1401 + 10.0 * x1218 * x1400 -
    10.0 * x1218 * x1401 + 10.0 * x1400 * x476 - x1400 * x998 -
    10.0 * x1401 * x476 + x1401 * x998 + x1445 * x5538 - x1450 * x5538 -
    x1498 * x530 - x1503 * x762 + x1508 * x5579 + x1508 * x5622 - x169 * x5579 -
    x169 * x5622 - x1894 * x5541 + x1895 * x5541 + 30200000.0 * x194 +
    x2421 * x278 + x383 * x762 + x6107 + x6239 + x6246 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1508 + x169) +
    (-x1016 * x436) * (x1894 - x1895) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[520] =
    8480000.0 * sc[12] * x1155 + 50000000.0 * sc[12] * x1537 -
    8480000.0 * sc[12] * x447 - 50000000.0 * sc[12] * x872 -
    40000000.0 * sc[13] * x1519 + 40000000.0 * sc[13] * x1539 -
    15000000.0 * sc[14] * x1519 + 200000000.0 * sc[14] * x1537 +
    15000000.0 * sc[14] * x1539 + 100000000.0 * sc[14] * x1899 -
    100000000.0 * sc[14] * x1900 - 200000000.0 * sc[14] * x872 +
    30200000.0 * sc[15] * x1155 - 30200000.0 * sc[15] * x447 +
    120000000.0 * sc[19] * x1155 + 100000000.0 * sc[19] * x1537 -
    120000000.0 * sc[19] * x447 - 100000000.0 * sc[19] * x872 -
    14000000.0 * sc[21] * x1519 + 14000000.0 * sc[21] * x1539 +
    800000.0 * sc[23] + 60000000.0 * sc[24] * x1155 -
    60000000.0 * sc[24] * x447 + x1016 * x427 + x102 * x2421 + x1046 * x1461 -
    x1046 * x1471 + x1052 * x1519 - x1052 * x1539 + 10.0 * x1155 * x1218 +
    10.0 * x1155 * x476 - x1155 * x998 - 10.0 * x1218 * x447 + x1461 * x5538 +
    x1461 * x5656 - x1471 * x5538 - x1471 * x5656 + x1530 * x5579 +
    x1530 * x5622 + x1537 * x762 - x1540 * x5579 - x1540 * x5622 -
    x1899 * x5541 + x1900 * x5541 - 10.0 * x447 * x476 + x447 * x998 -
    x486 * x530 + x6107 + x6277 + x6282 + x6285 - x762 * x872 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x1530 + x1540) +
    (-x1016 * x436) * (x1899 - x1900) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[552] =
    -8480000.0 * sc[12] * x1157 - 50000000.0 * sc[12] * x1528 +
    50000000.0 * sc[12] * x387 + 8480000.0 * sc[12] * x552 +
    40000000.0 * sc[13] * x465 - 40000000.0 * sc[13] * x475 +
    100000000.0 * sc[14] * x1059 - 100000000.0 * sc[14] * x1060 -
    48000000.0 * sc[14] * x1476 - 200000000.0 * sc[14] * x1528 +
    200000000.0 * sc[14] * x387 + 48000000.0 * sc[14] * x99 -
    100000000.0 * sc[19] * x1528 + 100000000.0 * sc[19] * x387 +
    14000000.0 * sc[21] * x465 - 14000000.0 * sc[21] * x475 -
    60000000.0 * sc[24] * x1157 + 60000000.0 * sc[24] * x552 +
    2.69e+21 * sc[8] * x13 * x5591 * x624 - 1.614e+22 * sc[8] * x5591 +
    x1016 * x422 + x1046 * x1476 - x1046 * x99 - x1052 * x465 + x1052 * x475 -
    x1059 * x5541 + x1060 * x5541 - x1102 * x1157 + x1102 * x552 -
    10.0 * x1157 * x1218 - 10.0 * x1157 * x476 + x1157 * x998 +
    10.0 * x1218 * x552 - 2.69e+21 * x13 * x5603 * x624 + x1476 * x5538 +
    x1476 * x5656 - x1528 * x762 + x2421 * x698 - x264 * x530 - x301 * x5579 -
    x301 * x5622 + x387 * x762 + x4677 + 10.0 * x476 * x552 + x527 * x5579 +
    x527 * x5622 - x552 * x998 - x5538 * x99 +
    5.3600740740740798e+37 * x5594 * x5596 -
    5.3600740740740798e+37 * x5594 * x5599 - x5656 * x99 + x6321 + x6326 +
    x6334 + x6336 + 1.614e+22 * x969 * x970 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x301 - x527) +
    (-x1016 * x436) * (x1059 - x1060) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-x2421 * x279 + x275 * x530) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[584] =
    8480000.0 * sc[12] * x1429 - 8480000.0 * sc[12] * x1438 -
    50000000.0 * sc[12] * x459 + 50000000.0 * sc[12] * x519 +
    40000000.0 * sc[13] * x254 - 40000000.0 * sc[13] * x67 +
    100000000.0 * sc[14] * x1068 + 15000000.0 * sc[14] * x254 -
    100000000.0 * sc[14] * x33 - 200000000.0 * sc[14] * x459 +
    200000000.0 * sc[14] * x519 - 15000000.0 * sc[14] * x67 +
    30200000.0 * sc[15] * x1429 - 30200000.0 * sc[15] * x1438 +
    120000000.0 * sc[19] * x1429 - 120000000.0 * sc[19] * x1438 -
    100000000.0 * sc[19] * x459 + 100000000.0 * sc[19] * x519 +
    14000000.0 * sc[21] * x254 - 14000000.0 * sc[21] * x67 +
    60000000.0 * sc[24] * x1429 - 60000000.0 * sc[24] * x1438 + x1016 * x398 +
    x1038 * x1429 - x1038 * x1438 + x1046 * x1494 - x1046 * x1502 -
    x1052 * x254 + x1052 * x67 - x1068 * x5541 + x1102 * x1429 - x1102 * x1438 +
    10.0 * x1218 * x1429 - 10.0 * x1218 * x1438 + 10.0 * x1429 * x476 +
    x1429 * x491 - x1429 * x998 - 10.0 * x1438 * x476 - x1438 * x491 +
    x1438 * x998 + x1494 * x5538 + x1494 * x5656 - x1502 * x5538 -
    x1502 * x5656 - x250 * x5579 - x250 * x5622 + x33 * x5541 - x459 * x762 +
    x4667 + x469 * x5579 + x469 * x5622 + x519 * x762 + x5569 + x5574 + x5617 +
    x5669 + x6361 + x6370 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x250 - x469) +
    (-x1016 * x436) * (x1068 - x33) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[616] =
    8480000.0 * sc[12] * x1442 - 8480000.0 * sc[12] * x1448 -
    50000000.0 * sc[12] * x362 + 50000000.0 * sc[12] * x455 -
    40000000.0 * sc[13] * x28 + 40000000.0 * sc[13] * x597 +
    100000000.0 * sc[14] * x1088 - 48000000.0 * sc[14] * x1517 +
    48000000.0 * sc[14] * x1524 - 200000000.0 * sc[14] * x362 +
    200000000.0 * sc[14] * x455 - 100000000.0 * sc[14] * x684 +
    30200000.0 * sc[15] * x1442 - 30200000.0 * sc[15] * x1448 - sc[15] * x6235 -
    100000000.0 * sc[19] * x362 + 100000000.0 * sc[19] * x455 -
    14000000.0 * sc[21] * x28 + 14000000.0 * sc[21] * x597 + sc[22] * x6416 +
    60000000.0 * sc[24] * x1442 - 60000000.0 * sc[24] * x1448 -
    200000000.0 * ((sc[8]) * (sc[8])) * x874 + x1016 * x425 + x1021 * x2421 +
    x1046 * x1517 - x1046 * x1524 + x1052 * x28 - x1052 * x597 - x1088 * x5541 +
    x1102 * x1442 - x1102 * x1448 + 10.0 * x1218 * x1442 -
    10.0 * x1218 * x1448 + 10.0 * x1442 * x476 - x1442 * x998 -
    10.0 * x1448 * x476 + x1448 * x998 + x1517 * x5538 - x1524 * x5538 -
    x362 * x762 + 100000000.0 * x388 + x455 * x762 + x5198 - x530 * x714 +
    x5541 * x684 + x5579 * x581 - x5579 * x599 + x5622 * x581 - x5622 * x599 +
    x6107 + x6415 + x6419 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x581 + x599) +
    (-x1016 * x436) * (x1088 - x684) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[648] =
    -8480000.0 * sc[12] * x1467 + 8480000.0 * sc[12] * x196 -
    50000000.0 * sc[12] * x534 + 50000000.0 * sc[12] * x563 -
    40000000.0 * sc[13] * x493 + 40000000.0 * sc[13] * x604 -
    48000000.0 * sc[14] * x1527 - 200000000.0 * sc[14] * x534 +
    200000000.0 * sc[14] * x563 + 48000000.0 * sc[14] * x864 -
    30200000.0 * sc[15] * x1467 + 30200000.0 * sc[15] * x196 -
    100000000.0 * sc[19] * x534 + 100000000.0 * sc[19] * x563 -
    14000000.0 * sc[21] * x493 + 14000000.0 * sc[21] * x604 -
    60000000.0 * sc[24] * x1467 + 60000000.0 * sc[24] * x196 -
    14000000.0 * sc[8] * x915 - x1038 * x1467 + x1038 * x196 + x1046 * x1527 -
    x1046 * x864 + x1052 * x493 - x1052 * x604 - x1102 * x1467 + x1102 * x196 +
    x1181 * x2421 - 10.0 * x1218 * x1467 + 10.0 * x1218 * x196 -
    10.0 * x1467 * x476 - x1467 * x491 + x1467 * x998 + x1527 * x5538 +
    x1527 * x5656 + 10.0 * x196 * x476 + x196 * x491 - x196 * x998 -
    x273 * x530 + x5220 - x534 * x762 - x5538 * x864 + x5576 + x5579 * x659 -
    x5579 * x670 + x5617 + x5622 * x659 - x5622 * x670 + x563 * x762 -
    x5656 * x864 + x6445 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x659 + x670) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-x2421 * x279 + x275 * x530) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[680] =
    -8480000.0 * sc[12] * x1470 + 8480000.0 * sc[12] * x197 -
    50000000.0 * sc[12] * x481 + 50000000.0 * sc[12] * x561 -
    40000000.0 * sc[13] * x566 + 40000000.0 * sc[13] * x787 +
    100000000.0 * sc[14] * x1087 - 100000000.0 * sc[14] * x1100 +
    48000000.0 * sc[14] * x1196 - 48000000.0 * sc[14] * x311 -
    200000000.0 * sc[14] * x481 + 200000000.0 * sc[14] * x561 -
    15000000.0 * sc[14] * x566 + sc[14] * x6154 + 15000000.0 * sc[14] * x787 -
    30200000.0 * sc[15] * x1470 + 30200000.0 * sc[15] * x197 + sc[15] * x6222 -
    120000000.0 * sc[19] * x1470 + 120000000.0 * sc[19] * x197 -
    100000000.0 * sc[19] * x481 + sc[19] * x5552 + 100000000.0 * sc[19] * x561 +
    sc[19] * x6410 - 14000000.0 * sc[21] * x566 + 14000000.0 * sc[21] * x787 -
    60000000.0 * sc[24] * x1470 + 60000000.0 * sc[24] * x197 - x1046 * x1196 +
    x1046 * x311 + x1052 * x566 - x1052 * x787 - x1087 * x5541 + x1100 * x5541 -
    x1102 * x1470 + x1102 * x197 + x1154 * x2421 - x1196 * x5538 -
    x1196 * x5656 - 10.0 * x1218 * x1470 + 10.0 * x1218 * x197 -
    10.0 * x1470 * x476 + x1470 * x998 + 10.0 * x197 * x476 - x197 * x998 +
    x311 * x5538 + x311 * x5656 + x4664 - x481 * x762 + x497 - x530 * x539 +
    x5579 * x589 - x5579 * x855 + x561 * x762 + x5622 * x589 - x5622 * x855 +
    x5750 + x6492 + 14000000.0 * x65 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x589 + x855) +
    (-x1016 * x436) * (x1087 - x1100) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-x2421 * x279 + x275 * x530) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[712] =
    8480000.0 * sc[12] * x1484 - 8480000.0 * sc[12] * x1490 +
    50000000.0 * sc[12] * x369 - 50000000.0 * sc[12] * x390 -
    40000000.0 * sc[13] * x68 + 40000000.0 * sc[13] * x688 +
    200000000.0 * sc[14] * x369 - 200000000.0 * sc[14] * x390 +
    48000000.0 * sc[14] * x445 - 48000000.0 * sc[14] * x450 -
    15000000.0 * sc[14] * x68 + 15000000.0 * sc[14] * x688 +
    30200000.0 * sc[15] * x1484 - 30200000.0 * sc[15] * x1490 +
    120000000.0 * sc[19] * x1484 - 120000000.0 * sc[19] * x1490 +
    100000000.0 * sc[19] * x369 - 100000000.0 * sc[19] * x390 + sc[19] * x6416 -
    14000000.0 * sc[21] * x68 + 14000000.0 * sc[21] * x688 +
    60000000.0 * sc[24] * x1484 - 60000000.0 * sc[24] * x1490 + x1038 * x1484 -
    x1038 * x1490 - x1046 * x445 + x1046 * x450 + x1052 * x68 - x1052 * x688 +
    x1102 * x1484 - x1102 * x1490 + 10.0 * x1218 * x1484 -
    10.0 * x1218 * x1490 + 10.0 * x1484 * x476 + x1484 * x491 - x1484 * x998 -
    10.0 * x1490 * x476 - x1490 * x491 + x1490 * x998 + x2421 * x707 +
    x369 * x762 - x390 * x762 - x445 * x5538 - x445 * x5656 + x450 * x5538 +
    x450 * x5656 + x4667 - x508 * x530 + 2.69e+21 * x526 * x970 + x5571 +
    x5576 - x5579 * x971 + x5579 * x980 + x5617 - x5622 * x971 + x5622 * x980 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x971 - x980) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[744] =
    50000000.0 * sc[12] * x1004 + 8480000.0 * sc[12] * x1499 -
    8480000.0 * sc[12] * x1513 - 50000000.0 * sc[12] * x626 +
    40000000.0 * sc[13] * x1009 - 40000000.0 * sc[13] * x1081 +
    200000000.0 * sc[14] * x1004 + 15000000.0 * sc[14] * x1009 -
    15000000.0 * sc[14] * x1081 + 100000000.0 * sc[14] * x1131 -
    200000000.0 * sc[14] * x626 + 30200000.0 * sc[15] * x1499 -
    30200000.0 * sc[15] * x1513 + 800000.0 * sc[16] +
    100000000.0 * sc[19] * x1004 + 120000000.0 * sc[19] * x1499 -
    120000000.0 * sc[19] * x1513 - 100000000.0 * sc[19] * x626 +
    14000000.0 * sc[21] * x1009 - 14000000.0 * sc[21] * x1081 +
    60000000.0 * sc[24] * x1499 - 60000000.0 * sc[24] * x1513 + x1004 * x762 -
    x1009 * x1052 + x1038 * x1499 - x1038 * x1513 - x1046 * x348 +
    x1046 * x468 + x1052 * x1081 + x1102 * x1499 - x1102 * x1513 -
    x1131 * x5541 + 10.0 * x1218 * x1499 - 10.0 * x1218 * x1513 +
    10.0 * x1499 * x476 + x1499 * x491 - x1499 * x998 - 10.0 * x1513 * x476 -
    x1513 * x491 + x1513 * x998 - x171 * x194 * x548 - x348 * x5538 -
    x348 * x5656 + x4667 + x468 * x5538 + x468 * x5656 + x5544 - x5579 * x949 +
    x5579 * x996 - x5622 * x949 + x5622 * x996 + x6024 - x626 * x762 + x6553 +
    x6564 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x949 - x996) +
    (-x1016 * x436) * (x1131 - x1152) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[776] =
    -50000000.0 * sc[12] * x1031 + 50000000.0 * sc[12] * x1042 -
    8480000.0 * sc[12] * x1492 + 8480000.0 * sc[12] * x646 -
    40000000.0 * sc[13] * x1963 + 40000000.0 * sc[13] * x306 -
    200000000.0 * sc[14] * x1031 + 200000000.0 * sc[14] * x1042 -
    15000000.0 * sc[14] * x1963 + 15000000.0 * sc[14] * x306 -
    30200000.0 * sc[15] * x1492 + 30200000.0 * sc[15] * x646 -
    100000000.0 * sc[19] * x1031 + 100000000.0 * sc[19] * x1042 -
    120000000.0 * sc[19] * x1492 + 120000000.0 * sc[19] * x646 -
    14000000.0 * sc[21] * x1963 + 14000000.0 * sc[21] * x306 -
    60000000.0 * sc[24] * x1492 + 60000000.0 * sc[24] * x646 - x1031 * x762 -
    x1038 * x1492 + x1038 * x646 + x1042 * x762 + x1046 * x217 - x1046 * x368 +
    x1052 * x1963 - x1052 * x306 - x1102 * x1492 + x1102 * x646 -
    10.0 * x1218 * x1492 + 10.0 * x1218 * x646 - 10.0 * x1492 * x476 -
    x1492 * x491 + x1492 * x998 + 60000000.0 * x194 + x217 * x5538 +
    x217 * x5656 - x368 * x5538 - x368 * x5656 + x4667 + 10.0 * x476 * x646 +
    x491 * x646 + x5576 + x5579 * x89 - x5579 * x985 + x5617 + x5622 * x89 -
    x5622 * x985 + x5669 - x646 * x998 + x6596 + x6602 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x89 + x985) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-x2421 * x279 + x275 * x530) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[808] =
    8480000.0 * sc[12] * x1535 + 50000000.0 * sc[12] * x336 +
    40000000.0 * sc[13] * x359 + 30000000.0 * sc[14] * x1535 +
    200000000.0 * sc[14] * x336 + 15000000.0 * sc[14] * x359 + sc[14] * x6177 +
    48000000.0 * sc[14] * x655 + 30200000.0 * sc[15] * x1535 +
    120000000.0 * sc[19] * x1535 + 100000000.0 * sc[19] * x336 +
    14000000.0 * sc[21] * x359 + 60000000.0 * sc[24] * x1535 + x1038 * x1535 -
    x1046 * x655 - x1052 * x359 - x1055 * x5579 - x1055 * x5622 +
    x1102 * x1535 + 10.0 * x1218 * x1535 + 10.0 * x1535 * x476 + x1535 * x491 -
    x1535 * x998 + x2762 + x336 * x762 + x3776 + x4160 + x4698 - x5538 * x655 +
    x5588 + x5619 + x5640 + x5644 + x5649 + x5652 - x5656 * x655 + x5663 +
    x5669 + x5790 + x619 +
    6.2e+41 * exp(-49667.484914925801 * invT - 7.87 * logT) +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1055 - x991) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[840] =
    -50000000.0 * sc[12] * x482 + 8480000.0 * sc[12] * x549 -
    8480000.0 * sc[12] * x550 + 50000000.0 * sc[12] * x567 -
    40000000.0 * sc[13] * x575 + 40000000.0 * sc[13] * x678 +
    100000000.0 * sc[14] * x1139 - 200000000.0 * sc[14] * x482 +
    200000000.0 * sc[14] * x567 - 15000000.0 * sc[14] * x575 +
    15000000.0 * sc[14] * x678 + 30200000.0 * sc[15] * x549 -
    30200000.0 * sc[15] * x550 - 100000000.0 * sc[19] * x482 +
    120000000.0 * sc[19] * x549 - 120000000.0 * sc[19] * x550 +
    100000000.0 * sc[19] * x567 - 14000000.0 * sc[21] * x575 +
    14000000.0 * sc[21] * x678 + 60000000.0 * sc[24] * x549 -
    60000000.0 * sc[24] * x550 - 100000000.0 * sc[8] * x1093 - sc[8] * x5923 +
    x1038 * x549 - x1038 * x550 - x1046 * x371 + x1046 * x555 + x1052 * x575 -
    x1052 * x678 + x1102 * x549 - x1102 * x550 - x1139 * x5541 +
    10.0 * x1218 * x549 - 10.0 * x1218 * x550 - x371 * x5538 - x371 * x5656 +
    x4667 + 10.0 * x476 * x549 - 10.0 * x476 * x550 - x482 * x762 +
    x491 * x549 - x491 * x550 + x544 * x5579 + x544 * x5622 - x549 * x998 +
    x550 * x998 + x5538 * x555 + x5544 + x555 * x5656 - x5579 * x815 -
    x5622 * x815 + x567 * x762 + x6024 + x6655 + x6661 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x544 + x815) +
    (-x1016 * x436) * (x1139 - x1152) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-x2421 * x279 + x275 * x530) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[872] =
    100000000.0 * sc[14] * x1143 - x1143 * x5541 + x5666 + x6071 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1104 - x991) +
    (-x1016 * x436) * (x1143 - x1152) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[904] =
    100000000.0 * sc[14] * x1092 - x1092 * x5541 + x5666 + x6071 +
    3.76e+54 * exp(-36634.173270583597 * invT - 12.06 * logT) +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x1104 - x991) +
    (-x1016 * x436) * (x1092 - x1152) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[936] =
    50000000.0 * sc[12] * x479 + 8480000.0 * sc[12] * x553 +
    40000000.0 * sc[13] * x1018 + 15000000.0 * sc[14] * x1018 +
    100000000.0 * sc[14] * x1080 + 48000000.0 * sc[14] * x372 +
    200000000.0 * sc[14] * x479 + 30000000.0 * sc[14] * x553 +
    30200000.0 * sc[15] * x553 + 100000000.0 * sc[19] * x479 +
    120000000.0 * sc[19] * x553 + 14000000.0 * sc[21] * x1018 +
    60000000.0 * sc[24] * x553 - x1016 * x1169 - x1018 * x1052 + x1038 * x553 -
    x1046 * x372 - x1080 * x5541 + x1102 * x553 + 10.0 * x1218 * x553 + x2762 -
    x372 * x5538 - x372 * x5656 + x3776 + x4160 + 10.0 * x476 * x553 +
    x479 * x762 + x491 * x553 - x553 * x998 - x5579 * x647 + x5588 -
    x5622 * x647 + x5640 + x5644 + x5649 + x5652 + x5663 + x5790 + x6071 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (x647 - x991) +
    (-x1016 * x436) * (x1080 - x1152) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-x2421 * x279 + x275 * x530) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[968] =
    40000000.0 * sc[13] * x402 - 40000000.0 * sc[13] * x590 +
    14000000.0 * sc[21] * x402 - 14000000.0 * sc[21] * x590 - x1052 * x402 +
    x1052 * x590 + x5342 + x5579 * x649 - x5579 * x675 + x5619 + x5622 * x649 -
    x5622 * x675 + x5665 + x5669 +
    (-8480000.0 * sc[12] * x441 - 40000000.0 * sc[13] * x413 -
     15000000.0 * sc[14] * x413 - 30000000.0 * sc[14] * x441 -
     30200000.0 * sc[15] * x441 - 120000000.0 * sc[19] * x441 -
     14000000.0 * sc[21] * x413 - 60000000.0 * sc[24] * x441 - x1038 * x441 +
     x1052 * x413 - x1102 * x441 - 10.0 * x1218 * x441 - 10.0 * x441 * x476 -
     x441 * x491 + x441 * x998) *
      (-x649 + x675) +
    (-x1016 * x436) * (x509) +
    (-50000000.0 * sc[12] * x396 - 200000000.0 * sc[14] * x396 -
     100000000.0 * sc[19] * x396 - x396 * x762) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-4.8e-5 * sc[14] * x1468 + 3.0e-5 * sc[8] * x1468 * x292 +
     10.0e-12 * sc[8] * x1468 * x513 + x2415) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (8480000.0 * sc[12] * x442 + 30000000.0 * sc[14] * x442 +
     30200000.0 * sc[15] * x442 + 120000000.0 * sc[19] * x442 +
     60000000.0 * sc[24] * x442 + x1038 * x442 - x104 * x2421 + x1102 * x442 +
     10.0 * x1218 * x442 + 10.0 * x442 * x476 + x442 * x491 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-x2421 * x279 + x275 * x530) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[9] =
    0.017205700000000001 * x2704 + 729.64 * x2708 + 7.81405e-14 * x2712 +
    438770000.0 * x2714 + 1.88819e-8 * x2719 + 2.601e+26 * x2721 +
    2.20371e-5 * x2723 + x6751 + x6755 + x6759 +
    (-x2429 * x441 + x2434 * x441) * (x1104 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[41] = x1062 * x2429 - x1062 * x2434 - x1106 * x2429 + x1106 * x2434 +
          x6751 + (-x2429 * x441 + x2434 * x441) * (-x1138 + x1162) +
          (x2429 * x442 - x2434 * x442) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[73] = 1000000.0 * sc[16] * x1214 - 1000000.0 * sc[16] * x535 +
          x1121 * x2429 - x1121 * x2434 - x1156 * x2429 + x1156 * x2434 +
          x1214 * x3785 + x1214 * x4627 + x1214 * x6708 + x1214 * x6716 +
          x3784 * x942 - x3785 * x535 - x4627 * x535 - x535 * x6708 -
          x535 * x6716 + x6778 +
          (-x2429 * x441 + x2434 * x441) * (-x1212 + x1243) +
          (x2429 * x442 - x2434 * x442) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[105] = x1170 * x2429 - x1170 * x2434 + x6751 + x6755 +
           (-x2429 * x441 + x2434 * x441) * (x1250 - x991) +
           (x2429 * x442 - x2434 * x442) *
             (x340 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1248 +
                 (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[137] =
    x6751 + x6755 + x6759 + (-x2429 * x441 + x2434 * x441) * (x1104 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[169] = x1183 * x2429 - x1183 * x2434 + x6751 + x6755 +
           (-x2429 * x441 + x2434 * x441) * (x1258 - x991) +
           (x2429 * x442 - x2434 * x442) *
             (x1051 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1256 +
                 (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[201] = -1000000.0 * sc[16] * x1223 + 1000000.0 * sc[16] * x1225 -
           x1223 * x3785 - x1223 * x4627 - x1223 * x6708 - x1223 * x6716 +
           x1225 * x3785 + x1225 * x4627 + x1225 * x6708 + x1225 * x6716 +
           x1227 * x2429 - x1227 * x2434 - x1245 * x2429 + x1245 * x2434 +
           x4626 * x942 + x6778 +
           (-x2429 * x441 + x2434 * x441) * (-x1276 + x1289) +
           (x2429 * x442 - x2434 * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[233] = x1254 * x2429 - x1254 * x2434 - x1260 * x2429 + x1260 * x2434 +
           x6751 + (-x2429 * x441 + x2434 * x441) * (x1295 - x1311) +
           (x2429 * x442 - x2434 * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[265] = 1000000.0 * sc[16] * x1286 - 1000000.0 * sc[16] * x523 +
           6.534e+119 * x1073 * x677 + 9.9e+63 * x1084 + x1263 * x2429 -
           x1263 * x2434 - x1279 * x2429 + x1279 * x2434 + x1286 * x3785 +
           x1286 * x4627 + x1286 * x6708 + x1286 * x6716 - x3785 * x523 -
           x4627 * x523 - x523 * x6708 - x523 * x6716 -
           6.534e+119 * x631 * x677 * x942 - x6734 * x6814 - 9.9e+63 * x6742 +
           x6744 * x6814 + (-x2429 * x441 + x2434 * x441) * (-x1362 + x650) +
           (x2429 * x442 - x2434 * x442) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[297] = -sc[12] * x186 - sc[12] * x3968 - 1000000.0 * sc[13] * x1091 -
           sc[15] * x6846 + 1000000.0 * sc[16] * x83 - sc[19] * x4930 -
           6.6e+63 * x1065 * x6707 * x7 - x1298 * x2434 + x1304 * x2434 -
           x194 * x2433 + x3785 * x83 + x4627 * x83 + x6708 * x83 + x6711 +
           x6716 * x83 + x6719 + x6721 + x6723 + x6750 + x6858 +
           (-x2429 * x441 + x2434 * x441) * (-x1391 + x1398) +
           (x2429 * x442 - x2434 * x442) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[329] = x1317 * x2429 - x1317 * x2434 - x1328 * x2429 + x1328 * x2434 +
           x6751 + (-x2429 * x441 + x2434 * x441) * (x1124 - x1407) +
           (x2429 * x442 - x2434 * x442) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[361] =
    1000000.0 * sc[16] * x121 + sc[19] * x6875 + x121 * x3785 + x121 * x4627 +
    x121 * x6708 + x121 * x6716 + x6711 + x6719 + x6721 + x6723 + x6750 +
    x6755 + x6759 + (-x2429 * x441 + x2434 * x441) * (x1104 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[393] = 1000000.0 * sc[16] * x671 - 1000000.0 * sc[16] * x680 +
           x1343 * x2429 - x1343 * x2434 - x203 * x2429 + x203 * x2434 +
           7.81405e-14 * x2726 + x4627 * x671 - x4627 * x680 + x6708 * x671 -
           x6708 * x680 + x671 * x6716 - x6716 * x680 + x6749 + x6893 +
           (-x2429 * x441 + x2434 * x441) * (-x1425 + x1434) +
           (x2429 * x442 - x2434 * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[425] = 1000000.0 * sc[16] * x1096 - 1000000.0 * sc[16] * x1270 -
           1000000.0 * sc[9] * x1091 + x1096 * x3785 + x1096 * x4627 +
           x1096 * x6708 + x1096 * x6716 - x1270 * x3785 - x1270 * x4627 -
           x1270 * x6708 - x1270 * x6716 + x2429 * x267 - x2429 * x621 -
           x2434 * x267 + x2434 * x621 + 438770000.0 * x2727 + x6749 +
           (-x2429 * x441 + x2434 * x441) * (x1436 - x1455) +
           (x2429 * x442 - x2434 * x442) *
             (x1418 - x298 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1451 + x1462 +
                 (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[457] = 1000000.0 * sc[16] * x1889 - 1000000.0 * sc[16] * x1890 -
           x1386 * x2434 + x1392 * x2434 + x1889 * x3785 + x1889 * x4627 +
           x1889 * x6708 + x1889 * x6716 - x1890 * x3785 - x1890 * x4627 -
           x1890 * x6708 - x1890 * x6716 + 2.20371e-5 * x2730 + x6749 + x6926 +
           (-x2429 * x441 + x2434 * x441) * (-x1480 + x1489) +
           (x2429 * x442 - x2434 * x442) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[489] = 1000000.0 * sc[16] * x1894 - 1000000.0 * sc[16] * x1895 -
           sc[9] * x6846 + x1400 * x2429 - x1400 * x2434 - x1401 * x2429 +
           x1401 * x2434 + x1894 * x3785 + x1894 * x4627 + x1894 * x6708 +
           x1894 * x6716 - x1895 * x3785 - x1895 * x4627 - x1895 * x6708 -
           x1895 * x6716 + 729.64 * x2733 + x6749 +
           (-x2429 * x441 + x2434 * x441) * (-x1508 + x169) +
           (x2429 * x442 - x2434 * x442) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[521] = 1000000.0 * sc[16] * x1899 - 1000000.0 * sc[16] * x1900 +
           x1155 * x2429 - x1155 * x2434 + x1899 * x3785 + x1899 * x4627 +
           x1899 * x6708 + x1899 * x6716 - x1900 * x3785 - x1900 * x4627 -
           x1900 * x6708 - x1900 * x6716 - x2429 * x447 + x2434 * x447 +
           0.017205700000000001 * x2736 + x6749 + 1000000.0 * x942 +
           (-x2429 * x441 + x2434 * x441) * (-x1530 + x1540) +
           (x2429 * x442 - x2434 * x442) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[553] =
    1000000.0 * sc[16] * x1059 - 1000000.0 * sc[16] * x1060 -
    6.6e+63 * sc[19] * x1037 * x11 * x6707 * x942 +
    6.6e+63 * x1037 * x6742 * x7 + x1059 * x3785 + x1059 * x4627 +
    x1059 * x6708 + x1059 * x6716 - x1060 * x3785 - x1060 * x4627 -
    x1060 * x6708 - x1060 * x6716 + 2.6136e+120 * x1073 * x677 +
    3.96e+64 * x1084 - x1157 * x2429 + x1157 * x2434 + x2429 * x552 -
    x2434 * x552 + x6715 * x942 - 2.6136e+120 * x6738 - 3.96e+64 * x6742 +
    (-x2429 * x441 + x2434 * x441) * (x301 - x527) +
    (x2429 * x442 - x2434 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[585] =
    1000000.0 * sc[16] * x1068 - 1000000.0 * sc[16] * x33 + x1068 * x3785 +
    x1068 * x4627 + x1068 * x6708 + x1068 * x6716 + x1429 * x2429 -
    x1429 * x2434 - x1438 * x2429 + x1438 * x2434 - x33 * x3785 - x33 * x4627 -
    x33 * x6708 - x33 * x6716 + x6749 +
    (-x2429 * x441 + x2434 * x441) * (x250 - x469) +
    (x2429 * x442 - x2434 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[617] =
    sc[11] * x6875 + 1000000.0 * sc[16] * x1088 - 1000000.0 * sc[16] * x684 +
    sc[28] * x6700 + sc[29] * x6875 - sc[9] * x4930 + x1088 * x3785 +
    x1088 * x4627 + x1088 * x6708 + x1088 * x6716 +
    6.6e+63 * x11 * x6707 * x942 + x1442 * x2429 - x1442 * x2434 -
    x1448 * x2429 + x1448 * x2434 + 1.88819e-8 * x2739 - x3785 * x684 -
    x4627 * x684 - x6708 * x684 - x6716 * x684 + x6749 +
    (-x2429 * x441 + x2434 * x441) * (-x581 + x599) +
    (x2429 * x442 - x2434 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[649] =
    -x1467 * x2429 + x1467 * x2434 + x196 * x2429 - x196 * x2434 + x6751 +
    (-x2429 * x441 + x2434 * x441) * (-x659 + x670) +
    (x2429 * x442 - x2434 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[681] =
    1000000.0 * sc[16] * x1087 - 1000000.0 * sc[16] * x1100 + x1087 * x3785 +
    x1087 * x4627 + x1087 * x6708 + x1087 * x6716 - x1100 * x3785 -
    x1100 * x4627 - x1100 * x6708 - x1100 * x6716 - x1470 * x2429 +
    x1470 * x2434 + x197 * x2429 - x197 * x2434 + x6778 +
    (-x2429 * x441 + x2434 * x441) * (-x589 + x855) +
    (x2429 * x442 - x2434 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[713] =
    x1484 * x2429 - x1484 * x2434 - x1490 * x2429 + x1490 * x2434 + x6751 +
    (-x2429 * x441 + x2434 * x441) * (x971 - x980) +
    (x2429 * x442 - x2434 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[745] =
    1000000.0 * sc[16] * x1131 + 4000000.0 * sc[23] + x1131 * x3785 +
    x1131 * x4627 + x1131 * x6708 + x1131 * x6716 + x1499 * x2429 -
    x1499 * x2434 - x1513 * x2429 + x1513 * x2434 + x6711 + x6719 + x6721 +
    x6723 + x6750 + (-x2429 * x441 + x2434 * x441) * (x949 - x996) +
    (x2429 * x442 - x2434 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[777] = -x1492 * x2429 + x1492 * x2434 + x2429 * x646 - x2434 * x646 +
           x6751 + (-x2429 * x441 + x2434 * x441) * (-x89 + x985) +
           (x2429 * x442 - x2434 * x442) *
             (-x217 + x368 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1031 + x1042 +
                 (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[809] =
    x1535 * x2429 - x1535 * x2434 + x6751 + x6755 +
    (-x2429 * x441 + x2434 * x441) * (x1055 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[841] =
    1000000.0 * sc[16] * x1139 + x1139 * x3785 + x1139 * x4627 + x1139 * x6708 +
    x1139 * x6716 + x194 * x2428 + x2429 * x549 - x2429 * x550 - x2434 * x549 +
    x2434 * x550 + x6711 + x6719 + x6721 + x6723 + x6750 +
    (-x2429 * x441 + x2434 * x441) * (-x544 + x815) +
    (x2429 * x442 - x2434 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[873] =
    1000000.0 * sc[16] * x1143 + x1143 * x3785 + x1143 * x4627 + x1143 * x6708 +
    x1143 * x6716 + x6711 + x6719 + x6721 + x6723 + x6750 + x6755 + x6759 +
    (-x2429 * x441 + x2434 * x441) * (x1104 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[905] =
    1000000.0 * sc[16] * x1092 + sc[19] * x6700 + x1092 * x3785 +
    x1092 * x4627 + x1092 * x6708 + x1092 * x6716 + x6711 + x6719 + x6721 +
    x6723 + x6750 + x6755 + x6759 +
    (-x2429 * x441 + x2434 * x441) * (x1104 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[937] =
    1000000.0 * sc[16] * x1080 + sc[19] * x6875 + x1080 * x3785 +
    x1080 * x4627 + x1080 * x6708 + x1080 * x6716 + x2429 * x553 -
    x2434 * x553 + x6711 + x6719 + x6721 + x6723 + x6750 + x6755 +
    (-x2429 * x441 + x2434 * x441) * (x647 - x991) +
    (x2429 * x442 - x2434 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[969] =
    x6751 + x6755 + x6759 + (-x2429 * x441 + x2434 * x441) * (-x649 + x675) +
    (x2429 * x442 - x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[10] =
    x7148 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1104 - x991) +
    (-x2442 * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[42] =
    20000000.0 * sc[10] * x1134 - 20000000.0 * sc[10] * x1161 -
    30110000.0 * sc[15] * x1127 + 30110000.0 * sc[15] * x1159 -
    90000000.0 * sc[19] * x1127 + 90000000.0 * sc[19] * x1159 - x1046 * x1127 +
    x1046 * x1159 - 10.0 * x1062 * x476 + 10.0 * x1106 * x476 - x1127 * x7108 -
    x1127 * x7113 - x1138 * x5622 + x1138 * x6702 + x1159 * x7108 +
    x1159 * x7113 + x1160 * x2442 + x1162 * x5622 - x1162 * x6702 -
    x2442 * x472 + x7164 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1138 + x1162) +
    (-x2442 * x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-10.0 * x442 * x476) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[74] =
    20000000.0 * sc[10] * x1211 - 20000000.0 * sc[10] * x1242 +
    30110000.0 * sc[15] * x1197 - 30110000.0 * sc[15] * x1205 +
    90000000.0 * sc[19] * x1197 - 90000000.0 * sc[19] * x1205 + x1046 * x1197 -
    x1046 * x1205 - 10.0 * x1121 * x476 + 10.0 * x1156 * x476 + x1197 * x7108 +
    x1197 * x7113 - x1205 * x7108 - x1205 * x7113 - x1212 * x5622 +
    x1212 * x6702 + x1234 * x2442 + x1243 * x5622 - x1243 * x6702 -
    x2442 * x36 + x7180 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1212 + x1243) +
    (-x2442 * x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-10.0 * x442 * x476) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[106] =
    -20000000.0 * sc[10] * x1249 + 30110000.0 * sc[15] * x340 +
    90000000.0 * sc[19] * x340 + x1046 * x340 - 10.0 * x1170 * x476 +
    x1248 * x2442 + x1250 * x5622 - x1250 * x6702 + x2452 + x340 * x7108 +
    x340 * x7113 + x4710 + x6730 + x7111 + x7190 + x7192 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1250 - x991) +
    (-x2442 * x396) * (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-10.0 * x442 * x476) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[138] =
    x7148 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1104 - x991) +
    (-x2442 * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[170] =
    -20000000.0 * sc[10] * x1257 + 30110000.0 * sc[15] * x1051 +
    90000000.0 * sc[19] * x1051 + x1046 * x1051 + x1051 * x7108 +
    x1051 * x7113 - 10.0 * x1183 * x476 + x1256 * x2442 + x1258 * x5622 -
    x1258 * x6702 + x2452 + x4710 + x6730 + x7111 + x7190 + x7192 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1258 - x991) +
    (-x2442 * x396) * (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-10.0 * x442 * x476) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[202] =
    20000000.0 * sc[10] * x1275 - 20000000.0 * sc[10] * x1288 -
    90000000.0 * sc[10] * x860 - 30110000.0 * sc[15] * x1233 +
    30110000.0 * sc[15] * x1264 - 90000000.0 * sc[19] * x1233 +
    90000000.0 * sc[19] * x1264 - x1046 * x1233 + x1046 * x1264 -
    10.0 * x1227 * x476 - x1233 * x7108 - x1233 * x7113 + 10.0 * x1245 * x476 +
    x1264 * x7108 + x1264 * x7113 - x1272 * x2442 - x1276 * x5622 +
    x1276 * x6702 + x1289 * x5622 - x1289 * x6702 + x2442 * x379 + x7180 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1276 + x1289) +
    (-x2442 * x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-10.0 * x442 * x476) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[234] =
    20000000.0 * sc[10] * x1310 - 20000000.0 * sc[10] * x1322 -
    30110000.0 * sc[15] * x1268 + 30110000.0 * sc[15] * x1284 -
    90000000.0 * sc[19] * x1268 + 90000000.0 * sc[19] * x1284 - x1046 * x1268 +
    x1046 * x1284 - 10.0 * x1254 * x476 + 10.0 * x1260 * x476 - x1268 * x7108 -
    x1268 * x7113 + x1284 * x7108 + x1284 * x7113 - x1287 * x2442 +
    x1295 * x5622 - x1295 * x6702 - x1311 * x5622 + x1311 * x6702 +
    x1319 * x2442 + x7164 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1295 - x1311) +
    (-x2442 * x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-10.0 * x442 * x476) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[266] =
    -1.24e+42 * ((sc[10]) * (sc[10])) * x5902 + 20000000.0 * sc[10] * x1361 -
    20000000.0 * sc[10] * x664 + sc[12] * x5975 - 30110000.0 * sc[15] * x1306 +
    30110000.0 * sc[15] * x1314 - 90000000.0 * sc[19] * x1306 +
    90000000.0 * sc[19] * x1314 - x1046 * x1306 + x1046 * x1314 -
    10.0 * x1263 * x476 + 10.0 * x1279 * x476 - x1306 * x7108 + x1314 * x7108 +
    x1362 * x6702 + 10.0 * x513 * x868 - x650 * x6702 + x7242 + x7245 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1362 + x650) +
    (-x2442 * x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-10.0 * x442 * x476) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[298] =
    20000000.0 * sc[10] * x1370 - 20000000.0 * sc[10] * x1396 -
    30110000.0 * sc[15] * x1351 + 30110000.0 * sc[15] * x1355 -
    90000000.0 * sc[19] * x1351 + 90000000.0 * sc[19] * x1355 - x1046 * x1351 +
    x1046 * x1355 - 10.0 * x1298 * x476 + 10.0 * x1304 * x476 - x1351 * x7108 -
    x1351 * x7113 + x1355 * x7108 + x1355 * x7113 - x1391 * x5622 +
    x1391 * x6702 + x1395 * x2442 + x1398 * x5622 - x1398 * x6702 -
    x2442 * x666 + x2451 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1391 + x1398) +
    (-x2442 * x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-10.0 * x442 * x476) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[330] =
    -2.48e+42 * sc[10] * sc[8] * x5902 - 20000000.0 * sc[10] * x1015 +
    20000000.0 * sc[10] * x1406 - sc[12] * x7269 + 30110000.0 * sc[15] * x1113 -
    30110000.0 * sc[15] * x331 - sc[15] * x6065 - sc[15] * x7285 -
    sc[16] * x7280 - 30110000.0 * sc[17] * x838 + 90000000.0 * sc[19] * x1113 -
    90000000.0 * sc[19] * x331 - sc[23] * x7261 - 90000000.0 * sc[6] * x860 +
    x1046 * x1113 - x1046 * x331 + x1113 * x7108 + x1113 * x7113 -
    x1124 * x6702 - 10.0 * x1317 * x476 + 10.0 * x1328 * x476 + x1407 * x6702 -
    10.0 * x194 * exp(-3019.29999482832 * invT + 2.0 * logT) -
    12000000.0 * x207 * exp(-3331.2943276272399 * invT) - x331 * x7108 -
    x331 * x7113 - 20000000.0 * x65 + x7164 + x7292 - x848 * x849 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1124 - x1407) +
    (-x2442 * x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-10.0 * x442 * x476) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[362] =
    x7148 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1104 - x991) +
    (-x2442 * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[394] =
    20000000.0 * sc[10] * x1424 - 20000000.0 * sc[10] * x1433 - sc[10] * x7269 -
    30110000.0 * sc[15] * x1388 + 30110000.0 * sc[15] * x1404 -
    90000000.0 * sc[19] * x1388 + 90000000.0 * sc[19] * x1404 + sc[8] * x5975 -
    x1046 * x1388 + x1046 * x1404 - 10.0 * x1343 * x476 - x1388 * x7108 -
    x1388 * x7113 + x1404 * x7108 + x1404 * x7113 - x1423 * x2442 -
    x1425 * x5622 + x1425 * x6702 + x1431 * x2442 + x1434 * x5622 -
    x1434 * x6702 + 10.0 * x203 * x476 + x2451 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1425 + x1434) +
    (-x2442 * x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-10.0 * x442 * x476) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[426] =
    -20000000.0 * sc[10] * x1443 + 20000000.0 * sc[10] * x1454 +
    30110000.0 * sc[15] * x1418 - 30110000.0 * sc[15] * x298 +
    90000000.0 * sc[19] * x1418 - 90000000.0 * sc[19] * x298 + x1046 * x1418 -
    x1046 * x298 + x1418 * x7108 + x1418 * x7113 + x1436 * x5622 -
    x1436 * x6702 - x1451 * x2442 - x1455 * x5622 + x1455 * x6702 +
    x1462 * x2442 + x2451 - 10.0 * x267 * x476 - x298 * x7108 - x298 * x7113 +
    10.0 * x476 * x621 + 1.34 * x868 * exp(x2463) +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1436 - x1455) +
    (-x2442 * x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-10.0 * x442 * x476) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[458] =
    20000000.0 * sc[10] * x1463 - 20000000.0 * sc[10] * x397 +
    30110000.0 * sc[15] * x1420 - 30110000.0 * sc[15] * x1422 +
    90000000.0 * sc[19] * x1420 - 90000000.0 * sc[19] * x1422 + x1046 * x1420 -
    x1046 * x1422 - 10.0 * x1386 * x476 + 10.0 * x1392 * x476 + x1420 * x7108 +
    x1420 * x7113 - x1422 * x7108 - x1422 * x7113 + x1480 * x6702 -
    x1489 * x6702 + x2451 + x7337 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1480 + x1489) +
    (-x2442 * x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-10.0 * x442 * x476) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[490] =
    20000000.0 * sc[10] * x1488 - 20000000.0 * sc[10] * x1505 - sc[10] * x6065 -
    sc[10] * x7285 - 30110000.0 * sc[15] * x1445 + 30110000.0 * sc[15] * x1450 -
    90000000.0 * sc[19] * x1445 + 90000000.0 * sc[19] * x1450 - x1046 * x1445 +
    x1046 * x1450 - 10.0 * x1400 * x476 + 10.0 * x1401 * x476 - x1445 * x7108 -
    x1445 * x7113 + x1450 * x7108 + x1450 * x7113 - x1503 * x2442 -
    x1508 * x5622 + x1508 * x6702 + x169 * x5622 - x169 * x6702 + x2442 * x383 +
    x2451 + 30110000.0 * x868 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1508 + x169) +
    (-x2442 * x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-10.0 * x442 * x476) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[522] =
    20000000.0 * sc[10] * x1519 - 20000000.0 * sc[10] * x1539 - sc[10] * x7280 -
    30110000.0 * sc[15] * x1461 + 30110000.0 * sc[15] * x1471 -
    90000000.0 * sc[19] * x1461 + 90000000.0 * sc[19] * x1471 - x1046 * x1461 +
    x1046 * x1471 - 10.0 * x1155 * x476 - x1461 * x7108 - x1461 * x7113 +
    x1471 * x7108 + x1471 * x7113 - x1530 * x5622 + x1530 * x6702 +
    x1537 * x2442 + x1540 * x5622 - x1540 * x6702 - x2442 * x872 + x2451 +
    10.0 * x447 * x476 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x1530 + x1540) +
    (-x2442 * x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-10.0 * x442 * x476) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[554] =
    -20000000.0 * sc[10] * x465 + 20000000.0 * sc[10] * x475 -
    30110000.0 * sc[10] * x838 - 30110000.0 * sc[15] * x1476 +
    30110000.0 * sc[15] * x99 - 90000000.0 * sc[19] * x1476 +
    90000000.0 * sc[19] * x99 - x1046 * x1476 + x1046 * x99 +
    10.0 * x1157 * x476 - x1476 * x7108 - x1528 * x2442 + x2442 * x387 +
    x301 * x5622 - x301 * x6702 - 10.0 * x476 * x552 - x527 * x5622 +
    x527 * x6702 + x7108 * x99 + x7114 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x301 - x527) +
    (-x2442 * x396) * (x465 - x475 + (-x413) * (x301 - x527)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-10.0 * x442 * x476) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[586] =
    -20000000.0 * sc[10] * x254 + 20000000.0 * sc[10] * x67 -
    30110000.0 * sc[15] * x1494 + 30110000.0 * sc[15] * x1502 -
    90000000.0 * sc[19] * x1494 + 90000000.0 * sc[19] * x1502 - x1046 * x1494 +
    x1046 * x1502 - 10.0 * x1429 * x476 + 10.0 * x1438 * x476 - x1494 * x7108 -
    x1494 * x7113 + x1502 * x7108 + x1502 * x7113 - x2442 * x459 +
    x2442 * x519 + x2451 + x250 * x5622 - x250 * x6702 - x469 * x5622 +
    x469 * x6702 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x250 - x469) +
    (-x2442 * x396) * (x254 - x67 + (-x413) * (x250 - x469)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-10.0 * x442 * x476) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[618] =
    20000000.0 * sc[10] * x28 - 20000000.0 * sc[10] * x597 -
    30110000.0 * sc[15] * x1517 + 30110000.0 * sc[15] * x1524 -
    90000000.0 * sc[19] * x1517 + 90000000.0 * sc[19] * x1524 + sc[22] * x7115 +
    sc[23] * x7116 + 20000000.0 * sc[23] * x932 - x1046 * x1517 +
    x1046 * x1524 - 10.0 * x1442 * x476 + 10.0 * x1448 * x476 - x1517 * x7108 +
    x1524 * x7108 + x581 * x6702 - x599 * x6702 + x7121 + x7122 +
    90000000.0 * x868 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x581 + x599) +
    (-x2442 * x396) * (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-10.0 * x442 * x476) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[650] =
    20000000.0 * sc[10] * x493 - 20000000.0 * sc[10] * x604 -
    30110000.0 * sc[15] * x1527 + 30110000.0 * sc[15] * x864 -
    90000000.0 * sc[19] * x1527 + 90000000.0 * sc[19] * x864 - x1046 * x1527 +
    x1046 * x864 + 10.0 * x1467 * x476 - x1527 * x7108 - x1527 * x7113 -
    10.0 * x196 * x476 - x2442 * x534 + x2442 * x563 + x2451 - x5622 * x659 +
    x5622 * x670 + x659 * x6702 - x670 * x6702 + x7108 * x864 + x7113 * x864 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x659 + x670) +
    (-x2442 * x396) * (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-10.0 * x442 * x476) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[682] =
    20000000.0 * sc[10] * x566 - 20000000.0 * sc[10] * x787 +
    30110000.0 * sc[15] * x1196 - 30110000.0 * sc[15] * x311 +
    90000000.0 * sc[19] * x1196 - 90000000.0 * sc[19] * x311 + x1046 * x1196 -
    x1046 * x311 + x1196 * x7108 + x1196 * x7113 + 10.0 * x1470 * x476 -
    10.0 * x197 * x476 - x2442 * x481 + x2442 * x561 - x311 * x7108 -
    x311 * x7113 - x5622 * x589 + x5622 * x855 + x589 * x6702 - x6702 * x855 +
    x7180 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x589 + x855) +
    (-x2442 * x396) * (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-10.0 * x442 * x476) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[714] =
    20000000.0 * sc[10] * x68 - 20000000.0 * sc[10] * x688 +
    30110000.0 * sc[15] * x445 - 30110000.0 * sc[15] * x450 +
    90000000.0 * sc[19] * x445 - 90000000.0 * sc[19] * x450 + sc[19] * x7115 +
    x1046 * x445 - x1046 * x450 - 10.0 * x1484 * x476 + 10.0 * x1490 * x476 +
    x2442 * x369 - x2442 * x390 + x2451 + x445 * x7108 + x445 * x7113 -
    x450 * x7108 - x450 * x7113 + x5622 * x971 - x5622 * x980 - x6702 * x971 +
    x6702 * x980 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x971 - x980) +
    (-x2442 * x396) * (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-10.0 * x442 * x476) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[746] =
    -20000000.0 * sc[10] * x1009 + 20000000.0 * sc[10] * x1081 -
    sc[10] * x7261 + 30110000.0 * sc[15] * x348 - 30110000.0 * sc[15] * x468 +
    90000000.0 * sc[19] * x348 - 90000000.0 * sc[19] * x468 + sc[19] * x7116 +
    20000000.0 * sc[19] * x932 + x1004 * x2442 + x1046 * x348 - x1046 * x468 -
    10.0 * x1499 * x476 + 10.0 * x1513 * x476 - x2442 * x626 + x2451 +
    x348 * x7108 + x348 * x7113 - x468 * x7108 - x468 * x7113 + x5622 * x949 -
    x5622 * x996 - x6702 * x949 + x6702 * x996 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x949 - x996) +
    (-x2442 * x396) * (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-10.0 * x442 * x476) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[778] =
    20000000.0 * sc[10] * x1963 - 20000000.0 * sc[10] * x306 -
    30110000.0 * sc[15] * x217 + 30110000.0 * sc[15] * x368 -
    90000000.0 * sc[19] * x217 + 90000000.0 * sc[19] * x368 - x1031 * x2442 +
    x1042 * x2442 - x1046 * x217 + x1046 * x368 + 10.0 * x1492 * x476 -
    x217 * x7108 - x217 * x7113 + x2451 + x299 + x368 * x7108 + x368 * x7113 -
    10.0 * x476 * x646 - x5622 * x89 + x5622 * x985 + x6702 * x89 -
    x6702 * x985 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x89 + x985) +
    (-x2442 * x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-10.0 * x442 * x476) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[810] =
    -20000000.0 * sc[10] * x359 + 30110000.0 * sc[15] * x655 +
    90000000.0 * sc[19] * x655 + x1046 * x655 + x1055 * x5622 - x1055 * x6702 -
    10.0 * x1535 * x476 + x2442 * x336 + x2452 + x4710 + x655 * x7108 +
    x655 * x7113 + x6730 + x7111 + x7190 + x7192 +
    1.24e+42 * exp(-49667.484914925801 * invT - 7.87 * logT) +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1055 - x991) +
    (-x2442 * x396) * (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-10.0 * x442 * x476) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[842] =
    20000000.0 * sc[10] * x575 - 20000000.0 * sc[10] * x678 +
    30110000.0 * sc[15] * x371 - 30110000.0 * sc[15] * x555 +
    90000000.0 * sc[19] * x371 - 90000000.0 * sc[19] * x555 + x1046 * x371 -
    x1046 * x555 - x2442 * x482 + x2442 * x567 + x2451 + x295 + x371 * x7108 +
    x371 * x7113 - 10.0 * x476 * x549 + 10.0 * x476 * x550 - x544 * x5622 +
    x544 * x6702 - x555 * x7108 - x555 * x7113 + x5622 * x815 - x6702 * x815 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x544 + x815) +
    (-x2442 * x396) * (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-10.0 * x442 * x476) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[874] =
    x7148 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1104 - x991) +
    (-x2442 * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[906] =
    x7148 + (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x1104 - x991) +
    (-x2442 * x396) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[938] =
    -20000000.0 * sc[10] * x1018 + 30110000.0 * sc[15] * x372 +
    90000000.0 * sc[19] * x372 + x1046 * x372 + x2442 * x479 + x2452 +
    x372 * x7108 + x372 * x7113 + x4710 - 10.0 * x476 * x553 + x5622 * x647 -
    x647 * x6702 + x6730 + x7111 + x7190 + x7192 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (x647 - x991) +
    (-x2442 * x396) * (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-10.0 * x442 * x476) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[970] =
    -20000000.0 * sc[10] * x402 + 20000000.0 * sc[10] * x590 + x1067 * x2442 -
    x1074 * x2442 + x2456 - x5622 * x649 + x5622 * x675 + x649 * x6702 -
    x6702 * x675 +
    (20000000.0 * sc[10] * x413 + 10.0 * x441 * x476) * (-x649 + x675) +
    (-x2442 * x396) * (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) - 3.011e-5 * sc[15] * x1468 -
     9.0e-5 * sc[19] * x1468 - 10.0e-12 * sc[8] * x1468 * x513 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-10.0 * x442 * x476) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[11] = 0.016530943400000001 * x2704 + 701.02568 * x2708 +
          7.5076061e-14 * x2712 + 421562740.0 * x2714 +
          1.8141407800000001e-8 * x2719 + 2.4989949e+26 * x2721 +
          2.11728702e-5 * x2723 + x7584;
  J[43] = x7584;
  J[75] = sc[27] * x3850 + x1214 * x7536 - x535 * x7536 + x7598;
  J[107] = x7584;
  J[139] = x7584;
  J[171] = x7584;
  J[203] = sc[27] * x4788 - x1223 * x7536 + x1225 * x7536 + x7598;
  J[235] = x1137 * x7536 - x1152 * x7536 - 3.63e+174 * x7545 * x7546 +
           3.63e+174 * x7545 * x7548 + 3.3e+91 * x7553 * x7562 -
           x7555 * x7559 * (6.0 * x7557 + 0.84 * x7558) +
           x7559 * x7577 * (6.0 * x7557 + 0.84 * x7558) - 3.3e+91 * x7580;
  J[267] = x1286 * x7536 - x523 * x7536 - 1.815e+174 * x7545 * x7546 +
           1.815e+174 * x7545 * x7548 + 1.65e+91 * x7553 * x7562 -
           x7555 * x7609 + x7577 * x7609 - 1.65e+91 * x7580;
  J[299] = sc[12] * x186 + x7536 * x83 + x7583;
  J[331] = x7584;
  J[363] =
    -13800000.0 * refC *
      exp(g_RT[11] - g_RT[12] - g_RT_qss[8] - 23.147966627017102 * invT) -
    sc[19] * x4960 - sc[19] * x6875 + x121 * x7536 - x3983 -
    1.1e+91 * x526 * x7553 * x7574 + x7583 - x7620 - x7625;
  J[395] = sc[9] * x186 + 7.5076061000000003e-14 * x2726 - x3987 +
           x671 * x7536 - x680 * x7536 + x7582 +
           13800000.0 * x942 * exp(-23.147966627017102 * invT);
  J[427] = x1096 * x7536 - x1270 * x7536 + 421562740.0 * x2727 + x7582 - x7635;
  J[459] = x1889 * x7536 - x1890 * x7536 + 2.11728702e-5 * x2730 + x7582;
  J[491] = x1894 * x7536 - x1895 * x7536 + 701.02568 * x2733 + x7582 - x7641;
  J[523] = sc[27] * x7645 + x1899 * x7536 - x1900 * x7536 +
           0.016530943400000001 * x2736 + x7582;
  J[555] = sc[27] * x7650 + x1059 * x7536 - x1060 * x7536 -
           7.26e+174 * x7545 * x7546 + 7.26e+174 * x7545 * x7548 +
           6.6e+91 * x7553 * x7562 - x7555 * x7652 + x7577 * x7652 -
           6.6e+91 * x7580;
  J[587] = x1068 * x7536 - x33 * x7536 + x7582;
  J[619] = -sc[11] * x4960 - sc[11] * x6875 + 1.1e+91 * sc[27] * x7543 * x7553 +
           x1088 * x7536 + 1.8141407800000001e-8 * x2739 - x684 * x7536 + x7582;
  J[651] = x7584;
  J[683] = x1087 * x7536 - x1100 * x7536 + x7598;
  J[715] = x7584;
  J[747] = x1131 * x7536 + x7583;
  J[779] = x7584;
  J[811] = x7584;
  J[843] = x1139 * x7536 + x7583;
  J[875] = sc[16] * x7645 + sc[17] * x7650 + 1.1e+91 * sc[19] * x7543 * x7553 +
           sc[2] * x3850 + sc[6] * x4788 + x1143 * x7536 + x7583;
  J[907] = x1092 * x7536 + x7583;
  J[939] = x1080 * x7536 + x7583;
  J[971] = x7584;
  J[12] =
    0.04886 * x2704 + 2072.0 * x2708 - 9.51e-14 * x2712 + 1246000000.0 * x2714 +
    5.362e-8 * x2719 + 2.295e+27 * x2721 + 6.258e-5 * x2723 + x7772 + x7774 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1104 - x991) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[44] =
    -8480000.0 * sc[12] * x1062 + 8480000.0 * sc[12] * x1106 +
    40000000.0 * sc[12] * x1138 - 50000000.0 * sc[12] * x1160 -
    40000000.0 * sc[12] * x1162 + 50000000.0 * sc[12] * x472 +
    16040000.0 * sc[14] * x272 + 19.2 * sc[14] * exp(x1224) +
    24000000.0 * sc[16] * x272 + 40000000.0 * sc[19] * x965 -
    70000000.0 * sc[6] * x1134 + 70000000.0 * sc[6] * x1161 +
    50000000.0 * sc[8] * x880 - x1062 * x1367 - x1062 * x2469 + x1062 * x732 +
    x1106 * x1367 + x1106 * x2469 - x1106 * x732 + x1117 * x2421 +
    x1127 * x4155 + x1127 * x7761 - x1134 * x2474 - x1138 * x4647 -
    x1138 * x7676 - x1138 * x7689 - x1138 * x7693 - x1159 * x4155 -
    x1159 * x7761 + x1161 * x2474 + x1162 * x4647 + x1162 * x7676 +
    x1162 * x7689 + x1162 * x7693 + x2499 * x272 + x272 * x559 + x5703 + x7753 +
    x7774 + x7791 + x7794 + x945 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1138 + x1162) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[76] =
    -8480000.0 * sc[12] * x1121 + 8480000.0 * sc[12] * x1156 +
    40000000.0 * sc[12] * x1212 - 50000000.0 * sc[12] * x1234 -
    40000000.0 * sc[12] * x1243 + 50000000.0 * sc[12] * x36 + sc[13] * x990 +
    16040000.0 * sc[14] * x1182 + 48000000.0 * sc[14] * x1197 -
    48000000.0 * sc[14] * x1205 + 24000000.0 * sc[16] * x1182 + sc[16] * x3859 +
    32000000.0 * sc[19] * x1133 + 90000000.0 * sc[19] * x1154 + sc[24] * x3855 +
    sc[27] * x3850 + 8480000.0 * sc[8] * x807 - x1121 * x1367 - x1121 * x2469 +
    x1121 * x732 + x1133 * x2479 + x1133 * x2486 + x1154 * x2421 +
    x1156 * x1367 + x1156 * x2469 - x1156 * x732 + x1182 * x2499 +
    x1182 * x559 + x1197 * x2766 - x1197 * x4155 - x1197 * x7761 -
    x1205 * x2766 + x1205 * x4155 + x1205 * x7761 - x1212 * x7676 -
    x1212 * x7689 + x1214 * x3785 - x1214 * x7536 - x1214 * x7750 +
    x1243 * x7676 + x1243 * x7689 + x138 * x194 + 4.92 * x207 * exp(x3770) +
    x2777 * x851 + 0.227 * x354 * x868 + x3784 * x942 - x3785 * x535 +
    x3869 * x542 + x3874 + x3881 + x4167 + x420 * x558 + x444 + x535 * x7536 +
    x535 * x7750 + x7813 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1212 + x1243) +
    (-x436 * x558) * (x1214 - x535) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[108] =
    -8480000.0 * sc[12] * x1170 - 50000000.0 * sc[12] * x1248 -
    40000000.0 * sc[12] * x1250 - sc[12] * x4301 - sc[12] * x4303 +
    48000000.0 * sc[14] * x340 + 70000000.0 * sc[6] * x1249 - x1170 * x1367 -
    x1170 * x2469 + x1170 * x732 + x1246 * x959 + x1249 * x2474 +
    x1250 * x4647 + x1250 * x7676 + x1250 * x7689 + x1250 * x7693 +
    x2766 * x340 + x2768 - x340 * x4155 - x340 * x7761 +
    8000000000000000.0 * x346 - x3909 + 80.0 * x4296 + x5652 + x7698 + x7766 +
    x7769 + x7774 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1250 - x991) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[140] =
    sc[19] * x4306 + 480.0 * x4296 + x7772 + x7774 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1104 - x991) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[172] =
    -8480000.0 * sc[12] * x1183 - 50000000.0 * sc[12] * x1256 -
    40000000.0 * sc[12] * x1258 + 48000000.0 * sc[14] * x1051 +
    16040000.0 * sc[14] * x757 + 24000000.0 * sc[16] * x757 +
    70000000.0 * sc[6] * x1257 + x1051 * x2766 - x1051 * x4155 - x1051 * x7761 +
    x1181 * x2421 - x1183 * x1367 - x1183 * x2469 + x1183 * x732 +
    x1257 * x2474 + x1258 * x4647 + x1258 * x7676 + x1258 * x7689 +
    x1258 * x7693 + x2499 * x757 + x2768 + 3.2e+16 * x346 + x4592 +
    x559 * x757 + x5652 + x7698 + x7703 + x7753 + x7757 + x7765 + x7769 +
    x7774 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1258 - x991) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[204] =
    -8480000.0 * sc[12] * x1227 + 8480000.0 * sc[12] * x1245 +
    50000000.0 * sc[12] * x1272 + 40000000.0 * sc[12] * x1276 -
    40000000.0 * sc[12] * x1289 - 50000000.0 * sc[12] * x379 - sc[12] * x3919 -
    48000000.0 * sc[14] * x1233 + 16040000.0 * sc[14] * x1262 +
    48000000.0 * sc[14] * x1264 + 24000000.0 * sc[16] * x1262 +
    90000000.0 * sc[19] * x70 + x1209 * x2479 + x1209 * x2486 - x1223 * x3785 +
    x1223 * x7536 + x1223 * x7750 + x1225 * x3785 - x1225 * x7536 -
    x1225 * x7750 - x1227 * x1367 - x1227 * x2469 + x1227 * x732 -
    x1233 * x2766 + x1233 * x4155 + x1233 * x7761 + x1245 * x1367 +
    x1245 * x2469 - x1245 * x732 + x1262 * x2499 + x1262 * x559 +
    x1264 * x2766 - x1264 * x4155 - x1264 * x7761 - x1276 * x7676 -
    x1276 * x7689 + x1289 * x7676 + x1289 * x7689 + x2421 * x70 + x416 * x558 +
    x444 + x7871 + x7872 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1276 + x1289) +
    (-x436 * x558) * (-x1223 + x1225) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[236] =
    -8480000.0 * sc[12] * x1254 + 8480000.0 * sc[12] * x1260 +
    50000000.0 * sc[12] * x1287 - 40000000.0 * sc[12] * x1295 +
    40000000.0 * sc[12] * x1311 - 50000000.0 * sc[12] * x1319 - sc[12] * x3941 +
    3200000000000000.0 * sc[12] * x526 * x602 * x7721 +
    16040000.0 * sc[14] * x1303 + 24000000.0 * sc[16] * x1303 + x1117 * x2421 +
    x1152 * x7536 + x1152 * x7750 + x1237 * x2479 + x1237 * x2486 -
    x1254 * x1367 - x1254 * x2469 + x1254 * x732 + x1260 * x1367 +
    x1260 * x2469 - x1260 * x732 - x1268 * x2766 + x1268 * x4155 +
    x1268 * x7761 + x1284 * x2766 - x1284 * x4155 - x1284 * x7761 +
    x1295 * x7676 + x1295 * x7689 + x1303 * x2499 + x1303 * x559 -
    x1311 * x7676 - x1311 * x7689 -
    3200000000000000.0 * x207 * x2638 * x602 * x7688 -
    8.8666981132075502e+66 * x209 + 3.54e+38 * x526 * x5370 -
    1.062e+39 * x5357 + 8.8666981132075502e+66 * x5362 + 1.062e+39 * x5371 +
    x5880 + 1.2288e+21 * x7679 * x951 - 1.2288e+21 * x7682 +
    x7712 * (6.0 * x5364 + 0.84 * x5365) - 9600000000000000.0 * x7726 -
    x7740 * (6.0 * x5364 + 0.84 * x5365) + 9600000000000000.0 * x7745 + x7774 +
    x7794 + x7888 + x7896 + x7897 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1295 - x1311) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[268] =
    -8480000.0 * sc[12] * x1263 + 8480000.0 * sc[12] * x1279 +
    50000000.0 * sc[12] * x1356 + 40000000.0 * sc[12] * x1362 -
    50000000.0 * sc[12] * x333 - 40000000.0 * sc[12] * x650 +
    16040000.0 * sc[14] * x1315 + 24000000.0 * sc[16] * x1315 +
    90000000.0 * sc[19] * x701 + 50000000.0 * sc[1] * x880 +
    8480000.0 * sc[2] * x807 - 1.093974e+86 * x1049 * x329 - x1263 * x1367 -
    x1263 * x2469 + x1263 * x732 + x1279 * x1367 + x1279 * x2469 -
    x1279 * x732 + x1286 * x3785 - x1286 * x7536 - x1286 * x7750 -
    x1306 * x2766 + x1306 * x4155 + x1306 * x7761 + x1309 * x2479 +
    x1309 * x2486 + x1314 * x2766 - x1314 * x4155 - x1314 * x7761 +
    x1315 * x2499 + x1315 * x559 - x1362 * x7676 - x1362 * x7689 - x182 -
    4.4333490566037699e+66 * x209 - x3785 * x523 + x4171 * x885 +
    1.093974e+86 * x4175 - x4180 * x885 - 6.405e+46 * x451 + x523 * x7536 +
    x523 * x7750 - 5.31e+38 * x5357 + 4.4333490566037699e+66 * x5362 +
    5.31e+38 * x5371 + x5984 + x650 * x7676 + x650 * x7689 +
    6.144e+20 * x7679 * x951 - 6.144e+20 * x7682 -
    x7685 * (3.0 * x7716 + 0.42 * x7718) +
    x7712 * (3.0 * x5364 + 0.42 * x5365) +
    x7724 * (3.0 * x7716 + 0.42 * x7718) - 4800000000000000.0 * x7726 -
    x7740 * (3.0 * x5364 + 0.42 * x5365) + 4800000000000000.0 * x7745 + x7917 +
    x7925 + x7926 + 6.405e+46 * x821 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1362 + x650) +
    (-x436 * x558) * (x1286 - x523) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[300] =
    -8480000.0 * sc[12] * x1298 + 8480000.0 * sc[12] * x1304 +
    40000000.0 * sc[12] * x1391 - 50000000.0 * sc[12] * x1395 -
    40000000.0 * sc[12] * x1398 - sc[12] * x186 - sc[12] * x3968 +
    50000000.0 * sc[12] * x666 - 70000000.0 * sc[6] * x1370 +
    70000000.0 * sc[6] * x1396 - x1298 * x1367 - x1298 * x2469 + x1298 * x732 +
    x1304 * x1367 + x1304 * x2469 - x1304 * x732 - x1351 * x2766 +
    x1351 * x4155 + x1351 * x7761 + x1355 * x2766 - x1355 * x4155 -
    x1355 * x7761 - x1370 * x2474 - x1391 * x4647 - x1391 * x7676 -
    x1391 * x7689 - x1391 * x7693 + x1396 * x2474 + x1398 * x4647 +
    x1398 * x7676 + x1398 * x7689 + x1398 * x7693 + x3785 * x83 + x6014 +
    x6721 - x7536 * x83 - x7750 * x83 + x7940 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1391 + x1398) +
    (-x436 * x558) * (-x1152 + x83) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[332] =
    -40000000.0 * sc[12] * x1124 + 50000000.0 * sc[12] * x1189 -
    8480000.0 * sc[12] * x1317 + 8480000.0 * sc[12] * x1328 +
    40000000.0 * sc[12] * x1407 - 50000000.0 * sc[12] * x308 - sc[12] * x7269 +
    sc[15] * x6065 + 70000000.0 * sc[6] * x1015 - 70000000.0 * sc[6] * x1406 +
    x1015 * x2474 + x1113 * x2766 - x1113 * x4155 - x1113 * x7761 +
    x1117 * x2421 + x1124 * x4647 + x1124 * x7676 + x1124 * x7689 +
    x1124 * x7693 - x1317 * x1367 - x1317 * x2469 + x1317 * x732 +
    x1328 * x1367 + x1328 * x2469 - x1328 * x732 - x1406 * x2474 -
    x1407 * x4647 - x1407 * x7676 - x1407 * x7689 - x1407 * x7693 -
    x2766 * x331 + x331 * x4155 + x331 * x7761 + x6067 + x7754 + x7774 + x7791 +
    x7794 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1124 - x1407) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[364] =
    13800000.0 * refC *
      exp(g_RT[11] - g_RT[12] - g_RT_qss[8] - 23.147966627017102 * invT) +
    sc[19] * x6875 + x121 * x3785 - x121 * x7536 - x121 * x7750 - x3983 +
    x6721 + x7772 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1104 - x991) +
    (-x436 * x558) * (-x1152 + x121) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[396] =
    -sc[10] * x7269 - 960.0 * sc[12] * sc[22] * x4513 -
    7.08e+38 * sc[12] * x13 * x5349 - 8480000.0 * sc[12] * x1343 +
    50000000.0 * sc[12] * x1423 + 40000000.0 * sc[12] * x1425 -
    50000000.0 * sc[12] * x1431 - 40000000.0 * sc[12] * x1434 +
    8480000.0 * sc[12] * x203 -
    19960000.0 * sc[12] * exp(-5334.0966575300299 * invT + 0.1 * logT) -
    9.84 * sc[12] * exp(2.0 * g_RT[12] - g_RT[2] - g_RT_qss[0] + x3770) -
    sc[13] * x7984 - sc[13] * x7987 - 48000000.0 * sc[14] * x1388 +
    48000000.0 * sc[14] * x1404 - 84300000.0 * sc[14] +
    24000000.0 * sc[16] * x1341 - 14400000.0 * sc[16] - sc[17] * x3996 +
    90000000.0 * sc[19] * x691 - sc[22] * x423 * x887 - sc[29] * x3998 -
    sc[3] * x4301 - sc[3] * x4303 - sc[6] * x3919 - sc[7] * x3941 +
    x1320 * x2479 + x1320 * x2486 + x1341 * x2499 + x1341 * x559 -
    x1343 * x1367 - x1343 * x2469 + x1367 * x203 + x1388 * x4155 +
    x1388 * x7761 - x1404 * x4155 - x1404 * x7761 - 90000000.0 * x142 * x194 -
    x1425 * x7676 - x1425 * x7689 + x1434 * x7676 + x1434 * x7689 - x194 * x95 -
    8480000.0 * x194 + x203 * x2469 - 40000000.0 * x207 - 9.51e-14 * x2726 -
    x318 * x7961 - 50000000.0 * x388 + x392 - x3987 - x3988 - x3990 - x4169 -
    x4611 - 3200000000000000.0 * x526 * x7721 - x558 * x771 + x6112 -
    x671 * x7536 - x671 * x7750 + x680 * x7536 + x680 * x7750 + x6893 -
    x7749 * x942 + x7993 + x8003 + x8006 + x8007 - 1.5e+18 * x868 * exp(x2489) -
    13800000.0 * x942 * exp(-23.147966627017102 * invT) +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1425 + x1434) +
    (-x436 * x558) * (x671 - x680) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[428] =
    -40000000.0 * sc[12] * x1436 + 50000000.0 * sc[12] * x1451 +
    40000000.0 * sc[12] * x1455 - 50000000.0 * sc[12] * x1462 -
    8480000.0 * sc[12] * x267 + 8480000.0 * sc[12] * x621 - sc[12] * x7984 -
    sc[12] * x7987 + 16040000.0 * sc[14] * x1371 + 24000000.0 * sc[16] * x1371 +
    90000000.0 * sc[19] * x1172 + sc[2] * x990 + 70000000.0 * sc[6] * x1443 -
    70000000.0 * sc[6] * x1454 + x1096 * x3785 - x1096 * x7536 - x1096 * x7750 +
    x1172 * x2421 - x1270 * x3785 + x1270 * x7536 + x1270 * x7750 -
    x1367 * x267 + x1367 * x621 + x1371 * x2499 + x1371 * x559 + x1418 * x2766 -
    x1418 * x4155 - x1418 * x7761 + x1436 * x4647 + x1436 * x7676 +
    x1436 * x7689 - x1455 * x4647 - x1455 * x7676 - x1455 * x7689 -
    x2469 * x267 + x2469 * x621 + x2479 * x38 + x2486 * x38 + x267 * x732 +
    1246000000.0 * x2727 - x2766 * x298 + x298 * x4155 + x298 * x7761 -
    x558 * x682 + x6151 - x621 * x732 + x8006 + x8027 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1436 - x1455) +
    (-x436 * x558) * (x1096 - x1270) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[460] =
    -8480000.0 * sc[12] * x1386 + 8480000.0 * sc[12] * x1392 -
    50000000.0 * sc[12] * x1475 + 50000000.0 * sc[12] * x1477 +
    40000000.0 * sc[12] * x1480 - 40000000.0 * sc[12] * x1489 -
    84300000.0 * sc[12] + 24000000.0 * sc[16] * x1428 +
    90000000.0 * sc[19] * x1173 + 19.2 * sc[1] * exp(x1224) +
    80.0 * sc[3] * exp(x4294) + 480.0 * sc[4] * exp(x4294) -
    70000000.0 * sc[6] * x1463 + 70000000.0 * sc[6] * x397 + x1173 * x2421 -
    x1367 * x1386 + x1367 * x1392 + x1377 * x2479 + x1377 * x2486 -
    x1386 * x2469 + x1392 * x2469 + x1420 * x2766 - x1420 * x4155 -
    x1420 * x7761 - x1422 * x2766 + x1422 * x4155 + x1422 * x7761 +
    x1428 * x2499 + x1428 * x559 - x1480 * x4647 - x1480 * x7676 -
    x1480 * x7689 + x1489 * x4647 + x1489 * x7676 + x1489 * x7689 +
    x1889 * x3785 - x1889 * x7536 - x1889 * x7750 - x1890 * x3785 +
    x1890 * x7536 + x1890 * x7750 + x2485 * x8049 + 6.258e-5 * x2730 -
    x558 * x653 + x6188 + x8006 + x8055 + x8060 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1480 + x1489) +
    (-x436 * x558) * (x1889 - x1890) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[492] =
    sc[10] * x6065 - 8480000.0 * sc[12] * x1400 + 8480000.0 * sc[12] * x1401 +
    50000000.0 * sc[12] * x1503 + 40000000.0 * sc[12] * x1508 -
    40000000.0 * sc[12] * x169 - 50000000.0 * sc[12] * x383 -
    48000000.0 * sc[14] * x1445 + 48000000.0 * sc[14] * x1450 +
    90000000.0 * sc[19] * x278 + sc[20] * x8074 - 70000000.0 * sc[6] * x1488 +
    70000000.0 * sc[6] * x1505 - x1367 * x1400 + x1367 * x1401 - x1400 * x2469 +
    x1401 * x2469 - x1445 * x2766 + x1445 * x4155 + x1445 * x7761 +
    x1450 * x2766 - x1450 * x4155 - x1450 * x7761 + x1478 * x2479 +
    x1478 * x2486 + x1498 * x2499 + x1498 * x559 - x1508 * x4647 -
    x1508 * x7676 - x1508 * x7689 + x169 * x4647 + x169 * x7676 + x169 * x7689 +
    x1894 * x3785 - x1894 * x7536 - x1894 * x7750 - x1895 * x3785 +
    x1895 * x7536 + x1895 * x7750 + x2421 * x278 + 2072.0 * x2733 + x4042 +
    x418 * x558 + 13400000.0 * x42 * x8049 + x8006 + x8082 + x8091 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1508 + x169) +
    (-x436 * x558) * (x1894 - x1895) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[524] =
    -8480000.0 * sc[12] * x1155 + 40000000.0 * sc[12] * x1530 -
    50000000.0 * sc[12] * x1537 - 40000000.0 * sc[12] * x1540 +
    8480000.0 * sc[12] * x447 + 50000000.0 * sc[12] * x872 -
    14400000.0 * sc[12] + 90000000.0 * sc[19] * x102 + sc[2] * x3859 -
    70000000.0 * sc[6] * x1519 + 70000000.0 * sc[6] * x1539 + x102 * x2421 -
    x1155 * x1367 - x1155 * x2469 + x1367 * x447 - x1461 * x2766 +
    x1461 * x4155 + x1461 * x7761 + x1471 * x2766 - x1471 * x4155 -
    x1471 * x7761 - x1530 * x4647 - x1530 * x7676 - x1530 * x7689 +
    x1540 * x4647 + x1540 * x7676 + x1540 * x7689 + x1899 * x3785 -
    x1899 * x7536 - x1899 * x7750 - x1900 * x3785 + x1900 * x7536 +
    x1900 * x7750 + x2469 * x447 + x2479 * x893 + x2486 * x893 + x2499 * x486 +
    0.04886 * x2736 + x427 * x558 + x486 * x559 + x6282 + x8006 + x8108 +
    x8115 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x1530 + x1540) +
    (-x436 * x558) * (x1899 - x1900) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[556] =
    1.77333962264151e+67 * ((sc[12]) * (sc[12])) * x5359 * exp(x5360) +
    8480000.0 * sc[12] * x1157 + 50000000.0 * sc[12] * x1528 -
    40000000.0 * sc[12] * x301 - 50000000.0 * sc[12] * x387 - sc[12] * x3996 +
    40000000.0 * sc[12] * x527 - 8480000.0 * sc[12] * x552 -
    48000000.0 * sc[14] * x1476 + 16040000.0 * sc[14] * x264 +
    48000000.0 * sc[14] * x99 + 24000000.0 * sc[16] * x264 +
    90000000.0 * sc[19] * x698 - 4.375896e+86 * x1049 * x329 + x1059 * x3785 -
    x1059 * x7536 - x1059 * x7750 - x1060 * x3785 + x1060 * x7536 +
    x1060 * x7750 + x1157 * x1367 + x1157 * x2469 - x1157 * x732 -
    x1367 * x552 - x1476 * x2766 + x1476 * x4155 + x1476 * x7761 +
    x1504 * x2479 + x1504 * x2486 + x2421 * x698 - x2469 * x552 + x2499 * x264 +
    x264 * x559 + x2766 * x99 + x301 * x7676 + x301 * x7689 - x4155 * x99 +
    x4171 * (1.68 * x4164 + 12.0 * x4165) + 4.375896e+86 * x4175 -
    x4180 * (1.68 * x4164 + 12.0 * x4165) + x422 * x558 - 2.562e+47 * x451 -
    x527 * x7676 - x527 * x7689 - 2.124e+39 * x5357 -
    1.77333962264151e+67 * x5359 * x728 *
      exp(-2.0 * g_RT[12] + g_RT[7] + x5360) +
    2.124e+39 * x5371 + x552 * x732 + 2.4576e+21 * x7679 * x951 -
    2.4576e+21 * x7682 - x7685 * (12.0 * x7716 + 1.68 * x7718) +
    x7712 * (12.0 * x5364 + 1.68 * x5365) +
    x7724 * (12.0 * x7716 + 1.68 * x7718) - 1.92e+16 * x7726 -
    x7740 * (12.0 * x5364 + 1.68 * x5365) + 1.92e+16 * x7745 - x7761 * x99 +
    x8137 + x8147 + x8148 + 2.562e+47 * x821 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x301 - x527) +
    (-x436 * x558) * (x1059 - x1060) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[588] =
    -8480000.0 * sc[12] * x1429 + 8480000.0 * sc[12] * x1438 -
    40000000.0 * sc[12] * x250 + 50000000.0 * sc[12] * x459 +
    40000000.0 * sc[12] * x469 - 50000000.0 * sc[12] * x519 +
    70000000.0 * sc[6] * x254 - 70000000.0 * sc[6] * x67 + x1068 * x3785 -
    x1068 * x7536 - x1068 * x7750 + x1180 * x2479 + x1180 * x2486 +
    x1181 * x2421 - x1367 * x1429 + x1367 * x1438 - x1429 * x2469 +
    x1429 * x732 + x1438 * x2469 - x1438 * x732 - x1494 * x2766 +
    x1494 * x4155 + x1494 * x7761 + x1502 * x2766 - x1502 * x4155 -
    x1502 * x7761 + x2474 * x254 - x2474 * x67 + x2499 * x508 + x250 * x4647 +
    x250 * x7676 + x250 * x7689 + x250 * x7693 - x33 * x3785 + x33 * x7536 +
    x33 * x7750 - x3797 + x398 * x558 - x4647 * x469 - x469 * x7676 -
    x469 * x7689 - x469 * x7693 + x508 * x559 + x5366 + x6361 + x7707 + x7757 +
    x7791 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x250 - x469) +
    (-x436 * x558) * (x1068 - x33) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[620] =
    sc[11] * x6875 - 8480000.0 * sc[12] * x1442 + 8480000.0 * sc[12] * x1448 +
    50000000.0 * sc[12] * x362 - 50000000.0 * sc[12] * x455 +
    40000000.0 * sc[12] * x581 - 40000000.0 * sc[12] * x599 -
    48000000.0 * sc[14] * x1517 + 48000000.0 * sc[14] * x1524 +
    16040000.0 * sc[14] * x714 + 24000000.0 * sc[16] * x714 +
    90000000.0 * sc[19] * x1021 + 40000000.0 * sc[1] * x965 + sc[20] * x8168 +
    sc[22] * x6416 - sc[22] * x723 * x887 + sc[24] * x8175 + sc[27] * x8180 +
    8000000000000000.0 * sc[3] * exp(x211) + sc[4] * x4306 +
    3.2e+16 * sc[5] * exp(x211) + x1021 * x2421 + x1088 * x3785 -
    x1088 * x7536 - x1088 * x7750 + 3200000000000000.0 * x13 * x207 * x7688 -
    x1367 * x1442 + x1367 * x1448 - x1442 * x2469 + x1442 * x732 +
    x1448 * x2469 - x1448 * x732 - x1517 * x2766 + x1517 * x4155 +
    x1517 * x7761 + x1524 * x2766 - x1524 * x4155 - x1524 * x7761 +
    x2479 * x49 + x2486 * x49 + 9980000.0 * x2497 * x2777 + x2499 * x714 +
    5.362e-8 * x2739 - x3785 * x684 + x3802 + x425 * x558 - 90000000.0 * x5154 +
    x559 * x714 - x581 * x7676 - x581 * x7689 + x599 * x7676 + x599 * x7689 +
    x684 * x7536 + x684 * x7750 - 90000000.0 * x708 + x8006 + x8195 + x8196 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x581 + x599) +
    (-x436 * x558) * (x1088 - x684) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[652] =
    8480000.0 * sc[12] * x1467 - 8480000.0 * sc[12] * x196 +
    50000000.0 * sc[12] * x534 - 50000000.0 * sc[12] * x563 +
    40000000.0 * sc[12] * x659 - 40000000.0 * sc[12] * x670 -
    48000000.0 * sc[14] * x1527 + 48000000.0 * sc[14] * x864 + sc[15] * x8074 +
    sc[19] * x8168 - 70000000.0 * sc[6] * x493 + 70000000.0 * sc[6] * x604 +
    x1152 * x7536 + x1152 * x7750 + x1181 * x2421 + x1367 * x1467 -
    x1367 * x196 + x1467 * x2469 - x1527 * x2766 + x1527 * x4155 +
    x1527 * x7761 - x196 * x2469 + x2479 * x586 + x2486 * x586 + x2499 * x273 +
    x273 * x559 + x2766 * x864 + x3806 - x4155 * x864 - x4647 * x659 +
    x4647 * x670 + x5366 - x659 * x7676 - x659 * x7689 + x670 * x7676 +
    x670 * x7689 + x7757 - x7761 * x864 + x7774 + x8215 + x8218 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x659 + x670) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[684] =
    8480000.0 * sc[12] * x1470 - 8480000.0 * sc[12] * x197 +
    50000000.0 * sc[12] * x481 - 50000000.0 * sc[12] * x561 +
    40000000.0 * sc[12] * x589 - 40000000.0 * sc[12] * x855 +
    48000000.0 * sc[14] * x1196 - 48000000.0 * sc[14] * x311 +
    16040000.0 * sc[14] * x539 + 24000000.0 * sc[16] * x539 +
    32000000.0 * sc[19] * x1133 + 90000000.0 * sc[19] * x1154 + x1035 +
    x1087 * x3785 - x1087 * x7536 - x1087 * x7750 - x1100 * x3785 +
    x1100 * x7536 + x1100 * x7750 + x1133 * x2479 + x1133 * x2486 +
    x1154 * x2421 + x1196 * x2766 - x1196 * x4155 - x1196 * x7761 +
    x1367 * x1470 - x1367 * x197 + x1470 * x2469 - x1470 * x732 - x197 * x2469 +
    x197 * x732 - x2474 * x566 + x2474 * x787 + x2499 * x539 - x2766 * x311 +
    x311 * x4155 + x311 * x7761 + x444 + x539 * x559 - x589 * x7676 -
    x589 * x7689 - x589 * x7693 + x7676 * x855 + x7689 * x855 + x7693 * x855 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x589 + x855) +
    (-x436 * x558) * (x1087 - x1100) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[716] =
    -480.0 * ((sc[12]) * (sc[12])) * x4513 - 8480000.0 * sc[12] * x1484 +
    8480000.0 * sc[12] * x1490 - 50000000.0 * sc[12] * x369 +
    50000000.0 * sc[12] * x390 - 40000000.0 * sc[12] * x971 +
    40000000.0 * sc[12] * x980 + 48000000.0 * sc[14] * x445 -
    48000000.0 * sc[14] * x450 + sc[19] * x6416 + 90000000.0 * sc[19] * x707 -
    sc[19] * x723 * x887 - 70000000.0 * sc[6] * x68 +
    70000000.0 * sc[6] * x688 - x1367 * x1484 + x1367 * x1490 - x1484 * x2469 +
    x1484 * x732 + x1490 * x2469 - x1490 * x732 + x2421 * x707 - x2474 * x68 +
    x2474 * x688 + x2766 * x445 - x2766 * x450 - x4155 * x445 + x4155 * x450 -
    x445 * x7761 + x450 * x7761 + x4647 * x971 - x4647 * x980 + x7676 * x971 -
    x7676 * x980 + x7689 * x971 - x7689 * x980 + x7693 * x971 - x7693 * x980 +
    x7754 + x7756 + x7774 + x7791 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x971 - x980) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[748] =
    -50000000.0 * sc[12] * x1004 - 8480000.0 * sc[12] * x1499 +
    8480000.0 * sc[12] * x1513 + 50000000.0 * sc[12] * x626 -
    40000000.0 * sc[12] * x949 + 40000000.0 * sc[12] * x996 +
    70000000.0 * sc[6] * x1009 - 70000000.0 * sc[6] * x1081 + x1009 * x2474 -
    x1081 * x2474 + x1131 * x3785 - x1131 * x7536 - x1131 * x7750 -
    x1367 * x1499 + x1367 * x1513 - x1499 * x2469 + x1499 * x732 +
    x1513 * x2469 - x1513 * x732 + x2766 * x348 - x2766 * x468 - x348 * x4155 -
    x348 * x7761 + x4155 * x468 + x4647 * x949 - x4647 * x996 + x468 * x7761 +
    x6564 + x6721 + x7676 * x949 - x7676 * x996 + x7689 * x949 - x7689 * x996 +
    x7693 * x949 - x7693 * x996 + x7940 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x949 - x996) +
    (-x436 * x558) * (x1131 - x1152) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[780] =
    50000000.0 * sc[12] * x1031 - 50000000.0 * sc[12] * x1042 +
    8480000.0 * sc[12] * x1492 - 8480000.0 * sc[12] * x646 +
    40000000.0 * sc[12] * x89 - 40000000.0 * sc[12] * x985 + sc[19] * x8175 +
    sc[2] * x3855 - 70000000.0 * sc[6] * x1963 + 70000000.0 * sc[6] * x306 +
    x1367 * x1492 - x1367 * x646 + x1492 * x2469 - x1492 * x732 -
    x1963 * x2474 - x217 * x2766 + x217 * x4155 + x217 * x7761 - x2469 * x646 +
    x2474 * x306 + x2766 * x368 + x299 - x368 * x4155 - x368 * x7761 - x4537 -
    x4647 * x89 + x4647 * x985 + x646 * x732 + x6596 - x7676 * x89 +
    x7676 * x985 - x7689 * x89 + x7689 * x985 - x7693 * x89 + x7693 * x985 +
    x7774 + x7940 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x89 + x985) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[812] =
    -40000000.0 * sc[12] * x1055 - 8480000.0 * sc[12] * x1535 -
    50000000.0 * sc[12] * x336 + 48000000.0 * sc[14] * x655 +
    70000000.0 * sc[6] * x359 + x1055 * x4647 + x1055 * x7676 + x1055 * x7689 +
    x1055 * x7693 - x1367 * x1535 - x1535 * x2469 + x1535 * x732 +
    x2474 * x359 + x2766 * x655 + x2768 - x4155 * x655 + x5652 - x655 * x7761 +
    x7698 + x7766 + x7769 + x7774 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1055 - x991) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[844] =
    50000000.0 * sc[12] * x482 + 40000000.0 * sc[12] * x544 -
    8480000.0 * sc[12] * x549 + 8480000.0 * sc[12] * x550 -
    50000000.0 * sc[12] * x567 - 40000000.0 * sc[12] * x815 -
    70000000.0 * sc[6] * x575 + 70000000.0 * sc[6] * x678 + x1139 * x3785 -
    x1139 * x7536 - x1139 * x7750 + x1181 * x2421 - x1367 * x549 +
    x1367 * x550 - x2469 * x549 + x2469 * x550 - x2474 * x575 + x2474 * x678 +
    x2499 * x508 + x2766 * x371 - x2766 * x555 - x371 * x4155 - x371 * x7761 +
    x4155 * x555 - x4647 * x544 + x4647 * x815 + x508 * x559 - x544 * x7676 -
    x544 * x7689 - x544 * x7693 + x549 * x732 - x550 * x732 + x555 * x7761 +
    x6655 + x6721 + x7676 * x815 + x7689 * x815 + x7693 * x815 + x7707 + x7753 +
    x7757 + x7791 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x544 + x815) +
    (-x436 * x558) * (x1139 - x1152) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[876] =
    sc[19] * x8180 + sc[2] * x3850 + x1143 * x3785 - x1143 * x7536 -
    x1143 * x7750 + x6721 + x7772 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1104 - x991) +
    (-x436 * x558) * (x1143 - x1152) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[908] =
    x1092 * x3785 - x1092 * x7536 - x1092 * x7750 + x6721 + x7772 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x1104 - x991) +
    (-x436 * x558) * (x1092 - x1152) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[940] =
    -sc[12] * x3998 - 50000000.0 * sc[12] * x479 - 8480000.0 * sc[12] * x553 -
    40000000.0 * sc[12] * x647 + 48000000.0 * sc[14] * x372 +
    70000000.0 * sc[6] * x1018 + x1018 * x2474 + x1080 * x3785 - x1080 * x7536 -
    x1080 * x7750 - x1169 * x558 - x1367 * x553 - x2469 * x553 + x2766 * x372 +
    x2768 - x372 * x4155 - x372 * x7761 + x4647 * x647 + x553 * x732 + x5652 +
    x647 * x7676 + x647 * x7689 + x647 * x7693 + x6721 + x7698 + x7766 + x7769 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (x647 - x991) +
    (-x436 * x558) * (x1080 - x1152) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[972] =
    50000000.0 * sc[12] * x1074 + 8480000.0 * sc[12] * x545 +
    40000000.0 * sc[12] * x649 - 40000000.0 * sc[12] * x675 +
    70000000.0 * sc[6] * x402 - 70000000.0 * sc[6] * x590 + x1367 * x545 +
    x2469 * x545 + x2474 * x402 - x2474 * x590 + x4155 * x568 - x4647 * x649 +
    x4647 * x675 + x568 * x7761 - x649 * x7676 - x649 * x7689 - x649 * x7693 +
    x675 * x7676 + x675 * x7689 + x675 * x7693 + x7771 + x7774 + x7940 +
    (8480000.0 * sc[12] * x441 - 70000000.0 * sc[6] * x413 + x1367 * x441 +
     x2469 * x441 - x2474 * x413 - x441 * x732) *
      (-x649 + x675) +
    (-x436 * x558) * (x509) +
    (50000000.0 * sc[12] * x396 - 32000000.0 * sc[19] * x51 - x2479 * x51 -
     x2486 * x51) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (4.27e+34 * sc[12] * x1468 * x324 * x959 +
     1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 -
     2.27e-13 * sc[2] * x1468 * x354) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-8480000.0 * sc[12] * x442 - 90000000.0 * sc[19] * x104 - x104 * x2421 -
     x1367 * x442 - x2469 * x442 + x442 * x732) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275 -
     90000000.0 * sc[19] * x279 - x2421 * x279 - x2499 * x275 - x275 * x559) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[13] =
    -1780000000.0 * x2714 + x8379 + x8384 + x8400 + x8416 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1104 - x991) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[45] =
    -140000.0 * sc[13] * x1117 + 40000000.0 * sc[13] * x1134 -
    40000000.0 * sc[13] * x1161 - 20000.0 * sc[13] * x272 - sc[13] * x439 +
    20000.0 * sc[16] * x716 - x1062 * x1102 + x1062 * x2509 + x1062 * x2513 +
    x1062 * x2518 + x1062 * x2522 + x1102 * x1106 - x1106 * x2509 -
    x1106 * x2513 - x1106 * x2518 - x1106 * x2522 + x1117 * x2544 -
    x1127 * x2750 + x1127 * x7108 + x1127 * x8387 + x1127 * x8396 +
    x1138 * x8392 + x1159 * x2750 - x1159 * x7108 - x1159 * x8387 -
    x1159 * x8396 - x1160 * x2535 - x1162 * x8392 + x2535 * x472 + x8379 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1138 + x1162) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[77] =
    -140000.0 * sc[13] * x1154 - 20000.0 * sc[13] * x1182 +
    40000000.0 * sc[13] * x1211 - 40000000.0 * sc[13] * x1242 - sc[13] * x990 +
    1000000.0 * sc[16] * x1214 - 1000000.0 * sc[16] * x535 - x1102 * x1121 +
    x1102 * x1156 + x1121 * x2509 + x1121 * x2513 + x1121 * x2518 +
    x1121 * x2522 + x1133 * x2486 - x1133 * x2533 + x1154 * x2544 -
    x1156 * x2509 - x1156 * x2513 - x1156 * x2518 - x1156 * x2522 +
    x1197 * x2750 - x1197 * x7108 - x1197 * x8387 - x1197 * x8396 -
    x1205 * x2750 + x1205 * x7108 + x1205 * x8387 + x1205 * x8396 +
    x1212 * x8392 - x1214 * x8329 - x1234 * x2535 - x1243 * x8392 +
    x2528 * x420 + x2535 * x36 + x535 * x8329 + x8377 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1212 + x1243) +
    (-x2528 * x436) * (x1214 - x535) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[109] =
    -40000000.0 * sc[13] * x1249 - sc[13] * x4270 - x1102 * x1170 +
    x1170 * x2509 + x1170 * x2513 + x1170 * x2518 + x1170 * x2522 -
    x1248 * x2535 - x1250 * x8392 + x2750 * x340 + x2753 - x340 * x7108 -
    x340 * x8387 - x340 * x8396 + x8379 + x8384 + x8400 + x8409 + x8413 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1250 - x991) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[141] =
    x8379 + x8384 + x8400 + x8416 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1104 - x991) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[173] =
    -40000000.0 * sc[13] * x1257 - 20000.0 * sc[13] * x757 + x1051 * x2750 -
    x1051 * x7108 - x1051 * x8387 - x1051 * x8396 - x1102 * x1183 +
    x1181 * x2544 + x1183 * x2509 + x1183 * x2513 + x1183 * x2518 +
    x1183 * x2522 - x1256 * x2535 - x1258 * x8392 + x2753 + x8379 - x8382 +
    x8400 + x8409 + x8413 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1258 - x991) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[205] =
    -20000.0 * sc[13] * x1262 + 40000000.0 * sc[13] * x1275 -
    40000000.0 * sc[13] * x1288 - 140000.0 * sc[13] * x70 -
    1000000.0 * sc[16] * x1223 + 1000000.0 * sc[16] * x1225 - x1102 * x1227 +
    x1102 * x1245 + x1209 * x2486 - x1209 * x2533 + x1223 * x8329 -
    x1225 * x8329 + x1227 * x2509 + x1227 * x2513 + x1227 * x2518 +
    x1227 * x2522 - x1233 * x2750 + x1233 * x7108 + x1233 * x8387 +
    x1233 * x8396 - x1245 * x2509 - x1245 * x2513 - x1245 * x2518 -
    x1245 * x2522 + x1264 * x2750 - x1264 * x7108 - x1264 * x8387 -
    x1264 * x8396 + x1272 * x2535 + x1276 * x8392 - x1289 * x8392 +
    x2528 * x416 - x2535 * x379 + x2544 * x70 - x4798 - 288000.0 * x8333 +
    288000.0 * x8334 + x8343 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1276 + x1289) +
    (-x2528 * x436) * (-x1223 + x1225) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[237] =
    -140000.0 * sc[13] * x1117 - 20000.0 * sc[13] * x1303 +
    40000000.0 * sc[13] * x1310 - 40000000.0 * sc[13] * x1322 - x1102 * x1254 +
    x1102 * x1260 + x1117 * x2544 + x1237 * x2486 - x1237 * x2533 +
    x1254 * x2509 + x1254 * x2513 + x1254 * x2518 + x1254 * x2522 -
    x1260 * x2509 - x1260 * x2513 - x1260 * x2518 - x1260 * x2522 -
    x1268 * x2750 + x1268 * x7108 + x1268 * x8387 + x1268 * x8396 +
    x1284 * x2750 - x1284 * x7108 - x1284 * x8387 - x1284 * x8396 +
    x1287 * x2535 - x1295 * x8392 + x1311 * x8392 - x1319 * x2535 + x8378 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1295 - x1311) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[269] =
    -20000.0 * sc[13] * x1315 + 40000000.0 * sc[13] * x1361 -
    40000000.0 * sc[13] * x664 - 140000.0 * sc[13] * x701 +
    3200000.0 * sc[15] * x171 * x5921 + 28000000.0 * sc[15] * x423 * x927 +
    1000000.0 * sc[16] * x1286 + sc[16] * x201 - 1000000.0 * sc[16] * x523 +
    12000000.0 * sc[17] * x935 - x1102 * x1263 + x1102 * x1279 + x1263 * x2509 +
    x1263 * x2513 + x1263 * x2518 + x1263 * x2522 - x1279 * x2509 -
    x1279 * x2513 - x1279 * x2518 - x1279 * x2522 - x1286 * x8329 -
    x1306 * x2750 + x1306 * x7108 + x1306 * x8387 + x1306 * x8396 +
    x1309 * x2486 - x1309 * x2533 + x1314 * x2750 - x1314 * x7108 -
    x1314 * x8387 - x1314 * x8396 + x1356 * x2535 + x1362 * x8392 -
    x2535 * x333 + x2544 * x701 + x523 * x8329 - x5886 - x650 * x8392 -
    210000.0 * x8333 + 210000.0 * x8334 - x8519 + x8550 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1362 + x650) +
    (-x2528 * x436) * (x1286 - x523) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[301] =
    -1000000.0 * sc[13] * x1091 + 40000000.0 * sc[13] * x1370 -
    40000000.0 * sc[13] * x1396 + 1000000.0 * sc[16] * x83 - x1102 * x1298 +
    x1102 * x1304 + x1298 * x2509 + x1298 * x2513 + x1298 * x2518 +
    x1298 * x2522 - x1304 * x2509 - x1304 * x2513 - x1304 * x2518 -
    x1304 * x2522 - x1351 * x2750 + x1351 * x7108 + x1351 * x8387 +
    x1351 * x8396 + x1355 * x2750 - x1355 * x7108 - x1355 * x8387 -
    x1355 * x8396 + x1391 * x8392 - x1395 * x2535 - x1398 * x8392 +
    x2535 * x666 + x6711 - x83 * x8329 + x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1391 + x1398) +
    (-x2528 * x436) * (-x1152 + x83) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[333] =
    -40000000.0 * sc[13] * x1015 - 140000.0 * sc[13] * x1117 +
    40000000.0 * sc[13] * x1406 - 20000.0 * sc[13] * x508 + sc[16] * x7280 -
    x1102 * x1317 + x1102 * x1328 + x1113 * x2750 - x1113 * x7108 -
    x1113 * x8387 - x1113 * x8396 + x1117 * x2544 - x1124 * x8392 +
    x1189 * x2535 + x1317 * x2509 + x1317 * x2513 + x1317 * x2518 +
    x1317 * x2522 - x1328 * x2509 - x1328 * x2513 - x1328 * x2518 -
    x1328 * x2522 + x1407 * x8392 - x2535 * x308 - x2750 * x331 + x331 * x7108 +
    x331 * x8387 + x331 * x8396 + x8379 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1124 - x1407) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[365] =
    1000000.0 * sc[16] * x121 - x121 * x8329 + x6711 - x7620 + x8400 + x8416 +
    x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1104 - x991) +
    (-x2528 * x436) * (-x1152 + x121) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[397] =
    -20000.0 * sc[13] * x1341 + 40000000.0 * sc[13] * x1424 -
    40000000.0 * sc[13] * x1433 - 140000.0 * sc[13] * x691 - sc[13] * x7984 -
    sc[13] * x7987 + 1000000.0 * sc[16] * x671 - 1000000.0 * sc[16] * x680 +
    1000000.0 * sc[16] - x1102 * x1343 + x1102 * x203 + x1320 * x2486 -
    x1320 * x2533 + x1343 * x2509 + x1343 * x2513 + x1343 * x2518 +
    x1343 * x2522 - x1388 * x2750 + x1388 * x7108 + x1388 * x8387 +
    x1388 * x8396 + x1404 * x2750 - x1404 * x7108 - x1404 * x8387 -
    x1404 * x8396 + x1423 * x2535 + x1425 * x8392 - x1431 * x2535 -
    x1434 * x8392 - x203 * x2509 - x203 * x2513 - x203 * x2518 - x203 * x2522 -
    x2528 * x771 + x2544 * x691 - x671 * x8329 + x680 * x8329 + x8377 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1425 + x1434) +
    (-x2528 * x436) * (x671 - x680) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[429] =
    -sc[12] * x7984 - sc[12] * x7987 - 140000.0 * sc[13] * x1172 -
    20000.0 * sc[13] * x1371 - 40000000.0 * sc[13] * x1443 +
    40000000.0 * sc[13] * x1454 + sc[14] * x1172 * x2543 - sc[15] * x8616 +
    1000000.0 * sc[16] * x1096 - 1000000.0 * sc[16] * x1270 - sc[17] * x609 -
    sc[17] * x8664 - sc[17] * x8667 - 365800000.0 * sc[18] * x8651 -
    130000.0 * sc[18] * x8654 - sc[1] * x439 - sc[20] * x8673 - sc[23] * x8658 -
    sc[29] * x8646 - sc[2] * x990 - sc[3] * x4270 - 1000000.0 * sc[9] * x1091 +
    20000.0 * sc_qss[2] * x275 - x1096 * x8329 - x1102 * x267 + x1102 * x621 +
    x1270 * x8329 + x1418 * x2750 - x1418 * x7108 - x1418 * x8387 -
    x1418 * x8396 - x1436 * x8392 + x1451 * x2535 + x1455 * x8392 -
    x1462 * x2535 - x194 * x571 -
    13240000.0 * x207 * exp(-754.82499870708 * invT) + x2486 * x38 +
    x2509 * x267 - x2509 * x621 + x2513 * x267 - x2513 * x621 + x2518 * x267 -
    x2518 * x621 + x2522 * x267 - x2522 * x621 - x2528 * x682 - x2532 * x8049 -
    x2533 * x38 - 1780000000.0 * x2727 - x2750 * x298 + x298 * x7108 +
    x298 * x8387 + x298 * x8396 -
    1600000.0 * x388 * exp(-429.747032597231 * invT) - x5002 +
    140000.0 * x5154 - x6113 - 40000000.0 * x65 + 140000.0 * x708 +
    20000.0 * x763 - x7635 - 120000.0 * x8332 * x8642 - 120000.0 * x8333 +
    120000.0 * x8334 - x8614 - 1.34 * x868 * exp(x2463) -
    46000000000.0 * x868 * exp(x2516) - 300000.0 * x868 * exp(x2537) + x8692 -
    26000000.0 * x942 * exp(-3079.6859947248799 * invT) +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1436 - x1455) +
    (-x2528 * x436) * (x1096 - x1270) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[461] =
    -140000.0 * sc[13] * x1173 - 20000.0 * sc[13] * x1428 +
    40000000.0 * sc[13] * x1463 - 40000000.0 * sc[13] * x397 +
    240000.0 * sc[14] * x4634 * x8642 + sc[15] * x8713 +
    1000000.0 * sc[16] * x1889 - 1000000.0 * sc[16] * x1890 +
    40000000.0 * sc[16] + sc[21] * x6154 + sc[28] * x45 - x1102 * x1386 +
    x1102 * x1392 + x1173 * x2544 + x1377 * x2486 - x1377 * x2533 +
    x1386 * x2509 + x1386 * x2513 + x1386 * x2518 + x1386 * x2522 -
    x1392 * x2509 - x1392 * x2513 - x1392 * x2518 - x1392 * x2522 +
    x1420 * x2750 - x1420 * x7108 - x1420 * x8387 - x1420 * x8396 -
    x1422 * x2750 + x1422 * x7108 + x1422 * x8387 + x1422 * x8396 -
    x1475 * x2535 + x1477 * x2535 + x1480 * x8392 - x1489 * x8392 -
    x1889 * x8329 + x1890 * x8329 + x2485 * x8049 - x2528 * x653 +
    x2543 * x5155 + x8377 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1480 + x1489) +
    (-x2528 * x436) * (x1889 - x1890) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[493] =
    1600000.0 * refCinv * ((sc[8]) * (sc[8])) * x5921 +
    40000000.0 * sc[13] * x1488 - 20000.0 * sc[13] * x1498 -
    40000000.0 * sc[13] * x1505 - 140000.0 * sc[13] * x278 - sc[13] * x8616 +
    sc[14] * x8713 + 1000000.0 * sc[16] * x1894 - 1000000.0 * sc[16] * x1895 +
    sc[16] * x8755 + sc[16] * x8757 + sc[16] * x8759 + sc[19] * x6235 +
    sc[20] * x8074 + sc[25] * x8726 - x1102 * x1400 + x1102 * x1401 +
    x1400 * x2509 + x1400 * x2513 + x1400 * x2518 + x1400 * x2522 -
    x1401 * x2509 - x1401 * x2513 - x1401 * x2518 - x1401 * x2522 -
    x1445 * x2750 + x1445 * x7108 + x1445 * x8387 + x1445 * x8396 +
    x1450 * x2750 - x1450 * x7108 - x1450 * x8387 - x1450 * x8396 +
    x1478 * x2486 - x1478 * x2533 + x1503 * x2535 + x1508 * x8392 -
    x169 * x8392 - x1894 * x8329 + x1895 * x8329 + x194 * x2508 + x2528 * x418 -
    x2535 * x383 + x2544 * x278 + x8377 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1508 + x169) +
    (-x2528 * x436) * (x1894 - x1895) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[525] =
    refC * x8336 * x8355 + sc[10] * x7280 + 1000000.0 * sc[12] -
    140000.0 * sc[13] * x102 + 40000000.0 * sc[13] * x1519 -
    40000000.0 * sc[13] * x1539 - 20000.0 * sc[13] * x486 +
    40000000.0 * sc[14] + sc[15] * x8755 + sc[15] * x8757 + sc[15] * x8759 +
    1000000.0 * sc[16] * x1899 - 1000000.0 * sc[16] * x1900 +
    260000.0 * sc[16] * exp(820.24316526169298 * invT) +
    731600000.0 * sc[16] * exp(-6038.59998965664 * invT) + sc[19] * x5079 +
    20000.0 * sc[1] * x716 + sc[20] * x157 + 140000.0 * sc[22] * x693 +
    2660000.0 * sc[24] + sc[27] * x7645 + sc[8] * x201 + x102 * x2544 -
    x1102 * x1155 + x1102 * x447 + x1155 * x2509 + x1155 * x2513 +
    x1155 * x2518 + x1155 * x2522 + 42200000.0 * x1440 * x868 - x1461 * x2750 +
    x1461 * x7108 + x1461 * x8387 + x1461 * x8396 + x1471 * x2750 -
    x1471 * x7108 - x1471 * x8387 - x1471 * x8396 + x1530 * x8392 -
    x1537 * x2535 - x1540 * x8392 - x1899 * x8329 + x1900 * x8329 +
    x194 * x2512 + x2486 * x893 - x2509 * x447 - x2513 * x447 - x2518 * x447 -
    x2522 * x447 + x2527 * x3869 + x2528 * x427 - x2533 * x893 + x2535 * x872 +
    x8377 + 1000000.0 * x942 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x1530 + x1540) +
    (-x2528 * x436) * (x1899 - x1900) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[557] =
    -20000.0 * sc[13] * x264 - 40000000.0 * sc[13] * x465 +
    40000000.0 * sc[13] * x475 - sc[13] * x609 - 140000.0 * sc[13] * x698 -
    sc[13] * x8664 - sc[13] * x8667 + 1000000.0 * sc[16] * x1059 -
    1000000.0 * sc[16] * x1060 + 12000000.0 * sc[8] * x935 - x1059 * x8329 +
    x1060 * x8329 + x1102 * x1157 - x1102 * x552 - x1157 * x2509 -
    x1157 * x2513 - x1157 * x2518 - x1157 * x2522 - x1476 * x2750 +
    x1476 * x7108 + x1476 * x8387 + x1476 * x8396 + x1504 * x2486 -
    x1504 * x2533 + x1528 * x2535 + x2509 * x552 + x2513 * x552 + x2518 * x552 +
    x2522 * x552 + x2528 * x422 - x2535 * x387 + x2544 * x698 + x2750 * x99 -
    x301 * x8392 + x527 * x8392 - x7108 * x99 - 1848000.0 * x8333 +
    1848000.0 * x8334 - x8387 * x99 - x8396 * x99 + x8834 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x301 - x527) +
    (-x2528 * x436) * (x1059 - x1060) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[589] =
    -40000000.0 * sc[13] * x254 + 40000000.0 * sc[13] * x67 -
    365800000.0 * sc[13] * x8651 - 130000.0 * sc[13] * x8654 +
    1000000.0 * sc[16] * x1068 - 1000000.0 * sc[16] * x33 - x1068 * x8329 -
    x1102 * x1429 + x1102 * x1438 + x1180 * x2486 + x1429 * x2509 +
    x1429 * x2513 + x1429 * x2518 + x1429 * x2522 - x1438 * x2509 -
    x1438 * x2513 - x1438 * x2518 - x1438 * x2522 - x1494 * x2750 +
    x1494 * x7108 + x1494 * x8387 + x1494 * x8396 + x1502 * x2750 -
    x1502 * x7108 - x1502 * x8387 - x1502 * x8396 - x250 * x8392 +
    x2528 * x398 + x2535 * x459 - x2535 * x519 + x33 * x8329 + x469 * x8392 -
    x8325 + x8377 + x8384 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x250 - x469) +
    (-x2528 * x436) * (x1068 - x33) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[621] =
    -140000.0 * sc[13] * x1021 + 40000000.0 * sc[13] * x28 -
    40000000.0 * sc[13] * x597 - 20000.0 * sc[13] * x714 -
    sc[13] * x8336 * x8370 + sc[15] * x6235 + 1000000.0 * sc[16] * x1088 +
    sc[16] * x5079 - 1000000.0 * sc[16] * x684 +
    5280000.0 * sc[19] * sc[21] * x8864 + x1021 * x2544 - x1088 * x8329 -
    x1102 * x1442 + x1102 * x1448 + x1442 * x2509 + x1442 * x2513 +
    x1442 * x2518 + x1442 * x2522 - x1448 * x2509 - x1448 * x2513 -
    x1448 * x2518 - x1448 * x2522 - x1517 * x2750 + x1517 * x7108 +
    x1517 * x8387 + x1517 * x8396 + x1524 * x2750 - x1524 * x7108 -
    x1524 * x8387 - x1524 * x8396 + x2486 * x49 + x2528 * x425 - x2533 * x49 +
    x2535 * x362 - x2535 * x455 + x581 * x8392 - x599 * x8392 + x684 * x8329 +
    x8377 - x8881 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x581 + x599) +
    (-x2528 * x436) * (x1088 - x684) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[653] =
    -20000.0 * sc[13] * x273 + 40000000.0 * sc[13] * x493 -
    40000000.0 * sc[13] * x604 - sc[13] * x8673 + sc[15] * x8074 +
    sc[16] * x157 + x1102 * x1467 - x1102 * x196 + x1181 * x2544 -
    x1467 * x2509 - x1467 * x2513 - x1467 * x2518 - x1467 * x2522 -
    x1527 * x2750 + x1527 * x7108 + x1527 * x8387 + x1527 * x8396 +
    x194 * x2517 + x196 * x2509 + x196 * x2513 + x196 * x2518 + x196 * x2522 +
    x2486 * x586 - x2533 * x586 + x2535 * x534 - x2535 * x563 + x2750 * x864 +
    x659 * x8392 - x670 * x8392 - x7108 * x864 + x8378 - x8382 - x8387 * x864 -
    x8396 * x864 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x659 + x670) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[685] =
    -140000.0 * sc[13] * x1154 - 20000.0 * sc[13] * x539 +
    40000000.0 * sc[13] * x566 - 40000000.0 * sc[13] * x787 + sc[14] * x6154 +
    1000000.0 * sc[16] * x1087 - 1000000.0 * sc[16] * x1100 +
    2640000.0 * ((sc[19]) * (sc[19])) * x8864 - x1087 * x8329 + x1100 * x8329 +
    x1102 * x1470 - x1102 * x197 + x1133 * x2486 - x1133 * x2533 +
    x1154 * x2544 + x1196 * x2750 - x1196 * x7108 - x1196 * x8387 -
    x1196 * x8396 - x1470 * x2509 - x1470 * x2513 - x1470 * x2518 -
    x1470 * x2522 + x197 * x2509 + x197 * x2513 + x197 * x2518 + x197 * x2522 +
    x2535 * x481 - x2535 * x561 - x2750 * x311 + x311 * x7108 + x311 * x8387 +
    x311 * x8396 + x589 * x8392 - 432000.0 * x8333 + 432000.0 * x8334 -
    x8392 * x855 + x8931 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x589 + x855) +
    (-x2528 * x436) * (x1087 - x1100) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[717] =
    -20000.0 * sc[13] * x508 + 40000000.0 * sc[13] * x68 -
    40000000.0 * sc[13] * x688 - 140000.0 * sc[13] * x707 +
    140000.0 * sc[16] * x693 - x1102 * x1484 + x1102 * x1490 + x1484 * x2509 +
    x1484 * x2513 + x1484 * x2518 + x1484 * x2522 - x1490 * x2509 -
    x1490 * x2513 - x1490 * x2518 - x1490 * x2522 + x194 * x2521 -
    x2535 * x369 + x2535 * x390 + x2544 * x707 + x2750 * x445 - x2750 * x450 -
    x445 * x7108 - x445 * x8387 - x445 * x8396 + x450 * x7108 + x450 * x8387 +
    x450 * x8396 + x8379 - x8392 * x971 + x8392 * x980 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x971 - x980) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[749] =
    -40000000.0 * sc[13] * x1009 + 40000000.0 * sc[13] * x1081 -
    sc[13] * x8658 + 1000000.0 * sc[16] * x1131 - x1004 * x2535 -
    x1102 * x1499 + x1102 * x1513 - x1131 * x8329 + x1499 * x2509 +
    x1499 * x2513 + x1499 * x2518 + x1499 * x2522 - x1513 * x2509 -
    x1513 * x2513 - x1513 * x2518 - x1513 * x2522 + x2535 * x626 +
    x2750 * x348 - x2750 * x468 - x348 * x7108 - x348 * x8387 - x348 * x8396 +
    x468 * x7108 + x468 * x8387 + x468 * x8396 + x6711 - x8392 * x949 +
    x8392 * x996 + x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x949 - x996) +
    (-x2528 * x436) * (x1131 - x1152) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[781] =
    40000000.0 * sc[13] * x1963 - 40000000.0 * sc[13] * x306 +
    2660000.0 * sc[16] + x1031 * x2535 - x1042 * x2535 + x1102 * x1492 -
    x1102 * x646 - x1492 * x2509 - x1492 * x2513 - x1492 * x2518 -
    x1492 * x2522 - x217 * x2750 + x217 * x7108 + x217 * x8387 + x217 * x8396 +
    x2509 * x646 + x2513 * x646 + x2518 * x646 + x2522 * x646 + x2750 * x368 -
    x368 * x7108 - x368 * x8387 - x368 * x8396 + x8379 + x8384 + x8392 * x89 -
    x8392 * x985 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x89 + x985) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[813] =
    -40000000.0 * sc[13] * x359 + sc[15] * x8726 - x1055 * x8392 -
    x1102 * x1535 + x1535 * x2509 + x1535 * x2513 + x1535 * x2518 +
    x1535 * x2522 - x2535 * x336 + x2750 * x655 + x2753 - x655 * x7108 -
    x655 * x8387 - x655 * x8396 + x8379 + x8384 + x8400 + x8409 + x8413 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1055 - x991) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[845] =
    40000000.0 * sc[13] * x575 - 40000000.0 * sc[13] * x678 +
    1000000.0 * sc[16] * x1139 - x1102 * x549 + x1102 * x550 - x1139 * x8329 +
    x2509 * x549 - x2509 * x550 + x2513 * x549 - x2513 * x550 + x2518 * x549 -
    x2518 * x550 + x2522 * x549 - x2522 * x550 + x2535 * x482 - x2535 * x567 +
    x2750 * x371 - x2750 * x555 - x371 * x7108 - x371 * x8387 - x371 * x8396 +
    x544 * x8392 + x555 * x7108 + x555 * x8387 + x555 * x8396 + x6711 -
    x815 * x8392 + x8566 - x8995 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x544 + x815) +
    (-x2528 * x436) * (x1139 - x1152) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[877] =
    1000000.0 * sc[16] * x1143 + sc[16] * x7645 - x1143 * x8329 + x6711 +
    x8400 + x8416 + x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1104 - x991) +
    (-x2528 * x436) * (x1143 - x1152) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[909] =
    sc[14] * x45 + 1000000.0 * sc[16] * x1092 - x1092 * x8329 + x6711 + x8400 +
    x8416 + x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x1104 - x991) +
    (-x2528 * x436) * (x1092 - x1152) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[941] =
    -40000000.0 * sc[13] * x1018 - sc[13] * x8646 + 1000000.0 * sc[16] * x1080 -
    x1080 * x8329 - x1102 * x553 - x1169 * x2528 + x2509 * x553 + x2513 * x553 +
    x2518 * x553 + x2522 * x553 - x2535 * x479 + x2750 * x372 + x2753 -
    x372 * x7108 - x372 * x8387 - x372 * x8396 - x647 * x8392 + x6711 + x8400 +
    x8409 + x8413 + x8566 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (x647 - x991) +
    (-x2528 * x436) * (x1080 - x1152) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[973] =
    -40000000.0 * sc[13] * x402 + 40000000.0 * sc[13] * x590 + x1074 * x2535 +
    x1102 * x545 - x2509 * x545 - x2518 * x545 + x568 * x7108 + x568 * x8387 +
    x568 * x8396 + x649 * x8392 - x675 * x8392 + x8379 + x8384 + x8415 +
    (40000000.0 * sc[13] * x413 + x1102 * x441 - x2509 * x441 - x2513 * x441 -
     x2518 * x441 - x2522 * x441) *
      (-x649 + x675) +
    (-x2528 * x436) * (x509) +
    (-x2486 * x51 + x2533 * x51 + x2535 * x396) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (1.34e-12 * sc[13] * x1468 * exp(x2463) +
     0.046 * sc[13] * x1468 * exp(x2516) +
     3.0e-7 * sc[13] * x1468 * exp(x2537) - 4.22e-5 * sc[16] * x1440 * x1468) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (140000.0 * sc[13] * x104 - x104 * x2544 - x1102 * x442 + x2509 * x442 +
     x2513 * x442 + x2518 * x442 + x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (20000.0 * sc[13] * x275 + 140000.0 * sc[13] * x279 - x2544 * x279) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[14] =
    -8.94e-5 * x2723 + x9055 + x9077 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1104 - x991) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[46] =
    -60000000.0 * sc[14] * x1062 + 60000000.0 * sc[14] * x1106 +
    96000000.0 * sc[14] * x1127 + 15000000.0 * sc[14] * x1134 +
    80000000.0 * sc[14] * x1138 - 96000000.0 * sc[14] * x1159 -
    100000000.0 * sc[14] * x1160 - 15000000.0 * sc[14] * x1161 -
    80000000.0 * sc[14] * x1162 - 16040000.0 * sc[14] * x272 +
    100000000.0 * sc[14] * x472 + x1062 * x2429 + x1062 * x2556 +
    x1062 * x2560 + x1062 * x998 - x1106 * x2429 - x1106 * x2556 -
    x1106 * x2560 - x1106 * x998 - x1127 * x8387 - x1138 * x5622 -
    x1138 * x9059 + x1159 * x8387 + x1160 * x2442 + x1160 * x2572 +
    x1162 * x5622 + x1162 * x9059 - x1180 * x2486 - x2442 * x472 -
    x2572 * x472 + x272 * x276 + x673 + x9093 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1138 + x1162) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[78] =
    -60000000.0 * sc[14] * x1121 + 60000000.0 * sc[14] * x1156 -
    16040000.0 * sc[14] * x1182 - 96000000.0 * sc[14] * x1197 +
    96000000.0 * sc[14] * x1205 + 15000000.0 * sc[14] * x1211 +
    80000000.0 * sc[14] * x1212 - 100000000.0 * sc[14] * x1214 -
    100000000.0 * sc[14] * x1234 - 15000000.0 * sc[14] * x1242 -
    80000000.0 * sc[14] * x1243 + 100000000.0 * sc[14] * x36 - sc[14] * x3864 +
    100000000.0 * sc[14] * x535 + x1121 * x2429 + x1121 * x2556 +
    x1121 * x2560 + x1121 * x998 - x1133 * x2486 - x1154 * x2544 -
    x1154 * x2577 - x1156 * x2429 - x1156 * x2556 - x1156 * x2560 -
    x1156 * x998 + x1182 * x276 + x1197 * x8387 - x1205 * x8387 -
    x1212 * x5622 - x1212 * x9059 + x1214 * x8329 + x1234 * x2442 +
    x1234 * x2572 + x1243 * x5622 + x1243 * x9059 - x2442 * x36 + x2566 * x420 -
    x2572 * x36 - x535 * x8329 + x582 + x9046 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1212 + x1243) +
    (-x2566 * x436) * (x1214 - x535) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[110] =
    -60000000.0 * sc[14] * x1170 - 100000000.0 * sc[14] * x1248 -
    15000000.0 * sc[14] * x1249 - 80000000.0 * sc[14] * x1250 -
    96000000.0 * sc[14] * x340 + x1170 * x1367 + x1170 * x2429 + x1170 * x2556 +
    x1170 * x2560 + x1170 * x998 + x1248 * x2442 + x1248 * x2572 +
    x1250 * x2832 + x1250 * x5622 + x1250 * x9059 + x2838 * x340 + x3006 +
    x340 * x8387 + x4298 - x5640 + x7190 + x9055 + x9065 + x9071 + x9073 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1250 - x991) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[142] =
    -240.0 * x4296 + x9055 + x9077 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1104 - x991) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[174] =
    -96000000.0 * sc[14] * x1051 - 60000000.0 * sc[14] * x1183 -
    100000000.0 * sc[14] * x1256 - 15000000.0 * sc[14] * x1257 -
    80000000.0 * sc[14] * x1258 - 16040000.0 * sc[14] * x757 + x1051 * x2838 +
    x1051 * x8387 + x1183 * x1367 + x1183 * x2429 + x1183 * x2556 +
    x1183 * x2560 + x1183 * x998 + x1256 * x2442 + x1256 * x2572 +
    x1258 * x2832 + x1258 * x5622 + x1258 * x9059 + x276 * x757 + x3006 -
    x5640 + x7190 + x9055 + x9065 + x9073 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1258 - x991) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[206] =
    100000000.0 * sc[14] * x1223 - 100000000.0 * sc[14] * x1225 -
    60000000.0 * sc[14] * x1227 + 96000000.0 * sc[14] * x1233 +
    60000000.0 * sc[14] * x1245 - 16040000.0 * sc[14] * x1262 -
    96000000.0 * sc[14] * x1264 + 100000000.0 * sc[14] * x1272 +
    15000000.0 * sc[14] * x1275 + 80000000.0 * sc[14] * x1276 -
    15000000.0 * sc[14] * x1288 - 80000000.0 * sc[14] * x1289 -
    100000000.0 * sc[14] * x379 - sc[14] * x4804 + 15000000.0 * sc[8] * x938 -
    x1209 * x2486 - x1223 * x8329 + x1225 * x8329 + x1227 * x2429 +
    x1227 * x2556 + x1227 * x2560 + x1227 * x998 - x1233 * x8387 -
    x1245 * x2429 - x1245 * x2556 - x1245 * x2560 - x1245 * x998 +
    x1262 * x276 + x1264 * x8387 - x1272 * x2442 - x1272 * x2572 -
    x1276 * x5622 - x1276 * x9059 + x1289 * x5622 + x1289 * x9059 +
    x2442 * x379 - x2544 * x70 + x2566 * x416 + x2572 * x379 - x2577 * x70 +
    x3059 + x5829 + 576000.0 * x8333 - 576000.0 * x8334 - 18856000.0 * x9040 +
    18856000.0 * x9043 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1276 + x1289) +
    (-x2566 * x436) * (-x1223 + x1225) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[238] =
    -60000000.0 * sc[14] * x1254 + 60000000.0 * sc[14] * x1260 +
    96000000.0 * sc[14] * x1268 - 96000000.0 * sc[14] * x1284 +
    100000000.0 * sc[14] * x1287 - 80000000.0 * sc[14] * x1295 -
    16040000.0 * sc[14] * x1303 + 15000000.0 * sc[14] * x1310 +
    80000000.0 * sc[14] * x1311 - 100000000.0 * sc[14] * x1319 -
    15000000.0 * sc[14] * x1322 - sc[14] * x5454 - x1237 * x2486 +
    x1254 * x2429 + x1254 * x2556 + x1254 * x2560 + x1254 * x998 -
    x1260 * x2429 - x1260 * x2556 - x1260 * x2560 - x1260 * x998 -
    x1268 * x8387 + x1284 * x8387 - x1287 * x2442 - x1287 * x2572 +
    x1295 * x5622 + x1295 * x9059 + x1303 * x276 - x1311 * x5622 -
    x1311 * x9059 + x1319 * x2442 + x1319 * x2572 + x3095 + x9093 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1295 - x1311) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[270] =
    refCinv * sc[23] * x194 * x548 + 48000000.0 * sc[12] * x842 -
    60000000.0 * sc[14] * x1263 + 60000000.0 * sc[14] * x1279 -
    100000000.0 * sc[14] * x1286 + 96000000.0 * sc[14] * x1306 -
    96000000.0 * sc[14] * x1314 - 16040000.0 * sc[14] * x1315 +
    100000000.0 * sc[14] * x1356 + 15000000.0 * sc[14] * x1361 +
    80000000.0 * sc[14] * x1362 - 100000000.0 * sc[14] * x333 +
    100000000.0 * sc[14] * x523 - 80000000.0 * sc[14] * x650 -
    15000000.0 * sc[14] * x664 + 30000000.0 * sc[15] * x767 +
    200000000.0 * sc[19] * sc[8] * x874 + 100000000.0 * sc[26] * x1093 +
    15000000.0 * sc[6] * x938 + x1263 * x2429 + x1263 * x2556 + x1263 * x2560 +
    x1263 * x998 - x1279 * x2429 - x1279 * x2556 - x1279 * x2560 -
    x1279 * x998 + x1286 * x8329 - x1306 * x8387 - x1309 * x2486 +
    x1314 * x8387 + x1315 * x276 - x1356 * x2572 - x1362 * x9059 -
    x2544 * x701 + x2572 * x333 - x2577 * x701 + x3141 - x523 * x8329 + x5886 +
    x5961 + x650 * x9059 + x7242 + 420000.0 * x8333 - 420000.0 * x8334 -
    16499000.0 * x9040 + 16499000.0 * x9043 - x9172 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1362 + x650) +
    (-x2566 * x436) * (x1286 - x523) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[302] =
    -60000000.0 * sc[14] * x1298 + 60000000.0 * sc[14] * x1304 +
    96000000.0 * sc[14] * x1351 - 96000000.0 * sc[14] * x1355 +
    15000000.0 * sc[14] * x1370 + 80000000.0 * sc[14] * x1391 -
    100000000.0 * sc[14] * x1395 - 15000000.0 * sc[14] * x1396 -
    80000000.0 * sc[14] * x1398 + 100000000.0 * sc[14] * x666 -
    100000000.0 * sc[14] * x83 + x1298 * x2556 + x1298 * x2560 + x1298 * x998 -
    x1304 * x2556 - x1304 * x2560 - x1304 * x998 - x1351 * x8387 +
    x1355 * x8387 - x1391 * x5622 - x1391 * x9059 + x1395 * x2442 +
    x1395 * x2572 + x1398 * x5622 + x1398 * x9059 - x2442 * x666 -
    x2572 * x666 + x3179 + x6858 + x83 * x8329 + x9071 + x9207 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1391 + x1398) +
    (-x2566 * x436) * (-x1152 + x83) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[334] =
    -15000000.0 * sc[14] * x1015 - 96000000.0 * sc[14] * x1113 -
    80000000.0 * sc[14] * x1124 + 100000000.0 * sc[14] * x1189 -
    60000000.0 * sc[14] * x1317 + 60000000.0 * sc[14] * x1328 +
    15000000.0 * sc[14] * x1406 + 80000000.0 * sc[14] * x1407 -
    100000000.0 * sc[14] * x308 + 96000000.0 * sc[14] * x331 + x1113 * x8387 +
    x1124 * x9059 - x1180 * x2486 - x1189 * x2572 + x1317 * x2429 +
    x1317 * x2556 + x1317 * x2560 + x1317 * x998 - x1328 * x2429 -
    x1328 * x2556 - x1328 * x2560 - x1328 * x998 - x1407 * x9059 +
    x2572 * x308 + x3211 - x331 * x8387 + x7292 + x9071 + x9093 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1124 - x1407) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[366] =
    -100000000.0 * sc[14] * x121 + x121 * x8329 + x9077 + x9227 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1104 - x991) +
    (-x2566 * x436) * (-x1152 + x121) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[398] =
    480.0 * sc[12] * sc[22] * x4513 + sc[13] * x7984 -
    16040000.0 * sc[14] * x1341 - 60000000.0 * sc[14] * x1343 +
    96000000.0 * sc[14] * x1388 - 96000000.0 * sc[14] * x1404 +
    100000000.0 * sc[14] * x1423 + 15000000.0 * sc[14] * x1424 +
    80000000.0 * sc[14] * x1425 - 100000000.0 * sc[14] * x1431 -
    15000000.0 * sc[14] * x1433 - 80000000.0 * sc[14] * x1434 +
    60000000.0 * sc[14] * x203 - 100000000.0 * sc[14] * x671 +
    100000000.0 * sc[14] * x680 - 84300000.0 * sc[14] + sc[15] * x3991 +
    16040000.0 * sc[20] * x710 + sc[22] * x423 * x887 +
    48000000.0 * sc[8] * x842 - x1320 * x2486 + x1341 * x276 + x1343 * x2429 +
    x1343 * x2556 + x1343 * x2560 + x1343 * x998 - x1388 * x8387 +
    x1404 * x8387 - x1423 * x2442 - x1423 * x2572 - x1425 * x5622 -
    x1425 * x9059 + x1431 * x2442 + x1431 * x2572 + x1434 * x5622 +
    x1434 * x9059 - x203 * x2429 - x203 * x2556 - x203 * x2560 - x203 * x998 -
    x2544 * x691 - x2566 * x771 - x2577 * x691 + x671 * x8329 - x680 * x8329 +
    x886 + x9046 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1425 + x1434) +
    (-x2566 * x436) * (x671 - x680) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[430] =
    sc[12] * x7984 - 100000000.0 * sc[14] * x1096 - sc[14] * x1172 * x2543 -
    sc[14] * x1172 * x2576 + 100000000.0 * sc[14] * x1270 -
    16040000.0 * sc[14] * x1371 - 96000000.0 * sc[14] * x1418 -
    80000000.0 * sc[14] * x1436 - 15000000.0 * sc[14] * x1443 +
    100000000.0 * sc[14] * x1451 + 15000000.0 * sc[14] * x1454 +
    80000000.0 * sc[14] * x1455 - 100000000.0 * sc[14] * x1462 -
    60000000.0 * sc[14] * x267 + 96000000.0 * sc[14] * x298 +
    60000000.0 * sc[14] * x621 + sc[15] * x8616 + x1096 * x8329 -
    x1270 * x8329 + x1371 * x276 + x1418 * x8387 + x1436 * x5622 +
    x1436 * x9059 - x1451 * x2442 - x1451 * x2572 - x1455 * x5622 -
    x1455 * x9059 + x1462 * x2442 + x1462 * x2572 + x2429 * x267 -
    x2429 * x621 - x2486 * x38 + x2556 * x267 - x2556 * x621 + x2560 * x267 -
    x2560 * x621 - x2566 * x682 + x267 * x998 - x298 * x8387 + x3292 + x6113 -
    x621 * x998 + 240000.0 * x8332 * x8642 + 300000.0 * x868 * exp(x2537) +
    x8680 + x9046 + 26000000.0 * x942 * exp(-3079.6859947248799 * invT) +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1436 - x1455) +
    (-x2566 * x436) * (x1096 - x1270) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[462] =
    -84300000.0 * sc[12] - 60000000.0 * sc[14] * x1386 +
    60000000.0 * sc[14] * x1392 - 96000000.0 * sc[14] * x1420 +
    96000000.0 * sc[14] * x1422 - 16040000.0 * sc[14] * x1428 +
    15000000.0 * sc[14] * x1463 - 100000000.0 * sc[14] * x1475 +
    100000000.0 * sc[14] * x1477 + 80000000.0 * sc[14] * x1480 -
    80000000.0 * sc[14] * x1489 - 100000000.0 * sc[14] * x1889 +
    100000000.0 * sc[14] * x1890 - 15000000.0 * sc[14] * x397 -
    480000.0 * sc[14] * x4634 * x8642 - sc[15] * x8713 - 40000000.0 * sc[16] -
    0.03973 * sc[17] * x9280 - sc[18] * x9274 -
    9428000.0 * sc[19] * x4634 * x5548 - sc[20] * x9313 - sc[21] * x6154 -
    sc[25] * x6177 - 400000000.0 * sc[27] - sc[28] * x45 - sc[29] * x9300 -
    sc[2] * x3864 - 240.0 * sc[4] * exp(x4294) - sc[6] * x4804 - sc[7] * x5454 -
    sc[8] * x5959 + 16040000.0 * sc_qss[2] * x275 - x1173 * x2544 -
    x1173 * x2577 - x1377 * x2486 + x1386 * x2556 + x1386 * x2560 +
    x1386 * x998 - x1392 * x2556 - x1392 * x2560 - x1392 * x998 +
    x1420 * x8387 - x1422 * x8387 + x1428 * x276 + x1889 * x8329 -
    x1890 * x8329 - 60000000.0 * x194 - 80000000.0 * x207 - x2485 * x8049 -
    x2543 * x5155 - x2566 * x653 - x2576 * x5155 - 8.94e-5 * x2730 + x3328 -
    100000000.0 * x388 + x4400 - 15000000.0 * x65 + x6926 + x7337 +
    16040000.0 * x763 - 96000000.0 * x868 + x9046 - x9269 + x9311 -
    100000000.0 * x942 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1480 + x1489) +
    (-x2566 * x436) * (x1889 - x1890) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[494] =
    sc[12] * x3991 + sc[13] * x8616 - 60000000.0 * sc[14] * x1400 +
    60000000.0 * sc[14] * x1401 + 96000000.0 * sc[14] * x1445 -
    96000000.0 * sc[14] * x1450 + 15000000.0 * sc[14] * x1488 -
    16040000.0 * sc[14] * x1498 + 100000000.0 * sc[14] * x1503 -
    15000000.0 * sc[14] * x1505 + 80000000.0 * sc[14] * x1508 -
    80000000.0 * sc[14] * x169 - 100000000.0 * sc[14] * x1894 +
    100000000.0 * sc[14] * x1895 - 100000000.0 * sc[14] * x383 -
    sc[14] * x8713 + sc[16] * x148 + sc[19] * x5049 +
    20000000.0 * sc[22] * x9324 + sc[24] * x4404 + 30000000.0 * sc[8] * x767 +
    x1400 * x2429 + x1400 * x2556 + x1400 * x2560 + x1400 * x998 -
    x1401 * x2429 - x1401 * x2556 - x1401 * x2560 - x1401 * x998 -
    x1445 * x8387 + x1450 * x8387 - x1478 * x2486 + x1498 * x276 -
    x1503 * x2442 - x1508 * x5622 + x169 * x5622 + x1894 * x8329 -
    x1895 * x8329 + x194 * x2559 + x230 * x2777 + x2442 * x383 - x2544 * x278 +
    x2565 * x3869 + x2566 * x418 - x2577 * x278 + x3365 +
    9428000.0 * x5548 * x9042 + x9046 + 0.07946 * x9320 + x9343 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1508 + x169) +
    (-x2566 * x436) * (x1894 - x1895) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[526] =
    -60000000.0 * sc[14] * x1155 + 96000000.0 * sc[14] * x1461 -
    96000000.0 * sc[14] * x1471 + 15000000.0 * sc[14] * x1519 +
    80000000.0 * sc[14] * x1530 - 100000000.0 * sc[14] * x1537 -
    15000000.0 * sc[14] * x1539 - 80000000.0 * sc[14] * x1540 -
    100000000.0 * sc[14] * x1899 + 100000000.0 * sc[14] * x1900 +
    60000000.0 * sc[14] * x447 - 16040000.0 * sc[14] * x486 +
    100000000.0 * sc[14] * x872 - 40000000.0 * sc[14] + sc[15] * x148 -
    x102 * x2544 - x102 * x2577 + x1155 * x2429 + x1155 * x2556 +
    x1155 * x2560 + x1155 * x998 - x1461 * x8387 + x1471 * x8387 -
    x1530 * x5622 - x1530 * x9059 + x1537 * x2442 + x1537 * x2572 +
    x1540 * x5622 + x1540 * x9059 + x1899 * x8329 - x1900 * x8329 -
    x2429 * x447 - x2442 * x872 - x2486 * x893 - x2556 * x447 - x2560 * x447 +
    x2566 * x427 - x2572 * x872 + x276 * x486 + x3403 - x447 * x998 + x9046 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x1530 + x1540) +
    (-x2566 * x436) * (x1899 - x1900) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[558] =
    -100000000.0 * sc[14] * x1059 + 100000000.0 * sc[14] * x1060 +
    60000000.0 * sc[14] * x1157 + 96000000.0 * sc[14] * x1476 +
    100000000.0 * sc[14] * x1528 - 16040000.0 * sc[14] * x264 -
    80000000.0 * sc[14] * x301 - 100000000.0 * sc[14] * x387 -
    15000000.0 * sc[14] * x465 + 15000000.0 * sc[14] * x475 +
    80000000.0 * sc[14] * x527 - 60000000.0 * sc[14] * x552 -
    0.03973 * sc[14] * x9280 - 96000000.0 * sc[14] * x99 + x1059 * x8329 -
    x1060 * x8329 - x1157 * x2429 - x1157 * x2556 - x1157 * x2560 -
    x1157 * x998 - x1476 * x8387 - x1504 * x2486 - x1528 * x2442 -
    x1528 * x2572 + x2429 * x552 + x2442 * x387 - x2544 * x698 + x2556 * x552 +
    x2560 * x552 + x2566 * x422 + x2572 * x387 - x2577 * x698 + x264 * x276 +
    x301 * x5622 + x301 * x9059 + x3441 - x527 * x5622 - x527 * x9059 +
    x552 * x998 + x6326 + 3696000.0 * x8333 - 3696000.0 * x8334 + x8387 * x99 -
    113136000.0 * x9040 + 113136000.0 * x9043 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x301 - x527) +
    (-x2566 * x436) * (x1059 - x1060) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[590] =
    -100000000.0 * sc[14] * x1068 - 60000000.0 * sc[14] * x1429 +
    60000000.0 * sc[14] * x1438 + 96000000.0 * sc[14] * x1494 -
    96000000.0 * sc[14] * x1502 - 80000000.0 * sc[14] * x250 -
    15000000.0 * sc[14] * x254 + 100000000.0 * sc[14] * x33 +
    100000000.0 * sc[14] * x459 + 80000000.0 * sc[14] * x469 -
    100000000.0 * sc[14] * x519 + 15000000.0 * sc[14] * x67 - sc[14] * x9274 +
    x1068 * x8329 + x1429 * x2429 + x1429 * x2556 + x1429 * x2560 +
    x1429 * x998 - x1438 * x2429 - x1438 * x2556 - x1438 * x2560 -
    x1438 * x998 - x1494 * x8387 + x1502 * x8387 - x2442 * x459 + x2442 * x519 +
    x250 * x5622 + x250 * x9059 + x2566 * x398 - x2572 * x459 + x2572 * x519 +
    x2779 - x33 * x8329 - x469 * x5622 - x469 * x9059 + x9047 + x9071 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x250 - x469) +
    (-x2566 * x436) * (x1068 - x33) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[622] =
    -100000000.0 * sc[14] * x1088 - 60000000.0 * sc[14] * x1442 +
    60000000.0 * sc[14] * x1448 + 96000000.0 * sc[14] * x1517 -
    96000000.0 * sc[14] * x1524 + 15000000.0 * sc[14] * x28 +
    100000000.0 * sc[14] * x362 - 100000000.0 * sc[14] * x455 -
    9428000.0 * sc[14] * x4634 * x5548 + 80000000.0 * sc[14] * x581 -
    15000000.0 * sc[14] * x597 - 80000000.0 * sc[14] * x599 +
    100000000.0 * sc[14] * x684 - 16040000.0 * sc[14] * x714 + sc[15] * x5049 +
    sc[20] * x8168 + 30000000.0 * sc[21] * x774 + sc[22] * x723 * x887 +
    48000000.0 * sc[22] * x826 + sc[25] * x9409 + sc[28] * x6700 +
    sc[29] * x190 + 100000000.0 * ((sc[8]) * (sc[8])) * x874 - x1021 * x2544 -
    x1021 * x2577 + x1088 * x8329 + x1442 * x2429 + x1442 * x2556 +
    x1442 * x2560 + x1442 * x998 - x1448 * x2429 - x1448 * x2556 -
    x1448 * x2560 - x1448 * x998 - x1517 * x8387 + x1524 * x8387 +
    80000000.0 * x191 * x194 - x2486 * x49 + x2566 * x425 - x2572 * x362 +
    x2572 * x455 + x276 * x714 + x2783 - x581 * x9059 + x599 * x9059 -
    x684 * x8329 + x7122 + x8881 + x9046 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x581 + x599) +
    (-x2566 * x436) * (x1088 - x684) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[654] =
    16040000.0 * sc[12] * x710 + 60000000.0 * sc[14] * x1467 +
    96000000.0 * sc[14] * x1527 - 60000000.0 * sc[14] * x196 -
    16040000.0 * sc[14] * x273 + 15000000.0 * sc[14] * x493 +
    100000000.0 * sc[14] * x534 - 100000000.0 * sc[14] * x563 -
    15000000.0 * sc[14] * x604 + 80000000.0 * sc[14] * x659 -
    80000000.0 * sc[14] * x670 - 96000000.0 * sc[14] * x864 - sc[14] * x9313 +
    sc[19] * x8168 - x1181 * x2544 - x1181 * x2577 - x1467 * x2429 -
    x1467 * x2556 - x1467 * x2560 - x1467 * x998 - x1527 * x8387 +
    x196 * x2429 + x196 * x2556 + x196 * x2560 + x196 * x998 - x2442 * x534 +
    x2442 * x563 - x2486 * x586 - x2572 * x534 + x2572 * x563 + x273 * x276 -
    x5622 * x659 + x5622 * x670 + x585 - x659 * x9059 + x670 * x9059 +
    x8387 * x864 + x9046 + x9049 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x659 + x670) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[686] =
    -100000000.0 * sc[14] * x1087 + 100000000.0 * sc[14] * x1100 -
    96000000.0 * sc[14] * x1196 + 60000000.0 * sc[14] * x1470 -
    60000000.0 * sc[14] * x197 + 96000000.0 * sc[14] * x311 +
    100000000.0 * sc[14] * x481 - 16040000.0 * sc[14] * x539 -
    100000000.0 * sc[14] * x561 + 15000000.0 * sc[14] * x566 +
    80000000.0 * sc[14] * x589 - sc[14] * x6154 - 15000000.0 * sc[14] * x787 -
    80000000.0 * sc[14] * x855 + 30000000.0 * sc[19] * x774 + x1087 * x8329 -
    x1100 * x8329 - x1133 * x2486 - x1154 * x2544 - x1154 * x2577 +
    x1196 * x8387 - x1470 * x2429 - x1470 * x2556 - x1470 * x2560 -
    x1470 * x998 + x197 * x2429 + x197 * x2556 + x197 * x2560 + x197 * x998 -
    x2442 * x481 + x2442 * x561 + x276 * x539 + x2789 - x311 * x8387 -
    x5622 * x589 + x5622 * x855 + x6492 + 864000.0 * x8333 - 864000.0 * x8334 -
    33940800.0 * x9040 + 33940800.0 * x9043 + x9471 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x589 + x855) +
    (-x2566 * x436) * (x1087 - x1100) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[718] =
    240.0 * ((sc[12]) * (sc[12])) * x4513 - 60000000.0 * sc[14] * x1484 +
    60000000.0 * sc[14] * x1490 - 100000000.0 * sc[14] * x369 +
    100000000.0 * sc[14] * x390 - 96000000.0 * sc[14] * x445 +
    96000000.0 * sc[14] * x450 + 15000000.0 * sc[14] * x68 -
    15000000.0 * sc[14] * x688 - 80000000.0 * sc[14] * x971 +
    80000000.0 * sc[14] * x980 + 20000000.0 * sc[15] * x9324 +
    sc[19] * x723 * x887 + 48000000.0 * sc[19] * x826 - x1180 * x2486 +
    x1484 * x2429 + x1484 * x2556 + x1484 * x2560 + x1484 * x998 -
    x1490 * x2429 - x1490 * x2556 - x1490 * x2560 - x1490 * x998 +
    x2442 * x369 - x2442 * x390 - x2544 * x707 - x2577 * x707 + x445 * x8387 -
    x450 * x8387 + x5622 * x971 - x5622 * x980 + x613 + x9046 + x9049 + x9071 +
    x9495 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x971 - x980) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[750] =
    -100000000.0 * sc[14] * x1004 - 15000000.0 * sc[14] * x1009 +
    15000000.0 * sc[14] * x1081 - 100000000.0 * sc[14] * x1131 -
    60000000.0 * sc[14] * x1499 + 60000000.0 * sc[14] * x1513 -
    96000000.0 * sc[14] * x348 + 96000000.0 * sc[14] * x468 +
    100000000.0 * sc[14] * x626 - 80000000.0 * sc[14] * x949 +
    80000000.0 * sc[14] * x996 + x1004 * x2442 + x1004 * x2572 + x1131 * x8329 +
    x1499 * x2429 + x1499 * x2556 + x1499 * x2560 + x1499 * x998 -
    x1513 * x2429 - x1513 * x2556 - x1513 * x2560 - x1513 * x998 +
    x171 * x194 * x548 - x2442 * x626 - x2572 * x626 + x348 * x8387 + x3657 -
    x468 * x8387 + x5622 * x949 - x5622 * x996 + x9059 * x949 - x9059 * x996 +
    x9071 + x9207 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x949 - x996) +
    (-x2566 * x436) * (x1131 - x1152) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[782] =
    100000000.0 * sc[14] * x1031 - 100000000.0 * sc[14] * x1042 +
    60000000.0 * sc[14] * x1492 + 15000000.0 * sc[14] * x1963 +
    96000000.0 * sc[14] * x217 - 15000000.0 * sc[14] * x306 -
    96000000.0 * sc[14] * x368 - 60000000.0 * sc[14] * x646 +
    80000000.0 * sc[14] * x89 - 80000000.0 * sc[14] * x985 + sc[15] * x4404 -
    x1031 * x2442 - x1031 * x2572 + x1042 * x2442 + x1042 * x2572 -
    x1492 * x2429 - x1492 * x2556 - x1492 * x2560 - x1492 * x998 -
    x217 * x8387 + x2429 * x646 + x2556 * x646 + x2560 * x646 + x368 * x8387 +
    x3691 - x5622 * x89 + x5622 * x985 + x646 * x998 - x89 * x9059 + x9047 +
    x9049 + x9059 * x985 + x9071 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x89 + x985) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[814] =
    -80000000.0 * sc[14] * x1055 - 60000000.0 * sc[14] * x1535 -
    100000000.0 * sc[14] * x336 - 15000000.0 * sc[14] * x359 - sc[14] * x6177 -
    96000000.0 * sc[14] * x655 + sc[19] * x9409 + x1055 * x2832 +
    x1055 * x5622 + x1055 * x9059 + x1367 * x1535 + x1535 * x2429 +
    x1535 * x2556 + x1535 * x2560 + x1535 * x998 + x2442 * x336 + x2572 * x336 +
    x2838 * x655 + x3006 - x5640 + x655 * x8387 + x7190 + x9055 + x9065 +
    x9071 + x9073 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1055 - x991) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[846] =
    -100000000.0 * sc[14] * x1139 - 96000000.0 * sc[14] * x371 +
    100000000.0 * sc[14] * x482 + 80000000.0 * sc[14] * x544 -
    60000000.0 * sc[14] * x549 + 60000000.0 * sc[14] * x550 +
    96000000.0 * sc[14] * x555 - 100000000.0 * sc[14] * x567 +
    15000000.0 * sc[14] * x575 - 15000000.0 * sc[14] * x678 -
    80000000.0 * sc[14] * x815 + 100000000.0 * sc[8] * x1093 + x1139 * x8329 +
    x194 * x2428 + x2429 * x549 - x2429 * x550 - x2442 * x482 + x2442 * x567 +
    x2556 * x549 - x2556 * x550 + x2560 * x549 - x2560 * x550 - x2572 * x482 +
    x2572 * x567 + x371 * x8387 + x3741 - x544 * x5622 - x544 * x9059 +
    x549 * x998 - x550 * x998 - x555 * x8387 + x5622 * x815 + x815 * x9059 +
    x9071 + x9207 - x9539 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x544 + x815) +
    (-x2566 * x436) * (x1139 - x1152) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[878] =
    -100000000.0 * sc[14] * x1143 - 400000000.0 * sc[14] + x1143 * x8329 +
    x9077 + x9227 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1104 - x991) +
    (-x2566 * x436) * (x1143 - x1152) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[910] =
    -100000000.0 * sc[14] * x1092 - sc[14] * x45 + sc[19] * x6700 +
    x1092 * x8329 + x9077 + x9227 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x1104 - x991) +
    (-x2566 * x436) * (x1092 - x1152) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[942] =
    -15000000.0 * sc[14] * x1018 - 100000000.0 * sc[14] * x1080 -
    96000000.0 * sc[14] * x372 - 100000000.0 * sc[14] * x479 -
    60000000.0 * sc[14] * x553 - 80000000.0 * sc[14] * x647 - sc[14] * x9300 +
    sc[19] * x190 + x1080 * x8329 - x1169 * x2566 + x1367 * x553 +
    x2429 * x553 + x2442 * x479 + x2556 * x553 + x2560 * x553 + x2572 * x479 +
    x2832 * x647 + x2838 * x372 + x3006 + x372 * x8387 + x553 * x998 +
    x5622 * x647 - x5640 + x647 * x9059 + x7190 + x9065 + x9071 + x9073 +
    x9227 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (x647 - x991) +
    (-x2566 * x436) * (x1080 - x1152) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[974] =
    -15000000.0 * sc[14] * x402 + 15000000.0 * sc[14] * x590 +
    80000000.0 * sc[14] * x649 - 80000000.0 * sc[14] * x675 + x1033 * x1367 +
    x1067 * x2442 + x1067 * x2572 - x1074 * x2442 - x1074 * x2572 -
    x2832 * x649 + x2832 * x675 + x2838 * x904 + x2842 - x5622 * x649 +
    x5622 * x675 - x649 * x9059 + x675 * x9059 + x9051 + x9076 +
    (15000000.0 * sc[14] * x413 + 60000000.0 * sc[14] * x441 - x1367 * x441 -
     x2429 * x441 - x2556 * x441 - x2560 * x441 - x441 * x998) *
      (-x649 + x675) +
    (-x2566 * x436) * (x509) +
    (100000000.0 * sc[14] * x396 - x2442 * x396 + x2486 * x51 - x2572 * x396) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-3.0e-7 * sc[13] * x1468 * exp(x2537) + 9.6e-5 * sc[14] * x1468 -
     1.51e-11 * sc[15] * x113 * x1468) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-60000000.0 * sc[14] * x442 + x104 * x2544 + x104 * x2577 + x1367 * x442 +
     x2429 * x442 + x2556 * x442 + x2560 * x442 + x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (16040000.0 * sc[14] * x275 + x2544 * x279 + x2577 * x279 - x275 * x276) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[15] =
    -2960.0 * x2708 + 8.94e-5 * x2723 + x7703 + x9628 + x9632 + x9634 + x9662 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1104 - x991) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[47] =
    -28000000.0 * sc[13] * x1134 + 28000000.0 * sc[13] * x1161 + sc[14] * x644 -
    30200000.0 * sc[15] * x1062 + 30200000.0 * sc[15] * x1106 +
    30110000.0 * sc[15] * x1127 + 30000000.0 * sc[15] * x1134 +
    20000000.0 * sc[15] * x1138 - 30110000.0 * sc[15] * x1159 -
    30000000.0 * sc[15] * x1161 - 20000000.0 * sc[15] * x1162 - sc[15] * x816 +
    24000000.0 * sc[16] * x272 + 32000000.0 * sc[19] * x1180 - x1062 * x2509 -
    x1062 * x2560 + x1062 * x2585 + x1106 * x2509 + x1106 * x2560 -
    x1106 * x2585 + x1117 * x2577 - x1117 * x2608 - x1127 * x2756 +
    x1127 * x2838 + x1127 * x5656 + x1127 * x9644 - x1134 * x2474 -
    x1138 * x7693 - x1138 * x9631 + x1159 * x2756 - x1159 * x2838 -
    x1159 * x5656 - x1159 * x9644 + x1160 * x2535 - x1160 * x2572 +
    x1160 * x2599 + x1161 * x2474 + x1162 * x7693 + x1162 * x9631 -
    x2535 * x472 + x2572 * x472 - x2599 * x472 - x272 * x276 + x272 * x754 +
    x5700 + x9621 + x9659 + x9680 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1138 + x1162) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[79] =
    -28000000.0 * sc[13] * x1211 + 28000000.0 * sc[13] * x1242 -
    30200000.0 * sc[15] * x1121 + 30200000.0 * sc[15] * x1156 -
    30110000.0 * sc[15] * x1197 + 30110000.0 * sc[15] * x1205 +
    30000000.0 * sc[15] * x1211 + 20000000.0 * sc[15] * x1212 -
    30000000.0 * sc[15] * x1214 - 30000000.0 * sc[15] * x1242 -
    20000000.0 * sc[15] * x1243 + 30000000.0 * sc[15] * x535 - x1121 * x2509 -
    x1121 * x2560 + x1154 * x2577 + x1156 * x2509 + x1156 * x2560 -
    x1182 * x276 + x1182 * x754 + x1197 * x2756 - x1197 * x2838 -
    x1197 * x5656 - x1205 * x2756 + x1205 * x2838 + x1205 * x5656 -
    x1212 * x9631 + x1214 * x6716 + x1234 * x2535 - x1234 * x2572 +
    x1234 * x2599 + x1243 * x9631 - x2535 * x36 - x2566 * x420 + x2572 * x36 +
    x2593 * x420 - x2599 * x36 - x3881 - x535 * x6716 + x5737 + x7813 + x9620 +
    x9659 + x9696 + x9699 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1212 + x1243) +
    (x2566 * x436 - x2593 * x436) * (x1214 - x535) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[111] =
    28000000.0 * sc[13] * x1249 + 30000000.0 * sc[14] * x1170 -
    30200000.0 * sc[15] * x1170 - 30000000.0 * sc[15] * x1249 -
    20000000.0 * sc[15] * x1250 - 30110000.0 * sc[15] * x340 - sc[15] * x4276 -
    x1170 * x2509 - x1170 * x2560 + x1170 * x2585 + x1248 * x2535 -
    x1248 * x2572 + x1248 * x2599 + x1249 * x2474 + x1250 * x7693 +
    x1250 * x9631 + x2756 * x340 + x2759 - x2838 * x340 - x340 * x5656 -
    x340 * x9644 + x4293 + x5656 * x568 + x5659 + x7703 + x9628 + x9632 +
    x9634 + x9640 + x9649 + x9660 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1250 - x991) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[143] =
    x7703 + x9628 + x9632 + x9634 + x9662 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1104 - x991) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[175] =
    28000000.0 * sc[13] * x1257 + 30000000.0 * sc[14] * x1183 -
    30110000.0 * sc[15] * x1051 - 30200000.0 * sc[15] * x1183 -
    30000000.0 * sc[15] * x1257 - 20000000.0 * sc[15] * x1258 +
    24000000.0 * sc[16] * x757 + x1051 * x2756 - x1051 * x2838 - x1051 * x5656 -
    x1051 * x9644 - x1183 * x2509 - x1183 * x2560 + x1183 * x2585 +
    x1256 * x2535 - x1256 * x2572 + x1256 * x2599 + x1257 * x2474 +
    x1258 * x7693 + x1258 * x9631 + x2759 - x276 * x757 + x5790 + x754 * x757 +
    x7703 + x9628 + x9632 + x9640 + x9649 + x9660 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1258 - x991) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[207] =
    1455.8918918918901 * ((sc[15]) * (sc[15])) * x9585 * x9596 *
      exp(2307.7516293804401 * invT - 0.798 * logT) -
    5000000.0 * sc[15] * x1209 + 30000000.0 * sc[15] * x1223 -
    30000000.0 * sc[15] * x1225 - 30200000.0 * sc[15] * x1227 +
    30110000.0 * sc[15] * x1233 + 30200000.0 * sc[15] * x1245 -
    30110000.0 * sc[15] * x1264 + 30000000.0 * sc[15] * x1275 +
    20000000.0 * sc[15] * x1276 - 30000000.0 * sc[15] * x1288 -
    20000000.0 * sc[15] * x1289 + 24000000.0 * sc[16] * x1262 - x1209 * x2479 -
    x1223 * x6716 + x1225 * x6716 - x1227 * x2509 - x1227 * x2560 +
    x1227 * x2585 - x1233 * x2756 + x1233 * x2838 + x1233 * x5656 +
    x1233 * x9644 + x1245 * x2509 + x1245 * x2560 - x1245 * x2585 -
    x1262 * x276 + x1262 * x754 + x1264 * x2756 - x1264 * x2838 -
    x1264 * x5656 - x1264 * x9644 - x1272 * x2535 + x1272 * x2572 -
    x1272 * x2599 - x1276 * x9631 + x1289 * x9631 + x2535 * x379 -
    x2566 * x416 - x2572 * x379 + x2577 * x70 + x2593 * x416 + x2599 * x379 -
    x2608 * x70 - x4830 + x5835 + x7871 + 18856000.0 * x9040 -
    18856000.0 * x9043 - 1455.8918918918901 * x9585 * x9617 +
    402000.0 * x9586 * x9588 * (4.0 * x9591 + 0.56 * x9593) -
    402000.0 * x9586 * x9603 * (4.0 * x9591 + 0.56 * x9593) - 804000.0 * x9588 +
    804000.0 * x9603 + x9741 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1276 + x1289) +
    (x2566 * x436 - x2593 * x436) * (-x1223 + x1225) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[239] =
    -28000000.0 * sc[13] * x1310 + 28000000.0 * sc[13] * x1322 +
    sc[14] * x5454 - 5000000.0 * sc[15] * x1237 - 30200000.0 * sc[15] * x1254 +
    30200000.0 * sc[15] * x1260 + 30110000.0 * sc[15] * x1268 -
    30110000.0 * sc[15] * x1284 - 20000000.0 * sc[15] * x1295 +
    30000000.0 * sc[15] * x1310 + 20000000.0 * sc[15] * x1311 -
    30000000.0 * sc[15] * x1322 - sc[15] * x5458 + 24000000.0 * sc[16] * x1303 +
    x1117 * x2577 - x1117 * x2608 - x1237 * x2479 - x1254 * x2509 -
    x1254 * x2560 + x1260 * x2509 + x1260 * x2560 - x1268 * x2756 +
    x1268 * x2838 + x1268 * x5656 + x1284 * x2756 - x1284 * x2838 -
    x1284 * x5656 - x1287 * x2535 + x1287 * x2572 - x1287 * x2599 +
    x1295 * x9631 - x1303 * x276 + x1303 * x754 - x1311 * x9631 +
    x1319 * x2535 - x1319 * x2572 + x1319 * x2599 + x5878 + x7896 + x9621 +
    x9659 + x9754 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1295 - x1311) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[271] =
    sc[12] * x5975 + 30000000.0 * sc[14] * x1263 - 30000000.0 * sc[14] * x1279 -
    30200000.0 * sc[15] * x1263 + 30200000.0 * sc[15] * x1279 -
    30000000.0 * sc[15] * x1286 + 30110000.0 * sc[15] * x1306 -
    5000000.0 * sc[15] * x1309 - 30110000.0 * sc[15] * x1314 +
    30000000.0 * sc[15] * x1361 + 20000000.0 * sc[15] * x1362 -
    3200000.0 * sc[15] * x171 * x5921 + 30000000.0 * sc[15] * x523 -
    20000000.0 * sc[15] * x650 - 30000000.0 * sc[15] * x664 +
    24000000.0 * sc[16] * x1315 + sc[16] * x5946 + 30200000.0 * sc[17] * x800 -
    x1263 * x2509 - x1263 * x2560 + x1263 * x2585 + x1279 * x2509 +
    x1279 * x2560 - x1279 * x2585 + x1286 * x6716 - x1306 * x2756 +
    x1306 * x2838 + x1306 * x9644 - x1309 * x2479 + x1314 * x2756 -
    x1314 * x2838 - x1314 * x9644 - x1315 * x276 + x1315 * x754 -
    x1356 * x2535 + x1356 * x2572 - x1356 * x2599 - x1362 * x9631 +
    x2535 * x333 - x2572 * x333 + x2577 * x701 + x2599 * x333 - x2608 * x701 -
    x414 - x523 * x6716 + x5973 + x650 * x9631 + x7925 + 16499000.0 * x9040 -
    16499000.0 * x9043 + x9172 - 1273.90540540541 * x9585 * x9617 +
    402000.0 * x9588 * x9759 - 703500.0 * x9588 - 402000.0 * x9603 * x9759 +
    703500.0 * x9603 + 1273.90540540541 * x9615 + x9778 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1362 + x650) +
    (x2566 * x436 - x2593 * x436) * (x1286 - x523) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[303] =
    -28000000.0 * sc[13] * x1370 + 28000000.0 * sc[13] * x1396 -
    30200000.0 * sc[15] * x1298 + 30200000.0 * sc[15] * x1304 +
    30110000.0 * sc[15] * x1351 - 30110000.0 * sc[15] * x1355 +
    30000000.0 * sc[15] * x1370 + 20000000.0 * sc[15] * x1391 -
    30000000.0 * sc[15] * x1396 - 20000000.0 * sc[15] * x1398 - sc[15] * x6846 -
    30000000.0 * sc[15] * x83 - x1298 * x2509 - x1298 * x2560 + x1298 * x2585 +
    x1304 * x2509 + x1304 * x2560 - x1304 * x2585 - x1351 * x2756 +
    x1351 * x2838 + x1351 * x5656 + x1351 * x9644 + x1355 * x2756 -
    x1355 * x2838 - x1355 * x5656 - x1355 * x9644 - x1370 * x2474 -
    x1391 * x7693 - x1391 * x9631 + x1395 * x2535 - x1395 * x2572 +
    x1395 * x2599 + x1396 * x2474 + x1398 * x7693 + x1398 * x9631 -
    x2535 * x666 + x2572 * x666 - x2599 * x666 + x6020 + x6716 * x83 + x6719 +
    x9792 + x9793 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1391 + x1398) +
    (x2566 * x436 - x2593 * x436) * (-x1152 + x83) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[335] =
    28000000.0 * sc[13] * x1015 - 28000000.0 * sc[13] * x1406 -
    30000000.0 * sc[15] * x1015 - 30110000.0 * sc[15] * x1113 -
    20000000.0 * sc[15] * x1124 - 30200000.0 * sc[15] * x1317 +
    30200000.0 * sc[15] * x1328 + 30000000.0 * sc[15] * x1406 +
    20000000.0 * sc[15] * x1407 + 30110000.0 * sc[15] * x331 - sc[15] * x6065 -
    sc[15] * x7285 + 30110000.0 * sc[17] * x838 + x1015 * x2474 +
    x1113 * x2756 - x1113 * x2838 - x1113 * x5656 - x1113 * x9644 +
    x1117 * x2577 - x1117 * x2608 + x1124 * x7693 + x1124 * x9631 -
    x1189 * x2535 + x1189 * x2572 - x1189 * x2599 - x1317 * x2509 -
    x1317 * x2560 + x1317 * x2585 + x1328 * x2509 + x1328 * x2560 -
    x1328 * x2585 - x1406 * x2474 - x1407 * x7693 - x1407 * x9631 +
    x2535 * x308 - x2572 * x308 + x2599 * x308 - x2756 * x331 + x2838 * x331 +
    x331 * x5656 + x331 * x9644 + x6061 + x9621 + x9680 + x9792 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1124 - x1407) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[367] =
    -30000000.0 * sc[15] * x121 + x121 * x6716 + x6719 - x7625 + x9662 + x9810 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1104 - x991) +
    (x2566 * x436 - x2593 * x436) * (-x1152 + x121) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[399] =
    -28000000.0 * sc[13] * x1424 + 28000000.0 * sc[13] * x1433 -
    5000000.0 * sc[15] * x1320 - 30200000.0 * sc[15] * x1343 +
    30110000.0 * sc[15] * x1388 - 30110000.0 * sc[15] * x1404 +
    30000000.0 * sc[15] * x1424 + 20000000.0 * sc[15] * x1425 -
    30000000.0 * sc[15] * x1433 - 20000000.0 * sc[15] * x1434 +
    30200000.0 * sc[15] * x203 - 30000000.0 * sc[15] * x671 +
    30000000.0 * sc[15] * x680 + 13400000.0 * sc[16] + sc[17] * x3996 +
    sc[8] * x5975 - x1320 * x2479 - x1341 * x276 + x1341 * x754 -
    x1343 * x2509 - x1343 * x2560 - x1388 * x2756 + x1388 * x2838 +
    x1388 * x5656 + x1404 * x2756 - x1404 * x2838 - x1404 * x5656 -
    x1423 * x2535 + x1423 * x2572 - x1423 * x2599 - x1425 * x9631 +
    x1431 * x2535 - x1431 * x2572 + x1431 * x2599 + x1434 * x9631 +
    x203 * x2509 + x203 * x2560 + x2566 * x771 + x2577 * x691 - x2593 * x771 -
    x2608 * x691 + x6105 + x671 * x6716 - x6716 * x680 + x8003 + x9620 + x9659 +
    x9829 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1425 + x1434) +
    (x2566 * x436 - x2593 * x436) * (x671 - x680) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[431] =
    28000000.0 * sc[13] * x1443 - 28000000.0 * sc[13] * x1454 +
    sc[14] * x1172 * x2576 - 30000000.0 * sc[15] * x1096 +
    30000000.0 * sc[15] * x1270 - 30110000.0 * sc[15] * x1418 -
    20000000.0 * sc[15] * x1436 - 30000000.0 * sc[15] * x1443 +
    30000000.0 * sc[15] * x1454 + 20000000.0 * sc[15] * x1455 -
    30200000.0 * sc[15] * x267 + 30110000.0 * sc[15] * x298 -
    5000000.0 * sc[15] * x38 + 30200000.0 * sc[15] * x621 - sc[15] * x8616 +
    24000000.0 * sc[16] * x1371 + sc[17] * x609 + sc[17] * x8664 +
    sc[17] * x8667 + x1096 * x6716 - x1172 * x2608 - x1270 * x6716 -
    x1371 * x276 + x1371 * x754 + x1418 * x2756 - x1418 * x2838 -
    x1418 * x5656 + x1436 * x9631 - x1451 * x2535 + x1451 * x2572 -
    x1451 * x2599 - x1455 * x9631 + x1462 * x2535 - x1462 * x2572 +
    x1462 * x2599 + 10600000.0 * x207 * exp(-754.82499870708 * invT) -
    x2479 * x38 - x2509 * x267 + x2509 * x621 - x2560 * x267 + x2560 * x621 +
    x2566 * x682 - x2593 * x682 - x2756 * x298 + x2838 * x298 + x298 * x5656 +
    1600000.0 * x388 * exp(-429.747032597231 * invT) + x6149 +
    28000000.0 * x65 + x8027 + x8614 + x8680 + x9620 + x9659 + x9849 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1436 - x1455) +
    (x2566 * x436 - x2593 * x436) * (x1096 - x1270) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[463] =
    -28000000.0 * sc[13] * x1463 + 28000000.0 * sc[13] * x397 -
    5000000.0 * sc[15] * x1377 - 30200000.0 * sc[15] * x1386 +
    30200000.0 * sc[15] * x1392 - 30110000.0 * sc[15] * x1420 +
    30110000.0 * sc[15] * x1422 + 30000000.0 * sc[15] * x1463 +
    20000000.0 * sc[15] * x1480 - 20000000.0 * sc[15] * x1489 -
    30000000.0 * sc[15] * x1889 + 30000000.0 * sc[15] * x1890 -
    30000000.0 * sc[15] * x397 - sc[15] * x8713 + 40000000.0 * sc[16] +
    0.07946 * sc[17] * x9280 + sc[18] * x9274 +
    9428000.0 * sc[19] * x4634 * x5548 + sc[1] * x644 + sc[20] * x9313 +
    10000000.0 * sc[22] * x5159 + sc[29] * x9300 + sc[6] * x4804 +
    sc[7] * x5454 + x1173 * x2577 - x1173 * x2608 - x1377 * x2479 -
    x1386 * x2509 - x1386 * x2560 + x1392 * x2509 + x1392 * x2560 +
    x1420 * x2756 - x1420 * x2838 - x1420 * x5656 - x1422 * x2756 +
    x1422 * x2838 + x1422 * x5656 - x1428 * x276 + x1428 * x754 +
    x1475 * x2535 - x1475 * x2572 + x1475 * x2599 - x1477 * x2535 +
    x1477 * x2572 - x1477 * x2599 - x1480 * x9631 + x1489 * x9631 +
    x1889 * x6716 - x1890 * x6716 + x2566 * x653 + x2576 * x5155 -
    x2593 * x653 + 8.94e-5 * x2730 + x4399 + x6194 + x8060 + x9620 + x9659 +
    x9869 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1480 + x1489) +
    (x2566 * x436 - x2593 * x436) * (x1889 - x1890) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[495] =
    -1600000.0 * refCinv * ((sc[8]) * (sc[8])) * x5921 - sc[10] * x6065 -
    sc[10] * x7285 - sc[13] * x8616 + 30000000.0 * sc[14] * x1400 -
    30000000.0 * sc[14] * x1401 - sc[14] * x8713 - 30200000.0 * sc[15] * x1400 +
    30200000.0 * sc[15] * x1401 + 30110000.0 * sc[15] * x1445 -
    30110000.0 * sc[15] * x1450 - 5000000.0 * sc[15] * x1478 +
    30000000.0 * sc[15] * x1488 - 30000000.0 * sc[15] * x1505 +
    20000000.0 * sc[15] * x1508 - 20000000.0 * sc[15] * x169 -
    30000000.0 * sc[15] * x1894 + 30000000.0 * sc[15] * x1895 -
    804000.0 * sc[15] * x9584 * x9587 * x9596 + 24000000.0 * sc[16] * x1498 -
    sc[17] * x9878 - sc[19] * x6235 - sc[1] * x816 - sc[21] * x6222 -
    sc[24] * x4404 - sc[25] * x8726 - sc[29] * x9903 - sc[3] * x4276 -
    sc[7] * x5458 - sc[9] * x6846 + 5000000.0 * sc_qss[1] * x51 -
    15.1 * x113 * x868 - x1400 * x2509 - x1400 * x2560 + x1401 * x2509 +
    x1401 * x2560 - x1445 * x2756 + x1445 * x2838 + x1450 * x2756 -
    x1450 * x2838 - x1478 * x2479 - x1498 * x276 + x1498 * x754 -
    x1503 * x2535 + x1503 * x2572 - x1508 * x9631 + x169 * x9631 +
    x1894 * x6716 - x1895 * x6716 - x194 * x2508 - x194 * x2559 -
    30200000.0 * x194 - 20000000.0 * x207 - x230 * x2777 + x2535 * x383 -
    x2565 * x3869 - x2566 * x418 - x2571 * x388 - x2572 * x383 + x2593 * x418 -
    10000000.0 * x2606 * x5155 - x2608 * x278 - 2960.0 * x2733 - x4042 -
    13400000.0 * x42 * x8049 - x5055 - 9428000.0 * x5548 * x9042 + x6246 -
    30000000.0 * x65 - x723 * x7961 - x7641 + x8091 - 30110000.0 * x868 +
    5000000.0 * x908 - 0.15892 * x9320 - 30000000.0 * x942 + x9620 + x9659 -
    x9874 - 299400000.0 * x9895 - x9900 + x9911 + x9912 + x9920 + x9923 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1508 + x169) +
    (x2566 * x436 - x2593 * x436) * (x1894 - x1895) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[527] =
    13400000.0 * sc[12] - 28000000.0 * sc[13] * x1519 +
    28000000.0 * sc[13] * x1539 + 30000000.0 * sc[14] * x1155 -
    30000000.0 * sc[14] * x447 + 40000000.0 * sc[14] -
    30200000.0 * sc[15] * x1155 + 30110000.0 * sc[15] * x1461 -
    30110000.0 * sc[15] * x1471 + 30000000.0 * sc[15] * x1519 +
    20000000.0 * sc[15] * x1530 - 30000000.0 * sc[15] * x1539 -
    20000000.0 * sc[15] * x1540 - 30000000.0 * sc[15] * x1899 +
    30000000.0 * sc[15] * x1900 + 30200000.0 * sc[15] * x447 -
    5000000.0 * sc[15] * x893 + 24000000.0 * sc[16] * x486 + sc[17] * x9924 +
    149700000.0 * sc[19] * x9927 + 800000.0 * sc[23] + 5000000.0 * sc[27] +
    sc[8] * x5946 - 24000000.0 * sc_qss[2] * x275 + x102 * x2577 -
    x102 * x2608 - x1155 * x2509 - x1155 * x2560 - x1461 * x2756 +
    x1461 * x2838 + x1461 * x5656 + x1471 * x2756 - x1471 * x2838 -
    x1471 * x5656 - x1530 * x9631 + x1537 * x2535 - x1537 * x2572 +
    x1537 * x2599 + x1540 * x9631 + x1899 * x6716 - x1900 * x6716 -
    x2479 * x893 + x2509 * x447 - x2535 * x872 + x2560 * x447 - x2566 * x427 +
    x2572 * x872 + x2593 * x427 - x2599 * x872 - x276 * x486 + x486 * x754 -
    24000000.0 * x763 + x8115 + x9620 + x9659 + x9947 + x9948 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x1530 + x1540) +
    (x2566 * x436 - x2593 * x436) * (x1899 - x1900) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[559] =
    30110000.0 * sc[10] * x838 + sc[12] * x3996 + sc[13] * x609 +
    sc[13] * x8664 + sc[13] * x8667 + 0.07946 * sc[14] * x9280 -
    30000000.0 * sc[15] * x1059 + 30000000.0 * sc[15] * x1060 +
    30200000.0 * sc[15] * x1157 + 30110000.0 * sc[15] * x1476 -
    5000000.0 * sc[15] * x1504 - 20000000.0 * sc[15] * x301 -
    30000000.0 * sc[15] * x465 + 30000000.0 * sc[15] * x475 +
    20000000.0 * sc[15] * x527 - 30200000.0 * sc[15] * x552 - sc[15] * x9878 -
    30110000.0 * sc[15] * x99 + 24000000.0 * sc[16] * x264 + sc[16] * x9924 +
    sc[19] * x5100 + 5000000.0 * sc[20] * x889 + sc[22] * x56 + sc[24] * x4425 +
    sc[27] * x7650 + 30200000.0 * sc[8] * x800 + x1011 * x2777 + x1059 * x6716 -
    x1060 * x6716 + x1157 * x2509 + x1157 * x2560 - x1476 * x2756 +
    x1476 * x2838 + x1476 * x5656 + 3.6 * x1495 * x868 - x1504 * x2479 -
    x1528 * x2535 + x1528 * x2572 - x1528 * x2599 - x2509 * x552 +
    x2535 * x387 - x2560 * x552 - x2566 * x422 - x2572 * x387 + x2577 * x698 +
    x2592 * x3869 + x2593 * x422 + x2598 * x388 + x2599 * x387 - x2608 * x698 -
    x264 * x276 + x264 * x754 + x2756 * x99 - x2838 * x99 + x301 * x9631 -
    x527 * x9631 - x5656 * x99 + x6334 + x6715 * x942 + x8147 +
    113136000.0 * x9040 - 113136000.0 * x9043 -
    4367.6756756756804 * x9585 * x9617 +
    402000.0 * x9586 * x9588 * (12.0 * x9591 + 1.68 * x9593) -
    402000.0 * x9586 * x9603 * (12.0 * x9591 + 1.68 * x9593) -
    2412000.0 * x9588 + 2412000.0 * x9603 + 4367.6756756756804 * x9615 + x9979 +
    x9983 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x301 - x527) +
    (x2566 * x436 - x2593 * x436) * (x1059 - x1060) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[591] =
    402000.0 * refC * x9584 * x9596 * x9602 + 28000000.0 * sc[13] * x254 -
    28000000.0 * sc[13] * x67 + sc[14] * x9274 - 30000000.0 * sc[15] * x1068 -
    30200000.0 * sc[15] * x1429 + 30200000.0 * sc[15] * x1438 +
    30110000.0 * sc[15] * x1494 - 30110000.0 * sc[15] * x1502 -
    20000000.0 * sc[15] * x250 - 30000000.0 * sc[15] * x254 +
    30000000.0 * sc[15] * x33 + 20000000.0 * sc[15] * x469 +
    30000000.0 * sc[15] * x67 + sc[19] * x9987 + x1068 * x6716 - x1429 * x2509 -
    x1429 * x2560 + x1429 * x2585 + x1438 * x2509 + x1438 * x2560 -
    x1438 * x2585 - x1494 * x2756 + x1494 * x2838 + x1494 * x5656 +
    x1494 * x9644 + x1502 * x2756 - x1502 * x2838 - x1502 * x5656 -
    x1502 * x9644 + x2474 * x254 - x2474 * x67 + x250 * x7693 + x250 * x9631 -
    x2535 * x459 + x2535 * x519 - x2566 * x398 + x2572 * x459 - x2572 * x519 +
    x2593 * x398 - x2599 * x459 + x2599 * x519 - x33 * x6716 - x469 * x7693 -
    x469 * x9631 + x6370 - x9578 + x9620 + x9626 + x9792 - x9985 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x250 - x469) +
    (x2566 * x436 - x2593 * x436) * (x1068 - x33) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[623] =
    9428000.0 * sc[14] * x4634 * x5548 - 30000000.0 * sc[15] * x1088 -
    30200000.0 * sc[15] * x1442 + 30200000.0 * sc[15] * x1448 +
    30110000.0 * sc[15] * x1517 - 30110000.0 * sc[15] * x1524 +
    30000000.0 * sc[15] * x28 - 5000000.0 * sc[15] * x49 +
    20000000.0 * sc[15] * x581 - 30000000.0 * sc[15] * x597 -
    20000000.0 * sc[15] * x599 + 30000000.0 * sc[15] * x684 +
    24000000.0 * sc[16] * x714 + 149700000.0 * sc[16] * x9927 + sc[17] * x5100 +
    sc[18] * x9987 + 30000000.0 * sc[20] * x924 + 20000000.0 * sc[20] * x961 +
    sc[22] * x7115 + 30000000.0 * sc[28] * x1094 - x10020 + x10032 +
    x1021 * x2577 - x1021 * x2608 + x1088 * x6716 - x1442 * x2509 -
    x1442 * x2560 + x1442 * x2585 + x1448 * x2509 + x1448 * x2560 -
    x1448 * x2585 - x1517 * x2756 + x1517 * x2838 + x1517 * x9644 +
    x1524 * x2756 - x1524 * x2838 - x1524 * x9644 - x2479 * x49 - x2535 * x362 +
    x2535 * x455 - x2566 * x425 + x2572 * x362 - x2572 * x455 + x2593 * x425 -
    x2599 * x362 + x2599 * x455 - x276 * x714 - x581 * x9631 + x599 * x9631 +
    x6415 - x6716 * x684 + x714 * x754 + x8195 + x8881 + x9620 + x9659 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x581 + x599) +
    (x2566 * x436 - x2593 * x436) * (x1088 - x684) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[655] =
    -28000000.0 * sc[13] * x493 + 28000000.0 * sc[13] * x604 + sc[14] * x9313 +
    30200000.0 * sc[15] * x1467 + 30110000.0 * sc[15] * x1527 -
    30200000.0 * sc[15] * x196 + 30000000.0 * sc[15] * x493 -
    5000000.0 * sc[15] * x586 - 30000000.0 * sc[15] * x604 +
    20000000.0 * sc[15] * x659 - 20000000.0 * sc[15] * x670 -
    30110000.0 * sc[15] * x864 + 5000000.0 * sc[17] * x889 +
    30000000.0 * sc[19] * x924 + 20000000.0 * sc[19] * x961 + x10051 +
    x1181 * x2577 + x1467 * x2509 + x1467 * x2560 - x1527 * x2756 +
    x1527 * x2838 + x1527 * x5656 - x196 * x2509 - x196 * x2560 - x2479 * x586 -
    x2535 * x534 + x2535 * x563 + x2572 * x534 - x2572 * x563 - x2599 * x534 +
    x2599 * x563 - x273 * x276 + x273 * x754 + x2756 * x864 - x2838 * x864 -
    x5656 * x864 + x6445 - x659 * x9631 + x670 * x9631 + x8215 - x9578 + x9621 +
    x9659 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x659 + x670) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[687] =
    -28000000.0 * sc[13] * x566 + 28000000.0 * sc[13] * x787 -
    30000000.0 * sc[14] * x1470 + 30000000.0 * sc[14] * x197 -
    30000000.0 * sc[15] * x1087 + 30000000.0 * sc[15] * x1100 -
    30110000.0 * sc[15] * x1196 + 30200000.0 * sc[15] * x1470 -
    30200000.0 * sc[15] * x197 + 30110000.0 * sc[15] * x311 +
    30000000.0 * sc[15] * x566 + 20000000.0 * sc[15] * x589 - sc[15] * x6222 -
    30000000.0 * sc[15] * x787 - 20000000.0 * sc[15] * x855 +
    24000000.0 * sc[16] * x539 + sc[19] * x5552 + sc[19] * x6410 +
    x1087 * x6716 - x1100 * x6716 + x1154 * x2577 + x1196 * x2756 -
    x1196 * x2838 - x1196 * x5656 - x1196 * x9644 + x1470 * x2509 +
    x1470 * x2560 - x1470 * x2585 - x197 * x2509 - x197 * x2560 + x197 * x2585 -
    x2474 * x566 + x2474 * x787 - x2535 * x481 + x2535 * x561 + x2572 * x481 -
    x2572 * x561 - x2599 * x481 + x2599 * x561 - x2756 * x311 - x276 * x539 +
    x2838 * x311 + x311 * x5656 + x311 * x9644 + x539 * x754 - x589 * x7693 -
    x589 * x9631 + x7693 * x855 + x855 * x9631 + 33940800.0 * x9040 -
    33940800.0 * x9043 - 2620.6054054054098 * x9585 * x9617 +
    402000.0 * x9586 * x9588 * (7.2 * x9591 + 1.008 * x9593) -
    402000.0 * x9586 * x9603 * (7.2 * x9591 + 1.008 * x9593) -
    1447200.0 * x9588 + 1447200.0 * x9603 + 2620.6054054054098 * x9615 -
    158400000000.0 * x9654 + 158400000000.0 * x9657 + x9699 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x589 + x855) +
    (x2566 * x436 - x2593 * x436) * (x1087 - x1100) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[719] =
    -28000000.0 * sc[13] * x68 + 28000000.0 * sc[13] * x688 +
    10000000.0 * sc[14] * x5159 - 30200000.0 * sc[15] * x1484 +
    30200000.0 * sc[15] * x1490 - 30110000.0 * sc[15] * x445 +
    30110000.0 * sc[15] * x450 + 30000000.0 * sc[15] * x68 -
    30000000.0 * sc[15] * x688 - 20000000.0 * sc[15] * x971 +
    20000000.0 * sc[15] * x980 + sc[17] * x56 + sc[19] * x7115 + x10080 -
    x1484 * x2509 - x1484 * x2560 + x1484 * x2585 + x1490 * x2509 +
    x1490 * x2560 - x1490 * x2585 - x2474 * x68 + x2474 * x688 + x2535 * x369 -
    x2535 * x390 - x2572 * x369 + x2572 * x390 - x2608 * x707 + x2756 * x445 -
    x2756 * x450 - x2838 * x445 + x2838 * x450 - x445 * x5656 - x445 * x9644 +
    x450 * x5656 + x450 * x9644 + x5571 + x7693 * x971 - x7693 * x980 + x9621 +
    x9631 * x971 - x9631 * x980 + x9680 + x9792 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x971 - x980) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[751] =
    28000000.0 * sc[13] * x1009 - 28000000.0 * sc[13] * x1081 -
    30000000.0 * sc[15] * x1009 + 30000000.0 * sc[15] * x1081 -
    30000000.0 * sc[15] * x1131 - 30200000.0 * sc[15] * x1499 +
    30200000.0 * sc[15] * x1513 - 30110000.0 * sc[15] * x348 +
    30110000.0 * sc[15] * x468 - 20000000.0 * sc[15] * x949 +
    20000000.0 * sc[15] * x996 + 800000.0 * sc[16] + x1004 * x2535 -
    x1004 * x2572 + x1004 * x2599 + x1009 * x2474 - x1081 * x2474 +
    x1131 * x6716 - x1499 * x2509 - x1499 * x2560 + x1499 * x2585 +
    x1513 * x2509 + x1513 * x2560 - x1513 * x2585 - x2535 * x626 +
    x2572 * x626 - x2599 * x626 + x2756 * x348 - x2756 * x468 - x2838 * x348 +
    x2838 * x468 - x348 * x5656 - x348 * x9644 + x468 * x5656 + x468 * x9644 +
    x6553 + x6719 + x7693 * x949 - x7693 * x996 + x949 * x9631 - x9631 * x996 +
    x9792 + x9793 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x949 - x996) +
    (x2566 * x436 - x2593 * x436) * (x1131 - x1152) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[783] =
    -28000000.0 * sc[13] * x1963 + 28000000.0 * sc[13] * x306 +
    30200000.0 * sc[15] * x1492 + 30000000.0 * sc[15] * x1963 +
    30110000.0 * sc[15] * x217 - 30000000.0 * sc[15] * x306 -
    30110000.0 * sc[15] * x368 - sc[15] * x4404 - 30200000.0 * sc[15] * x646 +
    20000000.0 * sc[15] * x89 - 20000000.0 * sc[15] * x985 + sc[17] * x4425 +
    x10113 - x1031 * x2535 + x1031 * x2572 - x1031 * x2599 + x1042 * x2535 -
    x1042 * x2572 + x1042 * x2599 + x1492 * x2509 + x1492 * x2560 -
    x1963 * x2474 - x217 * x2756 + x217 * x2838 + x217 * x5656 + x2474 * x306 -
    x2509 * x646 - x2560 * x646 + x2756 * x368 - x2838 * x368 - x368 * x5656 +
    x6602 - x7693 * x89 + x7693 * x985 - x89 * x9631 - x9578 + x9621 + x9626 +
    x9631 * x985 + x9792 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x89 + x985) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[815] =
    28000000.0 * sc[13] * x359 + 30000000.0 * sc[14] * x1535 -
    20000000.0 * sc[15] * x1055 - 30200000.0 * sc[15] * x1535 -
    30000000.0 * sc[15] * x359 - 30110000.0 * sc[15] * x655 - sc[15] * x8726 +
    x1055 * x7693 + x1055 * x9631 - x1535 * x2509 - x1535 * x2560 +
    x1535 * x2585 + x2474 * x359 + x2535 * x336 - x2572 * x336 + x2599 * x336 +
    x2756 * x655 + x2759 - x2838 * x655 - x5656 * x655 + x5790 - x655 * x9644 +
    x7703 + x9628 + x9632 + x9634 + x9640 + x9649 + x9660 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1055 - x991) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[847] =
    -28000000.0 * sc[13] * x575 + 28000000.0 * sc[13] * x678 -
    30000000.0 * sc[15] * x1139 - 30110000.0 * sc[15] * x371 +
    20000000.0 * sc[15] * x544 - 30200000.0 * sc[15] * x549 +
    30200000.0 * sc[15] * x550 + 30110000.0 * sc[15] * x555 +
    30000000.0 * sc[15] * x575 - 30000000.0 * sc[15] * x678 -
    20000000.0 * sc[15] * x815 + x1139 * x6716 - x2474 * x575 + x2474 * x678 -
    x2509 * x549 + x2509 * x550 - x2535 * x482 + x2535 * x567 - x2560 * x549 +
    x2560 * x550 + x2572 * x482 - x2572 * x567 + x2585 * x549 - x2585 * x550 -
    x2599 * x482 + x2599 * x567 + x2756 * x371 - x2756 * x555 - x2838 * x371 +
    x2838 * x555 - x371 * x5656 - x371 * x9644 - x544 * x7693 - x544 * x9631 +
    x555 * x5656 + x555 * x9644 + x6661 + x6719 + x7693 * x815 + x815 * x9631 +
    x8995 + x9792 + x9793 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x544 + x815) +
    (x2566 * x436 - x2593 * x436) * (x1139 - x1152) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[879] =
    -30000000.0 * sc[15] * x1143 + 5000000.0 * sc[16] + sc[17] * x7650 +
    x1143 * x6716 + x6719 + x9662 + x9810 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1104 - x991) +
    (x2566 * x436 - x2593 * x436) * (x1143 - x1152) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[911] =
    -30000000.0 * sc[15] * x1092 + 30000000.0 * sc[19] * x1094 + x1092 * x6716 +
    x6719 + x9662 + x9810 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x1104 - x991) +
    (x2566 * x436 - x2593 * x436) * (x1092 - x1152) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[943] =
    28000000.0 * sc[13] * x1018 + 30000000.0 * sc[14] * x553 + sc[14] * x9300 -
    30000000.0 * sc[15] * x1018 - 30000000.0 * sc[15] * x1080 -
    30110000.0 * sc[15] * x372 - 5000000.0 * sc[15] * x423 * x9898 -
    30200000.0 * sc[15] * x553 - 20000000.0 * sc[15] * x647 - sc[15] * x9903 +
    x1018 * x2474 + x1080 * x6716 + x1169 * x2566 - x1169 * x2593 -
    x2509 * x553 + x2535 * x479 - x2560 * x553 - x2572 * x479 + x2585 * x553 +
    x2599 * x479 + x2756 * x372 + x2759 - x2838 * x372 - x372 * x5656 -
    x372 * x9644 + x5790 + x647 * x7693 + x647 * x9631 + x6719 + x9640 + x9649 +
    x9660 + x9810 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (x647 - x991) +
    (x2566 * x436 - x2593 * x436) * (x1080 - x1152) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[975] =
    28000000.0 * sc[13] * x402 - 28000000.0 * sc[13] * x590 -
    30000000.0 * sc[15] * x402 + 30000000.0 * sc[15] * x590 +
    20000000.0 * sc[15] * x649 - 20000000.0 * sc[15] * x675 + x2474 * x402 -
    x2474 * x590 - x649 * x7693 - x649 * x9631 + x675 * x7693 + x675 * x9631 +
    x9628 + x9651 + x9792 +
    (-28000000.0 * sc[13] * x413 - 30000000.0 * sc[14] * x441 +
     30000000.0 * sc[15] * x413 + 30200000.0 * sc[15] * x441 - x2474 * x413 +
     x2509 * x441 + x2560 * x441 - x2585 * x441) *
      (-x649 + x675) +
    (x2566 * x436 - x2593 * x436) * (x509) +
    (5000000.0 * sc[15] * x51 - 32000000.0 * sc[19] * x51 + x2479 * x51 -
     x2535 * x396 + x2572 * x396 - x2599 * x396) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (1.51e-11 * sc[15] * x113 * x1468 + 3.011e-5 * sc[15] * x1468 -
     3.6e-12 * sc[17] * x1468 * x1495 + x2415 + x2604) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (30000000.0 * sc[14] * x442 - 30200000.0 * sc[15] * x442 - x104 * x2577 +
     x104 * x2608 - x2509 * x442 - x2560 * x442 + x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-24000000.0 * sc[16] * x275 - x2577 * x279 + x2608 * x279 + x275 * x276 -
     x275 * x754) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[16] =
    x10163 + x10165 + x10167 + x10177 - 0.0698 * x2704 + 1780000000.0 * x2714 +
    x8382 + (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1104 - x991) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[48] =
    140000.0 * sc[13] * x1117 + 20000.0 * sc[13] * x272 + sc[13] * x439 -
    24000000.0 * sc[16] * x272 - 20000.0 * sc[16] * x716 + x10163 +
    x1062 * x1102 - x1062 * x2513 + x1062 * x2614 - x1102 * x1106 +
    x1106 * x2513 - x1106 * x2614 + x1127 * x2750 - x1127 * x5656 -
    x1127 * x7108 - x1127 * x9644 - x1159 * x2750 + x1159 * x5656 +
    x1159 * x7108 + x1159 * x9644 + x1180 * x2479 + x8325 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1138 + x1162) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[80] =
    140000.0 * sc[13] * x1154 + 20000.0 * sc[13] * x1182 + sc[13] * x990 -
    24000000.0 * sc[16] * x1182 - 1000000.0 * sc[16] * x1214 - sc[16] * x3859 +
    1000000.0 * sc[16] * x535 + x10162 + x1102 * x1121 - x1102 * x1156 -
    x1121 * x2513 + x1121 * x2614 + x1133 * x2479 + x1133 * x2533 +
    x1156 * x2513 - x1156 * x2614 - x1197 * x2750 + x1197 * x5656 +
    x1197 * x7108 + x1197 * x9644 + x1205 * x2750 - x1205 * x5656 -
    x1205 * x7108 - x1205 * x9644 - x2528 * x420 + x2619 * x420 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1212 + x1243) +
    (x2528 * x436 - x2619 * x436) * (x1214 - x535) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[112] =
    sc[13] * x4270 + x10163 + x10165 + x10167 + x10169 + x10171 + x10175 +
    x1102 * x1170 - x1170 * x2513 + x1170 * x2614 - x2750 * x340 +
    x340 * x5656 + x340 * x7108 + x340 * x9644 + x5649 + x7111 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1250 - x991) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[144] =
    x10163 + x10165 + x10167 + x10177 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1104 - x991) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[176] =
    20000.0 * sc[13] * x757 - 24000000.0 * sc[16] * x757 + x10163 + x10167 +
    x10169 + x10171 + x10175 - x1051 * x2750 + x1051 * x5656 + x1051 * x7108 +
    x1051 * x9644 + x1102 * x1183 + x1180 * x2479 - x1183 * x2513 +
    x1183 * x2614 + x5649 + x7111 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1258 - x991) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[208] =
    20000.0 * sc[13] * x1262 + 140000.0 * sc[13] * x70 +
    1000000.0 * sc[16] * x1223 - 1000000.0 * sc[16] * x1225 -
    24000000.0 * sc[16] * x1262 - sc[16] * x4793 + x10162 + x1102 * x1227 -
    x1102 * x1245 + x1209 * x2479 + x1209 * x2533 - x1227 * x2513 +
    x1227 * x2614 + x1233 * x2750 - x1233 * x5656 - x1233 * x7108 -
    x1233 * x9644 + x1245 * x2513 - x1245 * x2614 - x1264 * x2750 +
    x1264 * x5656 + x1264 * x7108 + x1264 * x9644 - x2528 * x416 +
    x2619 * x416 + x4798 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1276 + x1289) +
    (x2528 * x436 - x2619 * x436) * (-x1223 + x1225) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[240] =
    140000.0 * sc[13] * x1117 + 20000.0 * sc[13] * x1303 -
    24000000.0 * sc[16] * x1303 + x10163 + x1102 * x1254 - x1102 * x1260 +
    x1237 * x2479 + x1237 * x2533 - x1254 * x2513 + x1254 * x2614 +
    x1260 * x2513 - x1260 * x2614 + x1268 * x2750 - x1268 * x5656 -
    x1268 * x7108 - x1268 * x9644 - x1284 * x2750 + x1284 * x5656 +
    x1284 * x7108 + x1284 * x9644 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1295 - x1311) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[272] =
    20000.0 * sc[13] * x1315 + 140000.0 * sc[13] * x701 -
    1000000.0 * sc[16] * x1286 - 24000000.0 * sc[16] * x1315 +
    1000000.0 * sc[16] * x523 - x10212 - x1263 * x2513 + x1263 * x2614 +
    x1279 * x2513 - x1279 * x2614 + x1306 * x2750 - x1306 * x5656 -
    x1306 * x7108 - x1306 * x9644 + x1309 * x2479 + x1309 * x2533 -
    x1314 * x2750 + x1314 * x5656 + x1314 * x7108 + x1314 * x9644 +
    800000.0 * x284 * x318 * x868 + x5948 -
    x8338 * (0.3052 * x8339 + 2.18 * x8360) + 853156891.321345 * x8346 * x8350 -
    853156891.321345 * x8346 * x8367 - 68975200.0 * x8353 * x8356 +
    68975200.0 * x8353 * x8371 + x8364 * (0.3052 * x8339 + 2.18 * x8360) +
    x8519 + (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1362 + x650) +
    (x2528 * x436 - x2619 * x436) * (x1286 - x523) +
    (-x2479 * x51 - x2533 * x51) * (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[304] =
    1000000.0 * sc[13] * x1091 - 1000000.0 * sc[16] * x83 + x10165 + x10222 +
    x1102 * x1298 - x1102 * x1304 - x1298 * x2513 + x1298 * x2614 +
    x1304 * x2513 - x1304 * x2614 + x1351 * x2750 - x1351 * x5656 -
    x1351 * x7108 - x1351 * x9644 - x1355 * x2750 + x1355 * x5656 +
    x1355 * x7108 + x1355 * x9644 + x8325 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1391 + x1398) +
    (x2528 * x436 - x2619 * x436) * (-x1152 + x83) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[336] =
    140000.0 * sc[13] * x1117 - sc[16] * x7280 + x10163 + x10165 +
    x1102 * x1317 - x1102 * x1328 - x1113 * x2750 + x1113 * x5656 +
    x1113 * x7108 + x1113 * x9644 - x1317 * x2513 + x1317 * x2614 +
    x1328 * x2513 - x1328 * x2614 + x2750 * x331 - x331 * x5656 - x331 * x7108 -
    x331 * x9644 + x8325 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1124 - x1407) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[368] =
    -1000000.0 * sc[16] * x121 + x10165 + x10167 + x10177 + x10222 + x7620 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1104 - x991) +
    (x2528 * x436 - x2619 * x436) * (-x1152 + x121) +
    (-x2479 * x51 - x2533 * x51) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[400] =
    20000.0 * sc[13] * x1341 + 140000.0 * sc[13] * x691 -
    24000000.0 * sc[16] * x1341 - 1000000.0 * sc[16] * x671 +
    1000000.0 * sc[16] * x680 - 14400000.0 * sc[16] + x10162 + x1102 * x1343 -
    x1102 * x203 + x1320 * x2479 + x1320 * x2533 - x1343 * x2513 +
    x1343 * x2614 + x1388 * x2750 - x1388 * x5656 - x1388 * x7108 -
    x1388 * x9644 - x1404 * x2750 + x1404 * x5656 + x1404 * x7108 +
    x1404 * x9644 + x203 * x2513 - x203 * x2614 + x2528 * x771 - x2619 * x771 +
    x318 * x7961 + x3990 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1425 + x1434) +
    (x2528 * x436 - x2619 * x436) * (x671 - x680) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[432] =
    140000.0 * sc[13] * x1172 + 20000.0 * sc[13] * x1371 + sc[15] * x8616 -
    1000000.0 * sc[16] * x1096 + 1000000.0 * sc[16] * x1270 -
    24000000.0 * sc[16] * x1371 + sc[17] * x609 + sc[17] * x8664 +
    sc[17] * x8667 + 731600000.0 * sc[18] * x8651 + 260000.0 * sc[18] * x8654 +
    sc[19] * x8336 * x8370 + sc[1] * x439 + sc[20] * x8673 + sc[29] * x8646 +
    sc[2] * x990 + sc[3] * x4270 + 1000000.0 * sc[9] * x1091 -
    20000.0 * sc_qss[2] * x275 + x1102 * x267 - x1102 * x621 - x1418 * x2750 +
    x1418 * x5656 + x1418 * x7108 + x1418 * x9644 + x194 * x571 + x2479 * x38 -
    x2513 * x267 + x2513 * x621 + x2528 * x682 + x2532 * x8049 + x2533 * x38 +
    x2614 * x267 - x2614 * x621 - x2619 * x682 + 1780000000.0 * x2727 +
    x2750 * x298 - x298 * x5656 - x298 * x7108 - x298 * x9644 + x5002 -
    140000.0 * x5154 - 140000.0 * x708 - 20000.0 * x763 + x7635 -
    x8338 * (0.238 * x8339 + 1.7 * x8360) + 665305832.681783 * x8346 * x8350 -
    665305832.681783 * x8346 * x8367 - 53788000.0 * x8353 * x8356 +
    53788000.0 * x8353 * x8371 + x8364 * (0.238 * x8339 + 1.7 * x8360) +
    1.34 * x868 * exp(x2463) +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1436 - x1455) +
    (x2528 * x436 - x2619 * x436) * (x1096 - x1270) +
    (-x2479 * x51 - x2533 * x51) * (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[464] =
    140000.0 * sc[13] * x1173 + 20000.0 * sc[13] * x1428 -
    24000000.0 * sc[16] * x1428 - 1000000.0 * sc[16] * x1889 +
    1000000.0 * sc[16] * x1890 - 40000000.0 * sc[16] + sc[18] * x9274 + x10162 +
    x1102 * x1386 - x1102 * x1392 + x1377 * x2479 + x1377 * x2533 -
    x1386 * x2513 + x1386 * x2614 + x1392 * x2513 - x1392 * x2614 -
    x1420 * x2750 + x1420 * x5656 + x1420 * x7108 + x1420 * x9644 +
    x1422 * x2750 - x1422 * x5656 - x1422 * x7108 - x1422 * x9644 +
    x2528 * x653 - x2619 * x653 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1480 + x1489) +
    (x2528 * x436 - x2619 * x436) * (x1889 - x1890) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[496] =
    6600000.0 * refCinv * sc[20] * x319 * x868 + 20000.0 * sc[13] * x1498 +
    140000.0 * sc[13] * x278 + sc[13] * x8616 - 24000000.0 * sc[16] * x1498 -
    1000000.0 * sc[16] * x1894 + 1000000.0 * sc[16] * x1895 + sc[21] * x6222 +
    x10162 + x1102 * x1400 - x1102 * x1401 - x1400 * x2513 + x1400 * x2614 +
    x1401 * x2513 - x1401 * x2614 + x1445 * x2750 - x1445 * x5656 -
    x1445 * x7108 - x1445 * x9644 - x1450 * x2750 + x1450 * x5656 +
    x1450 * x7108 + x1450 * x9644 + x1478 * x2479 + x1478 * x2533 +
    800000.0 * x171 * x284 * x868 - x2528 * x418 + x2619 * x418 +
    13400000.0 * x42 * x8049 + x723 * x7961 + x9874 + 149700000.0 * x9895 +
    x9900 + x9912 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1508 + x169) +
    (x2528 * x436 - x2619 * x436) * (x1894 - x1895) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[528] =
    -refC * x8336 * x8355 - sc[10] * x7280 - 14400000.0 * sc[12] +
    140000.0 * sc[13] * x102 + 20000.0 * sc[13] * x486 - 40000000.0 * sc[14] -
    1000000.0 * sc[16] * x1899 + 1000000.0 * sc[16] * x1900 -
    24000000.0 * sc[16] * x486 -
    520000.0 * sc[16] * exp(820.24316526169298 * invT) -
    1463200000.0 * sc[16] * exp(-6038.59998965664 * invT) - sc[17] * x9924 -
    sc[19] * x5079 - 74850000.0 * sc[19] * x9927 - 20000.0 * sc[1] * x716 -
    140000.0 * sc[22] * x693 - 800000.0 * sc[23] - 9260000.0 * sc[24] -
    sc[27] * x7645 - 5000000.0 * sc[27] - sc[29] * x1101 - sc[2] * x3859 -
    sc[6] * x4793 + 24000000.0 * sc_qss[2] * x275 + x10162 + x10277 -
    x1155 * x2513 - 42200000.0 * x1440 * x868 + x1461 * x2750 - x1461 * x5656 -
    x1461 * x7108 - x1461 * x9644 - x1471 * x2750 + x1471 * x5656 +
    x1471 * x7108 + x1471 * x9644 - x194 * x2512 + x2479 * x893 + x2513 * x447 -
    x2527 * x3869 - x2528 * x427 + x2619 * x427 - 0.0698 * x2736 + x6277 +
    24000000.0 * x763 - 1000000.0 * x942 + x9948 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x1530 + x1540) +
    (x2528 * x436 - x2619 * x436) * (x1899 - x1900) +
    (-x2479 * x51 - x2533 * x51) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[560] =
    20000.0 * sc[13] * x264 + sc[13] * x609 + 140000.0 * sc[13] * x698 +
    sc[13] * x8664 + sc[13] * x8667 - 1000000.0 * sc[16] * x1059 +
    1000000.0 * sc[16] * x1060 - 24000000.0 * sc[16] * x264 - sc[16] * x9924 -
    x1102 * x1157 + x1102 * x552 + x1157 * x2513 - x1157 * x2614 +
    x1476 * x2750 - x1476 * x5656 - x1476 * x7108 - x1476 * x9644 +
    x1504 * x2479 + x1504 * x2533 - x2513 * x552 - x2528 * x422 + x2614 * x552 +
    x2619 * x422 - x2750 * x99 + x5656 * x99 + x7108 * x99 -
    x8338 * (3.3292 * x8339 + 23.78 * x8360) +
    9306454530.10164 * x8346 * x8350 - 9306454530.10164 * x8346 * x8367 -
    752399200.0 * x8353 * x8356 + 752399200.0 * x8353 * x8371 +
    x8364 * (3.3292 * x8339 + 23.78 * x8360) + x9644 * x99 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x301 - x527) +
    (x2528 * x436 - x2619 * x436) * (x1059 - x1060) +
    (-x2479 * x51 - x2533 * x51) * (x465 - x475 + (-x413) * (x301 - x527)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[592] =
    731600000.0 * sc[13] * x8651 + 260000.0 * sc[13] * x8654 + sc[14] * x9274 -
    1000000.0 * sc[16] * x1068 + 1000000.0 * sc[16] * x33 + sc[19] * x5139 +
    x10162 + x10165 + x1102 * x1429 - x1102 * x1438 - x1429 * x2513 +
    x1429 * x2614 + x1438 * x2513 - x1438 * x2614 + x149 * x194 +
    x1494 * x2750 - x1494 * x5656 - x1494 * x7108 - x1494 * x9644 -
    x1502 * x2750 + x1502 * x5656 + x1502 * x7108 + x1502 * x9644 -
    x2528 * x398 + x2619 * x398 + x3797 +
    180000.0 * x3869 * exp(-4139.46029290962 * invT) + x8325 + x8382 + x9985 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x250 - x469) +
    (x2528 * x436 - x2619 * x436) * (x1068 - x33) +
    (-x2479 * x51 - x2533 * x51) * (x254 - x67 + (-x413) * (x250 - x469)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[624] =
    140000.0 * sc[13] * x1021 + 20000.0 * sc[13] * x714 +
    sc[13] * x8336 * x8370 - 1000000.0 * sc[16] * x1088 - sc[16] * x5079 +
    1000000.0 * sc[16] * x684 - 24000000.0 * sc[16] * x714 -
    74850000.0 * sc[16] * x9927 + sc[18] * x5139 + x10020 + x10162 +
    x1102 * x1442 - x1102 * x1448 - x1442 * x2513 + x1442 * x2614 +
    x1448 * x2513 - x1448 * x2614 + x1517 * x2750 - x1517 * x5656 -
    x1517 * x7108 - x1517 * x9644 - x1524 * x2750 + x1524 * x5656 +
    x1524 * x7108 + x1524 * x9644 + x2479 * x49 - x2528 * x425 + x2533 * x49 +
    x2619 * x425 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x581 + x599) +
    (x2528 * x436 - x2619 * x436) * (x1088 - x684) +
    (-x2479 * x51 - x2533 * x51) * (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[656] =
    20000.0 * sc[13] * x273 + sc[13] * x8673 +
    24000000.0 * sc[15] * x723 * x725 - 24000000.0 * sc[16] * x273 + x10163 +
    x10308 - x1102 * x1467 + x1102 * x196 + x1467 * x2513 + x1527 * x2750 -
    x1527 * x5656 - x1527 * x7108 - x1527 * x9644 - x196 * x2513 +
    x2479 * x586 - x2750 * x864 + 6600000.0 * x318 * x319 * x868 +
    x5656 * x864 + x7108 * x864 + x8382 + x864 * x9644 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x659 + x670) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[688] =
    140000.0 * sc[13] * x1154 + 20000.0 * sc[13] * x539 + sc[15] * x6222 -
    1000000.0 * sc[16] * x1087 + 1000000.0 * sc[16] * x1100 -
    24000000.0 * sc[16] * x539 - x1102 * x1470 + x1102 * x197 + x1133 * x2479 +
    x1133 * x2533 - x1196 * x2750 + x1196 * x5656 + x1196 * x7108 +
    x1196 * x9644 + x1470 * x2513 - x1470 * x2614 - x197 * x2513 +
    x197 * x2614 + x2750 * x311 - x311 * x5656 - x311 * x7108 - x311 * x9644 -
    x8338 * (0.6104 * x8339 + 4.36 * x8360) + 1706313782.64269 * x8346 * x8350 -
    1706313782.64269 * x8346 * x8367 - 137950400.0 * x8353 * x8356 +
    137950400.0 * x8353 * x8371 + x8364 * (0.6104 * x8339 + 4.36 * x8360) +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x589 + x855) +
    (x2528 * x436 - x2619 * x436) * (x1087 - x1100) +
    (-x2479 * x51 - x2533 * x51) * (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[720] =
    140000.0 * sc[13] * x707 - 140000.0 * sc[16] * x693 + x10163 + x10165 +
    x1102 * x1484 - x1102 * x1490 - x1484 * x2513 + x1484 * x2614 +
    x1490 * x2513 - x1490 * x2614 - x2750 * x445 + x2750 * x450 + x445 * x5656 +
    x445 * x7108 + x445 * x9644 - x450 * x5656 - x450 * x7108 - x450 * x9644 +
    x8325 + (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x971 - x980) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[752] =
    -1000000.0 * sc[16] * x1131 - 800000.0 * sc[16] + x10165 + x10222 +
    x1102 * x1499 - x1102 * x1513 - x1499 * x2513 + x1499 * x2614 +
    x1513 * x2513 - x1513 * x2614 - x2750 * x348 + x2750 * x468 + x348 * x5656 +
    x348 * x7108 + x348 * x9644 - x468 * x5656 - x468 * x7108 - x468 * x9644 +
    x8325 + (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x949 - x996) +
    (x2528 * x436 - x2619 * x436) * (x1131 - x1152) +
    (-x2479 * x51 - x2533 * x51) * (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[784] =
    -9260000.0 * sc[16] + x10163 + x10165 - x1102 * x1492 + x1102 * x646 +
    x1492 * x2513 - x1492 * x2614 + x217 * x2750 - x217 * x5656 - x217 * x7108 -
    x217 * x9644 - x2513 * x646 + x2614 * x646 - x2750 * x368 + x368 * x5656 +
    x368 * x7108 + x368 * x9644 + x8325 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x89 + x985) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[816] =
    x10163 + x10165 + x10167 + x10169 + x10171 + x10175 + x1102 * x1535 -
    x1535 * x2513 + x1535 * x2614 - x2750 * x655 + x5649 + x5656 * x655 +
    x655 * x7108 + x655 * x9644 + x7111 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1055 - x991) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[848] =
    -1000000.0 * sc[16] * x1139 + x10165 + x10222 + x1102 * x549 -
    x1102 * x550 - x2513 * x549 + x2513 * x550 + x2614 * x549 - x2614 * x550 -
    x2750 * x371 + x2750 * x555 + x371 * x5656 + x371 * x7108 + x371 * x9644 -
    x555 * x5656 - x555 * x7108 - x555 * x9644 + x8325 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x544 + x815) +
    (x2528 * x436 - x2619 * x436) * (x1139 - x1152) +
    (-x2479 * x51 - x2533 * x51) * (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[880] =
    -1000000.0 * sc[16] * x1143 - sc[16] * x7645 - 5000000.0 * sc[16] + x10165 +
    x10167 + x10177 + x10222 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1104 - x991) +
    (x2528 * x436 - x2619 * x436) * (x1143 - x1152) +
    (-x2479 * x51 - x2533 * x51) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[912] =
    -1000000.0 * sc[16] * x1092 + x10165 + x10167 + x10177 + x10222 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x1104 - x991) +
    (x2528 * x436 - x2619 * x436) * (x1092 - x1152) +
    (-x2479 * x51 - x2533 * x51) * (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[944] =
    sc[13] * x8646 + 5000000.0 * sc[15] * x423 * x9898 -
    1000000.0 * sc[16] * x1080 - sc[16] * x1101 + x10165 + x10167 + x10169 +
    x10171 + x10175 + x10222 + x1102 * x553 + x1169 * x2528 - x1169 * x2619 -
    x2513 * x553 + x2614 * x553 - x2750 * x372 + x372 * x5656 + x372 * x7108 +
    x372 * x9644 + x5649 + x7111 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (x647 - x991) +
    (x2528 * x436 - x2619 * x436) * (x1080 - x1152) +
    (-x2479 * x51 - x2533 * x51) * (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[976] =
    x10163 + x10165 + x10167 + x10177 + x8382 +
    (-x1102 * x441 + x2513 * x441 - x2614 * x441) * (-x649 + x675) +
    (x2528 * x436 - x2619 * x436) * (x509) +
    (-x2479 * x51 - x2533 * x51) * (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-1.34e-12 * sc[13] * x1468 * exp(x2463) +
     4.22e-5 * sc[16] * x1440 * x1468 - x2415 - x2604) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-140000.0 * sc[13] * x104 + x1102 * x442 - x2513 * x442 + x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-20000.0 * sc[13] * x275 - 140000.0 * sc[13] * x279 +
     24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[17] =
    x10351 + x10352 + x10355 + x10357 + 2960.0 * x2708 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1104 - x991) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[49] =
    -12000000.0 * sc[13] * x1134 + 12000000.0 * sc[13] * x1161 +
    30200000.0 * sc[15] * x1062 - 30200000.0 * sc[15] * x1106 -
    30110000.0 * sc[15] * x1127 + 30110000.0 * sc[15] * x1159 +
    5000000.0 * sc[15] * x1180 + sc[15] * x816 + 16000000.0 * sc[19] * x1180 +
    x10345 - x1062 * x2585 + x1106 * x2585 + x1117 * x2608 + x1127 * x2756 +
    x1134 * x2474 + x1134 * x2630 + x1138 * x7693 - x1159 * x2756 -
    x1160 * x2599 - x1161 * x2474 - x1161 * x2630 - x1162 * x7693 +
    x2599 * x472 - x272 * x754 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1138 + x1162) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[81] =
    -12000000.0 * sc[13] * x1211 + 12000000.0 * sc[13] * x1242 +
    30200000.0 * sc[15] * x1121 + 5000000.0 * sc[15] * x1133 -
    30200000.0 * sc[15] * x1156 + 30110000.0 * sc[15] * x1197 -
    30110000.0 * sc[15] * x1205 + 16000000.0 * sc[19] * x1133 + x10344 -
    x1121 * x2585 + x1154 * x2608 + x1156 * x2585 - x1182 * x754 -
    x1197 * x2756 + x1205 * x2756 + x1211 * x2474 + x1211 * x2630 +
    x1212 * x7693 - x1214 * x6716 - x1234 * x2599 - x1242 * x2474 -
    x1242 * x2630 - x1243 * x7693 - x2593 * x420 + x2599 * x36 + x3881 +
    x535 * x6716 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1212 + x1243) +
    (x2593 * x436) * (x1214 - x535) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[113] =
    12000000.0 * sc[13] * x1249 + 30200000.0 * sc[15] * x1170 +
    30110000.0 * sc[15] * x340 + sc[15] * x4276 + x10351 + x10355 -
    x1170 * x2585 - x1248 * x2599 - x1249 * x2474 - x1249 * x2630 -
    x1250 * x7693 - x2756 * x340 + x5644 + x6730 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1250 - x991) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[145] =
    x10351 + x10352 + x10355 + x10357 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1104 - x991) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[177] =
    12000000.0 * sc[13] * x1257 + 30110000.0 * sc[15] * x1051 +
    5000000.0 * sc[15] * x1180 + 30200000.0 * sc[15] * x1183 +
    16000000.0 * sc[19] * x1180 + x10345 + x10350 + x10355 - x1051 * x2756 -
    x1183 * x2585 - x1256 * x2599 - x1257 * x2474 - x1257 * x2630 -
    x1258 * x7693 + x5644 + x6730 - x754 * x757 + x9578 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1258 - x991) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[209] =
    -12000000.0 * sc[13] * x1275 + 12000000.0 * sc[13] * x1288 +
    5000000.0 * sc[15] * x1209 + 30200000.0 * sc[15] * x1227 -
    30110000.0 * sc[15] * x1233 - 30200000.0 * sc[15] * x1245 +
    30110000.0 * sc[15] * x1264 + 16000000.0 * sc[19] * x1209 + x1223 * x6716 -
    x1225 * x6716 - x1227 * x2585 + x1233 * x2756 + x1245 * x2585 -
    x1262 * x754 - x1264 * x2756 + x1272 * x2599 + x1275 * x2474 +
    x1275 * x2630 + x1276 * x7693 - x1288 * x2474 - x1288 * x2630 -
    x1289 * x7693 - x2593 * x416 - x2599 * x379 + x2608 * x70 + x4830 +
    88000000000.0 * x9654 - 88000000000.0 * x9657 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1276 + x1289) +
    (x2593 * x436) * (-x1223 + x1225) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[241] =
    -12000000.0 * sc[13] * x1310 + 12000000.0 * sc[13] * x1322 +
    5000000.0 * sc[15] * x1237 + 30200000.0 * sc[15] * x1254 -
    30200000.0 * sc[15] * x1260 - 30110000.0 * sc[15] * x1268 +
    30110000.0 * sc[15] * x1284 + sc[15] * x5458 - sc[17] * x1254 * x2584 +
    16000000.0 * sc[19] * x1237 + x10345 + x1117 * x2608 + x1260 * x2585 +
    x1268 * x2756 - x1284 * x2756 + x1287 * x2599 - x1295 * x7693 -
    x1303 * x754 + x1310 * x2474 + x1310 * x2630 + x1311 * x7693 -
    x1319 * x2599 - x1322 * x2474 - x1322 * x2630 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1295 - x1311) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[273] =
    -12000000.0 * sc[13] * x1361 + 12000000.0 * sc[13] * x664 -
    30110000.0 * sc[15] * x1306 + 5000000.0 * sc[15] * x1309 +
    30110000.0 * sc[15] * x1314 + 16000000.0 * sc[19] * x1309 - x1263 * x2585 +
    x1279 * x2585 - x1286 * x6716 + x1306 * x2756 - x1314 * x2756 -
    x1315 * x754 + x1356 * x2599 + x1361 * x2474 + x1361 * x2630 +
    x1362 * x7693 - x2474 * x664 - x2599 * x333 + x2608 * x701 - x2630 * x664 +
    x414 + x523 * x6716 + x5940 - x650 * x7693 + 77000000000.0 * x9654 -
    77000000000.0 * x9657 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1362 + x650) +
    (x2593 * x436) * (x1286 - x523) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[305] =
    -12000000.0 * sc[13] * x1370 + 12000000.0 * sc[13] * x1396 +
    30200000.0 * sc[15] * x1298 - 30200000.0 * sc[15] * x1304 -
    30110000.0 * sc[15] * x1351 + 30110000.0 * sc[15] * x1355 + sc[15] * x6846 +
    x10378 - x1298 * x2585 + x1304 * x2585 + x1351 * x2756 - x1355 * x2756 +
    x1370 * x2474 + x1370 * x2630 + x1391 * x7693 - x1395 * x2599 -
    x1396 * x2474 - x1396 * x2630 - x1398 * x7693 + x2599 * x666 - x6716 * x83 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1391 + x1398) +
    (x2593 * x436) * (-x1152 + x83) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[337] =
    12000000.0 * sc[13] * x1015 - 12000000.0 * sc[13] * x1406 +
    30110000.0 * sc[15] * x1113 + 30200000.0 * sc[15] * x1317 -
    30200000.0 * sc[15] * x1328 - 30110000.0 * sc[15] * x331 -
    30110000.0 * sc[17] * x838 - x1015 * x2474 - x1015 * x2630 + x10345 +
    x10348 - x1113 * x2756 + x1117 * x2608 - x1124 * x7693 + x1189 * x2599 -
    x1317 * x2585 + x1328 * x2585 + x1406 * x2474 + x1406 * x2630 +
    x1407 * x7693 - x2599 * x308 + x2756 * x331 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1124 - x1407) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[369] =
    x10350 + x10352 + x10355 + x10357 + x10378 - x121 * x6716 + x7625 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1104 - x991) +
    (x2593 * x436) * (-x1152 + x121) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[401] =
    -12000000.0 * sc[13] * x1424 + 12000000.0 * sc[13] * x1433 +
    5000000.0 * sc[15] * x1320 + 30200000.0 * sc[15] * x1343 -
    30110000.0 * sc[15] * x1388 + 30110000.0 * sc[15] * x1404 -
    30200000.0 * sc[15] * x203 + sc[15] * x8000 + 25010000.0 * sc[15] -
    sc[17] * x3996 + 16000000.0 * sc[19] * x1320 + x10344 - x1341 * x754 -
    x1343 * x2585 + x1388 * x2756 - x1404 * x2756 + x1423 * x2599 +
    x1424 * x2474 + x1424 * x2630 + x1425 * x7693 - x1431 * x2599 -
    x1433 * x2474 - x1433 * x2630 - x1434 * x7693 + x203 * x2585 +
    x2593 * x771 + x2608 * x691 - x671 * x6716 + x6716 * x680 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1425 + x1434) +
    (x2593 * x436) * (x671 - x680) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[433] =
    12000000.0 * sc[13] * x1443 - 12000000.0 * sc[13] * x1454 +
    30110000.0 * sc[15] * x1418 + 30200000.0 * sc[15] * x267 -
    30110000.0 * sc[15] * x298 + 5000000.0 * sc[15] * x38 -
    30200000.0 * sc[15] * x621 - sc[17] * x609 - sc[17] * x8664 -
    sc[17] * x8667 + 16000000.0 * sc[19] * x38 + x10344 - x1096 * x6716 +
    x1172 * x2608 + x1270 * x6716 - x1371 * x754 - x1418 * x2756 -
    x1436 * x7693 - x1443 * x2474 - x1443 * x2630 + x1451 * x2599 +
    x1454 * x2474 + x1454 * x2630 + x1455 * x7693 - x1462 * x2599 -
    x2585 * x267 + x2585 * x621 + x2593 * x682 + x2756 * x298 +
    12000000.0 * x65 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1436 - x1455) +
    (x2593 * x436) * (x1096 - x1270) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-x2608 * x279 + x275 * x754) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[465] =
    -12000000.0 * sc[13] * x1463 + 12000000.0 * sc[13] * x397 +
    5000000.0 * sc[15] * x1377 + 30200000.0 * sc[15] * x1386 -
    30200000.0 * sc[15] * x1392 + 30110000.0 * sc[15] * x1420 -
    30110000.0 * sc[15] * x1422 - 0.03973 * sc[17] * x9280 +
    16000000.0 * sc[19] * x1377 + x10344 + x1173 * x2608 - x1386 * x2585 +
    x1392 * x2585 - x1420 * x2756 + x1422 * x2756 - x1428 * x754 +
    x1463 * x2474 + x1463 * x2630 - x1475 * x2599 + x1477 * x2599 +
    x1480 * x7693 - x1489 * x7693 - x1889 * x6716 + x1890 * x6716 -
    x2474 * x397 + x2593 * x653 - x2630 * x397 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1480 + x1489) +
    (x2593 * x436) * (x1889 - x1890) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[497] =
    sc[12] * x8000 + 25010000.0 * sc[12] - 12000000.0 * sc[13] * x1488 +
    12000000.0 * sc[13] * x1505 + 30200000.0 * sc[15] * x1400 -
    30200000.0 * sc[15] * x1401 - 30110000.0 * sc[15] * x1445 +
    30110000.0 * sc[15] * x1450 + 5000000.0 * sc[15] * x1478 + sc[16] * x8755 +
    sc[16] * x8757 + sc[16] * x8759 - sc[17] * x9878 +
    16000000.0 * sc[19] * x1478 + sc[19] * x164 * exp(-2.0 * logT) +
    sc[1] * x816 + sc[20] * x9915 + 7500000.0 * sc[22] * x2606 +
    sc[29] * x9903 + sc[3] * x4276 + sc[7] * x5458 + sc[9] * x6846 -
    5000000.0 * sc_qss[1] * x51 + x10344 - x1400 * x2585 + x1401 * x2585 +
    x1445 * x2756 - x1450 * x2756 + x1488 * x2474 + x1488 * x2630 -
    x1498 * x754 + x1503 * x2599 - x1505 * x2474 - x1505 * x2630 +
    x1508 * x7693 - x169 * x7693 - x1894 * x6716 + x1895 * x6716 +
    30200000.0 * x194 - x2593 * x418 - x2599 * x383 +
    10000000.0 * x2606 * x5155 + x2608 * x278 + 2960.0 * x2733 + x4042 + x5055 +
    x7641 + 30110000.0 * x868 - 5000000.0 * x908 + 0.07946 * x9320 + x9874 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1508 + x169) +
    (x2593 * x436) * (x1894 - x1895) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[529] =
    -12000000.0 * sc[13] * x1519 + 12000000.0 * sc[13] * x1539 +
    30200000.0 * sc[15] * x1155 - 30110000.0 * sc[15] * x1461 +
    30110000.0 * sc[15] * x1471 - 30200000.0 * sc[15] * x447 + sc[15] * x8755 +
    sc[15] * x8757 + sc[15] * x8759 + 5000000.0 * sc[15] * x893 -
    sc[17] * x9924 + 16000000.0 * sc[19] * x893 + x102 * x2608 + x10344 -
    x1155 * x2585 + x1461 * x2756 - x1471 * x2756 + x1519 * x2474 +
    x1519 * x2630 + x1530 * x7693 - x1537 * x2599 - x1539 * x2474 -
    x1539 * x2630 - x1540 * x7693 - x1899 * x6716 + x1900 * x6716 +
    x2585 * x447 - x2593 * x427 + x2599 * x872 - x486 * x754 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x1530 + x1540) +
    (x2593 * x436) * (x1899 - x1900) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[561] =
    -30110000.0 * sc[10] * x838 - sc[12] * x3996 + 12000000.0 * sc[13] * x465 -
    12000000.0 * sc[13] * x475 - sc[13] * x609 - sc[13] * x8664 -
    sc[13] * x8667 - 0.03973 * sc[14] * x9280 - 30110000.0 * sc[15] * x1476 +
    5000000.0 * sc[15] * x1504 - sc[15] * x9878 + 30110000.0 * sc[15] * x99 -
    sc[16] * x9924 + 16000000.0 * sc[19] * x1504 - sc[19] * x5100 -
    5000000.0 * sc[20] * x889 - sc[22] * x56 - sc[24] * x4425 - sc[27] * x7650 -
    x1011 * x2777 - x1059 * x6716 + x1060 * x6716 + x1157 * x2585 +
    x1476 * x2756 - 3.6 * x1495 * x868 + x1528 * x2599 - x164 * x9656 -
    x194 * x2584 - x207 * x7692 - x2474 * x465 + x2474 * x475 - x2585 * x552 -
    x2592 * x3869 - x2593 * x422 - x2598 * x388 - x2599 * x387 + x2608 * x698 -
    x2630 * x465 + x2630 * x475 - x264 * x754 - x2756 * x99 -
    16000000.0 * x3 * x65 - x301 * x7693 + x527 * x7693 -
    25010000.0 * x58 * x65 + x6321 - x6715 * x942 + 277200000000.0 * x9654 -
    277200000000.0 * x9657 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x301 - x527) +
    (x2593 * x436) * (x1059 - x1060) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-x2608 * x279 + x275 * x754) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[593] =
    12000000.0 * sc[13] * x254 - 12000000.0 * sc[13] * x67 +
    30200000.0 * sc[15] * x1429 - 30200000.0 * sc[15] * x1438 -
    30110000.0 * sc[15] * x1494 + 30110000.0 * sc[15] * x1502 + sc[19] * x9987 +
    x10344 + x10348 - x1068 * x6716 - x1429 * x2585 + x1438 * x2585 +
    x1494 * x2756 - x1502 * x2756 - x2474 * x254 + x2474 * x67 - x250 * x7693 -
    x254 * x2630 - x2593 * x398 + x2599 * x459 - x2599 * x519 + x2630 * x67 +
    x33 * x6716 + x469 * x7693 + x9578 + x9985 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x250 - x469) +
    (x2593 * x436) * (x1068 - x33) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[625] =
    -12000000.0 * sc[13] * x28 + 12000000.0 * sc[13] * x597 +
    30200000.0 * sc[15] * x1442 - 30200000.0 * sc[15] * x1448 -
    30110000.0 * sc[15] * x1517 + 30110000.0 * sc[15] * x1524 +
    sc[15] * x164 * exp(-2.0 * logT) + 5000000.0 * sc[15] * x49 -
    sc[17] * x5100 + sc[18] * x9987 + 16000000.0 * sc[19] * x49 -
    16000000.0 * sc_qss[1] * x51 + x1021 * x2608 + x10344 - x1088 * x6716 -
    x1442 * x2585 + x1448 * x2585 + x1517 * x2756 - x1524 * x2756 +
    x2474 * x28 - x2474 * x597 - x2593 * x425 + x2599 * x362 - x2599 * x455 +
    x2630 * x28 - x2630 * x597 + x581 * x7693 - x599 * x7693 + x6716 * x684 -
    x714 * x754 - 16000000.0 * x908 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x581 + x599) +
    (x2593 * x436) * (x1088 - x684) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[657] =
    -12000000.0 * sc[13] * x493 + 12000000.0 * sc[13] * x604 -
    30200000.0 * sc[15] * x1467 - 30110000.0 * sc[15] * x1527 +
    30200000.0 * sc[15] * x196 + 5000000.0 * sc[15] * x586 +
    30110000.0 * sc[15] * x864 + sc[15] * x9915 - 5000000.0 * sc[17] * x889 +
    16000000.0 * sc[19] * x586 + x10345 + x1467 * x2585 + x1527 * x2756 -
    x196 * x2585 + x2474 * x493 - x2474 * x604 + x2599 * x534 - x2599 * x563 +
    x2630 * x493 - x2630 * x604 - x273 * x754 - x2756 * x864 + x659 * x7693 -
    x670 * x7693 + x9578 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x659 + x670) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-x2608 * x279 + x275 * x754) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[689] =
    -12000000.0 * sc[13] * x566 + 12000000.0 * sc[13] * x787 +
    5000000.0 * sc[15] * x1133 + 30110000.0 * sc[15] * x1196 -
    30200000.0 * sc[15] * x1470 + 30200000.0 * sc[15] * x197 -
    30110000.0 * sc[15] * x311 + 16000000.0 * sc[19] * x1133 - x1087 * x6716 +
    x1100 * x6716 + x1154 * x2608 - x1196 * x2756 + x1470 * x2585 -
    x197 * x2585 + x2474 * x566 - x2474 * x787 + x2599 * x481 - x2599 * x561 +
    x2630 * x566 - x2630 * x787 + x2756 * x311 - x539 * x754 + x589 * x7693 -
    x7693 * x855 + 158400000000.0 * x9654 - 158400000000.0 * x9657 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x589 + x855) +
    (x2593 * x436) * (x1087 - x1100) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-x2608 * x279 + x275 * x754) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[721] =
    -12000000.0 * sc[13] * x68 + 12000000.0 * sc[13] * x688 +
    30200000.0 * sc[15] * x1484 - 30200000.0 * sc[15] * x1490 +
    7500000.0 * sc[15] * x2606 + 30110000.0 * sc[15] * x445 -
    30110000.0 * sc[15] * x450 - sc[17] * x56 + x10345 + x10348 -
    x1484 * x2585 + x1490 * x2585 + x2474 * x68 - x2474 * x688 - x2599 * x369 +
    x2599 * x390 + x2608 * x707 + x2630 * x68 - x2630 * x688 - x2756 * x445 +
    x2756 * x450 - x7693 * x971 + x7693 * x980 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x971 - x980) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[753] =
    12000000.0 * sc[13] * x1009 - 12000000.0 * sc[13] * x1081 +
    30200000.0 * sc[15] * x1499 - 30200000.0 * sc[15] * x1513 +
    30110000.0 * sc[15] * x348 - 30110000.0 * sc[15] * x468 - x1004 * x2599 -
    x1009 * x2474 - x1009 * x2630 + x10378 + x1081 * x2474 + x1081 * x2630 -
    x1131 * x6716 - x1499 * x2585 + x1513 * x2585 + x2599 * x626 -
    x2756 * x348 + x2756 * x468 - x7693 * x949 + x7693 * x996 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x949 - x996) +
    (x2593 * x436) * (x1131 - x1152) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[785] =
    -12000000.0 * sc[13] * x1963 + 12000000.0 * sc[13] * x306 -
    30200000.0 * sc[15] * x1492 - 30110000.0 * sc[15] * x217 +
    30110000.0 * sc[15] * x368 + 30200000.0 * sc[15] * x646 - sc[17] * x4425 +
    x1031 * x2599 + x10345 + x10348 - x1042 * x2599 + x1492 * x2585 +
    x1963 * x2474 + x1963 * x2630 + x217 * x2756 - x2474 * x306 - x2585 * x646 -
    x2630 * x306 - x2756 * x368 + x7693 * x89 - x7693 * x985 + x9578 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x89 + x985) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-x2608 * x279 + x275 * x754) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[817] =
    12000000.0 * sc[13] * x359 + 30200000.0 * sc[15] * x1535 +
    30110000.0 * sc[15] * x655 + x10351 + x10355 - x1055 * x7693 -
    x1535 * x2585 - x2474 * x359 - x2599 * x336 - x2630 * x359 - x2756 * x655 +
    x5644 + x6730 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1055 - x991) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[849] =
    -12000000.0 * sc[13] * x575 + 12000000.0 * sc[13] * x678 +
    30110000.0 * sc[15] * x371 + 30200000.0 * sc[15] * x549 -
    30200000.0 * sc[15] * x550 - 30110000.0 * sc[15] * x555 + x10378 -
    x1139 * x6716 + x2474 * x575 - x2474 * x678 - x2585 * x549 + x2585 * x550 +
    x2599 * x482 - x2599 * x567 + x2630 * x575 - x2630 * x678 - x2756 * x371 +
    x2756 * x555 + x544 * x7693 - x7693 * x815 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x544 + x815) +
    (x2593 * x436) * (x1139 - x1152) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-x2608 * x279 + x275 * x754) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[881] =
    -sc[17] * x7650 + x10350 + x10352 + x10355 + x10357 + x10378 -
    x1143 * x6716 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1104 - x991) +
    (x2593 * x436) * (x1143 - x1152) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[913] =
    x10350 + x10352 + x10355 + x10357 + x10378 - x1092 * x6716 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x1104 - x991) +
    (x2593 * x436) * (x1092 - x1152) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[945] =
    12000000.0 * sc[13] * x1018 + 30110000.0 * sc[15] * x372 +
    30200000.0 * sc[15] * x553 + sc[15] * x9903 - x1018 * x2474 -
    x1018 * x2630 + x10350 + x10355 + x10378 - x1080 * x6716 + x1169 * x2593 -
    x2585 * x553 - x2599 * x479 - x2756 * x372 + x5644 - x647 * x7693 + x6730 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (x647 - x991) +
    (x2593 * x436) * (x1080 - x1152) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-x2608 * x279 + x275 * x754) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[977] =
    12000000.0 * sc[13] * x402 - 12000000.0 * sc[13] * x590 + x10351 + x10352 -
    x2474 * x402 + x2474 * x590 - x2630 * x402 + x2630 * x590 + x649 * x7693 -
    x675 * x7693 +
    (-12000000.0 * sc[13] * x413 - 30200000.0 * sc[15] * x441 + x2474 * x413 +
     x2585 * x441 + x2630 * x413) *
      (-x649 + x675) +
    (x2593 * x436) * (x509) +
    (-5000000.0 * sc[15] * x51 - 16000000.0 * sc[19] * x51 + x2599 * x396) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-3.011e-5 * sc[15] * x1468 + 3.6e-12 * sc[17] * x1468 * x1495) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (30200000.0 * sc[15] * x442 - x104 * x2608 - x2585 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-x2608 * x279 + x275 * x754) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[18] =
    x10434 + 0.0698 * x2704 + (x2614 * x441) * (x1104 - x991) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[50] = x10432 - x1062 * x2614 + x1106 * x2614 +
          (x2614 * x441) * (-x1138 + x1162) + (x2619 * x436) * (x509) +
          (-x2614 * x442) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[82] = sc[16] * x3859 + x10432 - x1121 * x2614 + x1156 * x2614 -
          x2619 * x420 + (x2614 * x441) * (-x1212 + x1243) +
          (x2619 * x436) * (x1214 - x535) +
          (-x2614 * x442) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[114] =
    x10432 - x1170 * x2614 + x2614 * x545 + (x2614 * x441) * (x1250 - x991) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) * (x340 - x568 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1074 + x1248 +
                          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[146] =
    x10434 + (x2614 * x441) * (x1104 - x991) + (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[178] =
    x10432 - x1183 * x2614 + x2614 * x545 + (x2614 * x441) * (x1258 - x991) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) * (x1051 - x568 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1074 + x1256 +
                          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[210] = sc[16] * x4793 - x1227 * x2614 + x1245 * x2614 - x2619 * x416 +
           727.94594594594605 * x9585 * x9617 -
           201000.0 * x9586 * x9588 * (4.0 * x9591 + 0.56 * x9593) +
           201000.0 * x9586 * x9603 * (4.0 * x9591 + 0.56 * x9593) +
           402000.0 * x9588 - 402000.0 * x9603 - 727.94594594594605 * x9615 +
           (x2614 * x441) * (-x1276 + x1289) +
           (x2619 * x436) * (-x1223 + x1225) +
           (-x2614 * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[242] = x10432 - x1254 * x2614 + x1260 * x2614 +
           (x2614 * x441) * (x1295 - x1311) + (x2619 * x436) * (x509) +
           (-x2614 * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[274] = x10212 - x1263 * x2614 + x1279 * x2614 +
           636.95270270270305 * x9585 * x9617 - 201000.0 * x9588 * x9759 +
           351750.0 * x9588 + 201000.0 * x9603 * x9759 - 351750.0 * x9603 -
           636.95270270270305 * x9615 + (x2614 * x441) * (-x1362 + x650) +
           (x2619 * x436) * (x1286 - x523) +
           (-x2614 * x442) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[306] = x10432 - x1298 * x2614 + x1304 * x2614 +
           (x2614 * x441) * (-x1391 + x1398) + (x2619 * x436) * (-x1152 + x83) +
           (-x2614 * x442) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[338] = x10432 - x1317 * x2614 + x1328 * x2614 +
           (x2614 * x441) * (x1124 - x1407) + (x2619 * x436) * (x509) +
           (-x2614 * x442) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[370] =
    x10434 + (x2614 * x441) * (x1104 - x991) +
    (x2619 * x436) * (-x1152 + x121) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[402] = x10432 - x1343 * x2614 + x203 * x2614 + x2619 * x771 - x3990 +
           (x2614 * x441) * (-x1425 + x1434) + (x2619 * x436) * (x671 - x680) +
           (-x2614 * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[434] = -365800000.0 * sc[18] * x8651 - 130000.0 * sc[18] * x8654 + x10432 -
           x2614 * x267 + x2614 * x621 + x2619 * x682 +
           (x2614 * x441) * (x1436 - x1455) + (x2619 * x436) * (x1096 - x1270) +
           (-x2614 * x442) *
             (x1418 - x298 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1451 + x1462 +
                 (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[466] = -sc[18] * x9274 + x10432 - x1386 * x2614 + x1392 * x2614 +
           x2619 * x653 + (x2614 * x441) * (-x1480 + x1489) +
           (x2619 * x436) * (x1889 - x1890) +
           (-x2614 * x442) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[498] = 402000.0 * sc[15] * x9584 * x9587 * x9596 + sc[16] * x148 +
           sc[17] * x9878 + x10432 - x1400 * x2614 + x1401 * x2614 -
           x2619 * x418 - x9874 + (x2614 * x441) * (-x1508 + x169) +
           (x2619 * x436) * (x1894 - x1895) +
           (-x2614 * x442) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[530] = sc[15] * x148 + 260000.0 * sc[16] * exp(820.24316526169298 * invT) +
           731600000.0 * sc[16] * exp(-6038.59998965664 * invT) +
           sc[17] * x9924 + 1000000.0 * sc[20] * x5159 + sc[29] * x1101 +
           sc[2] * x3859 + sc[6] * x4793 + x10432 - x1155 * x2614 +
           x2614 * x447 - x2619 * x427 + 0.0698 * x2736 +
           (x2614 * x441) * (-x1530 + x1540) +
           (x2619 * x436) * (x1899 - x1900) +
           (-x2614 * x442) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[562] =
    sc[15] * x9878 + sc[16] * x9924 + x1157 * x2614 - x2614 * x552 -
    x2619 * x422 + 2183.8378378378402 * x9585 * x9617 -
    201000.0 * x9586 * x9588 * (12.0 * x9591 + 1.68 * x9593) +
    201000.0 * x9586 * x9603 * (12.0 * x9591 + 1.68 * x9593) +
    1206000.0 * x9588 - 1206000.0 * x9603 - 2183.8378378378402 * x9615 +
    (x2614 * x441) * (x301 - x527) + (x2619 * x436) * (x1059 - x1060) +
    (-x2614 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[594] =
    -201000.0 * refC * x9584 * x9596 * x9602 - 365800000.0 * sc[13] * x8651 -
    130000.0 * sc[13] * x8654 - sc[14] * x9274 - sc[19] * x5139 -
    sc[19] * x9987 + x10432 - x1429 * x2614 + x1438 * x2614 - x149 * x194 -
    x2619 * x398 - x3797 - 180000.0 * x3869 * exp(-4139.46029290962 * invT) -
    x9985 + (x2614 * x441) * (x250 - x469) + (x2619 * x436) * (x1068 - x33) +
    (-x2614 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[626] =
    -sc[18] * x5139 - sc[18] * x9987 + x10432 - x1442 * x2614 + x1448 * x2614 -
    x2619 * x425 + (x2614 * x441) * (-x581 + x599) +
    (x2619 * x436) * (x1088 - x684) +
    (-x2614 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[658] =
    1000000.0 * sc[16] * x5159 + x10432 + x1467 * x2614 - x196 * x2614 +
    (x2614 * x441) * (-x659 + x670) + (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[690] =
    x1470 * x2614 - x197 * x2614 + 1310.3027027026999 * x9585 * x9617 -
    201000.0 * x9586 * x9588 * (7.2 * x9591 + 1.008 * x9593) +
    201000.0 * x9586 * x9603 * (7.2 * x9591 + 1.008 * x9593) +
    723600.0 * x9588 - 723600.0 * x9603 - 1310.3027027026999 * x9615 +
    (x2614 * x441) * (-x589 + x855) + (x2619 * x436) * (x1087 - x1100) +
    (-x2614 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[722] =
    x10432 - x1484 * x2614 + x1490 * x2614 + (x2614 * x441) * (x971 - x980) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[754] =
    x10432 - x1499 * x2614 + x1513 * x2614 + (x2614 * x441) * (x949 - x996) +
    (x2619 * x436) * (x1131 - x1152) +
    (-x2614 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[786] =
    x10432 + x1492 * x2614 - x2614 * x646 + (x2614 * x441) * (-x89 + x985) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) * (-x217 + x368 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1031 + x1042 +
                          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[818] =
    x10432 - x1535 * x2614 + x2614 * x545 + (x2614 * x441) * (x1055 - x991) +
    (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[850] =
    x10432 - x2614 * x549 + x2614 * x550 + (x2614 * x441) * (-x544 + x815) +
    (x2619 * x436) * (x1139 - x1152) +
    (-x2614 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[882] =
    x10434 + (x2614 * x441) * (x1104 - x991) +
    (x2619 * x436) * (x1143 - x1152) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[914] =
    x10434 + (x2614 * x441) * (x1104 - x991) +
    (x2619 * x436) * (x1092 - x1152) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[946] =
    sc[16] * x1101 + x10432 + x1169 * x2619 + x2614 * x545 - x2614 * x553 +
    (x2614 * x441) * (x647 - x991) + (x2619 * x436) * (x1080 - x1152) +
    (-x2614 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[978] =
    x10434 + (x2614 * x441) * (-x649 + x675) + (x2619 * x436) * (x509) +
    (-x2614 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[19] =
    x10471 + x10503 + x10537 + x10540 + x10546 + x10559 + 0.02094 * x2704 +
    888.0 * x2708 + 9.51e-14 * x2712 + 534000000.0 * x2714 - 5.362e-8 * x2719 +
    7.65e+26 * x2721 + 2.682e-5 * x2723 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1104 - x991) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[51] =
    1.4e+18 * refC * x2813 * x71 - 20000000.0 * sc[10] * x1134 +
    20000000.0 * sc[10] * x1161 + sc[12] * x854 - 28000000.0 * sc[13] * x1134 +
    28000000.0 * sc[13] * x1161 - 80000000.0 * sc[14] * x1138 +
    100000000.0 * sc[14] * x1160 + 80000000.0 * sc[14] * x1162 -
    100000000.0 * sc[14] * x472 - 120000000.0 * sc[19] * x1062 +
    120000000.0 * sc[19] * x1106 + 90000000.0 * sc[19] * x1127 -
    90000000.0 * sc[19] * x1159 - 100000000.0 * sc[19] * x1160 +
    100000000.0 * sc[19] * x472 - 70000000.0 * sc[6] * x1134 +
    70000000.0 * sc[6] * x1161 + x1038 * x1062 - x1038 * x1106 + x10470 +
    x10503 - x10508 * x1138 + x10508 * x1162 - x1052 * x1134 + x1052 * x1161 +
    x10566 + x10568 + x10569 + x10577 + x1062 * x2434 + x1062 * x2469 -
    x1062 * x2556 - x1062 * x2653 + x1062 * x491 - x1106 * x2434 -
    x1106 * x2469 + x1106 * x2556 + x1106 * x2653 - x1106 * x491 +
    x1127 * x2746 - x1127 * x7113 - x1134 * x2630 - x1138 * x4647 -
    x1138 * x6702 + x1138 * x7689 - x1159 * x2746 + x1159 * x7113 -
    x1160 * x2442 + x1160 * x995 + x1161 * x2630 + x1162 * x4647 +
    x1162 * x6702 - x1162 * x7689 + x225 * x2777 + x2442 * x472 - x2702 * x272 -
    x272 * x502 + x272 * x516 + x272 * x749 + x3806 + x4191 - x472 * x995 +
    x5700 + x5703 + x7164 + x987 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1138 + x1162) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[83] =
    -20000000.0 * sc[10] * x1211 + 20000000.0 * sc[10] * x1242 -
    28000000.0 * sc[13] * x1211 + 28000000.0 * sc[13] * x1242 -
    80000000.0 * sc[14] * x1212 + 100000000.0 * sc[14] * x1234 +
    80000000.0 * sc[14] * x1243 - 100000000.0 * sc[14] * x36 +
    30000000.0 * sc[15] * x1214 - 30000000.0 * sc[15] * x535 -
    120000000.0 * sc[19] * x1121 - 68000000.0 * sc[19] * x1133 -
    90000000.0 * sc[19] * x1154 + 120000000.0 * sc[19] * x1156 -
    90000000.0 * sc[19] * x1197 + 90000000.0 * sc[19] * x1205 -
    100000000.0 * sc[19] * x1234 + 100000000.0 * sc[19] * x36 + x1038 * x1121 -
    x1038 * x1156 - x10508 * x1212 + x10508 * x1243 - x1052 * x1211 +
    x1052 * x1242 + x10569 + x10583 + x10587 + x10591 + x10596 + x1121 * x2434 +
    x1121 * x2469 - x1121 * x2556 - x1121 * x2653 + x1121 * x491 -
    x1154 * x222 - x1156 * x2434 - x1156 * x2469 + x1156 * x2556 +
    x1156 * x2653 - x1156 * x491 - x1182 * x2702 - x1182 * x502 + x1182 * x516 +
    x1182 * x749 - x1197 * x2746 + x1197 * x7113 + x1205 * x2746 -
    x1205 * x7113 - x1211 * x2630 - x1212 * x6702 + x1212 * x7689 +
    x1214 * x4627 - x1214 * x6708 + x1214 * x7750 - x1234 * x2442 +
    x1242 * x2630 + x1243 * x6702 - x1243 * x7689 + x175 * x420 + x2442 * x36 +
    x245 + x262 - x2661 * x420 + x351 - x3874 + x4167 - x4627 * x535 +
    x535 * x6708 - x535 * x7750 + x5737 + x7180 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1212 + x1243) +
    (-x175 * x436 + x2661 * x436) * (x1214 - x535) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[115] =
    20000000.0 * sc[10] * x1249 + 40000000.0 * sc[12] * x1250 + sc[12] * x4301 +
    sc[12] * x4303 + 28000000.0 * sc[13] * x1249 + 30000000.0 * sc[14] * x1170 +
    100000000.0 * sc[14] * x1248 + 80000000.0 * sc[14] * x1250 +
    48000000.0 * sc[14] * x340 + 30000000.0 * sc[15] * x1249 +
    20000000.0 * sc[15] * x1250 - 120000000.0 * sc[19] * x1170 -
    100000000.0 * sc[19] * x1248 - 90000000.0 * sc[19] * x340 +
    70000000.0 * sc[6] * x1249 + x1038 * x1170 + x10471 + x10503 +
    x10508 * x1250 + x1052 * x1249 + x10537 + x10539 + x10542 + x10545 +
    x10548 + x10551 + x10553 + x1170 * x2434 + x1170 * x2469 - x1170 * x2556 -
    x1170 * x2653 + x1170 * x491 + x1170 * x93 - x1248 * x2442 + x1248 * x995 +
    x1249 * x2630 + x1250 * x4647 + x1250 * x6702 - x1250 * x7689 + x2452 -
    x2746 * x340 + x2810 + x2850 * x340 + x340 * x7113 -
    8000000000000000.0 * x346 + x4257 - x4287 + 80.0 * x4296 + x5414 + x5652 +
    x5659 + x5663 + x7698 + x9660 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1250 - x991) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[147] =
    -sc[19] * x4306 + x10471 + x10503 + x10537 + x10540 + x10546 + x10559 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1104 - x991) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[179] =
    20000000.0 * sc[10] * x1257 + 40000000.0 * sc[12] * x1258 +
    28000000.0 * sc[13] * x1257 + 48000000.0 * sc[14] * x1051 +
    30000000.0 * sc[14] * x1183 + 100000000.0 * sc[14] * x1256 +
    80000000.0 * sc[14] * x1258 + 30000000.0 * sc[15] * x1257 +
    20000000.0 * sc[15] * x1258 - 90000000.0 * sc[19] * x1051 -
    120000000.0 * sc[19] * x1183 - 100000000.0 * sc[19] * x1256 +
    50000000.0 * sc[1] * x1257 + 70000000.0 * sc[6] * x1257 + x1038 * x1183 +
    x10470 + x10503 + x10508 * x1258 - x1051 * x2746 + x1051 * x2850 +
    x1051 * x7113 + x1051 * x7761 + x1052 * x1257 + x10537 + x10539 + x10542 +
    x10545 + x10548 + x10551 + x10553 + x1183 * x2434 + x1183 * x2469 -
    x1183 * x2556 - x1183 * x2653 + x1183 * x491 + x1183 * x93 - x1256 * x2442 +
    x1256 * x995 + x1257 * x2630 + x1258 * x2743 + x1258 * x4647 +
    x1258 * x6702 - x1258 * x7689 + x2452 - x2702 * x757 + x2792 + x2810 -
    4.8e+16 * x346 - x502 * x757 + x516 * x757 + x5414 + x5652 + x5659 + x5663 +
    x660 * x757 + x749 * x757 + x7698 + x9660 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1258 - x991) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[211] =
    112480000.0 * refC * sc[17] * x4801 +
    3560000.0 * refC * x4632 * (sc[8] + x162) - 20000000.0 * sc[10] * x1275 +
    20000000.0 * sc[10] * x1288 + 90000000.0 * sc[10] * x860 + sc[12] * x3919 -
    100000000.0 * sc[14] * x1272 - 80000000.0 * sc[14] * x1276 +
    80000000.0 * sc[14] * x1289 + 100000000.0 * sc[14] * x379 -
    30000000.0 * sc[15] * x1223 + 30000000.0 * sc[15] * x1225 + sc[16] * x4793 -
    68000000.0 * sc[19] * x1209 - 120000000.0 * sc[19] * x1227 +
    90000000.0 * sc[19] * x1233 + 120000000.0 * sc[19] * x1245 -
    90000000.0 * sc[19] * x1264 + 100000000.0 * sc[19] * x1272 -
    100000000.0 * sc[19] * x379 - 90000000.0 * sc[19] * x70 +
    20000000.0 * sc[20] * x895 + 20000000.0 * sc[22] * x240 + sc[24] * x4314 +
    sc[27] * x4788 + 120000000.0 * sc[8] * x793 + x10494 - x10508 * x1276 +
    x10508 * x1289 - x1052 * x1275 + x1052 * x1288 + x10583 + x10639 -
    x1223 * x4627 + x1223 * x6708 - x1223 * x7750 + x1225 * x4627 -
    x1225 * x6708 + x1225 * x7750 + x1227 * x2469 - x1227 * x2556 -
    x1227 * x2653 + x1233 * x2746 - x1233 * x7113 - x1245 * x2469 +
    x1245 * x2556 + x1245 * x2653 - x1262 * x2702 - x1262 * x502 +
    x1262 * x516 + x1262 * x749 - x1264 * x2746 + x1264 * x7113 +
    x1272 * x2442 - x1275 * x2630 - x1276 * x6702 + x1276 * x7689 +
    x1288 * x2630 + x1289 * x6702 - x1289 * x7689 - x222 * x70 - x2442 * x379 +
    x245 + x259 * x2777 - x2661 * x416 + x3065 + x351 + x4626 * x942 + x4798 +
    x4830 + x5835 + x5839 + x6772 + x7180 + x7680 + x7872 + x8343 -
    18856000.0 * x9040 + 18856000.0 * x9043 + x9741 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1276 + x1289) +
    (-x175 * x436 + x2661 * x436) * (-x1223 + x1225) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[243] =
    -20000000.0 * sc[10] * x1310 + 20000000.0 * sc[10] * x1322 -
    3200000000000000.0 * sc[12] * x526 * x602 * x7721 -
    28000000.0 * sc[13] * x1310 + 28000000.0 * sc[13] * x1322 -
    100000000.0 * sc[14] * x1287 + 80000000.0 * sc[14] * x1295 -
    80000000.0 * sc[14] * x1311 + 100000000.0 * sc[14] * x1319 -
    4050000000000.0 * sc[19] * x10472 - 68000000.0 * sc[19] * x1237 -
    120000000.0 * sc[19] * x1254 + 120000000.0 * sc[19] * x1260 +
    90000000.0 * sc[19] * x1268 - 90000000.0 * sc[19] * x1284 +
    100000000.0 * sc[19] * x1287 - 100000000.0 * sc[19] * x1319 -
    sc[19] * x4858 + x10469 + 5.0160550458715597e+18 * x105 + x10508 * x1295 -
    x10508 * x1311 - x1052 * x1310 + x1052 * x1322 + x10534 + x10577 -
    x10602 * (6.0 * x10477 * x483 + 0.84 * x2644 * x483) + x10650 + x10652 +
    x10655 + x110 * (6.0 * x10477 * x483 + 0.84 * x2644 * x483) +
    x1254 * x2434 + x1254 * x2469 - x1254 * x2556 - x1254 * x2653 -
    x1260 * x2434 - x1260 * x2469 + x1260 * x2556 + x1260 * x2653 +
    x1268 * x2746 - x1268 * x7113 - x1284 * x2746 + x1284 * x7113 +
    x1287 * x2442 - x1287 * x995 + x1295 * x6702 - x1295 * x7689 -
    x1303 * x2702 - x1303 * x502 + x1303 * x516 + x1303 * x749 - x1310 * x2630 -
    x1311 * x6702 + x1311 * x7689 - x1319 * x2442 + x1319 * x995 +
    x1322 * x2630 + 3200000000000000.0 * x207 * x2638 * x602 * x7688 -
    2.2802879078694799e+47 * x214 * x731 +
    2.2802879078694799e+47 * x214 * x834 + 4050000000000.0 * x2641 * x784 +
    x3102 + 1.99e+29 * x526 * x5352 + 5.97e+29 * x5352 * x728 +
    x5381 * x5398 * x5440 - x5440 * x5441 + x5878 + x5880 + x5883 + x7164 -
    1.2288e+21 * x7679 * x951 + 1.2288e+21 * x7682 +
    9600000000000000.0 * x7726 - 9600000000000000.0 * x7745 -
    5.0160550458715597e+18 * x786 + x7897 + x8343 - 5.97e+29 * x867 + x9659 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1295 - x1311) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[275] =
    3980000000000000.0 * kf_qss[116] * ((refCinv) * (refCinv)) * sc[19] *
      sc_qss[8] * exp(x2659 + x3951) / x428 -
    20000000.0 * sc[10] * x1361 + 20000000.0 * sc[10] * x664 -
    100000000.0 * sc[14] * x1356 - 80000000.0 * sc[14] * x1362 +
    100000000.0 * sc[14] * x333 + 80000000.0 * sc[14] * x650 +
    30000000.0 * sc[15] * x1286 - 30000000.0 * sc[15] * x523 + sc[15] * x5967 +
    sc[15] * x5971 - 200000000.0 * sc[19] * sc[8] * x874 -
    2025000000000.0 * sc[19] * x10472 - 120000000.0 * sc[19] * x1263 +
    120000000.0 * sc[19] * x1279 + 90000000.0 * sc[19] * x1306 -
    68000000.0 * sc[19] * x1309 - 90000000.0 * sc[19] * x1314 +
    100000000.0 * sc[19] * x1356 - 2.1e+18 * sc[19] * x2801 -
    100000000.0 * sc[19] * x333 - 90000000.0 * sc[19] * x701 +
    120000000.0 * sc[6] * x793 + 2.5080275229357798e+18 * x105 -
    x10508 * x1362 + x10508 * x650 - x1052 * x1361 + x1052 * x664 + x10533 -
    x10602 * (3.0 * x10477 * x483 + 0.42 * x2644 * x483) + x10667 + x10668 +
    x10671 + x10673 - 6.534e+119 * x1073 * x677 - 9.9e+63 * x1084 +
    x110 * (3.0 * x10477 * x483 + 0.42 * x2644 * x483) + x1263 * x2469 -
    x1263 * x2556 - x1263 * x2653 - x1279 * x2469 + x1279 * x2556 +
    x1279 * x2653 + x1286 * x4627 - x1286 * x6708 + x1306 * x2746 -
    x1314 * x2746 - x1315 * x2702 - x1315 * x502 + x1315 * x516 + x1315 * x749 +
    x1356 * x2442 - x1361 * x2630 - x1362 * x6702 + x1362 * x7689 + x18 -
    1.14014395393474e+47 * x214 * x731 + 1.14014395393474e+47 * x214 * x834 -
    x222 * x701 - x2442 * x333 + x2630 * x664 + 2025000000000.0 * x2641 * x784 -
    4.8355263157894698e+29 * x280 + x2804 * (3.0 * x2796 + 0.42 * x504) +
    2.1e+18 * x2813 * x853 - x2817 * (3.0 * x2796 + 0.42 * x504) + x3147 +
    4.8355263157894698e+29 * x399 - x4627 * x523 + x523 * x6708 +
    2.985e+29 * x5352 * x728 + x5381 * x5398 * x5468 - x5441 * x5468 + x5988 +
    100000000.0 * x62 * x65 + 6.534e+119 * x631 * x677 * x942 + x650 * x6702 -
    x650 * x7689 + x6734 * x6814 + 9.9e+63 * x6742 - x6744 * x6814 + x7245 -
    6.144e+20 * x7679 * x951 + 6.144e+20 * x7682 +
    x7685 * (3.0 * x7716 + 0.42 * x7718) -
    x7724 * (3.0 * x7716 + 0.42 * x7718) + 4800000000000000.0 * x7726 -
    4800000000000000.0 * x7745 - 2.5080275229357798e+18 * x786 + x7926 + x8550 -
    2.985e+29 * x867 - 16499000.0 * x9040 + 16499000.0 * x9043 + x9778 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1362 + x650) +
    (-x175 * x436 + x2661 * x436) * (x1286 - x523) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[307] =
    -20000000.0 * sc[10] * x1370 + 20000000.0 * sc[10] * x1396 -
    40000000.0 * sc[12] * x1391 + 40000000.0 * sc[12] * x1398 + sc[12] * x186 -
    28000000.0 * sc[13] * x1370 + 28000000.0 * sc[13] * x1396 -
    80000000.0 * sc[14] * x1391 + 100000000.0 * sc[14] * x1395 +
    80000000.0 * sc[14] * x1398 - 100000000.0 * sc[14] * x666 + sc[14] * x6853 +
    30000000.0 * sc[15] * x83 - 120000000.0 * sc[19] * x1298 +
    120000000.0 * sc[19] * x1304 + 90000000.0 * sc[19] * x1351 -
    90000000.0 * sc[19] * x1355 - 100000000.0 * sc[19] * x1395 -
    sc[19] * x4930 + 100000000.0 * sc[19] * x666 - 70000000.0 * sc[6] * x1370 +
    70000000.0 * sc[6] * x1396 + x1038 * x1298 - x1038 * x1304 + x10464 -
    x10508 * x1391 + x10508 * x1398 - x1052 * x1370 + x1052 * x1396 +
    6.6e+63 * x1065 * x6707 * x7 + x10681 + x10684 + x10686 + x10687 +
    x1298 * x2434 + x1298 * x2469 - x1298 * x2556 - x1298 * x2653 +
    x1298 * x491 - x1304 * x2434 - x1304 * x2469 + x1304 * x2556 +
    x1304 * x2653 - x1304 * x491 + x1351 * x2746 - x1351 * x2850 -
    x1351 * x7113 - x1355 * x2746 + x1355 * x2850 + x1355 * x7113 -
    x1370 * x2630 - x1391 * x4647 - x1391 * x6702 + x1391 * x7689 -
    x1395 * x2442 + x1395 * x995 + x1396 * x2630 + x1398 * x4647 +
    x1398 * x6702 - x1398 * x7689 + x194 * x2433 + x2442 * x666 + x2451 +
    x2812 + x2815 + x4627 * x83 + x6014 + x6020 - x666 * x995 - x6708 * x83 +
    x6723 + x7750 * x83 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1391 + x1398) +
    (-x175 * x436 + x2661 * x436) * (-x1152 + x83) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[339] =
    40000000.0 * sc[12] * x1124 - 40000000.0 * sc[12] * x1407 +
    28000000.0 * sc[13] * x1015 - 28000000.0 * sc[13] * x1406 +
    80000000.0 * sc[14] * x1124 - 100000000.0 * sc[14] * x1189 -
    80000000.0 * sc[14] * x1407 + 100000000.0 * sc[14] * x308 +
    16.32 * sc[14] * x6044 + sc[15] * x7285 - 90000000.0 * sc[19] * x1113 +
    100000000.0 * sc[19] * x1189 - 120000000.0 * sc[19] * x1317 +
    120000000.0 * sc[19] * x1328 - 100000000.0 * sc[19] * x308 +
    90000000.0 * sc[19] * x331 + 70000000.0 * sc[6] * x1015 -
    70000000.0 * sc[6] * x1406 + 90000000.0 * sc[6] * x860 + x1015 * x1052 +
    x1015 * x2630 + x1038 * x1317 - x1038 * x1328 + x10471 + x10503 +
    x10508 * x1124 - x10508 * x1407 - x1052 * x1406 + x10569 + x10577 -
    x1113 * x2746 + x1113 * x2850 + x1113 * x7113 + x1124 * x4647 -
    x1124 * x7689 + x1189 * x2442 - x1189 * x995 + x1317 * x2434 +
    x1317 * x2469 - x1317 * x2556 - x1317 * x2653 + x1317 * x491 -
    x1328 * x2434 - x1328 * x2469 + x1328 * x2556 + x1328 * x2653 -
    x1328 * x491 - x1406 * x2630 - x1407 * x4647 + x1407 * x7689 -
    x2442 * x308 + x2746 * x331 + x2820 - x2850 * x331 + x308 * x995 -
    x331 * x7113 + x3806 + x4191 + x5354 + x5382 + x6061 + x6067 + x7164 -
    x848 * x849 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1124 - x1407) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[371] =
    30000000.0 * sc[15] * x121 - sc[19] * x4960 - sc[19] * x6875 + x10540 +
    x10546 + x10559 + x10681 + x121 * x4627 - x121 * x6708 + x121 * x7750 +
    1.1e+91 * x526 * x7553 * x7574 + x6723 + x6729 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1104 - x991) +
    (-x175 * x436 + x2661 * x436) * (-x1152 + x121) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[403] =
    -20000000.0 * sc[10] * x1424 + 20000000.0 * sc[10] * x1433 +
    9980000.0 * sc[12] * exp(-5334.0966575300299 * invT + 0.1 * logT) -
    28000000.0 * sc[13] * x1424 + 28000000.0 * sc[13] * x1433 -
    100000000.0 * sc[14] * x1423 - 80000000.0 * sc[14] * x1425 +
    100000000.0 * sc[14] * x1431 + 80000000.0 * sc[14] * x1434 +
    30000000.0 * sc[15] * x671 - 30000000.0 * sc[15] * x680 +
    32000000.0 * sc[15] * x899 - 68000000.0 * sc[19] * x1320 -
    120000000.0 * sc[19] * x1343 + 90000000.0 * sc[19] * x1388 -
    90000000.0 * sc[19] * x1404 + 100000000.0 * sc[19] * x1423 -
    100000000.0 * sc[19] * x1431 + 120000000.0 * sc[19] * x203 -
    90000000.0 * sc[19] * x691 + sc[1] * x854 + sc[3] * x4301 + sc[3] * x4303 +
    sc[6] * x3919 + sc[9] * x186 + x1038 * x1343 - x1038 * x203 -
    x10508 * x1425 + x10508 * x1434 - x1052 * x1424 + x1052 * x1433 -
    x1341 * x2702 - x1341 * x502 + x1341 * x516 + x1341 * x749 + x1343 * x2434 +
    x1343 * x2469 - x1343 * x2556 - x1343 * x2653 + x1343 * x491 +
    x1388 * x2746 - x1388 * x7113 - x1404 * x2746 + x1404 * x7113 +
    90000000.0 * x142 * x194 + x1423 * x2442 - x1424 * x2630 - x1425 * x6702 +
    x1425 * x7689 - x1431 * x2442 + x1433 * x2630 + x1434 * x6702 -
    x1434 * x7689 - x175 * x771 - x203 * x2434 - x203 * x2469 + x203 * x2556 +
    x203 * x2653 - x203 * x491 - x222 * x691 + x2451 + x2661 * x771 +
    9.51e-14 * x2726 + x394 + x4627 * x671 - x4627 * x680 +
    3200000000000000.0 * x526 * x7721 + x5980 + x6105 - x6708 * x671 +
    x6708 * x680 + x671 * x7750 - x680 * x7750 + x7560 + x7725 + x7738 + x7743 +
    x7749 * x942 + x8007 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1425 + x1434) +
    (-x175 * x436 + x2661 * x436) * (x671 - x680) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[435] =
    20000000.0 * sc[10] * x1443 - 20000000.0 * sc[10] * x1454 +
    28000000.0 * sc[13] * x1443 - 28000000.0 * sc[13] * x1454 +
    80000000.0 * sc[14] * x1436 - 100000000.0 * sc[14] * x1451 -
    80000000.0 * sc[14] * x1455 + 100000000.0 * sc[14] * x1462 +
    30000000.0 * sc[15] * x1096 - 30000000.0 * sc[15] * x1270 -
    90000000.0 * sc[19] * x1172 - 90000000.0 * sc[19] * x1418 +
    100000000.0 * sc[19] * x1451 - 100000000.0 * sc[19] * x1462 -
    120000000.0 * sc[19] * x267 + 90000000.0 * sc[19] * x298 -
    68000000.0 * sc[19] * x38 + 120000000.0 * sc[19] * x621 +
    70000000.0 * sc[6] * x1443 - 70000000.0 * sc[6] * x1454 + x1038 * x267 -
    x1038 * x621 + x10463 + x10508 * x1436 - x10508 * x1455 + x1052 * x1443 -
    x1052 * x1454 + x10534 + x10726 + x10728 + x1096 * x4627 - x1096 * x6708 +
    x1096 * x7750 - x1172 * x222 + x1172 * x2698 - x1270 * x4627 +
    x1270 * x6708 - x1270 * x7750 - x1371 * x2702 - x1371 * x502 +
    x1371 * x516 + x1371 * x749 - x1418 * x2746 + x1418 * x7113 +
    x1436 * x4647 + x1436 * x6702 - x1436 * x7689 + x1443 * x2630 +
    x1451 * x2442 - x1451 * x995 - x1454 * x2630 - x1455 * x4647 -
    x1455 * x6702 + x1455 * x7689 - x1462 * x2442 + x1462 * x995 - x175 * x682 +
    5280000.0 * x207 * exp(-754.82499870708 * invT) + x2434 * x267 -
    x2434 * x621 + x2451 + x2469 * x267 - x2469 * x621 - x2556 * x267 +
    x2556 * x621 - x2653 * x267 + x2653 * x621 + x2661 * x682 + x267 * x491 +
    x2689 + 534000000.0 * x2727 + x2746 * x298 + x2792 + x2798 + x2815 -
    x298 * x7113 + x3285 - x491 * x621 + x5002 + x6149 + x6151 +
    28000000.0 * x65 + x7560 + x8692 + x9659 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1436 - x1455) +
    (-x175 * x436 + x2661 * x436) * (x1096 - x1270) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[467] =
    -20000000.0 * sc[10] * x1463 + 20000000.0 * sc[10] * x397 +
    16.32 * sc[10] * x6044 - 28000000.0 * sc[13] * x1463 +
    28000000.0 * sc[13] * x397 + 100000000.0 * sc[14] * x1475 -
    100000000.0 * sc[14] * x1477 - 80000000.0 * sc[14] * x1480 +
    80000000.0 * sc[14] * x1489 + 30000000.0 * sc[15] * x1889 -
    30000000.0 * sc[15] * x1890 + sc[15] * x8713 - 90000000.0 * sc[19] * x1173 -
    68000000.0 * sc[19] * x1377 - 120000000.0 * sc[19] * x1386 +
    120000000.0 * sc[19] * x1392 - 90000000.0 * sc[19] * x1420 +
    90000000.0 * sc[19] * x1422 - 100000000.0 * sc[19] * x1475 +
    100000000.0 * sc[19] * x1477 - 9428000.0 * sc[19] * x4634 * x5548 +
    400000000.0 * sc[27] - 70000000.0 * sc[6] * x1463 +
    70000000.0 * sc[6] * x397 + sc[6] * x4804 + sc[9] * x6853 + x1038 * x1386 -
    x1038 * x1392 - x10508 * x1480 + x10508 * x1489 - x1052 * x1463 +
    x1052 * x397 + x10737 + x10738 + x10739 - x1173 * x222 + x1386 * x2434 +
    x1386 * x2469 - x1386 * x2556 - x1386 * x2653 + x1386 * x491 -
    x1392 * x2434 - x1392 * x2469 + x1392 * x2556 + x1392 * x2653 -
    x1392 * x491 - x1420 * x2746 + x1420 * x7113 + x1422 * x2746 -
    x1422 * x7113 - x1428 * x2702 - x1428 * x502 + x1428 * x516 + x1428 * x749 -
    x1463 * x2630 - x1475 * x2442 + x1477 * x2442 - x1480 * x4647 -
    x1480 * x6702 + x1480 * x7689 + x1489 * x4647 + x1489 * x6702 -
    x1489 * x7689 - x175 * x653 + x1889 * x4627 - x1889 * x6708 +
    x1889 * x7750 - x1890 * x4627 + x1890 * x6708 - x1890 * x7750 +
    80000000.0 * x207 + x2451 + x2630 * x397 + x2661 * x653 + 2.682e-5 * x2730 +
    x3320 + 100000000.0 * x388 + x6194 + x7560 + x7743 + x9269 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1480 + x1489) +
    (-x175 * x436 + x2661 * x436) * (x1889 - x1890) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[499] =
    -20000000.0 * sc[10] * x1488 + 20000000.0 * sc[10] * x1505 +
    32000000.0 * sc[12] * x899 - 100000000.0 * sc[14] * x1503 -
    80000000.0 * sc[14] * x1508 + 80000000.0 * sc[14] * x169 +
    100000000.0 * sc[14] * x383 + sc[14] * x8713 + 30000000.0 * sc[15] * x1894 -
    30000000.0 * sc[15] * x1895 + sc[17] * x9878 -
    120000000.0 * sc[19] * x1400 + 120000000.0 * sc[19] * x1401 +
    90000000.0 * sc[19] * x1445 - 90000000.0 * sc[19] * x1450 -
    68000000.0 * sc[19] * x1478 + 100000000.0 * sc[19] * x1503 -
    90000000.0 * sc[19] * x278 - 100000000.0 * sc[19] * x383 -
    70000000.0 * sc[6] * x1488 + 70000000.0 * sc[6] * x1505 + sc[8] * x5967 +
    sc[8] * x5971 - x10508 * x1508 + x10508 * x169 - x1052 * x1488 +
    x1052 * x1505 + x10748 + x10749 + x10750 + x1400 * x2434 + x1400 * x2469 -
    x1400 * x2556 - x1400 * x2653 - x1401 * x2434 - x1401 * x2469 +
    x1401 * x2556 + x1401 * x2653 + x1445 * x2746 - x1445 * x7113 -
    x1450 * x2746 + x1450 * x7113 - x1488 * x2630 - x1498 * x2702 -
    x1498 * x502 + x1498 * x516 + x1498 * x749 + x1503 * x2442 + x1505 * x2630 -
    x1508 * x4647 - x1508 * x6702 + x1508 * x7689 + x169 * x4647 +
    x169 * x6702 - x169 * x7689 + x175 * x418 + x1894 * x4627 - x1894 * x6708 +
    x1894 * x7750 - x1895 * x4627 + x1895 * x6708 - x1895 * x7750 -
    x222 * x278 - x2442 * x383 + x2451 - x2661 * x418 + 888.0 * x2733 + x3357 +
    x5055 + 9428000.0 * x5548 * x9042 + x6239 + x7560 + x7743 +
    30000000.0 * x942 + 149700000.0 * x9895 - x9900 + x9923 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1508 + x169) +
    (-x175 * x436 + x2661 * x436) * (x1894 - x1895) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[531] =
    refC * x8336 * x8355 - 20000000.0 * sc[10] * x1519 +
    20000000.0 * sc[10] * x1539 - 28000000.0 * sc[13] * x1519 +
    28000000.0 * sc[13] * x1539 - 80000000.0 * sc[14] * x1530 +
    100000000.0 * sc[14] * x1537 + 80000000.0 * sc[14] * x1540 -
    100000000.0 * sc[14] * x872 + 30000000.0 * sc[15] * x1899 -
    30000000.0 * sc[15] * x1900 - 90000000.0 * sc[19] * x102 -
    120000000.0 * sc[19] * x1155 + 90000000.0 * sc[19] * x1461 -
    90000000.0 * sc[19] * x1471 - 100000000.0 * sc[19] * x1537 +
    120000000.0 * sc[19] * x447 - sc[19] * x5079 + 100000000.0 * sc[19] * x872 -
    68000000.0 * sc[19] * x893 - 74850000.0 * sc[19] * x9927 +
    5000000.0 * sc[27] - 70000000.0 * sc[6] * x1519 +
    70000000.0 * sc[6] * x1539 + sc[6] * x4793 - x102 * x222 + x102 * x2698 -
    x10508 * x1530 + x10508 * x1540 - x1052 * x1519 + x1052 * x1539 + x10758 +
    x10760 + x1155 * x2434 + x1155 * x2469 - x1155 * x2556 - x1155 * x2653 +
    x1461 * x2746 - x1461 * x7113 - x1471 * x2746 + x1471 * x7113 -
    x1519 * x2630 - x1530 * x4647 - x1530 * x6702 + x1530 * x7689 -
    x1537 * x2442 + x1537 * x995 + x1539 * x2630 + x1540 * x4647 +
    x1540 * x6702 - x1540 * x7689 + x175 * x427 + x1899 * x4627 -
    x1899 * x6708 + x1899 * x7750 - x1900 * x4627 + x1900 * x6708 -
    x1900 * x7750 - x2434 * x447 + x2442 * x872 + x2451 - x2469 * x447 +
    x2556 * x447 + x2653 * x447 - x2661 * x427 - x2702 * x486 +
    0.02094 * x2736 + x3396 - x486 * x502 + x486 * x516 + x486 * x749 + x6282 +
    x6285 + x7560 + x7743 - x872 * x995 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x1530 + x1540) +
    (-x175 * x436 + x2661 * x436) * (x1899 - x1900) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[563] =
    112480000.0 * refC * sc[6] * x4801 + 20000000.0 * sc[10] * x465 -
    20000000.0 * sc[10] * x475 - 100000000.0 * sc[14] * x1528 +
    80000000.0 * sc[14] * x301 + 100000000.0 * sc[14] * x387 -
    80000000.0 * sc[14] * x527 + 30000000.0 * sc[15] * x1059 -
    30000000.0 * sc[15] * x1060 + sc[15] * x9878 -
    112480000.0 * ((sc[19]) * (sc[19])) * exp(-1.25 * logT) +
    6.6e+63 * sc[19] * x1037 * x11 * x6707 * x942 -
    8100000000000.0 * sc[19] * x10472 + 120000000.0 * sc[19] * x1157 +
    90000000.0 * sc[19] * x1476 - 68000000.0 * sc[19] * x1504 +
    100000000.0 * sc[19] * x1528 - 1.194e+30 * sc[19] * x2777 * x500 -
    8.4e+18 * sc[19] * x2801 - 100000000.0 * sc[19] * x387 - sc[19] * x5100 -
    120000000.0 * sc[19] * x552 - 90000000.0 * sc[19] * x698 -
    90000000.0 * sc[19] * x99 - 6.6e+63 * x1037 * x6742 * x7 +
    1.0032110091743101e+19 * x105 + x10508 * x301 - x10508 * x527 +
    x1052 * x465 - x1052 * x475 + x1059 * x4627 - x1059 * x6708 -
    x1060 * x4627 + x1060 * x6708 -
    x10602 * (12.0 * x10477 * x483 + 1.68 * x2644 * x483) -
    2.6136e+120 * x1073 * x677 + x10772 + x10775 - 3.96e+64 * x1084 +
    x110 * (12.0 * x10477 * x483 + 1.68 * x2644 * x483) - x1157 * x2434 -
    x1157 * x2469 + x1157 * x2556 + x1157 * x2653 + x1476 * x2746 +
    x1528 * x2442 + x175 * x422 - 4.5605758157389599e+47 * x214 * x731 +
    4.5605758157389599e+47 * x214 * x834 - x222 * x698 + x2434 * x552 -
    x2442 * x387 + x2469 * x552 - x2556 * x552 + x2630 * x465 - x2630 * x475 -
    x264 * x2702 - x264 * x502 + x264 * x516 + x264 * x749 +
    8100000000000.0 * x2641 * x784 - x2653 * x552 - x2661 * x422 + x2686 -
    x2746 * x99 - 1.9342105263157899e+30 * x280 +
    x2804 * (12.0 * x2796 + 1.68 * x504) + 8.4e+18 * x2813 * x853 -
    x2817 * (12.0 * x2796 + 1.68 * x504) + 16000000.0 * x3 * x65 +
    x301 * x6702 - x301 * x7689 + 1.9342105263157899e+30 * x399 - x527 * x6702 +
    x527 * x7689 + 1.194e+30 * x5352 * x728 + x5379 * x5381 * x5398 -
    x5379 * x5441 + x6334 + x6336 + 2.6136e+120 * x6738 + 3.96e+64 * x6742 +
    x7114 + x713 - 2.4576e+21 * x7679 * x951 + 2.4576e+21 * x7682 +
    x7685 * (12.0 * x7716 + 1.68 * x7718) -
    x7724 * (12.0 * x7716 + 1.68 * x7718) + 1.92e+16 * x7726 -
    1.92e+16 * x7745 - 1.0032110091743101e+19 * x786 + x8148 + x8834 + x903 -
    113136000.0 * x9040 + 113136000.0 * x9043 + x9983 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x301 - x527) +
    (-x175 * x436 + x2661 * x436) * (x1059 - x1060) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[595] =
    20000000.0 * sc[10] * x254 - 20000000.0 * sc[10] * x67 +
    40000000.0 * sc[12] * x250 - 40000000.0 * sc[12] * x469 +
    28000000.0 * sc[13] * x254 - 28000000.0 * sc[13] * x67 +
    80000000.0 * sc[14] * x250 - 100000000.0 * sc[14] * x459 -
    80000000.0 * sc[14] * x469 + 100000000.0 * sc[14] * x519 +
    30000000.0 * sc[15] * x1068 - 30000000.0 * sc[15] * x33 -
    68000000.0 * sc[19] * x1180 - 120000000.0 * sc[19] * x1429 +
    120000000.0 * sc[19] * x1438 + 90000000.0 * sc[19] * x1494 -
    90000000.0 * sc[19] * x1502 + 100000000.0 * sc[19] * x459 - sc[19] * x5139 -
    100000000.0 * sc[19] * x519 - sc[19] * x9987 + 70000000.0 * sc[6] * x254 -
    70000000.0 * sc[6] * x67 + x1038 * x1429 - x1038 * x1438 + x10445 + x10464 +
    x10508 * x250 - x10508 * x469 + x1052 * x254 - x1052 * x67 + x1068 * x4627 -
    x1068 * x6708 + x1068 * x7750 + x1429 * x2434 + x1429 * x2469 -
    x1429 * x2556 - x1429 * x2653 + x1429 * x491 - x1438 * x2434 -
    x1438 * x2469 + x1438 * x2556 + x1438 * x2653 - x1438 * x491 +
    x1494 * x2746 - x1494 * x2850 - x1494 * x7113 - x1502 * x2746 +
    x1502 * x2850 + x1502 * x7113 + x175 * x398 + x2442 * x459 - x2442 * x519 +
    x2451 + x250 * x4647 + x250 * x6702 - x250 * x7689 + x254 * x2630 -
    x2630 * x67 - x2661 * x398 + x2678 - x2702 * x508 + x2792 + x2812 + x2815 -
    x33 * x4627 + x33 * x6708 - x33 * x7750 - x459 * x995 - x4647 * x469 -
    x469 * x6702 + x469 * x7689 - x502 * x508 + x508 * x516 + x508 * x660 +
    x508 * x749 + x519 * x995 + x6361 + x6370 + x7560 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x250 - x469) +
    (-x175 * x436 + x2661 * x436) * (x1068 - x33) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[627] =
    -3980000000000000.0 * refCinv * x3869 * exp(x2659) - sc[11] * x4960 -
    sc[11] * x6875 - sc[13] * x8336 * x8370 - 100000000.0 * sc[14] * x362 +
    100000000.0 * sc[14] * x455 - 9428000.0 * sc[14] * x4634 * x5548 -
    80000000.0 * sc[14] * x581 + 80000000.0 * sc[14] * x599 - sc[16] * x5079 -
    74850000.0 * sc[16] * x9927 -
    224960000.0 * sc[17] * sc[19] * exp(-1.25 * logT) - sc[17] * x5100 -
    sc[18] * x5139 - sc[18] * x9987 - 10560000.0 * sc[19] * sc[21] * x8864 -
    90000000.0 * sc[19] * x1021 - 120000000.0 * sc[19] * x1442 +
    120000000.0 * sc[19] * x1448 + 90000000.0 * sc[19] * x1517 -
    90000000.0 * sc[19] * x1524 + 100000000.0 * sc[19] * x362 -
    100000000.0 * sc[19] * x455 - 7120000.0 * sc[19] * x4634 * (sc[8] + x162) -
    68000000.0 * sc[19] * x49 - sc[25] * x9409 -
    8000000000000000.0 * sc[3] * exp(x211) - sc[4] * x4306 -
    4.8e+16 * sc[5] * exp(x211) - sc[7] * x4858 -
    100000000.0 * ((sc[8]) * (sc[8])) * x874 - sc[9] * x4930 +
    68000000.0 * sc_qss[1] * x51 - x10020 + x10032 - x1021 * x222 + x10448 +
    x10450 - 1350000000000.0 * x10472 * x13 - x10508 * x581 + x10508 * x599 +
    x10510 - x1052 * x28 + x1052 * x597 + x1088 * x4627 - x1088 * x6708 -
    6.6e+63 * x11 * x6707 * x942 - 3200000000000000.0 * x13 * x207 * x7688 -
    1.99e+29 * x13 * x2777 * x500 + x1442 * x2469 - x1442 * x2556 -
    x1442 * x2653 - x1448 * x2469 + x1448 * x2556 + x1448 * x2653 +
    x1517 * x2746 - x1524 * x2746 + x17 - 80000000.0 * x191 * x194 -
    120000000.0 * x194 - x2441 * x388 + x2442 * x362 - x2442 * x455 -
    4990000.0 * x2497 * x2777 + x25 - x2576 * x5155 - x2630 * x28 +
    x2630 * x597 - x2661 * x425 + x2670 + x2674 - x2702 * x714 -
    5.362e-8 * x2739 + x2774 - 1.4e+18 * x2801 * x71 - x3802 -
    100000000.0 * x388 - x4457 + x453 - x4627 * x684 - x502 * x714 +
    90000000.0 * x5154 + x516 * x714 + x581 * x7689 - x599 * x7689 + x6419 +
    x6708 * x684 + 90000000.0 * x708 + x7121 + x714 * x749 + x7743 + x8196 -
    90000000.0 * x868 - x8881 + 68000000.0 * x908 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x581 + x599) +
    (-x175 * x436 + x2661 * x436) * (x1088 - x684) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[659] =
    -20000000.0 * sc[10] * x493 + 20000000.0 * sc[10] * x604 -
    28000000.0 * sc[13] * x493 + 28000000.0 * sc[13] * x604 -
    100000000.0 * sc[14] * x534 + 100000000.0 * sc[14] * x563 -
    80000000.0 * sc[14] * x659 + 80000000.0 * sc[14] * x670 +
    120000000.0 * sc[19] * x1467 + 90000000.0 * sc[19] * x1527 -
    120000000.0 * sc[19] * x196 + 100000000.0 * sc[19] * x534 -
    100000000.0 * sc[19] * x563 - 68000000.0 * sc[19] * x586 -
    90000000.0 * sc[19] * x864 - 70000000.0 * sc[6] * x493 +
    70000000.0 * sc[6] * x604 + 20000000.0 * sc[6] * x895 - x1038 * x1467 +
    x1038 * x196 + x10443 + x10453 + x10463 + x10469 - x10508 * x659 +
    x10508 * x670 + x10512 + x10516 - x1052 * x493 + x1052 * x604 + x10534 -
    x1467 * x2434 - x1467 * x2469 + x1467 * x2556 + x1467 * x2653 -
    x1467 * x491 + x1527 * x2746 - x1527 * x7113 + x196 * x2434 + x196 * x2469 -
    x196 * x2556 - x196 * x2653 + x196 * x491 + x2442 * x534 - x2442 * x563 +
    x2451 - x2630 * x493 + x2630 * x604 + 1350000000000.0 * x2641 * x526 +
    x2691 - x2702 * x273 - x273 * x502 + x273 * x516 + x273 * x749 -
    x2746 * x864 + x2785 + x2792 + x2798 + x4191 - x4647 * x659 + x4647 * x670 +
    x6445 - x659 * x6702 + x659 * x7689 + x670 * x6702 - x670 * x7689 +
    x7113 * x864 + x8343 + x9659 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x659 + x670) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[691] =
    -20000000.0 * sc[10] * x566 + 20000000.0 * sc[10] * x787 -
    28000000.0 * sc[13] * x566 + 28000000.0 * sc[13] * x787 -
    100000000.0 * sc[14] * x481 + 100000000.0 * sc[14] * x561 -
    80000000.0 * sc[14] * x589 + 80000000.0 * sc[14] * x855 +
    30000000.0 * sc[15] * x1087 - 30000000.0 * sc[15] * x1100 -
    5280000.0 * ((sc[19]) * (sc[19])) * x8864 - 68000000.0 * sc[19] * x1133 -
    90000000.0 * sc[19] * x1154 - 90000000.0 * sc[19] * x1196 +
    120000000.0 * sc[19] * x1470 - 120000000.0 * sc[19] * x197 +
    90000000.0 * sc[19] * x311 + 100000000.0 * sc[19] * x481 - sc[19] * x5552 -
    100000000.0 * sc[19] * x561 - sc[19] * x6410 - 30000000.0 * sc[19] * x774 +
    x1035 - x10508 * x589 + x10508 * x855 + x10519 - x1052 * x566 +
    x1052 * x787 + x10583 + x1087 * x4627 - x1087 * x6708 + x1087 * x7750 -
    x1100 * x4627 + x1100 * x6708 - x1100 * x7750 - x1154 * x222 -
    x1196 * x2746 + x1196 * x7113 - x1470 * x2434 - x1470 * x2469 +
    x1470 * x2556 + x1470 * x2653 + x197 * x2434 + x197 * x2469 - x197 * x2556 -
    x197 * x2653 + x2442 * x481 - x2442 * x561 + x251 - x2630 * x566 +
    x2630 * x787 - x2702 * x539 + x2746 * x311 - x311 * x7113 + x351 + x497 -
    x502 * x539 + x516 * x539 + x539 * x749 - x589 * x6702 + x589 * x7689 +
    x6702 * x855 + x7180 + x74 - x7689 * x855 + x80 + x8931 -
    33940800.0 * x9040 + 33940800.0 * x9043 - 158400000000.0 * x9654 +
    158400000000.0 * x9657 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x589 + x855) +
    (-x175 * x436 + x2661 * x436) * (x1087 - x1100) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[723] =
    -20000000.0 * sc[10] * x68 + 20000000.0 * sc[10] * x688 +
    40000000.0 * sc[12] * x971 - 40000000.0 * sc[12] * x980 -
    28000000.0 * sc[13] * x68 + 28000000.0 * sc[13] * x688 +
    100000000.0 * sc[14] * x369 - 100000000.0 * sc[14] * x390 +
    80000000.0 * sc[14] * x971 - 80000000.0 * sc[14] * x980 -
    120000000.0 * sc[19] * x1484 + 120000000.0 * sc[19] * x1490 -
    100000000.0 * sc[19] * x369 + 100000000.0 * sc[19] * x390 -
    90000000.0 * sc[19] * x445 + 90000000.0 * sc[19] * x450 -
    90000000.0 * sc[19] * x707 + 20000000.0 * sc[6] * x240 -
    70000000.0 * sc[6] * x68 + 70000000.0 * sc[6] * x688 + x1038 * x1484 -
    x1038 * x1490 + x10471 + x10508 * x971 - x10508 * x980 - x1052 * x68 +
    x1052 * x688 + x10569 + x1484 * x2434 + x1484 * x2469 - x1484 * x2556 -
    x1484 * x2653 + x1484 * x491 - x1490 * x2434 - x1490 * x2469 +
    x1490 * x2556 + x1490 * x2653 - x1490 * x491 - x222 * x707 - x2442 * x369 +
    x2442 * x390 + x2451 - x2630 * x68 + x2630 * x688 + x2685 + x2689 + x2696 -
    x2746 * x445 + x2746 * x450 + x2798 + x2850 * x445 - x2850 * x450 + x4191 +
    x445 * x7113 - x450 * x7113 + x4647 * x971 - x4647 * x980 + x5571 +
    x6702 * x971 - x6702 * x980 + x75 - x7689 * x971 + x7689 * x980 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x971 - x980) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[755] =
    40000000.0 * sc[12] * x949 - 40000000.0 * sc[12] * x996 +
    28000000.0 * sc[13] * x1009 - 28000000.0 * sc[13] * x1081 +
    100000000.0 * sc[14] * x1004 - 100000000.0 * sc[14] * x626 +
    80000000.0 * sc[14] * x949 - 80000000.0 * sc[14] * x996 +
    30000000.0 * sc[15] * x1131 - 100000000.0 * sc[19] * x1004 -
    120000000.0 * sc[19] * x1499 + 120000000.0 * sc[19] * x1513 -
    90000000.0 * sc[19] * x348 + 90000000.0 * sc[19] * x468 +
    100000000.0 * sc[19] * x626 + 10000000.0 * sc[23] +
    70000000.0 * sc[6] * x1009 - 70000000.0 * sc[6] * x1081 - x1004 * x2442 +
    x1004 * x995 + x1009 * x1052 + x1009 * x2630 + x1038 * x1499 -
    x1038 * x1513 + x10464 + x10508 * x949 - x10508 * x996 - x1052 * x1081 +
    x10589 + x10594 + x10681 + x10687 - x1081 * x2630 + x10837 + x1131 * x4627 -
    x1131 * x6708 + x1131 * x7750 + x1499 * x2434 + x1499 * x2469 -
    x1499 * x2556 - x1499 * x2653 + x1499 * x491 - x1513 * x2434 -
    x1513 * x2469 + x1513 * x2556 + x1513 * x2653 - x1513 * x491 +
    x2442 * x626 + x2451 - x2746 * x348 + x2746 * x468 + x2812 + x2815 +
    x2850 * x348 - x2850 * x468 + x348 * x7113 + x4647 * x949 - x4647 * x996 -
    x468 * x7113 - x626 * x995 + x6553 + x6564 + x6723 - x7689 * x949 +
    x7689 * x996 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x949 - x996) +
    (-x175 * x436 + x2661 * x436) * (x1131 - x1152) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[787] =
    -20000000.0 * sc[10] * x1963 + 20000000.0 * sc[10] * x306 -
    40000000.0 * sc[12] * x89 + 40000000.0 * sc[12] * x985 -
    28000000.0 * sc[13] * x1963 + 28000000.0 * sc[13] * x306 -
    100000000.0 * sc[14] * x1031 + 100000000.0 * sc[14] * x1042 -
    80000000.0 * sc[14] * x89 + 80000000.0 * sc[14] * x985 +
    100000000.0 * sc[19] * x1031 - 100000000.0 * sc[19] * x1042 +
    120000000.0 * sc[19] * x1492 + 90000000.0 * sc[19] * x217 -
    90000000.0 * sc[19] * x368 - 120000000.0 * sc[19] * x646 -
    70000000.0 * sc[6] * x1963 + 70000000.0 * sc[6] * x306 + sc[6] * x4314 +
    x1031 * x2442 - x1031 * x995 - x1038 * x1492 + x1038 * x646 -
    x1042 * x2442 + x1042 * x995 + x10471 - x10508 * x89 + x10508 * x985 -
    x1052 * x1963 + x1052 * x306 + x10843 + x10844 - x1492 * x2434 -
    x1492 * x2469 + x1492 * x2556 + x1492 * x2653 - x1492 * x491 -
    x1963 * x2630 + x217 * x2746 - x217 * x2850 - x217 * x7113 + x2434 * x646 +
    x2451 + x2469 * x646 - x2556 * x646 + x2630 * x306 - x2653 * x646 -
    x2746 * x368 + x2812 + x2850 * x368 + x368 * x7113 + x4191 - x4647 * x89 +
    x4647 * x985 + x491 * x646 + x6596 + x6602 - x6702 * x89 + x6702 * x985 +
    x7689 * x89 - x7689 * x985 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x89 + x985) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[819] =
    20000000.0 * sc[10] * x359 + 40000000.0 * sc[12] * x1055 +
    28000000.0 * sc[13] * x359 + 80000000.0 * sc[14] * x1055 +
    30000000.0 * sc[14] * x1535 + 100000000.0 * sc[14] * x336 +
    48000000.0 * sc[14] * x655 + 20000000.0 * sc[15] * x1055 +
    30000000.0 * sc[15] * x359 - 120000000.0 * sc[19] * x1535 -
    100000000.0 * sc[19] * x336 - 90000000.0 * sc[19] * x655 - sc[19] * x9409 +
    50000000.0 * sc[1] * x359 + 70000000.0 * sc[6] * x359 + x1038 * x1535 +
    x10471 + x10503 + x10508 * x1055 + x1052 * x359 + x10537 + x10539 + x10542 +
    x10545 + x10548 + x1055 * x2743 + x1055 * x4647 + x1055 * x6702 -
    x1055 * x7689 + x10551 + x10553 + x1535 * x2434 + x1535 * x2469 -
    x1535 * x2556 - x1535 * x2653 + x1535 * x491 + x1535 * x93 - x2442 * x336 +
    x2452 + x2630 * x359 - x2746 * x655 + x2810 + x2850 * x655 + x336 * x995 +
    x5414 + x5652 + x5659 + x5663 + x655 * x7113 + x655 * x7761 + x7698 +
    x9660 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1055 - x991) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[851] =
    -20000000.0 * sc[10] * x575 + 20000000.0 * sc[10] * x678 -
    40000000.0 * sc[12] * x544 + 40000000.0 * sc[12] * x815 -
    28000000.0 * sc[13] * x575 + 28000000.0 * sc[13] * x678 -
    100000000.0 * sc[14] * x482 - 80000000.0 * sc[14] * x544 +
    100000000.0 * sc[14] * x567 + 80000000.0 * sc[14] * x815 +
    30000000.0 * sc[15] * x1139 - 90000000.0 * sc[19] * x371 +
    100000000.0 * sc[19] * x482 - 120000000.0 * sc[19] * x549 +
    120000000.0 * sc[19] * x550 + 90000000.0 * sc[19] * x555 -
    100000000.0 * sc[19] * x567 - 70000000.0 * sc[6] * x575 +
    70000000.0 * sc[6] * x678 + x1038 * x549 - x1038 * x550 - x10508 * x544 +
    x10508 * x815 - x1052 * x575 + x1052 * x678 + x10681 + x10687 + x10859 +
    x10861 + x1139 * x4627 - x1139 * x6708 + x1139 * x7750 + x2434 * x549 -
    x2434 * x550 + x2442 * x482 - x2442 * x567 + x2451 + x2469 * x549 -
    x2469 * x550 - x2556 * x549 + x2556 * x550 - x2630 * x575 + x2630 * x678 -
    x2653 * x549 + x2653 * x550 - x2746 * x371 + x2746 * x555 + x2812 + x2815 +
    x2850 * x371 - x2850 * x555 + x371 * x7113 - x4647 * x544 + x4647 * x815 -
    x482 * x995 + x491 * x549 - x491 * x550 - x544 * x6702 + x544 * x7689 -
    x555 * x7113 + x567 * x995 + x6655 + x6661 + x6702 * x815 + x6723 -
    x7689 * x815 + x9539 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x544 + x815) +
    (-x175 * x436 + x2661 * x436) * (x1139 - x1152) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[883] =
    400000000.0 * sc[14] + 30000000.0 * sc[15] * x1143 + 5000000.0 * sc[16] -
    1.1e+91 * sc[19] * x7543 * x7553 - sc[19] * x8180 + sc[6] * x4788 + x10540 +
    x10546 + x10559 + x10681 + x1143 * x4627 - x1143 * x6708 + x1143 * x7750 +
    x6723 + x6729 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1104 - x991) +
    (-x175 * x436 + x2661 * x436) * (x1143 - x1152) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[915] =
    30000000.0 * sc[15] * x1092 - 30000000.0 * sc[19] * x1094 - sc[19] * x6700 +
    x10540 + x10546 + x10559 + x10681 + x1092 * x4627 - x1092 * x6708 +
    x1092 * x7750 + x6723 + x6729 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x1104 - x991) +
    (-x175 * x436 + x2661 * x436) * (x1092 - x1152) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[947] =
    20000000.0 * sc[10] * x1018 + 40000000.0 * sc[12] * x647 +
    28000000.0 * sc[13] * x1018 + 48000000.0 * sc[14] * x372 +
    100000000.0 * sc[14] * x479 + 30000000.0 * sc[14] * x553 +
    80000000.0 * sc[14] * x647 + 30000000.0 * sc[15] * x1018 +
    30000000.0 * sc[15] * x1080 - 5000000.0 * sc[15] * x423 * x9898 +
    20000000.0 * sc[15] * x647 - 90000000.0 * sc[19] * x372 -
    100000000.0 * sc[19] * x479 - 120000000.0 * sc[19] * x553 +
    50000000.0 * sc[1] * x1018 + 70000000.0 * sc[6] * x1018 + x1018 * x1052 +
    x1018 * x2630 + x1038 * x553 + x10508 * x647 + x10542 + x10545 + x10548 +
    x10551 + x10553 + x10681 + x1080 * x4627 - x1080 * x6708 + x1080 * x7750 +
    x10871 + x1169 * x2661 - x2442 * x479 + x2452 + x2469 * x553 -
    x2556 * x553 - x2653 * x553 + x2743 * x647 - x2746 * x372 + x2810 +
    x2850 * x372 + x372 * x7113 + x372 * x7761 + x4647 * x647 + x479 * x995 +
    x491 * x553 + x5414 + x553 * x93 + x5652 + x5659 + x5663 + x647 * x6702 -
    x647 * x7689 + x6723 + x6729 + x7698 + x9660 +
    3980000000000000.0 * exp(-43729.528258430102 * invT) +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (x647 - x991) +
    (-x175 * x436 + x2661 * x436) * (x1080 - x1152) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[979] =
    20000000.0 * sc[10] * x402 - 20000000.0 * sc[10] * x590 -
    40000000.0 * sc[12] * x649 + 40000000.0 * sc[12] * x675 +
    28000000.0 * sc[13] * x402 - 28000000.0 * sc[13] * x590 -
    80000000.0 * sc[14] * x649 + 80000000.0 * sc[14] * x675 +
    70000000.0 * sc[6] * x402 - 70000000.0 * sc[6] * x590 + x10471 -
    x10508 * x649 + x10508 * x675 + x1052 * x402 - x1052 * x590 + x10540 +
    x10546 + x10876 + x10877 + x2630 * x402 - x2630 * x590 + x2812 -
    x2850 * x568 + x2850 * x904 - x4647 * x649 + x4647 * x675 - x649 * x6702 +
    x649 * x7689 + x6702 * x675 - x675 * x7689 +
    (-20000000.0 * sc[10] * x413 - 28000000.0 * sc[13] * x413 -
     30000000.0 * sc[14] * x441 - 30000000.0 * sc[15] * x413 +
     120000000.0 * sc[19] * x441 - 50000000.0 * sc[1] * x413 -
     70000000.0 * sc[6] * x413 - x1038 * x441 - x1052 * x413 - x2434 * x441 -
     x2469 * x441 + x2556 * x441 - x2630 * x413 + x2653 * x441 - x441 * x491 -
     x441 * x93) *
      (-x649 + x675) +
    (-x175 * x436 + x2661 * x436) * (x509) +
    (-100000000.0 * sc[14] * x396 + 100000000.0 * sc[19] * x396 +
     68000000.0 * sc[19] * x51 + x2442 * x396 - x2679 * x51 - x396 * x995) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - 4.8e-5 * sc[14] * x1468 +
     1400000.0 * sc[19] * x1468 * x461 * x71 * exp(x496) +
     9.0e-5 * sc[19] * x1468 - 5.07e-11 * sc[6] * x1468 * x287 -
     2565000000.0 * x1468 * x2459 * x71) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (30000000.0 * sc[14] * x442 + 90000000.0 * sc[19] * x104 -
     120000000.0 * sc[19] * x442 + x1038 * x442 + x104 * x222 - x104 * x2698 +
     x2434 * x442 + x2469 * x442 - x2556 * x442 - x2653 * x442 + x442 * x491 +
     x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (90000000.0 * sc[19] * x279 + x222 * x279 - x2698 * x279 + x2702 * x275 +
     x275 * x502 - x275 * x516 - x275 * x660 - x275 * x749) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[20] =
    x10499 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1104 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[52] =
    16040000.0 * sc[14] * x272 + 0.384 * sc[14] * exp(x1224) +
    24000000.0 * sc[16] * x272 - 14000000.0 * sc[21] * x1134 +
    14000000.0 * sc[21] * x1161 + x10464 + x10480 + x10568 + x1062 * x2513 -
    x1062 * x2518 + x1062 * x2560 + x1062 * x2585 + x1062 * x2614 +
    x1062 * x2653 + x1062 * x732 - x1106 * x2513 + x1106 * x2518 -
    x1106 * x2560 - x1106 * x2585 - x1106 * x2614 - x1106 * x2653 -
    x1106 * x732 - x1127 * x8396 + x1127 * x9644 + x1138 * x2832 +
    x1159 * x8396 - x1159 * x9644 - x1162 * x2832 + x8325 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1138 + x1162) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[84] =
    16040000.0 * sc[14] * x1182 + 5000000.0 * sc[15] * x1133 +
    20000000.0 * sc[19] * x1133 - 14000000.0 * sc[21] * x1211 +
    14000000.0 * sc[21] * x1242 + x10596 + x1121 * x2513 - x1121 * x2518 +
    x1121 * x2560 + x1121 * x2614 + x1121 * x2653 + x1121 * x732 +
    x1133 * x2533 - x1156 * x2513 + x1156 * x2518 - x1156 * x2560 -
    x1156 * x2614 - x1156 * x2653 - x1156 * x732 + x1197 * x8396 -
    x1205 * x8396 + x1212 * x2832 - x1243 * x2832 + x138 * x194 + x4663 +
    x9696 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1212 + x1243) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[116] =
    30000000.0 * sc[15] * x1249 + 20000000.0 * sc[15] * x1250 +
    14000000.0 * sc[21] * x1249 + x10558 + x1170 * x2513 - x1170 * x2518 +
    x1170 * x2560 + x1170 * x2585 + x1170 * x2614 + x1170 * x2653 +
    x1170 * x732 + x1170 * x93 - x1250 * x2832 + x340 * x8396 - x340 * x9644 +
    x5414 + x5588 + x7769 + x9073 + x9649 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1250 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[148] =
    x10499 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1104 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[180] =
    16040000.0 * sc[14] * x757 + 30000000.0 * sc[15] * x1257 +
    20000000.0 * sc[15] * x1258 + 24000000.0 * sc[16] * x757 +
    14000000.0 * sc[21] * x1257 + x10175 + x10464 + x10480 + x1051 * x8396 -
    x1051 * x9644 + x1183 * x2513 - x1183 * x2518 + x1183 * x2560 +
    x1183 * x2585 + x1183 * x2614 + x1183 * x2653 + x1183 * x732 + x1183 * x93 -
    x1258 * x2832 + x2651 + x5414 + x5588 + x7769 + x8413 + x9073 + x9649 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1258 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[212] =
    16040000.0 * sc[14] * x1262 + 5000000.0 * sc[15] * x1209 +
    24000000.0 * sc[16] * x1262 + 20000000.0 * sc[19] * x1209 -
    20000000.0 * sc[20] * x895 - 14000000.0 * sc[21] * x1275 +
    14000000.0 * sc[21] * x1288 + sc[8] * x4852 + x10639 + x1209 * x2533 +
    x1227 * x2513 - x1227 * x2518 + x1227 * x2560 + x1227 * x2585 +
    x1227 * x2614 + x1227 * x2653 + x1227 * x732 - x1233 * x8396 +
    x1233 * x9644 - x1245 * x2513 + x1245 * x2518 - x1245 * x2560 -
    x1245 * x2585 - x1245 * x2614 - x1245 * x2653 - x1245 * x732 +
    x1264 * x8396 - x1264 * x9644 + x1276 * x2832 - x1289 * x2832 + x4663 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1276 + x1289) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[244] =
    16040000.0 * sc[14] * x1303 + 5000000.0 * sc[15] * x1237 +
    24000000.0 * sc[16] * x1303 + 4050000000000.0 * sc[19] * x10472 +
    20000000.0 * sc[19] * x1237 - 14000000.0 * sc[21] * x1310 +
    14000000.0 * sc[21] * x1322 - 5.0160550458715597e+18 * x105 +
    x10602 * (6.0 * x10477 * x483 + 0.84 * x2644 * x483) + x10655 -
    x110 * (6.0 * x10477 * x483 + 0.84 * x2644 * x483) + x1237 * x2533 +
    x1254 * x2513 - x1254 * x2518 + x1254 * x2560 + x1254 * x2614 +
    x1254 * x2653 + x1254 * x732 - x1260 * x2513 + x1260 * x2518 -
    x1260 * x2560 - x1260 * x2614 - x1260 * x2653 - x1260 * x732 -
    x1268 * x8396 + x1284 * x8396 - x1295 * x2832 + x1311 * x2832 -
    4050000000000.0 * x2641 * x784 + 1.79336511627907e+30 * x4658 * x4670 -
    1.521e+16 * x4661 * x4683 + 1.521e+16 * x4661 * x4692 - x4662 * x4877 -
    1.79336511627907e+30 * x4670 * x4689 + x4686 * x4877 +
    5.0160550458715597e+18 * x786 + x9754 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1295 - x1311) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[276] =
    16040000.0 * sc[14] * x1315 + 5000000.0 * sc[15] * x1309 +
    24000000.0 * sc[16] * x1315 + 2025000000000.0 * sc[19] * x10472 +
    20000000.0 * sc[19] * x1309 - 14000000.0 * sc[20] * x915 -
    14000000.0 * sc[21] * x1361 + 14000000.0 * sc[21] * x664 + sc[6] * x4852 -
    2.5080275229357798e+18 * x105 +
    x10602 * (3.0 * x10477 * x483 + 0.42 * x2644 * x483) -
    x110 * (3.0 * x10477 * x483 + 0.42 * x2644 * x483) + x1263 * x2513 -
    x1263 * x2518 + x1263 * x2560 + x1263 * x2585 + x1263 * x2614 +
    x1263 * x2653 + x1263 * x732 - x1279 * x2513 + x1279 * x2518 -
    x1279 * x2560 - x1279 * x2585 - x1279 * x2614 - x1279 * x2653 -
    x1279 * x732 - x1306 * x8396 + x1306 * x9644 + x1309 * x2533 +
    x1314 * x8396 - x1314 * x9644 + x1362 * x2832 + x18 -
    2025000000000.0 * x2641 * x784 - x2832 * x650 +
    8.9668255813953501e+29 * x4658 * x4670 -
    7605000000000000.0 * x4661 * x4683 + 7605000000000000.0 * x4661 * x4692 -
    x4662 * x4915 - 8.9668255813953501e+29 * x4670 * x4689 + x4686 * x4915 +
    2.5080275229357798e+18 * x786 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1362 + x650) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[308] =
    -14000000.0 * sc[21] * x1370 + 14000000.0 * sc[21] * x1396 + x10686 +
    x10896 + x1298 * x2513 - x1298 * x2518 + x1298 * x2560 + x1298 * x2585 +
    x1298 * x2614 + x1298 * x2653 + x1298 * x732 - x1304 * x2513 +
    x1304 * x2518 - x1304 * x2560 - x1304 * x2585 - x1304 * x2614 -
    x1304 * x2653 - x1304 * x732 - x1351 * x8396 + x1351 * x9644 +
    x1355 * x8396 - x1355 * x9644 + x1391 * x2832 - x1398 * x2832 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1391 + x1398) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[340] =
    14000000.0 * sc[21] * x1015 - 14000000.0 * sc[21] * x1406 + x10896 +
    x1113 * x8396 - x1113 * x9644 - x1124 * x2832 + x1317 * x2513 -
    x1317 * x2518 + x1317 * x2560 + x1317 * x2585 + x1317 * x2614 +
    x1317 * x2653 + x1317 * x732 - x1328 * x2513 + x1328 * x2518 -
    x1328 * x2560 - x1328 * x2585 - x1328 * x2614 - x1328 * x2653 -
    x1328 * x732 + x1407 * x2832 - x331 * x8396 + x331 * x9644 + x5382 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1124 - x1407) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[372] =
    x10499 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1104 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[404] =
    5000000.0 * sc[15] * x1320 + 20000000.0 * sc[19] * x1320 -
    14000000.0 * sc[21] * x1424 + 14000000.0 * sc[21] * x1433 + x10463 +
    x1320 * x2533 + x1343 * x2513 - x1343 * x2518 + x1343 * x2560 +
    x1343 * x2614 + x1343 * x2653 - x1388 * x8396 + x1404 * x8396 +
    x1425 * x2832 - x1434 * x2832 - x203 * x2513 + x203 * x2518 - x203 * x2560 -
    x203 * x2614 - x203 * x2653 + x4678 + x7738 + x7993 + x9829 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1425 + x1434) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[436] =
    16040000.0 * sc[14] * x1371 + 5000000.0 * sc[15] * x38 +
    24000000.0 * sc[16] * x1371 + 20000000.0 * sc[19] * x38 - sc[20] * x8673 +
    14000000.0 * sc[21] * x1443 - 14000000.0 * sc[21] * x1454 + x10463 +
    x10728 + x1418 * x8396 - x1436 * x2832 + x1455 * x2832 + x2513 * x267 -
    x2513 * x621 - x2518 * x267 + x2518 * x621 + x2532 * x8049 + x2533 * x38 +
    x2560 * x267 - x2560 * x621 + x2614 * x267 - x2614 * x621 + x2653 * x267 -
    x2653 * x621 + x267 * x732 - x298 * x8396 + x4678 - x621 * x732 +
    46000000000.0 * x868 * exp(x2516) + x9849 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1436 - x1455) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[468] =
    5000000.0 * sc[15] * x1377 + 20000000.0 * sc[19] * x1377 +
    0.384 * sc[1] * exp(x1224) - sc[20] * x9313 - 14000000.0 * sc[21] * x1463 +
    14000000.0 * sc[21] * x397 + x10463 + x10739 + x1377 * x2533 +
    x1386 * x2513 - x1386 * x2518 + x1386 * x2560 + x1386 * x2614 +
    x1386 * x2653 - x1392 * x2513 + x1392 * x2518 - x1392 * x2560 -
    x1392 * x2614 - x1392 * x2653 + x1420 * x8396 - x1422 * x8396 +
    x1480 * x2832 - x1489 * x2832 + x4678 + x8055 + x9869 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1480 + x1489) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[500] =
    5000000.0 * sc[15] * x1478 + 20000000.0 * sc[19] * x1478 -
    14000000.0 * sc[21] * x1488 + 14000000.0 * sc[21] * x1505 -
    5000000.0 * sc_qss[1] * x51 + x10463 + x10750 + x1400 * x2513 -
    x1400 * x2518 + x1400 * x2560 + x1400 * x2614 + x1400 * x2653 -
    x1401 * x2513 + x1401 * x2518 - x1401 * x2560 - x1401 * x2614 -
    x1401 * x2653 - x1445 * x8396 + x1450 * x8396 + x1478 * x2533 +
    x1508 * x2832 - x169 * x2832 + x194 * x2559 + x4678 + x8082 -
    5000000.0 * x908 + x9920 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1508 + x169) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[532] =
    5000000.0 * sc[15] * x893 + 20000000.0 * sc[19] * x893 -
    14000000.0 * sc[21] * x1519 + 14000000.0 * sc[21] * x1539 + x10277 +
    x10463 + x10760 + x1155 * x2513 - x1155 * x2518 + x1155 * x2560 +
    x1155 * x2653 - x1461 * x8396 + x1471 * x8396 + x1530 * x2832 -
    x1540 * x2832 + x194 * x2512 - x2513 * x447 + x2518 * x447 - x2560 * x447 -
    x2653 * x447 + x4678 + x8108 + x9947 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x1530 + x1540) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[564] =
    16040000.0 * sc[14] * x264 + 5000000.0 * sc[15] * x1504 +
    24000000.0 * sc[16] * x264 + 8100000000000.0 * sc[19] * x10472 +
    20000000.0 * sc[19] * x1504 - 5000000.0 * sc[20] * x889 +
    14000000.0 * sc[21] * x465 - 14000000.0 * sc[21] * x475 -
    1.0032110091743101e+19 * x105 +
    x10602 * (12.0 * x10477 * x483 + 1.68 * x2644 * x483) -
    x110 * (12.0 * x10477 * x483 + 1.68 * x2644 * x483) - x1157 * x2513 +
    x1157 * x2518 - x1157 * x2560 - x1157 * x2614 - x1157 * x2653 -
    x1157 * x732 - x1476 * x8396 + x1504 * x2533 + x2513 * x552 - x2518 * x552 +
    x2560 * x552 + x2614 * x552 - 8100000000000.0 * x2641 * x784 +
    x2653 * x552 - x2832 * x301 + x2832 * x527 +
    3.5867302325581401e+30 * x4658 * x4670 - 3.042e+16 * x4661 * x4683 +
    3.042e+16 * x4661 * x4692 - x4662 * x4674 -
    3.5867302325581401e+30 * x4670 * x4689 + x4674 * x4686 + x552 * x732 +
    1.0032110091743101e+19 * x786 + x8396 * x99 + x903 + x9979 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x301 - x527) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[596] =
    14000000.0 * sc[21] * x254 - 14000000.0 * sc[21] * x67 + x10445 + x10896 +
    x1429 * x2513 - x1429 * x2518 + x1429 * x2560 + x1429 * x2585 +
    x1429 * x2614 + x1429 * x2653 + x1429 * x732 - x1438 * x2513 +
    x1438 * x2518 - x1438 * x2560 - x1438 * x2585 - x1438 * x2614 -
    x1438 * x2653 - x1438 * x732 + x149 * x194 - x1494 * x8396 + x1494 * x9644 +
    x1502 * x8396 - x1502 * x9644 - x250 * x2832 + x2832 * x469 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x250 - x469) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[628] =
    16040000.0 * sc[14] * x714 + 5000000.0 * sc[15] * x49 +
    24000000.0 * sc[16] * x714 + 20000000.0 * sc[19] * x49 -
    14000000.0 * sc[21] * x28 + 14000000.0 * sc[21] * x597 -
    20000000.0 * sc_qss[1] * x51 + x10463 + 1350000000000.0 * x10472 * x13 +
    x1442 * x2513 - x1442 * x2518 + x1442 * x2560 + x1442 * x2585 +
    x1442 * x2614 + x1442 * x2653 + x1442 * x732 - x1448 * x2513 +
    x1448 * x2518 - x1448 * x2560 - x1448 * x2585 - x1448 * x2614 -
    x1448 * x2653 - x1448 * x732 - x1517 * x8396 + x1517 * x9644 +
    x1524 * x8396 - x1524 * x9644 + x2533 * x49 + x2832 * x581 - x2832 * x599 +
    x453 + x4678 - 20000000.0 * x908 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x581 + x599) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[660] =
    -sc[13] * x8673 - sc[14] * x9313 + 5000000.0 * sc[15] * x586 -
    24000000.0 * sc[15] * x723 * x725 + 24000000.0 * sc[16] * x273 -
    5000000.0 * sc[17] * x889 + 20000000.0 * sc[19] * x586 -
    14000000.0 * sc[21] * x493 + 14000000.0 * sc[21] * x604 -
    20000000.0 * sc[6] * x895 - 14000000.0 * sc[8] * x915 + x10051 + x10308 +
    x10453 + x10463 - x1467 * x2513 + x1467 * x2518 - x1467 * x2560 -
    x1467 * x2653 - x1527 * x8396 - x194 * x2517 + x196 * x2513 - x196 * x2518 +
    x196 * x2560 + x196 * x2653 - x207 * x2831 -
    1350000000000.0 * x2641 * x526 + x2832 * x659 - x2832 * x670 -
    5070000000000000.0 * x4661 * x526 *
      exp(g_RT[20] - g_RT[6] - g_RT[8] + x4681) +
    x4678 + x8218 + x8396 * x864 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x659 + x670) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[692] =
    16040000.0 * sc[14] * x539 + 5000000.0 * sc[15] * x1133 +
    24000000.0 * sc[16] * x539 + 20000000.0 * sc[19] * x1133 -
    14000000.0 * sc[21] * x566 + 14000000.0 * sc[21] * x787 + x1133 * x2533 +
    x1196 * x8396 - x1196 * x9644 - x1470 * x2513 + x1470 * x2518 -
    x1470 * x2560 - x1470 * x2585 - x1470 * x2614 - x1470 * x2653 -
    x1470 * x732 + x197 * x2513 - x197 * x2518 + x197 * x2560 + x197 * x2585 +
    x197 * x2614 + x197 * x2653 + x197 * x732 + x2832 * x589 - x2832 * x855 -
    x311 * x8396 + x311 * x9644 + x4663 + 14000000.0 * x65 + x74 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x589 + x855) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[724] =
    -14000000.0 * sc[21] * x68 + 14000000.0 * sc[21] * x688 + x10896 +
    x1484 * x2513 - x1484 * x2518 + x1484 * x2560 + x1484 * x2585 +
    x1484 * x2614 + x1484 * x2653 + x1484 * x732 - x1490 * x2513 +
    x1490 * x2518 - x1490 * x2560 - x1490 * x2585 - x1490 * x2614 -
    x1490 * x2653 - x1490 * x732 + x2696 - x2832 * x971 + x2832 * x980 +
    x445 * x8396 - x445 * x9644 - x450 * x8396 + x450 * x9644 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x971 - x980) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[756] =
    14000000.0 * sc[21] * x1009 - 14000000.0 * sc[21] * x1081 + x10837 +
    x10896 + x1499 * x2513 - x1499 * x2518 + x1499 * x2560 + x1499 * x2585 +
    x1499 * x2614 + x1499 * x2653 + x1499 * x732 - x1513 * x2513 +
    x1513 * x2518 - x1513 * x2560 - x1513 * x2585 - x1513 * x2614 -
    x1513 * x2653 - x1513 * x732 - x2832 * x949 + x2832 * x996 + x348 * x8396 -
    x348 * x9644 - x468 * x8396 + x468 * x9644 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x949 - x996) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[788] =
    -14000000.0 * sc[21] * x1963 + 14000000.0 * sc[21] * x306 + x10113 +
    x10464 + x10480 + x10844 - x1492 * x2513 + x1492 * x2518 - x1492 * x2560 -
    x1492 * x2614 - x1492 * x2653 - x1492 * x732 - x217 * x8396 + x2513 * x646 -
    x2518 * x646 + x2560 * x646 + x2614 * x646 + x2653 * x646 + x2832 * x89 -
    x2832 * x985 + x368 * x8396 + x646 * x732 + x7707 + x8325 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x89 + x985) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[820] =
    20000000.0 * sc[15] * x1055 + 30000000.0 * sc[15] * x359 +
    14000000.0 * sc[21] * x359 - x1055 * x2832 + x10558 + x1535 * x2513 -
    x1535 * x2518 + x1535 * x2560 + x1535 * x2585 + x1535 * x2614 +
    x1535 * x2653 + x1535 * x732 + x1535 * x93 + x5414 + x5588 + x655 * x8396 -
    x655 * x9644 + x7769 + x9073 + x9649 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1055 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[852] =
    -14000000.0 * sc[21] * x575 + 14000000.0 * sc[21] * x678 + x10480 + x10861 +
    x2513 * x549 - x2513 * x550 - x2518 * x549 + x2518 * x550 + x2560 * x549 -
    x2560 * x550 + x2585 * x549 - x2585 * x550 + x2614 * x549 - x2614 * x550 +
    x2653 * x549 - x2653 * x550 + x2832 * x544 - x2832 * x815 + x371 * x8396 -
    x371 * x9644 + x549 * x732 - x550 * x732 - x555 * x8396 + x555 * x9644 +
    x7707 + x8325 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x544 + x815) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[884] =
    x10499 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1104 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[916] =
    x10499 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x1104 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[948] =
    30000000.0 * sc[15] * x1018 + 20000000.0 * sc[15] * x647 +
    14000000.0 * sc[21] * x1018 + x10558 + x2513 * x553 - x2518 * x553 +
    x2560 * x553 + x2585 * x553 + x2614 * x553 + x2653 * x553 - x2832 * x647 +
    x372 * x8396 - x372 * x9644 + x5414 + x553 * x732 + x553 * x93 + x5588 +
    x7769 + x9073 + x9649 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (x647 - x991) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[980] =
    14000000.0 * sc[21] * x402 - 14000000.0 * sc[21] * x590 + x10464 + x10480 +
    x10496 + x10877 + x2518 * x545 - x2653 * x545 + x2832 * x649 -
    x2832 * x675 - x568 * x8396 + x7707 +
    (-30000000.0 * sc[15] * x413 - 14000000.0 * sc[21] * x413 - x2513 * x441 +
     x2518 * x441 - x2560 * x441 - x2585 * x441 - x2614 * x441 - x2653 * x441 -
     x441 * x732 - x441 * x93) *
      (-x649 + x675) +
    (-5000000.0 * sc[15] * x51 - 20000000.0 * sc[19] * x51 - x2533 * x51 -
     x2679 * x51) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-0.046 * sc[13] * x1468 * exp(x2516) + x2604) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (x2513 * x442 - x2518 * x442 + x2560 * x442 + x2585 * x442 + x2614 * x442 +
     x2653 * x442 + x442 * x732 + x442 * x93) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-16040000.0 * sc[14] * x275 - 24000000.0 * sc[16] * x275) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[21] =
    x10902 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1104 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[53] = 14000000.0 * sc[21] * x1134 - 14000000.0 * sc[21] * x1161 -
          x10898 * x1138 + x10898 * x1162 + x10899 + x1138 * x9059 -
          x1162 * x9059 + x5700 +
          (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
            (-x1138 + x1162) +
          (30000000.0 * sc[14] * x442) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[85] = 14000000.0 * sc[21] * x1211 - 14000000.0 * sc[21] * x1242 -
          x10898 * x1212 + x10898 * x1243 + x10899 + x1212 * x9059 -
          x1243 * x9059 + x5737 +
          (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
            (-x1212 + x1243) +
          (30000000.0 * sc[14] * x442) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[117] = 30000000.0 * sc[14] * x1170 - 14000000.0 * sc[21] * x1249 +
           x10898 * x1250 + x10900 - x1250 * x9059 + x5659 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (x1250 - x991) +
           (30000000.0 * sc[14] * x442) *
             (x340 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1248 +
                 (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[149] =
    x10902 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1104 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[181] = 30000000.0 * sc[14] * x1183 - 14000000.0 * sc[21] * x1257 +
           x10898 * x1258 + x10900 - x1258 * x9059 + x5659 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (x1258 - x991) +
           (30000000.0 * sc[14] * x442) *
             (x1051 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1256 +
                 (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[213] = 14000000.0 * sc[21] * x1275 - 14000000.0 * sc[21] * x1288 -
           2346000000000.0 * sc[21] * x5550 * x5555 - x10898 * x1276 +
           x10898 * x1289 + x1276 * x9059 - x1289 * x9059 +
           2346000000000.0 * x5550 * x5567 +
           2.0204537444933901e+20 * x5558 * x5561 -
           2.0204537444933901e+20 * x5558 * x5564 + x5835 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1276 + x1289) +
           (30000000.0 * sc[14] * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[245] = 14000000.0 * sc[21] * x1310 - 14000000.0 * sc[21] * x1322 +
           x10898 * x1295 - x10898 * x1311 + x10899 - x1295 * x9059 +
           x1311 * x9059 + x5878 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (x1295 - x1311) +
           (30000000.0 * sc[14] * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[277] = 30000000.0 * sc[14] * x1263 - 30000000.0 * sc[14] * x1279 +
           sc[14] * x5959 + sc[15] * x5967 + sc[15] * x5971 + sc[16] * x5946 +
           14000000.0 * sc[20] * x915 + 14000000.0 * sc[21] * x1361 -
           2052750000000.0 * sc[21] * x5550 * x5555 -
           14000000.0 * sc[21] * x664 - x10898 * x1362 + x10898 * x650 +
           x1362 * x9059 + 2052750000000.0 * x5550 * x5567 +
           1.7678970264317202e+20 * x5558 * x5561 -
           1.7678970264317202e+20 * x5558 * x5564 + x5886 - x650 * x9059 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1362 + x650) +
           (30000000.0 * sc[14] * x442) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[309] = 14000000.0 * sc[21] * x1370 - 14000000.0 * sc[21] * x1396 -
           x10898 * x1391 + x10898 * x1398 + x10899 + x1391 * x9059 -
           x1398 * x9059 + x6020 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1391 + x1398) +
           (30000000.0 * sc[14] * x442) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[341] = -14000000.0 * sc[21] * x1015 + 14000000.0 * sc[21] * x1406 +
           x10898 * x1124 - x10898 * x1407 + x10899 - x1124 * x9059 +
           x1407 * x9059 + x6061 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (x1124 - x1407) +
           (30000000.0 * sc[14] * x442) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[373] =
    x10902 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1104 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[405] = 14000000.0 * sc[21] * x1424 - 14000000.0 * sc[21] * x1433 -
           x10898 * x1425 + x10898 * x1434 + x10899 + x1425 * x9059 -
           x1434 * x9059 + x6105 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1425 + x1434) +
           (30000000.0 * sc[14] * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[437] = -14000000.0 * sc[21] * x1443 + 14000000.0 * sc[21] * x1454 +
           x10898 * x1436 - x10898 * x1455 + x10899 - x1436 * x9059 +
           x1455 * x9059 + 2640000.0 * x207 * exp(-754.82499870708 * invT) +
           x6113 + x6149 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (x1436 - x1455) +
           (30000000.0 * sc[14] * x442) *
             (x1418 - x298 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1451 + x1462 +
                 (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[469] = 14000000.0 * sc[21] * x1463 - 14000000.0 * sc[21] * x397 -
           sc[21] * x6154 +
           1750000.0 * sc[22] * exp(-679.34249883637199 * invT) +
           sc[8] * x5959 - x10898 * x1480 + x10898 * x1489 + x10899 +
           x1480 * x9059 - x1489 * x9059 + x6194 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1480 + x1489) +
           (30000000.0 * sc[14] * x442) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[501] = 30000000.0 * sc[14] * x1400 - 30000000.0 * sc[14] * x1401 +
           14000000.0 * sc[21] * x1488 - 14000000.0 * sc[21] * x1505 -
           sc[21] * x6222 + sc[8] * x5967 + sc[8] * x5971 - x10898 * x1508 +
           x10898 * x169 + x10899 + x1508 * x9059 - x169 * x9059 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1508 + x169) +
           (30000000.0 * sc[14] * x442) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[533] = 30000000.0 * sc[14] * x1155 - 30000000.0 * sc[14] * x447 +
           14000000.0 * sc[21] * x1519 - 14000000.0 * sc[21] * x1539 +
           sc[8] * x5946 - x10898 * x1530 + x10898 * x1540 + x10899 +
           x1530 * x9059 - x1540 * x9059 +
           (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
             (-x1530 + x1540) +
           (30000000.0 * sc[14] * x442) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[565] =
    -14000000.0 * sc[21] * x465 + 14000000.0 * sc[21] * x475 -
    14076000000000.0 * sc[21] * x5550 * x5555 + x10898 * x301 - x10898 * x527 -
    x301 * x9059 + x527 * x9059 + 14076000000000.0 * x5550 * x5567 +
    1.2122722466960399e+21 * x5558 * x5561 -
    1.2122722466960399e+21 * x5558 * x5564 + x6334 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (x301 - x527) +
    (30000000.0 * sc[14] * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[597] =
    -14000000.0 * sc[21] * x254 + 14000000.0 * sc[21] * x67 + x10898 * x250 -
    x10898 * x469 + x10899 - x250 * x9059 + x469 * x9059 + x6370 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (x250 - x469) +
    (30000000.0 * sc[14] * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[629] =
    -5280000.0 * sc[19] * sc[21] * x8864 + 14000000.0 * sc[21] * x28 -
    14000000.0 * sc[21] * x597 - x10898 * x581 + x10898 * x599 + x10899 + x17 +
    x581 * x9059 - x599 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (-x581 + x599) +
    (30000000.0 * sc[14] * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[661] =
    14000000.0 * sc[21] * x493 - 14000000.0 * sc[21] * x604 +
    14000000.0 * sc[8] * x915 - x10898 * x659 + x10898 * x670 + x10899 + x6445 +
    x659 * x9059 - x670 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (-x659 + x670) +
    (30000000.0 * sc[14] * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[693] =
    -30000000.0 * sc[14] * x1470 + 30000000.0 * sc[14] * x197 - sc[14] * x6154 -
    sc[15] * x6222 - 2640000.0 * ((sc[19]) * (sc[19])) * x8864 -
    sc[19] * x5552 - sc[19] * x6410 - 30000000.0 * sc[19] * x774 -
    4222800000000.0 * sc[21] * x5550 * x5555 + 14000000.0 * sc[21] * x566 -
    14000000.0 * sc[21] * x787 - x10898 * x589 + x10898 * x855 - x207 * x593 -
    1173000000000.0 * x5548 * x5550 * x5555 + 4222800000000.0 * x5550 * x5567 +
    3.6368167400881101e+20 * x5558 * x5561 -
    3.6368167400881101e+20 * x5558 * x5564 + x589 * x9059 - 14000000.0 * x65 -
    x855 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (-x589 + x855) +
    (30000000.0 * sc[14] * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[725] =
    1750000.0 * sc[14] * exp(-679.34249883637199 * invT) +
    14000000.0 * sc[21] * x68 - 14000000.0 * sc[21] * x688 + x10898 * x971 -
    x10898 * x980 + x10899 + x5571 - x9059 * x971 + x9059 * x980 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (x971 - x980) +
    (30000000.0 * sc[14] * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[757] =
    -14000000.0 * sc[21] * x1009 + 14000000.0 * sc[21] * x1081 + x10898 * x949 -
    x10898 * x996 + x10899 + x6553 - x9059 * x949 + x9059 * x996 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (x949 - x996) +
    (30000000.0 * sc[14] * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[789] =
    14000000.0 * sc[21] * x1963 - 14000000.0 * sc[21] * x306 - x10898 * x89 +
    x10898 * x985 + x10899 + x6602 + x89 * x9059 - x9059 * x985 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (-x89 + x985) +
    (30000000.0 * sc[14] * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[821] =
    30000000.0 * sc[14] * x1535 - 14000000.0 * sc[21] * x359 + x1055 * x10898 -
    x1055 * x9059 + x10900 + x5659 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1055 - x991) +
    (30000000.0 * sc[14] * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[853] =
    14000000.0 * sc[21] * x575 - 14000000.0 * sc[21] * x678 - x10898 * x544 +
    x10898 * x815 + x10899 + x544 * x9059 + x6661 - x815 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (-x544 + x815) +
    (30000000.0 * sc[14] * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[885] =
    x10902 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1104 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[917] =
    x10902 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (x1104 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[949] =
    30000000.0 * sc[14] * x553 - 14000000.0 * sc[21] * x1018 + x10898 * x647 +
    x10900 + x5659 - x647 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) * (x647 - x991) +
    (30000000.0 * sc[14] * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[981] =
    30000000.0 * sc[14] * x1033 - 14000000.0 * sc[21] * x402 +
    14000000.0 * sc[21] * x590 - x10898 * x649 + x10898 * x675 + x10899 +
    x5659 + x649 * x9059 - x675 * x9059 +
    (-30000000.0 * sc[14] * x441 + 14000000.0 * sc[21] * x413) *
      (-x649 + x675) +
    (30000000.0 * sc[14] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[22] =
    x10909 + (x2522 * x441) * (x1104 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[54] =
    x10576 - x1062 * x2522 + x10903 + x1106 * x2522 + x1117 * x2577 -
    x1138 * x5579 - x1138 * x9059 + x1160 * x2572 + x1160 * x2599 +
    x1160 * x995 + x1162 * x5579 + x1162 * x9059 - x2572 * x472 - x2599 * x472 -
    x472 * x995 + x5703 + (x2522 * x441) * (-x1138 + x1162) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1134 + x1161 + (-x413) * (-x1138 + x1162)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1062 - x1106 + (-x441) * (-x1138 + x1162) +
       (x442) * (-x1127 + x1159 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1160 - x472 +
                    (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162)))));
  J[86] =
    140000.0 * sc[13] * x1154 + x10591 - x1121 * x2522 + x1154 * x222 +
    x1154 * x2577 + x1154 * x2608 + x1156 * x2522 - x1212 * x5579 -
    x1212 * x9059 + x1234 * x2572 + x1234 * x2599 + x1243 * x5579 +
    x1243 * x9059 - x2572 * x36 - x2599 * x36 + x5606 +
    (x2522 * x441) * (-x1212 + x1243) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1211 + x1242 + (-x413) * (-x1212 + x1243)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1121 - x1156 + (-x441) * (-x1212 + x1243) +
       (x442) * (x1197 - x1205 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1234 - x36 +
                    (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243)))));
  J[118] =
    48000000.0 * sc[14] * x340 + x10542 + x10907 - x1170 * x2522 +
    x1248 * x2572 + x1248 * x2599 + x1248 * x995 + x1250 * x5579 +
    x1250 * x9059 + 80.0 * x4296 + x5652 + x9065 + x9640 +
    (x2522 * x441) * (x1250 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1249 - x591 + (-x413) * (x1250 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1170 - x545 + (-x441) * (x1250 - x991) +
       (x442) * (x340 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1248 +
                    (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991)))));
  J[150] =
    x10909 + 240.0 * x4296 + (x2522 * x441) * (x1104 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[182] =
    48000000.0 * sc[14] * x1051 + x10542 + x10907 - x1183 * x2522 +
    x1256 * x2572 + x1256 * x2599 + x1256 * x995 + x1258 * x5579 +
    x1258 * x9059 + x5652 + x9065 + x9640 + (x2522 * x441) * (x1258 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1257 - x591 + (-x413) * (x1258 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1183 - x545 + (-x441) * (x1258 - x991) +
       (x442) * (x1051 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x1256 +
                    (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991)))));
  J[214] =
    140000.0 * sc[13] * x70 - 20000000.0 * sc[22] * x240 + x10494 -
    x1227 * x2522 + x1245 * x2522 - x1272 * x2572 - x1272 * x2599 -
    x1276 * x5579 - x1276 * x9059 + x1289 * x5579 + x1289 * x9059 + x222 * x70 +
    x2572 * x379 + x2577 * x70 + x2599 * x379 + x2608 * x70 + x5606 +
    (x2522 * x441) * (-x1276 + x1289) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1275 + x1288 + (-x413) * (-x1276 + x1289)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1272 + x379 +
       (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1227 - x1245 + (-x441) * (-x1276 + x1289) +
       (x442) * (-x1233 + x1264 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1272 + x379 +
                    (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289)))));
  J[246] =
    8.07e+21 * sc[8] * x5591 + x10576 + x1117 * x2577 - x1254 * x2522 +
    x1260 * x2522 - x1287 * x2572 - x1287 * x2599 - x1287 * x995 +
    x1295 * x5579 + x1295 * x9059 - x1311 * x5579 - x1311 * x9059 +
    x1319 * x2572 + x1319 * x2599 + x1319 * x995 - x5583 * x5845 +
    x5584 * x5845 - 2.6800370370370399e+37 * x5594 * x5596 +
    2.6800370370370399e+37 * x5594 * x5599 - 8.07e+21 * x5603 + x5880 +
    (x2522 * x441) * (x1295 - x1311) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1310 + x1322 + (-x413) * (x1295 - x1311)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1287 + x1319 +
       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1268 + x1284 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1287 + x1319 +
          (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1254 - x1260 + (-x441) * (x1295 - x1311) +
       (x442) * (-x1268 + x1284 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1287 + x1319 +
                    (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311)))));
  J[278] =
    140000.0 * sc[13] * x701 + 4.035e+21 * sc[8] * x5591 + x10673 -
    x1263 * x2522 + x1279 * x2522 + 2.69e+21 * x13 * x5591 - x1356 * x2572 -
    x1356 * x2599 - x1362 * x5579 - x1362 * x9059 + x222 * x701 + x2572 * x333 +
    x2577 * x701 + x2599 * x333 + x2608 * x701 + x5579 * x650 - x5583 * x5891 +
    x5584 * x5891 - 1.34001851851852e+37 * x5594 * x5596 +
    1.34001851851852e+37 * x5594 * x5599 - 4.035e+21 * x5603 + x650 * x9059 +
    (x2522 * x441) * (-x1362 + x650) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1361 + x664 + (-x413) * (-x1362 + x650)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1263 - x1279 + (-x441) * (-x1362 + x650) +
       (x442) * (-x1306 + x1314 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1356 + x333 +
                    (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650)))));
  J[310] =
    x10905 - x1298 * x2522 + x1304 * x2522 - x1391 * x5579 - x1391 * x9059 +
    x1395 * x2572 + x1395 * x2599 + x1395 * x995 + x1398 * x5579 +
    x1398 * x9059 - x2572 * x666 - x2599 * x666 + x6014 - x666 * x995 +
    (x2522 * x441) * (-x1391 + x1398) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1370 + x1396 + (-x413) * (-x1391 + x1398)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1298 - x1304 + (-x441) * (-x1391 + x1398) +
       (x442) * (-x1351 + x1355 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1395 - x666 +
                    (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398)))));
  J[342] =
    sc[15] * x7285 + x10576 + x10903 + x1117 * x2577 + x1124 * x5579 +
    x1124 * x9059 - x1189 * x2572 - x1189 * x2599 - x1189 * x995 -
    x1317 * x2522 + x1328 * x2522 - x1407 * x5579 - x1407 * x9059 +
    x2572 * x308 + x2599 * x308 + x308 * x995 + x6067 +
    (x2522 * x441) * (x1124 - x1407) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1015 - x1406 + (-x413) * (x1124 - x1407)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1317 - x1328 + (-x441) * (x1124 - x1407) +
       (x442) * (x1113 - x331 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1189 + x308 +
                    (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407)))));
  J[374] =
    x10909 + (x2522 * x441) * (x1104 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[406] =
    -480.0 * sc[12] * sc[22] * x4513 + 140000.0 * sc[13] * x691 + x10903 -
    x1343 * x2522 - x1423 * x2572 - x1423 * x2599 - x1425 * x5579 -
    x1425 * x9059 + x1431 * x2572 + x1431 * x2599 + x1434 * x5579 +
    x1434 * x9059 + x203 * x2522 + x222 * x691 + x2577 * x691 + x2608 * x691 +
    x2689 + x5980 + (x2522 * x441) * (-x1425 + x1434) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1424 + x1433 + (-x413) * (-x1425 + x1434)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1423 + x1431 +
       (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1343 - x203 + (-x441) * (-x1425 + x1434) +
       (x442) * (-x1388 + x1404 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1423 + x1431 +
                    (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434)))));
  J[438] =
    140000.0 * sc[13] * x1172 + sc[14] * x1172 * x2576 + sc[23] * x8658 +
    x10903 + x1172 * x222 + x1172 * x2608 + x1172 * x2698 + x1436 * x5579 +
    x1436 * x9059 - x1451 * x2572 - x1451 * x2599 - x1451 * x995 -
    x1455 * x5579 - x1455 * x9059 + x1462 * x2572 + x1462 * x2599 +
    x1462 * x995 - x2522 * x267 + x2522 * x621 + x2689 - 140000.0 * x5154 +
    x6151 - 140000.0 * x708 + (x2522 * x441) * (x1436 - x1455) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1443 - x1454 + (-x413) * (x1436 - x1455)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x267 - x621 + (-x441) * (x1436 - x1455) +
       (x442) * (x1418 - x298 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1451 + x1462 +
                    (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455)))));
  J[470] =
    140000.0 * sc[13] * x1173 + 240.0 * sc[4] * exp(x4294) + x10738 + x10903 +
    x1173 * x222 + x1173 * x2577 + x1173 * x2608 - x1386 * x2522 +
    x1392 * x2522 + x1475 * x2599 - x1477 * x2599 - x1480 * x5579 +
    x1489 * x5579 + x2576 * x5155 + x2689 + x9311 +
    (x2522 * x441) * (-x1480 + x1489) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1463 + x397 + (-x413) * (-x1480 + x1489)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1386 - x1392 + (-x441) * (-x1480 + x1489) +
       (x442) * (x1420 - x1422 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1475 - x1477 +
                    (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489)))));
  J[502] =
    140000.0 * sc[13] * x278 + x10749 + x10903 - x1400 * x2522 + x1401 * x2522 -
    x1508 * x5579 + x169 * x5579 + x222 * x278 + 10000000.0 * x2606 * x5155 +
    x2608 * x278 + x2689 + x9343 + x9911 + (x2522 * x441) * (-x1508 + x169) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1488 + x1505 + (-x413) * (-x1508 + x169)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1400 - x1401 + (-x441) * (-x1508 + x169) +
       (x442) * (-x1445 + x1450 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1503 + x383 +
                    (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169)))));
  J[534] =
    140000.0 * sc[13] * x102 - 140000.0 * sc[22] * x693 + x102 * x222 +
    x102 * x2577 + x102 * x2608 + x102 * x2698 + x10903 - x1155 * x2522 -
    x1530 * x5579 - x1530 * x9059 + x1537 * x2572 + x1537 * x2599 +
    x1537 * x995 + x1540 * x5579 + x1540 * x9059 + x2522 * x447 - x2572 * x872 -
    x2599 * x872 + x2689 + x6282 - x872 * x995 +
    (x2522 * x441) * (-x1530 + x1540) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1519 + x1539 + (-x413) * (-x1530 + x1540)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1155 - x447 + (-x441) * (-x1530 + x1540) +
       (x442) * (-x1461 + x1471 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1537 - x872 +
                    (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540)))));
  J[566] =
    140000.0 * sc[13] * x698 - sc[22] * x56 -
    2.69e+21 * sc[8] * x13 * x5591 * x624 + 1.614e+22 * sc[8] * x5591 +
    x1157 * x2522 + 2.69e+21 * x13 * x5603 * x624 - x1528 * x2572 -
    x1528 * x2599 + x222 * x698 - x2522 * x552 + x2572 * x387 + x2577 * x698 +
    x2598 * x388 + x2599 * x387 + x2608 * x698 + x2686 + x301 * x5579 +
    x301 * x9059 - x527 * x5579 - x527 * x9059 -
    5.3600740740740798e+37 * x5594 * x5596 +
    5.3600740740740798e+37 * x5594 * x5599 - 1.614e+22 * x969 * x970 +
    (x2522 * x441) * (x301 - x527) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x465 - x475 + (-x413) * (x301 - x527)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (-x1157 + x552 + (-x441) * (x301 - x527) +
       (x442) * (-x1476 + x99 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1528 + x387 +
                    (-x396) * (x465 - x475 + (-x413) * (x301 - x527)))));
  J[598] =
    x10905 - x1429 * x2522 + x1438 * x2522 + x250 * x5579 + x250 * x9059 -
    x2572 * x459 + x2572 * x519 - x2599 * x459 + x2599 * x519 - x459 * x995 -
    x469 * x5579 - x469 * x9059 + x519 * x995 + x6361 +
    (x2522 * x441) * (x250 - x469) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x254 - x67 + (-x413) * (x250 - x469)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1429 - x1438 + (-x441) * (x250 - x469) +
       (x442) *
         (-x1494 + x1502 +
          (-10.0e-13 / (x366 * x373)) *
            (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469)))));
  J[630] =
    140000.0 * sc[13] * x1021 + x1021 * x222 + x1021 * x2577 + x1021 * x2608 +
    x10510 + x10903 - x1442 * x2522 + x1448 * x2522 - x2572 * x362 +
    x2572 * x455 + x2576 * x5155 - x2599 * x362 + x2599 * x455 + x2689 -
    x5579 * x581 + x5579 * x599 - x581 * x9059 + x599 * x9059 +
    (x2522 * x441) * (-x581 + x599) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x28 + x597 + (-x413) * (-x581 + x599)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1442 - x1448 + (-x441) * (-x581 + x599) +
       (x442) * (-x1517 + x1524 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x362 + x455 +
                    (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599)))));
  J[662] =
    x10516 + x10903 + x1181 * x222 + x1181 * x2577 + x1467 * x2522 -
    x196 * x2522 - x2572 * x534 + x2572 * x563 - x2599 * x534 + x2599 * x563 -
    x5579 * x659 + x5579 * x670 - x659 * x9059 + x670 * x9059 + x8382 + x9578 +
    (x2522 * x441) * (-x659 + x670) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x493 + x604 + (-x413) * (-x659 + x670)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (-x1467 + x196 + (-x441) * (-x659 + x670) +
       (x442) * (-x1527 + x864 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x534 + x563 +
                    (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670)))));
  J[694] =
    140000.0 * sc[13] * x1154 + x1154 * x222 + x1154 * x2577 + x1154 * x2608 +
    x1470 * x2522 - x197 * x2522 - x2599 * x481 + x2599 * x561 - x5579 * x589 +
    x5579 * x855 + x5606 + x80 + x9471 + (x2522 * x441) * (-x589 + x855) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x566 + x787 + (-x413) * (-x589 + x855)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (-x1470 + x197 + (-x441) * (-x589 + x855) +
       (x442) * (x1196 - x311 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x481 + x561 +
                    (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855)))));
  J[726] =
    -240.0 * ((sc[12]) * (sc[12])) * x4513 + 140000.0 * sc[13] * x707 -
    140000.0 * sc[16] * x693 - sc[17] * x56 - 20000000.0 * sc[6] * x240 +
    x10080 + x10903 - x1484 * x2522 + x1490 * x2522 - x194 * x2521 +
    x222 * x707 + x2608 * x707 + x2685 + x2689 - 2.69e+21 * x526 * x970 +
    x5579 * x971 - x5579 * x980 + x9495 + (x2522 * x441) * (x971 - x980) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x68 + x688 + (-x413) * (x971 - x980)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1484 - x1490 + (-x441) * (x971 - x980) +
       (x442) *
         (x445 - x450 +
          (-10.0e-13 / (x366 * x373)) *
            (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980)))));
  J[758] =
    sc[13] * x8658 + x1004 * x2572 + x1004 * x2599 + x1004 * x995 + x10905 -
    x1499 * x2522 + x1513 * x2522 - x2572 * x626 - x2599 * x626 + x5579 * x949 -
    x5579 * x996 - x626 * x995 + x6564 + x9059 * x949 - x9059 * x996 +
    (x2522 * x441) * (x949 - x996) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1009 - x1081 + (-x413) * (x949 - x996)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1499 - x1513 + (-x441) * (x949 - x996) +
       (x442) * (x348 - x468 +
                 (-10.0e-13 / (x366 * x373)) *
                   (x1004 - x626 +
                    (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996)))));
  J[790] =
    -x1031 * x2572 - x1031 * x2599 - x1031 * x995 + x1042 * x2572 +
    x1042 * x2599 + x1042 * x995 + x10905 + x1492 * x2522 - x2522 * x646 -
    x5579 * x89 + x5579 * x985 + x6596 - x89 * x9059 + x9059 * x985 +
    (x2522 * x441) * (-x89 + x985) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x1963 + x306 + (-x413) * (-x89 + x985)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (-x1492 + x646 + (-x441) * (-x89 + x985) +
       (x442) * (-x217 + x368 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1031 + x1042 +
                    (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985)))));
  J[822] =
    48000000.0 * sc[14] * x655 + x10542 + x1055 * x5579 + x1055 * x9059 +
    x10907 - x1535 * x2522 + x2572 * x336 + x2599 * x336 + x336 * x995 + x5652 +
    x9065 + x9640 + (x2522 * x441) * (x1055 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x359 - x591 + (-x413) * (x1055 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1535 - x545 + (-x441) * (x1055 - x991) +
       (x442) * (-x568 + x655 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x336 +
                    (-x396) * (x359 - x591 + (-x413) * (x1055 - x991)))));
  J[854] =
    x10905 - x2522 * x549 + x2522 * x550 - x2572 * x482 + x2572 * x567 -
    x2599 * x482 + x2599 * x567 - x482 * x995 - x544 * x5579 - x544 * x9059 +
    x5579 * x815 + x567 * x995 + x6655 + x815 * x9059 +
    (x2522 * x441) * (-x544 + x815) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (-x575 + x678 + (-x413) * (-x544 + x815)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x549 - x550 + (-x441) * (-x544 + x815) +
       (x442) * (x371 - x555 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x482 + x567 +
                    (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815)))));
  J[886] =
    x10909 + (x2522 * x441) * (x1104 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[918] =
    x10909 + (x2522 * x441) * (x1104 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1083 - x591 + (-x413) * (x1104 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (x1104 - x991) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) * (x1083 - x591 +
                                             (-x413) * (x1104 - x991)))));
  J[950] =
    48000000.0 * sc[14] * x372 + x10542 + x10907 - x2522 * x553 + x2572 * x479 +
    x2599 * x479 + x479 * x995 + x5579 * x647 + x5652 + x647 * x9059 + x9065 +
    x9640 + (x2522 * x441) * (x647 - x991) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x1018 - x591 + (-x413) * (x647 - x991)) +
    (-4.8e-5 * sc[14] * x1468) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (-x545 + x553 + (-x441) * (x647 - x991) +
       (x442) * (x372 - x568 +
                 (-10.0e-13 / (x366 * x373)) *
                   (-x1074 + x479 +
                    (-x396) * (x1018 - x591 + (-x413) * (x647 - x991)))));
  J[982] =
    x1067 * x2572 - x1074 * x2572 + x10905 + x10908 + x2522 * x545 -
    x5579 * x649 + x5579 * x675 - x649 * x9059 + x675 * x9059 +
    (x2522 * x441) * (-x649 + x675) +
    (-x2572 * x396 - x2599 * x396 - x396 * x995) *
      (x402 - x590 + (-x413) * (-x649 + x675)) +
    (-4.8e-5 * sc[14] * x1468) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-140000.0 * sc[13] * x104 - x104 * x222 - x104 * x2577 - x104 * x2608 -
     x104 * x2698 - x2522 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675)))) +
    (-140000.0 * sc[13] * x279 - x222 * x279 - x2577 * x279 - x2608 * x279 -
     x2698 * x279) *
      (x1061 + (-x441) * (-x649 + x675) +
       (x442) * (x577 + (-10.0e-13 / (x366 * x373)) *
                          (x907 + (-x396) *
                                    (x402 - x590 + (-x413) * (-x649 + x675)))));
  J[23] =
    x5607 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1104 - x991) +
    (-x2415) * (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[55] = -20000000.0 * sc[10] * x1134 + 20000000.0 * sc[10] * x1161 +
          x1062 * x2522 - x1062 * x998 - x1106 * x2522 + x1106 * x998 -
          x1127 * x5656 - x1138 * x6702 + x1159 * x5656 + x1162 * x6702 +
          (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
            (-x1138 + x1162) +
          (-x2415) * (x1160 - x472 +
                      (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
          (x2522 * x442 - x442 * x998) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[87] = -20000000.0 * sc[10] * x1211 + 20000000.0 * sc[10] * x1242 +
          x1121 * x2522 - x1121 * x998 - x1156 * x2522 + x1156 * x998 +
          x1197 * x5656 - x1205 * x5656 - x1212 * x6702 + x1243 * x6702 +
          (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
            (-x1212 + x1243) +
          (-x2415) * (x1234 - x36 +
                      (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
          (x2522 * x442 - x442 * x998) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[119] = 20000000.0 * sc[10] * x1249 + x10169 + x10548 + x1170 * x2522 -
           x1170 * x998 + x1250 * x6702 + x340 * x5656 + x5640 + x8409 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (x1250 - x991) +
           (-x2415) * (-x1074 + x1248 +
                       (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
           (x2522 * x442 - x442 * x998) *
             (x340 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1248 +
                 (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[151] =
    x5607 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1104 - x991) +
    (-x2415) * (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[183] = 20000000.0 * sc[10] * x1257 + x10169 + x1051 * x5656 + x10548 +
           x1183 * x2522 - x1183 * x998 + x1258 * x6702 + x5640 + x8409 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (x1258 - x991) +
           (-x2415) * (-x1074 + x1256 +
                       (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
           (x2522 * x442 - x442 * x998) *
             (x1051 - x568 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1074 + x1256 +
                 (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[215] =
    -20000000.0 * sc[10] * x1275 + 20000000.0 * sc[10] * x1288 + x1227 * x2522 -
    x1227 * x998 - x1233 * x5656 - x1245 * x2522 + x1245 * x998 +
    x1264 * x5656 - x1276 * x6702 + x1289 * x6702 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x1276 + x1289) +
    (-x2415) * (-x1272 + x379 +
                (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
    (x2522 * x442 - x442 * x998) *
      (-x1233 + x1264 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1272 + x379 +
          (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[247] = -20000000.0 * sc[10] * x1310 + 20000000.0 * sc[10] * x1322 +
           x1254 * x2522 - x1254 * x998 - x1260 * x2522 + x1260 * x998 -
           x1268 * x5656 + x1284 * x5656 + x1295 * x6702 - x1311 * x6702 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (x1295 - x1311) +
           (-x2415) * (-x1287 + x1319 +
                       (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
           (x2522 * x442 - x442 * x998) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[279] = -refCinv * sc[23] * x194 * x548 - 20000000.0 * sc[10] * x1361 +
           20000000.0 * sc[10] * x664 + x1263 * x2522 - x1263 * x998 -
           x1279 * x2522 + x1279 * x998 - x1306 * x5656 + x1314 * x5656 -
           x1362 * x6702 + 800000.0 * x284 * x318 * x868 + x650 * x6702 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (-x1362 + x650) +
           (-x2415) * (-x1356 + x333 +
                       (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
           (x2522 * x442 - x442 * x998) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[311] =
    -20000000.0 * sc[10] * x1370 + 20000000.0 * sc[10] * x1396 + x1298 * x2522 -
    x1298 * x998 - x1304 * x2522 + x1304 * x998 - x1351 * x5656 +
    x1355 * x5656 - x1391 * x6702 + x1398 * x6702 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x1391 + x1398) +
    (-x2415) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (x2522 * x442 - x442 * x998) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[343] = -sc[23] * x7261 + x1113 * x5656 + x1317 * x2522 - x1317 * x998 -
           x1328 * x2522 + x1328 * x998 + x2820 - x331 * x5656 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (x1124 - x1407) +
           (-x2415) * (-x1189 + x308 +
                       (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
           (x2522 * x442 - x442 * x998) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[375] =
    x5607 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1104 - x991) +
    (-x2415) * (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[407] =
    -20000000.0 * sc[10] * x1424 + 20000000.0 * sc[10] * x1433 + x1343 * x2522 -
    x1343 * x998 - x1388 * x5656 + x1404 * x5656 - x1425 * x6702 +
    x1434 * x6702 - x203 * x2522 + x203 * x998 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x1425 + x1434) +
    (-x2415) * (-x1423 + x1431 +
                (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
    (x2522 * x442 - x442 * x998) *
      (-x1388 + x1404 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1423 + x1431 +
          (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[439] =
    20000000.0 * sc[10] * x1443 - 20000000.0 * sc[10] * x1454 - sc[23] * x8658 +
    x1418 * x5656 + x1436 * x6702 - x1455 * x6702 + x2522 * x267 -
    x2522 * x621 - x267 * x998 - x298 * x5656 + x621 * x998 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1436 - x1455) +
    (-x2415) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (x2522 * x442 - x442 * x998) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[471] =
    -20000000.0 * sc[10] * x1463 + 20000000.0 * sc[10] * x397 + sc[25] * x6177 +
    x1386 * x2522 - x1386 * x998 - x1392 * x2522 + x1392 * x998 +
    x1420 * x5656 - x1422 * x5656 - x1480 * x6702 + x1489 * x6702 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x1480 + x1489) +
    (-x2415) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (x2522 * x442 - x442 * x998) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[503] = -20000000.0 * sc[10] * x1488 + 20000000.0 * sc[10] * x1505 +
           x1400 * x2522 - x1400 * x998 - x1401 * x2522 + x1401 * x998 -
           x1445 * x5656 + x1450 * x5656 - x1508 * x6702 + x169 * x6702 +
           800000.0 * x171 * x284 * x868 +
           (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
             (-x1508 + x169) +
           (-x2415) * (-x1503 + x383 +
                       (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
           (x2522 * x442 - x442 * x998) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[535] =
    -20000000.0 * sc[10] * x1519 + 20000000.0 * sc[10] * x1539 -
    800000.0 * sc[23] + x1155 * x2522 - x1155 * x998 - x1461 * x5656 +
    x1471 * x5656 - x1530 * x6702 + x1540 * x6702 - x2522 * x447 + x447 * x998 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x1530 + x1540) +
    (-x2415) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (x2522 * x442 - x442 * x998) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[567] =
    20000000.0 * sc[10] * x465 - 20000000.0 * sc[10] * x475 - x1157 * x2522 +
    x1157 * x998 - x1476 * x5656 + x2522 * x552 + x301 * x6702 - x527 * x6702 -
    x552 * x998 + x5656 * x99 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (x301 - x527) +
    (-x2415) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (x2522 * x442 - x442 * x998) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[599] =
    20000000.0 * sc[10] * x254 - 20000000.0 * sc[10] * x67 + x1429 * x2522 -
    x1429 * x998 - x1438 * x2522 + x1438 * x998 - x1494 * x5656 +
    x1502 * x5656 + x250 * x6702 - x469 * x6702 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (x250 - x469) +
    (-x2415) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (x2522 * x442 - x442 * x998) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[631] =
    x10448 + x1442 * x2522 - x1442 * x998 - x1448 * x2522 + x1448 * x998 -
    x1517 * x5656 + x1524 * x5656 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x581 + x599) +
    (-x2415) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (x2522 * x442 - x442 * x998) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[663] =
    -20000000.0 * sc[10] * x493 + 20000000.0 * sc[10] * x604 - x1467 * x2522 +
    x1467 * x998 - x1527 * x5656 + x196 * x2522 - x196 * x998 + x5656 * x864 -
    x659 * x6702 + x670 * x6702 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x659 + x670) +
    (-x2415) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (x2522 * x442 - x442 * x998) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[695] =
    -20000000.0 * sc[10] * x566 + 20000000.0 * sc[10] * x787 + x1196 * x5656 -
    x1470 * x2522 + x1470 * x998 + x197 * x2522 - x197 * x998 - x311 * x5656 -
    x589 * x6702 + x6702 * x855 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x589 + x855) +
    (-x2415) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (x2522 * x442 - x442 * x998) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[727] =
    -20000000.0 * sc[10] * x68 + 20000000.0 * sc[10] * x688 + x1484 * x2522 -
    x1484 * x998 - x1490 * x2522 + x1490 * x998 + x194 * x2521 + x445 * x5656 -
    x450 * x5656 + x6702 * x971 - x6702 * x980 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (x971 - x980) +
    (-x2415) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (x2522 * x442 - x442 * x998) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[759] =
    -sc[10] * x7261 - sc[13] * x8658 - 800000.0 * sc[16] - 28000000.0 * sc[23] +
    x10589 + x1499 * x2522 - x1499 * x998 - x1513 * x2522 + x1513 * x998 -
    x171 * x194 * x548 + x348 * x5656 - x468 * x5656 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (x949 - x996) +
    (-x2415) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (x2522 * x442 - x442 * x998) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[791] =
    -20000000.0 * sc[10] * x1963 + 20000000.0 * sc[10] * x306 - x1492 * x2522 +
    x1492 * x998 - x217 * x5656 + x2522 * x646 + x368 * x5656 - x646 * x998 -
    x6702 * x89 + x6702 * x985 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (-x89 + x985) +
    (-x2415) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (x2522 * x442 - x442 * x998) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[823] =
    20000000.0 * sc[10] * x359 + sc[14] * x6177 + x10169 + x10548 +
    x1055 * x6702 + x1535 * x2522 - x1535 * x998 + x5640 + x5656 * x655 +
    x8409 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1055 - x991) +
    (-x2415) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[855] =
    -20000000.0 * sc[10] * x575 + 20000000.0 * sc[10] * x678 + x2522 * x549 -
    x2522 * x550 + x295 + x371 * x5656 - x544 * x6702 - x549 * x998 +
    x550 * x998 - x555 * x5656 + x6702 * x815 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x544 + x815) +
    (-x2415) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (x2522 * x442 - x442 * x998) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[887] =
    x5607 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1104 - x991) +
    (-x2415) * (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[919] =
    x5607 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (x1104 - x991) +
    (-x2415) * (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[951] =
    20000000.0 * sc[10] * x1018 + x10169 + x10548 + x2522 * x553 +
    x372 * x5656 - x553 * x998 + x5640 + x647 * x6702 + x8409 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) * (x647 - x991) +
    (-x2415) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (x2522 * x442 - x442 * x998) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[983] =
    20000000.0 * sc[10] * x402 - 20000000.0 * sc[10] * x590 + x10169 +
    x1033 * x2522 - x1033 * x998 + x5640 + x5656 * x904 - x649 * x6702 +
    x6702 * x675 + x8409 +
    (-20000000.0 * sc[10] * x413 - x2522 * x441 + x441 * x998) *
      (-x649 + x675) +
    (-x2415) * (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (x2522 * x442 - x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[24] =
    x10554 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[56] =
    -60000000.0 * sc[24] * x1062 + 60000000.0 * sc[24] * x1106 + x10566 +
    x10921 - x1127 * x9644 + x1159 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1138 + x1162) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1160 - x472 + (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1127 + x1159 +
       (-10.0e-13 / (x366 * x373)) *
         (x1160 - x472 +
          (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[88] =
    -60000000.0 * sc[24] * x1121 + 60000000.0 * sc[24] * x1156 -
    sc[24] * x3855 + x10587 + x1197 * x9644 - x1205 * x9644 + x2648 + x7827 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1212 + x1243) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1234 - x36 + (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))) +
    (-60000000.0 * sc[24] * x442) *
      (x1197 - x1205 +
       (-10.0e-13 / (x366 * x373)) *
         (x1234 - x36 +
          (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[120] =
    sc[13] * x4270 + sc[15] * x4276 - 60000000.0 * sc[24] * x1170 +
    60000000.0 * sc[8] * x779 + x10924 + x340 * x9644 + x3909 + x4257 + x4287 +
    x4293 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1250 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1074 + x1248 + (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x340 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1248 +
          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[152] =
    x10554 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[184] =
    50000000.0 * sc[1] * x1257 - 60000000.0 * sc[24] * x1183 + x1051 * x7761 +
    x1051 * x9644 + x10924 + x1258 * x2743 + x4592 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1258 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1074 + x1256 + (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x1051 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x1256 +
          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[216] = -60000000.0 * sc[24] * x1227 + 60000000.0 * sc[24] * x1245 -
           sc[24] * x4314 - x1233 * x9644 + x1264 * x9644 + x2648 + x7680 +
           x7827 +
           (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
             (-x1276 + x1289) +
           (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
             (-x1272 + x379 +
              (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))) +
           (-60000000.0 * sc[24] * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[248] = -60000000.0 * sc[24] * x1254 + 60000000.0 * sc[24] * x1260 + x10652 -
           x1268 * x9644 + x1284 * x9644 + x7888 +
           (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
             (x1295 - x1311) +
           (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
             (-x1287 + x1319 +
              (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))) +
           (-60000000.0 * sc[24] * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[280] =
    -60000000.0 * sc[24] * x1263 + 60000000.0 * sc[24] * x1279 +
    60000000.0 * sc[3] * x779 + x10671 - x1306 * x9644 + x1314 * x9644 + x7917 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1362 + x650) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1356 + x333 + (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1306 + x1314 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1356 + x333 +
          (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[312] =
    -60000000.0 * sc[24] * x1298 + 60000000.0 * sc[24] * x1304 + x10684 +
    x10921 - x1351 * x9644 + x1355 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1391 + x1398) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1395 - x666 + (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1351 + x1355 +
       (-10.0e-13 / (x366 * x373)) *
         (x1395 - x666 +
          (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[344] =
    sc[12] * x7269 - 60000000.0 * sc[24] * x1317 + 60000000.0 * sc[24] * x1328 +
    x10921 + x1113 * x9644 - x331 * x9644 + x5354 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (x1124 - x1407) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1189 + x308 + (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))) +
    (-60000000.0 * sc[24] * x442) *
      (x1113 - x331 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1189 + x308 +
          (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[376] =
    x10554 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[408] = sc[10] * x7269 - 60000000.0 * sc[24] * x1343 +
           60000000.0 * sc[24] * x203 + x10921 - x1388 * x9644 + x1404 * x9644 +
           x3988 - x4611 + x7725 +
           (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
             (-x1425 + x1434) +
           (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
             (-x1423 + x1431 +
              (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))) +
           (-60000000.0 * sc[24] * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[440] =
    -60000000.0 * sc[24] * x267 + 60000000.0 * sc[24] * x621 + sc[3] * x4270 +
    x10726 + x10921 + x1418 * x9644 - x298 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (x1436 - x1455) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1451 + x1462 + (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))) +
    (-60000000.0 * sc[24] * x442) *
      (x1418 - x298 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1451 + x1462 +
          (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[472] =
    -60000000.0 * sc[24] * x1386 + 60000000.0 * sc[24] * x1392 + x10737 +
    x10921 + x1420 * x9644 - x1422 * x9644 + x4399 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1480 + x1489) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1475 - x1477 + (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))) +
    (-60000000.0 * sc[24] * x442) *
      (x1420 - x1422 +
       (-10.0e-13 / (x366 * x373)) *
         (x1475 - x1477 +
          (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[504] =
    6600000.0 * refCinv * sc[20] * x319 * x868 - 60000000.0 * sc[24] * x1400 +
    60000000.0 * sc[24] * x1401 - sc[24] * x4404 + sc[3] * x4276 + x10748 +
    x10921 - x1445 * x9644 + x1450 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1508 + x169) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1503 + x383 + (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1445 + x1450 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1503 + x383 +
          (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[536] =
    -60000000.0 * sc[24] * x1155 + 60000000.0 * sc[24] * x447 -
    9260000.0 * sc[24] + x10758 + x10921 - x1461 * x9644 + x1471 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) *
      (-x1530 + x1540) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1537 - x872 + (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1461 + x1471 +
       (-10.0e-13 / (x366 * x373)) *
         (x1537 - x872 +
          (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[568] =
    60000000.0 * sc[24] * x1157 - sc[24] * x4425 - 60000000.0 * sc[24] * x552 +
    x10775 - x1476 * x9644 + x8137 + x9644 * x99 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x301 - x527) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[600] =
    -60000000.0 * sc[24] * x1429 + 60000000.0 * sc[24] * x1438 + x10921 -
    x1494 * x9644 + x1502 * x9644 + x2678 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x250 - x469) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[632] =
    -60000000.0 * sc[24] * x1442 + 60000000.0 * sc[24] * x1448 + x10921 -
    x1517 * x9644 + x1524 * x9644 + x2674 + x4457 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x581 + x599) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[664] =
    60000000.0 * sc[24] * x1467 - 60000000.0 * sc[24] * x196 + x10512 + x10921 -
    x1527 * x9644 + 6600000.0 * x318 * x319 * x868 + x864 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x659 + x670) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))) +
    (-60000000.0 * sc[24] * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[696] =
    60000000.0 * sc[24] * x1470 - 60000000.0 * sc[24] * x197 + x10519 +
    x1196 * x9644 + x2648 - x311 * x9644 + x7827 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x589 + x855) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))) +
    (-60000000.0 * sc[24] * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[728] =
    -60000000.0 * sc[24] * x1484 + 60000000.0 * sc[24] * x1490 + x10921 +
    x445 * x9644 - x450 * x9644 + x75 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x971 - x980) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))) +
    (-60000000.0 * sc[24] * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[760] =
    -60000000.0 * sc[24] * x1499 + 60000000.0 * sc[24] * x1513 + x10594 +
    x10921 + x348 * x9644 - x468 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x949 - x996) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))) +
    (-60000000.0 * sc[24] * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[792] =
    -sc[15] * x4404 - 9260000.0 * sc[16] - sc[17] * x4425 +
    60000000.0 * sc[24] * x1492 - 60000000.0 * sc[24] * x646 - sc[2] * x3855 -
    sc[6] * x4314 + x10843 + x10921 - 60000000.0 * x194 - x217 * x9644 - x299 +
    x368 * x9644 - x4537 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x89 + x985) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1031 + x1042 + (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))) +
    (-60000000.0 * sc[24] * x442) *
      (-x217 + x368 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1031 + x1042 +
          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[824] =
    50000000.0 * sc[1] * x359 - 60000000.0 * sc[24] * x1535 +
    60000000.0 * sc[24] * x545 + x10171 + x1055 * x2743 + x10551 + x10553 +
    x655 * x7761 + x655 * x9644 + x7747 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1055 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[856] =
    -60000000.0 * sc[24] * x549 + 60000000.0 * sc[24] * x550 + x10859 + x10921 +
    x371 * x9644 - x555 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x544 + x815) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))) +
    (-60000000.0 * sc[24] * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[888] =
    x10554 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[920] =
    x10554 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x1104 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[952] =
    50000000.0 * sc[1] * x1018 - 60000000.0 * sc[24] * x553 + x10924 +
    x2743 * x647 + x372 * x7761 + x372 * x9644 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (x647 - x991) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))) +
    (-60000000.0 * sc[24] * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[984] =
    x10876 + x10919 +
    (-50000000.0 * sc[1] * x413 + 60000000.0 * sc[24] * x441) * (-x649 + x675) +
    (-1500000.0 * sc[12] * x1468 * exp(x2489) - x2604) *
      (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))) +
    (-60000000.0 * sc[24] * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[25] =
    x9070 + (-x441 * x998) * (x1104 - x991) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[57] = x1062 * x998 - x1106 * x998 + (-x441 * x998) * (-x1138 + x1162) +
          (x442 * x998) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[89] = x1121 * x998 - x1156 * x998 + (-x441 * x998) * (-x1212 + x1243) +
          (x442 * x998) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[121] =
    x1170 * x998 - x5640 + (-x441 * x998) * (x1250 - x991) +
    (x442 * x998) * (x340 - x568 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1074 + x1248 +
                        (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[153] =
    x9070 + (-x441 * x998) * (x1104 - x991) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[185] =
    x1183 * x998 - x5640 + (-x441 * x998) * (x1258 - x991) +
    (x442 * x998) * (x1051 - x568 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1074 + x1256 +
                        (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[217] = x1227 * x998 - x1245 * x998 + (-x441 * x998) * (-x1276 + x1289) +
           (x442 * x998) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[249] = x1254 * x998 - x1260 * x998 + (-x441 * x998) * (x1295 - x1311) +
           (x442 * x998) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[281] =
    refCinv * sc[23] * x194 * x548 + 6.2e+41 * ((sc[10]) * (sc[10])) * x5902 +
    x1263 * x998 - x1279 * x998 + (-x441 * x998) * (-x1362 + x650) +
    (x442 * x998) * (-x1306 + x1314 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1356 + x333 +
                        (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[313] = x1298 * x998 - x1304 * x998 + (-x441 * x998) * (-x1391 + x1398) +
           (x442 * x998) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[345] =
    1.24e+42 * sc[10] * sc[8] * x5902 + x1317 * x998 - x1328 * x998 +
    (-x441 * x998) * (x1124 - x1407) +
    (x442 * x998) * (x1113 - x331 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1189 + x308 +
                        (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[377] =
    x9070 + (-x441 * x998) * (x1104 - x991) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[409] = x1343 * x998 - x203 * x998 + (-x441 * x998) * (-x1425 + x1434) +
           (x442 * x998) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[441] =
    x267 * x998 - x621 * x998 + x8614 + (-x441 * x998) * (x1436 - x1455) +
    (x442 * x998) * (x1418 - x298 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1451 + x1462 +
                        (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[473] = -sc[25] * x6177 + x1386 * x998 - x1392 * x998 + x9269 +
           (-x441 * x998) * (-x1480 + x1489) +
           (x442 * x998) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[505] = -sc[25] * x8726 + x1400 * x998 - x1401 * x998 +
           (-x441 * x998) * (-x1508 + x169) +
           (x442 * x998) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[537] = x1155 * x998 - x447 * x998 + (-x441 * x998) * (-x1530 + x1540) +
           (x442 * x998) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[569] =
    -x1157 * x998 + x552 * x998 + (-x441 * x998) * (x301 - x527) +
    (x442 * x998) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[601] =
    x1429 * x998 - x1438 * x998 + (-x441 * x998) * (x250 - x469) +
    (x442 * x998) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[633] =
    -sc[25] * x9409 + x1442 * x998 - x1448 * x998 +
    (-x441 * x998) * (-x581 + x599) +
    (x442 * x998) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[665] =
    -x1467 * x998 + x196 * x998 + (-x441 * x998) * (-x659 + x670) +
    (x442 * x998) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[697] =
    -x1470 * x998 + x197 * x998 + (-x441 * x998) * (-x589 + x855) +
    (x442 * x998) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[729] =
    x1484 * x998 - x1490 * x998 + (-x441 * x998) * (x971 - x980) +
    (x442 * x998) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[761] =
    x1499 * x998 - x1513 * x998 + x171 * x194 * x548 +
    (-x441 * x998) * (x949 - x996) +
    (x442 * x998) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[793] =
    -x1492 * x998 + x646 * x998 + (-x441 * x998) * (-x89 + x985) +
    (x442 * x998) * (-x217 + x368 +
                     (-10.0e-13 / (x366 * x373)) *
                       (-x1031 + x1042 +
                        (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[825] =
    -sc[14] * x6177 - sc[15] * x8726 - sc[19] * x9409 + x1535 * x998 - x5640 -
    6.2e+41 * exp(-49667.484914925801 * invT - 7.87 * logT) +
    (-x441 * x998) * (x1055 - x991) +
    (x442 * x998) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[857] =
    x549 * x998 - x550 * x998 + x8995 + x9539 +
    (-x441 * x998) * (-x544 + x815) +
    (x442 * x998) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[889] =
    x9070 + (-x441 * x998) * (x1104 - x991) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[921] =
    x9070 + (-x441 * x998) * (x1104 - x991) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[953] =
    x553 * x998 - x5640 + (-x441 * x998) * (x647 - x991) +
    (x442 * x998) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[985] =
    x9070 + (-x441 * x998) * (-x649 + x675) +
    (x442 * x998) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[26] =
    x10927 + (x2429 * x441) * (x1104 - x991) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[58] = -x1062 * x2429 + x1106 * x2429 + x5546 +
          (x2429 * x441) * (-x1138 + x1162) +
          (-x2429 * x442) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[90] = 100000000.0 * sc[14] * x1214 - 100000000.0 * sc[14] * x535 -
          x1121 * x2429 + x1156 * x2429 + (x2429 * x441) * (-x1212 + x1243) +
          (-x2429 * x442) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[122] =
    -x1170 * x2429 + x2429 * x545 + x5546 + (x2429 * x441) * (x1250 - x991) +
    (-x2429 * x442) * (x340 - x568 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1074 + x1248 +
                          (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[154] =
    x10927 + (x2429 * x441) * (x1104 - x991) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[186] =
    -x1183 * x2429 + x2429 * x545 + x5546 + (x2429 * x441) * (x1258 - x991) +
    (-x2429 * x442) * (x1051 - x568 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1074 + x1256 +
                          (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[218] = -100000000.0 * sc[14] * x1223 + 100000000.0 * sc[14] * x1225 -
           x1227 * x2429 + x1245 * x2429 + (x2429 * x441) * (-x1276 + x1289) +
           (-x2429 * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[250] = -x1254 * x2429 + x1260 * x2429 + x5546 +
           (x2429 * x441) * (x1295 - x1311) +
           (-x2429 * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[282] = -x1263 * x2429 + x1279 * x2429 + x5929 +
           (x2429 * x441) * (-x1362 + x650) +
           (-x2429 * x442) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[314] = 100000000.0 * sc[14] * x83 +
           13900000.0 * sc[14] * exp(-2279.5714960953801 * invT) -
           x1298 * x2429 + x1304 * x2429 + x5544 +
           (x2429 * x441) * (-x1391 + x1398) +
           (-x2429 * x442) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[346] = sc[23] * x7261 - x1317 * x2429 + x1328 * x2429 + x5546 +
           (x2429 * x441) * (x1124 - x1407) +
           (-x2429 * x442) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[378] =
    100000000.0 * sc[14] * x121 + x10929 + (x2429 * x441) * (x1104 - x991) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[410] = 100000000.0 * sc[14] * x671 - 100000000.0 * sc[14] * x680 -
           x1343 * x2429 + x203 * x2429 + (x2429 * x441) * (-x1425 + x1434) +
           (-x2429 * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[442] = 100000000.0 * sc[14] * x1096 - 100000000.0 * sc[14] * x1270 -
           x2429 * x267 + x2429 * x621 - x8614 +
           (x2429 * x441) * (x1436 - x1455) +
           (-x2429 * x442) *
             (x1418 - x298 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1451 + x1462 +
                 (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[474] = 100000000.0 * sc[14] * x1889 - 100000000.0 * sc[14] * x1890 +
           13900000.0 * sc[9] * exp(-2279.5714960953801 * invT) -
           x1386 * x2429 + x1392 * x2429 - x9269 + 100000000.0 * x942 +
           (x2429 * x441) * (-x1480 + x1489) +
           (-x2429 * x442) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[506] = 100000000.0 * sc[14] * x1894 - 100000000.0 * sc[14] * x1895 +
           sc[25] * x8726 - x1400 * x2429 + x1401 * x2429 +
           (x2429 * x441) * (-x1508 + x169) +
           (-x2429 * x442) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[538] = 100000000.0 * sc[14] * x1899 - 100000000.0 * sc[14] * x1900 -
           x1155 * x2429 + x2429 * x447 + (x2429 * x441) * (-x1530 + x1540) +
           (-x2429 * x442) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[570] =
    100000000.0 * sc[14] * x1059 - 100000000.0 * sc[14] * x1060 +
    x1157 * x2429 - x2429 * x552 + (x2429 * x441) * (x301 - x527) +
    (-x2429 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[602] =
    100000000.0 * sc[14] * x1068 - 100000000.0 * sc[14] * x33 - x1429 * x2429 +
    x1438 * x2429 + (x2429 * x441) * (x250 - x469) +
    (-x2429 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[634] =
    100000000.0 * sc[14] * x1088 - 100000000.0 * sc[14] * x684 +
    sc[25] * x9409 - x1442 * x2429 + x1448 * x2429 +
    (x2429 * x441) * (-x581 + x599) +
    (-x2429 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[666] =
    x1467 * x2429 - x196 * x2429 + x5546 + (x2429 * x441) * (-x659 + x670) +
    (-x2429 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[698] =
    100000000.0 * sc[14] * x1087 - 100000000.0 * sc[14] * x1100 +
    x1470 * x2429 - x197 * x2429 + (x2429 * x441) * (-x589 + x855) +
    (-x2429 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[730] =
    -x1484 * x2429 + x1490 * x2429 + x5546 + (x2429 * x441) * (x971 - x980) +
    (-x2429 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[762] =
    sc[10] * x7261 + 100000000.0 * sc[14] * x1131 - x1499 * x2429 +
    x1513 * x2429 + x5544 + (x2429 * x441) * (x949 - x996) +
    (-x2429 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[794] =
    x1492 * x2429 - x2429 * x646 + x5546 + (x2429 * x441) * (-x89 + x985) +
    (-x2429 * x442) * (-x217 + x368 +
                       (-10.0e-13 / (x366 * x373)) *
                         (-x1031 + x1042 +
                          (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[826] =
    sc[15] * x8726 + sc[19] * x9409 - x1535 * x2429 + x2429 * x545 + x5546 +
    (x2429 * x441) * (x1055 - x991) +
    (-x2429 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[858] =
    100000000.0 * sc[14] * x1139 - 100000000.0 * sc[8] * x1093 - sc[8] * x5923 -
    x194 * x2428 - x2429 * x549 + x2429 * x550 - x295 + x5544 - x8995 - x9539 +
    (x2429 * x441) * (-x544 + x815) +
    (-x2429 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[890] =
    100000000.0 * sc[14] * x1143 + x10929 + (x2429 * x441) * (x1104 - x991) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[922] =
    100000000.0 * sc[14] * x1092 + x10929 +
    3.76e+54 * exp(-36634.173270583597 * invT - 12.06 * logT) +
    (x2429 * x441) * (x1104 - x991) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[954] =
    100000000.0 * sc[14] * x1080 + x2429 * x545 - x2429 * x553 + x5544 +
    (x2429 * x441) * (x647 - x991) +
    (-x2429 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[986] =
    x10927 + (x2429 * x441) * (-x649 + x675) +
    (-x2429 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[27] = x10443;
  J[59] = x10443;
  J[91] = -sc[27] * x3850 + x10583 + x1214 * x7750 - x535 * x7750;
  J[123] = x10443;
  J[155] = x10443;
  J[187] = x10443;
  J[219] = -sc[27] * x4788 + x10583 - x1223 * x7750 + x1225 * x7750;
  J[251] = x10650;
  J[283] = x10667;
  J[315] = x10681 + x7750 * x83;
  J[347] = x10443;
  J[379] = sc[19] * x4960 + x10681 + x121 * x7750 + x3983 +
           1.1e+91 * x526 * x7553 * x7574 + x7620 + x7625;
  J[411] = x3987 + x671 * x7750 - x680 * x7750 + x7560 + x7749 * x942;
  J[443] = x1096 * x7750 - x1270 * x7750 + x7560 + x7635;
  J[475] = -400000000.0 * sc[27] + x1889 * x7750 - x1890 * x7750 + x7560;
  J[507] = x1894 * x7750 - x1895 * x7750 + x7560 + x7641 + x9900;
  J[539] = -sc[27] * x7645 - 5000000.0 * sc[27] + x1899 * x7750 -
           x1900 * x7750 + x7560;
  J[571] = -sc[27] * x7650 + x10772;
  J[603] = x1068 * x7750 - x33 * x7750 + x7560;
  J[635] = sc[11] * x4960 + sc[29] * x190 + x10020 + x10450;
  J[667] = x10443;
  J[699] = x10583 + x1087 * x7750 - x1100 * x7750;
  J[731] = x10443;
  J[763] = x10681 + x1131 * x7750;
  J[795] = x10443;
  J[827] = x10443;
  J[859] = x10681 + x1139 * x7750;
  J[891] = -400000000.0 * sc[14] - sc[16] * x7645 - 5000000.0 * sc[16] -
           sc[17] * x7650 - 1.1e+91 * sc[19] * x7543 * x7553 - sc[19] * x8180 -
           sc[2] * x3850 - sc[6] * x4788 + x10681 + x1143 * x7750;
  J[923] = x10681 + x1092 * x7750;
  J[955] =
    5000000.0 * sc[15] * x423 * x9898 + sc[19] * x190 + x10681 + x1080 * x7750;
  J[987] = x10443;
  J[28] = x10931;
  J[60] = x10931;
  J[92] = 30000000.0 * sc[15] * x1214 - 30000000.0 * sc[15] * x535 +
          x1214 * x8329 - x535 * x8329;
  J[124] = x10931;
  J[156] = x10931;
  J[188] = x10931;
  J[220] = -30000000.0 * sc[15] * x1223 + 30000000.0 * sc[15] * x1225 -
           x1223 * x8329 + x1225 * x8329;
  J[252] = x10931;
  J[284] = 30000000.0 * sc[15] * x1286 - 30000000.0 * sc[15] * x523 +
           sc[26] * x5923 + x1286 * x8329 - x523 * x8329;
  J[316] = sc[14] * x6853 + 30000000.0 * sc[15] * x83 + x10930 + x83 * x8329;
  J[348] = x10931;
  J[380] = 30000000.0 * sc[15] * x121 + x10930 + x121 * x8329;
  J[412] = 30000000.0 * sc[15] * x671 - 30000000.0 * sc[15] * x680 +
           x671 * x8329 - x680 * x8329;
  J[444] = 30000000.0 * sc[15] * x1096 - 30000000.0 * sc[15] * x1270 +
           x1096 * x8329 - x1270 * x8329 +
           26000000.0 * x942 * exp(-3079.6859947248799 * invT);
  J[476] = 30000000.0 * sc[15] * x1889 - 30000000.0 * sc[15] * x1890 -
           sc[28] * x45 + sc[9] * x6853 + x1889 * x8329 - x1890 * x8329;
  J[508] = 30000000.0 * sc[15] * x1894 - 30000000.0 * sc[15] * x1895 +
           x1894 * x8329 - x1895 * x8329 + 30000000.0 * x942;
  J[540] = 30000000.0 * sc[15] * x1899 - 30000000.0 * sc[15] * x1900 +
           x1899 * x8329 - x1900 * x8329;
  J[572] = 30000000.0 * sc[15] * x1059 - 30000000.0 * sc[15] * x1060 +
           x1059 * x8329 - x1060 * x8329;
  J[604] = 30000000.0 * sc[15] * x1068 - 30000000.0 * sc[15] * x33 +
           x1068 * x8329 - x33 * x8329;
  J[636] = x1088 * x8329 + x2670 - x684 * x8329;
  J[668] = x10931;
  J[700] = 30000000.0 * sc[15] * x1087 - 30000000.0 * sc[15] * x1100 +
           x1087 * x8329 - x1100 * x8329;
  J[732] = x10931;
  J[764] = 30000000.0 * sc[15] * x1131 + x10930 + x1131 * x8329;
  J[796] = x10931;
  J[828] = x10931;
  J[860] = 30000000.0 * sc[15] * x1139 + sc[8] * x5923 + x10930 + x1139 * x8329;
  J[892] = 30000000.0 * sc[15] * x1143 + x10930 + x1143 * x8329;
  J[924] = -sc[14] * x45 + 30000000.0 * sc[15] * x1092 -
           30000000.0 * sc[19] * x1094 - sc[19] * x6700 + x1092 * x8329 +
           x10930 - 3.76e+54 * exp(-36634.173270583597 * invT - 12.06 * logT);
  J[956] = 30000000.0 * sc[15] * x1080 + x1080 * x8329 + x10930;
  J[988] = x10931;
  J[29] =
    x10540 + (-x2434 * x441) * (x1104 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[61] = x1062 * x2434 - x1106 * x2434 + (-x2434 * x441) * (-x1138 + x1162) +
          (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
           x2619 * x436 - x2661 * x436 - x436 * x558) *
            (x509) +
          (x2434 * x442) *
            (-x1127 + x1159 +
             (-10.0e-13 / (x366 * x373)) *
               (x1160 - x472 +
                (-x396) * (-x1134 + x1161 + (-x413) * (-x1138 + x1162))));
  J[93] = x1121 * x2434 - x1156 * x2434 + x175 * x420 + x2528 * x420 +
          x2566 * x420 + x2593 * x420 + x2619 * x420 + x2661 * x420 +
          x3869 * x542 + x420 * x558 + (-x2434 * x441) * (-x1212 + x1243) +
          (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
           x2619 * x436 - x2661 * x436 - x436 * x558) *
            (x1214 - x535) +
          (x2434 * x442) *
            (x1197 - x1205 +
             (-10.0e-13 / (x366 * x373)) *
               (x1234 - x36 +
                (-x396) * (-x1211 + x1242 + (-x413) * (-x1212 + x1243))));
  J[125] =
    x10539 + x1170 * x2434 + (-x2434 * x441) * (x1250 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) * (x340 - x568 +
                      (-10.0e-13 / (x366 * x373)) *
                        (-x1074 + x1248 +
                         (-x396) * (x1249 - x591 + (-x413) * (x1250 - x991))));
  J[157] =
    x10540 + (-x2434 * x441) * (x1104 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[189] =
    x10539 + x1183 * x2434 + (-x2434 * x441) * (x1258 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) * (x1051 - x568 +
                      (-10.0e-13 / (x366 * x373)) *
                        (-x1074 + x1256 +
                         (-x396) * (x1257 - x591 + (-x413) * (x1258 - x991))));
  J[221] = x2528 * x416 + x2566 * x416 + x2593 * x416 + x2619 * x416 +
           x2661 * x416 + x416 * x558 + x6772 +
           (-x2434 * x441) * (-x1276 + x1289) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (-x1223 + x1225) +
           (x2434 * x442) *
             (-x1233 + x1264 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1272 + x379 +
                 (-x396) * (-x1275 + x1288 + (-x413) * (-x1276 + x1289))));
  J[253] = x1254 * x2434 - x1260 * x2434 + (-x2434 * x441) * (x1295 - x1311) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x509) +
           (x2434 * x442) *
             (-x1268 + x1284 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1287 + x1319 +
                 (-x396) * (-x1310 + x1322 + (-x413) * (x1295 - x1311))));
  J[285] = -3980000000000000.0 * kf_qss[116] * ((refCinv) * (refCinv)) *
             sc[19] * sc_qss[8] * exp(x2659 + x3951) / x428 -
           x10212 + x10668 - x182 - x414 - x8519 - x9172 +
           (-x2434 * x441) * (-x1362 + x650) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x1286 - x523) +
           (x2434 * x442) *
             (-x1306 + x1314 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1356 + x333 +
                 (-x396) * (-x1361 + x664 + (-x413) * (-x1362 + x650))));
  J[317] = x1298 * x2434 - x1304 * x2434 + x194 * x2433 +
           (-x2434 * x441) * (-x1391 + x1398) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (-x1152 + x83) +
           (x2434 * x442) *
             (-x1351 + x1355 +
              (-10.0e-13 / (x366 * x373)) *
                (x1395 - x666 +
                 (-x396) * (-x1370 + x1396 + (-x413) * (-x1391 + x1398))));
  J[349] = x1317 * x2434 - x1328 * x2434 + (-x2434 * x441) * (x1124 - x1407) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x509) +
           (x2434 * x442) *
             (x1113 - x331 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1189 + x308 +
                 (-x396) * (x1015 - x1406 + (-x413) * (x1124 - x1407))));
  J[381] =
    x10540 + (-x2434 * x441) * (x1104 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (-x1152 + x121) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[413] = -sc[29] * x3998 + x1343 * x2434 - x175 * x771 - x203 * x2434 -
           x2528 * x771 - x2566 * x771 - x2593 * x771 - x2619 * x771 -
           x2661 * x771 - x558 * x771 + (-x2434 * x441) * (-x1425 + x1434) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x671 - x680) +
           (x2434 * x442) *
             (-x1388 + x1404 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1423 + x1431 +
                 (-x396) * (-x1424 + x1433 + (-x413) * (-x1425 + x1434))));
  J[445] = -sc[29] * x8646 - x175 * x682 + x2434 * x267 - x2434 * x621 -
           x2528 * x682 - x2566 * x682 - x2593 * x682 - x2619 * x682 -
           x2661 * x682 - x558 * x682 + (-x2434 * x441) * (x1436 - x1455) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x1096 - x1270) +
           (x2434 * x442) *
             (x1418 - x298 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1451 + x1462 +
                 (-x396) * (x1443 - x1454 + (-x413) * (x1436 - x1455))));
  J[477] = 400000000.0 * sc[27] - sc[29] * x9300 + x1386 * x2434 -
           x1392 * x2434 - x175 * x653 - x2528 * x653 - x2566 * x653 -
           x2593 * x653 - x2619 * x653 - x2661 * x653 - x558 * x653 +
           (-x2434 * x441) * (-x1480 + x1489) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x1889 - x1890) +
           (x2434 * x442) *
             (x1420 - x1422 +
              (-10.0e-13 / (x366 * x373)) *
                (x1475 - x1477 +
                 (-x396) * (-x1463 + x397 + (-x413) * (-x1480 + x1489))));
  J[509] = -sc[29] * x9903 + x1400 * x2434 - x1401 * x2434 + x175 * x418 +
           x2528 * x418 + x2565 * x3869 + x2566 * x418 + x2593 * x418 +
           x2619 * x418 + x2661 * x418 + x418 * x558 - x9900 +
           (-x2434 * x441) * (-x1508 + x169) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x1894 - x1895) +
           (x2434 * x442) *
             (-x1445 + x1450 +
              (-10.0e-13 / (x366 * x373)) *
                (-x1503 + x383 +
                 (-x396) * (-x1488 + x1505 + (-x413) * (-x1508 + x169))));
  J[541] = 5000000.0 * sc[27] - sc[29] * x1101 + x1155 * x2434 + x175 * x427 -
           x2434 * x447 + x2527 * x3869 + x2528 * x427 + x2566 * x427 +
           x2593 * x427 + x2619 * x427 + x2661 * x427 + x427 * x558 +
           (-x2434 * x441) * (-x1530 + x1540) +
           (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 -
            x2619 * x436 - x2661 * x436 - x436 * x558) *
             (x1899 - x1900) +
           (x2434 * x442) *
             (-x1461 + x1471 +
              (-10.0e-13 / (x366 * x373)) *
                (x1537 - x872 +
                 (-x396) * (-x1519 + x1539 + (-x413) * (-x1530 + x1540))));
  J[573] =
    -x1157 * x2434 + x175 * x422 + x2434 * x552 + x2528 * x422 + x2566 * x422 +
    x2592 * x3869 + x2593 * x422 + x2619 * x422 + x2661 * x422 + x422 * x558 +
    (-x2434 * x441) * (x301 - x527) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1059 - x1060) +
    (x2434 * x442) *
      (-x1476 + x99 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1528 + x387 + (-x396) * (x465 - x475 + (-x413) * (x301 - x527))));
  J[605] =
    x1429 * x2434 - x1438 * x2434 + x175 * x398 + x2528 * x398 + x2566 * x398 +
    x2593 * x398 + x2619 * x398 + x2661 * x398 +
    180000.0 * x3869 * exp(-4139.46029290962 * invT) + x398 * x558 +
    (-x2434 * x441) * (x250 - x469) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1068 - x33) +
    (x2434 * x442) *
      (-x1494 + x1502 +
       (-10.0e-13 / (x366 * x373)) *
         (-x459 + x519 + (-x396) * (x254 - x67 + (-x413) * (x250 - x469))));
  J[637] =
    3980000000000000.0 * refCinv * x3869 * exp(x2659) - x10020 + x25 +
    x2528 * x425 + x2566 * x425 + x2593 * x425 + x2619 * x425 + x2661 * x425 +
    x425 * x558 + (-x2434 * x441) * (-x581 + x599) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1088 - x684) +
    (x2434 * x442) *
      (-x1517 + x1524 +
       (-10.0e-13 / (x366 * x373)) *
         (-x362 + x455 + (-x396) * (-x28 + x597 + (-x413) * (-x581 + x599))));
  J[669] =
    -x1467 * x2434 + x196 * x2434 + (-x2434 * x441) * (-x659 + x670) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (-x1527 + x864 +
       (-10.0e-13 / (x366 * x373)) *
         (-x534 + x563 + (-x396) * (-x493 + x604 + (-x413) * (-x659 + x670))));
  J[701] =
    -x1470 * x2434 + x197 * x2434 + (-x2434 * x441) * (-x589 + x855) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1087 - x1100) +
    (x2434 * x442) *
      (x1196 - x311 +
       (-10.0e-13 / (x366 * x373)) *
         (-x481 + x561 + (-x396) * (-x566 + x787 + (-x413) * (-x589 + x855))));
  J[733] =
    x1484 * x2434 - x1490 * x2434 + (-x2434 * x441) * (x971 - x980) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (x445 - x450 +
       (-10.0e-13 / (x366 * x373)) *
         (x369 - x390 + (-x396) * (-x68 + x688 + (-x413) * (x971 - x980))));
  J[765] =
    x1499 * x2434 - x1513 * x2434 + (-x2434 * x441) * (x949 - x996) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1131 - x1152) +
    (x2434 * x442) *
      (x348 - x468 +
       (-10.0e-13 / (x366 * x373)) *
         (x1004 - x626 + (-x396) * (x1009 - x1081 + (-x413) * (x949 - x996))));
  J[797] =
    -x1492 * x2434 + x2434 * x646 + (-x2434 * x441) * (-x89 + x985) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) * (-x217 + x368 +
                      (-10.0e-13 / (x366 * x373)) *
                        (-x1031 + x1042 +
                         (-x396) * (-x1963 + x306 + (-x413) * (-x89 + x985))));
  J[829] =
    x10539 + x1535 * x2434 + (-x2434 * x441) * (x1055 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (-x568 + x655 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x336 + (-x396) * (x359 - x591 + (-x413) * (x1055 - x991))));
  J[861] =
    x2434 * x549 - x2434 * x550 + (-x2434 * x441) * (-x544 + x815) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1139 - x1152) +
    (x2434 * x442) *
      (x371 - x555 +
       (-10.0e-13 / (x366 * x373)) *
         (-x482 + x567 + (-x396) * (-x575 + x678 + (-x413) * (-x544 + x815))));
  J[893] =
    400000000.0 * sc[14] + 5000000.0 * sc[16] + x10540 +
    (-x2434 * x441) * (x1104 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1143 - x1152) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[925] =
    x10540 + (-x2434 * x441) * (x1104 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1092 - x1152) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x1083 - x591 + (-x413) * (x1104 - x991))));
  J[957] =
    -sc[12] * x3998 - sc[13] * x8646 - sc[14] * x9300 -
    5000000.0 * sc[15] * x423 * x9898 - sc[15] * x9903 - sc[16] * x1101 +
    x10871 - x1169 * x2528 - x1169 * x2566 - x1169 * x2593 - x1169 * x2619 -
    x1169 * x2661 - x1169 * x558 - 10000000.0 * x812 -
    3980000000000000.0 * exp(-43729.528258430102 * invT) +
    (-x2434 * x441) * (x647 - x991) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x1080 - x1152) +
    (x2434 * x442) *
      (x372 - x568 +
       (-10.0e-13 / (x366 * x373)) *
         (-x1074 + x479 + (-x396) * (x1018 - x591 + (-x413) * (x647 - x991))));
  J[989] =
    x10540 + (-x2434 * x441) * (-x649 + x675) +
    (-x175 * x436 - x2528 * x436 - x2566 * x436 - x2593 * x436 - x2619 * x436 -
     x2661 * x436 - x436 * x558) *
      (x509) +
    (x2434 * x442) *
      (x577 + (-10.0e-13 / (x366 * x373)) *
                (x907 + (-x396) * (x402 - x590 + (-x413) * (-x649 + x675))));
  J[30] = 0;
  J[62] = 0;
  J[94] = 0;
  J[126] = 0;
  J[158] = 0;
  J[190] = 0;
  J[222] = 0;
  J[254] = 0;
  J[286] = 0;
  J[318] = 0;
  J[350] = 0;
  J[382] = 0;
  J[414] = 0;
  J[446] = 0;
  J[478] = 0;
  J[510] = 0;
  J[542] = 0;
  J[574] = 0;
  J[606] = 0;
  J[638] = 0;
  J[670] = 0;
  J[702] = 0;
  J[734] = 0;
  J[766] = 0;
  J[798] = 0;
  J[830] = 0;
  J[862] = 0;
  J[894] = 0;
  J[926] = 0;
  J[958] = 0;
  J[990] = 0;

  for (int k = 0; k < 31; k++) {
    J[992 + k] = (wdot_pert1[k] - wdot[k]) / (pertT);
  }
  amrex::Real c_R[31], dcRdT[31], e_RT[31];
  amrex::Real* eh_RT;
  if (consP == 1) {
    cp_R(c_R, T);
    dcvpRdT(dcRdT, T);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, T);
    dcvpRdT(dcRdT, T);
    speciesInternalEnergy(e_RT, T);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 31; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[992 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 31; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 31; ++m) {
      dehmixdc += eh_RT[m] * J[k * 32 + m];
    }
    J[k * 32 + 31] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1023] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
#else
  amrex::Abort();
#endif
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(
  amrex::Real* J,
  const amrex::Real* sc,
  const amrex::Real* Tp,
  const int* consP)
{
  amrex::Real c[31];

  for (int k = 0; k < 31; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 31; k++) {
    J[992 + k] *= 1.e-6;
    J[k * 32 + 31] *= 1.e6;
  }
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 126;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 19344;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 31;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 1.54297000E+02;
  WT[1] = 2.80540000E+01;
  WT[2] = 1.60430000E+01;
  WT[3] = 4.20810000E+01;
  WT[4] = 5.61080000E+01;
  WT[5] = 5.61080000E+01;
  WT[6] = 2.01600000E+00;
  WT[7] = 3.00700000E+01;
  WT[8] = 2.80100000E+01;
  WT[9] = 7.81140000E+01;
  WT[10] = 2.60380000E+01;
  WT[11] = 9.21410000E+01;
  WT[12] = 1.50350000E+01;
  WT[13] = 3.19980000E+01;
  WT[14] = 1.59990000E+01;
  WT[15] = 1.70070000E+01;
  WT[16] = 3.30060000E+01;
  WT[17] = 1.80150000E+01;
  WT[18] = 3.40140000E+01;
  WT[19] = 1.00800000E+00;
  WT[20] = 3.00260000E+01;
  WT[21] = 4.40090000E+01;
  WT[22] = 4.20370000E+01;
  WT[23] = 3.90570000E+01;
  WT[24] = 4.10730000E+01;
  WT[25] = 8.00860000E+01;
  WT[26] = 6.50950000E+01;
  WT[27] = 9.11330000E+01;
  WT[28] = 9.31050000E+01;
  WT[29] = 1.06124000E+02;
  WT[30] = 2.80140000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 1.77645000E+02;
  EPS[1] = 2.80800000E+02;
  EPS[2] = 1.41400000E+02;
  EPS[3] = 2.66800000E+02;
  EPS[4] = 3.57000000E+02;
  EPS[5] = 3.57000000E+02;
  EPS[6] = 3.80000000E+01;
  EPS[7] = 2.52300000E+02;
  EPS[8] = 9.81000000E+01;
  EPS[9] = 4.64800000E+02;
  EPS[10] = 2.09000000E+02;
  EPS[11] = 4.95300000E+02;
  EPS[12] = 1.44000000E+02;
  EPS[13] = 1.07400000E+02;
  EPS[14] = 8.00000000E+01;
  EPS[15] = 8.00000000E+01;
  EPS[16] = 1.07400000E+02;
  EPS[17] = 5.72400000E+02;
  EPS[18] = 1.07400000E+02;
  EPS[19] = 1.45000000E+02;
  EPS[20] = 4.98000000E+02;
  EPS[21] = 2.44000000E+02;
  EPS[22] = 4.36000000E+02;
  EPS[23] = 2.52000000E+02;
  EPS[24] = 2.66800000E+02;
  EPS[25] = 4.64800000E+02;
  EPS[26] = 3.57000000E+02;
  EPS[27] = 4.95300000E+02;
  EPS[28] = 4.64800000E+02;
  EPS[29] = 5.93000000E+02;
  EPS[30] = 9.75300000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 9.60500000E+00;
  SIG[1] = 3.97100000E+00;
  SIG[2] = 3.74600000E+00;
  SIG[3] = 4.98200000E+00;
  SIG[4] = 5.17600000E+00;
  SIG[5] = 5.17600000E+00;
  SIG[6] = 2.92000000E+00;
  SIG[7] = 4.30200000E+00;
  SIG[8] = 3.65000000E+00;
  SIG[9] = 5.29000000E+00;
  SIG[10] = 4.10000000E+00;
  SIG[11] = 5.68000000E+00;
  SIG[12] = 3.80000000E+00;
  SIG[13] = 3.45800000E+00;
  SIG[14] = 2.75000000E+00;
  SIG[15] = 2.75000000E+00;
  SIG[16] = 3.45800000E+00;
  SIG[17] = 2.60500000E+00;
  SIG[18] = 3.45800000E+00;
  SIG[19] = 2.05000000E+00;
  SIG[20] = 3.59000000E+00;
  SIG[21] = 3.76300000E+00;
  SIG[22] = 3.97000000E+00;
  SIG[23] = 4.76000000E+00;
  SIG[24] = 4.98200000E+00;
  SIG[25] = 5.29000000E+00;
  SIG[26] = 5.18000000E+00;
  SIG[27] = 5.68000000E+00;
  SIG[28] = 5.29000000E+00;
  SIG[29] = 5.47000000E+00;
  SIG[30] = 3.62100000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 0.00000000E+00;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 4.30000000E-01;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 0.00000000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 1.84400000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 0.00000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 4.30000000E-01;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 2.80000000E+00;
  DIP[30] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 2.60000000E+00;
  POL[3] = 0.00000000E+00;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 7.90000000E-01;
  POL[7] = 0.00000000E+00;
  POL[8] = 1.95000000E+00;
  POL[9] = 1.03200000E+01;
  POL[10] = 0.00000000E+00;
  POL[11] = 1.23000000E+01;
  POL[12] = 0.00000000E+00;
  POL[13] = 1.60000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 0.00000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 2.65000000E+00;
  POL[22] = 0.00000000E+00;
  POL[23] = 0.00000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 1.03200000E+01;
  POL[26] = 0.00000000E+00;
  POL[27] = 1.23000000E+01;
  POL[28] = 1.03200000E+01;
  POL[29] = 0.00000000E+00;
  POL[30] = 1.76000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 1.00000000E+00;
  ZROT[1] = 1.50000000E+00;
  ZROT[2] = 1.30000000E+01;
  ZROT[3] = 1.00000000E+00;
  ZROT[4] = 1.00000000E+00;
  ZROT[5] = 1.00000000E+00;
  ZROT[6] = 2.80000000E+02;
  ZROT[7] = 1.50000000E+00;
  ZROT[8] = 1.80000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 2.50000000E+00;
  ZROT[11] = 1.00000000E+00;
  ZROT[12] = 0.00000000E+00;
  ZROT[13] = 3.80000000E+00;
  ZROT[14] = 0.00000000E+00;
  ZROT[15] = 0.00000000E+00;
  ZROT[16] = 1.00000000E+00;
  ZROT[17] = 4.00000000E+00;
  ZROT[18] = 3.80000000E+00;
  ZROT[19] = 0.00000000E+00;
  ZROT[20] = 2.00000000E+00;
  ZROT[21] = 2.10000000E+00;
  ZROT[22] = 2.00000000E+00;
  ZROT[23] = 1.00000000E+00;
  ZROT[24] = 1.00000000E+00;
  ZROT[25] = 0.00000000E+00;
  ZROT[26] = 1.00000000E+00;
  ZROT[27] = 1.00000000E+00;
  ZROT[28] = 0.00000000E+00;
  ZROT[29] = 1.00000000E+00;
  ZROT[30] = 4.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 2;
  NLIN[1] = 2;
  NLIN[2] = 2;
  NLIN[3] = 2;
  NLIN[4] = 2;
  NLIN[5] = 2;
  NLIN[6] = 1;
  NLIN[7] = 2;
  NLIN[8] = 1;
  NLIN[9] = 2;
  NLIN[10] = 1;
  NLIN[11] = 2;
  NLIN[12] = 1;
  NLIN[13] = 1;
  NLIN[14] = 0;
  NLIN[15] = 1;
  NLIN[16] = 2;
  NLIN[17] = 2;
  NLIN[18] = 2;
  NLIN[19] = 0;
  NLIN[20] = 2;
  NLIN[21] = 1;
  NLIN[22] = 2;
  NLIN[23] = 2;
  NLIN[24] = 2;
  NLIN[25] = 2;
  NLIN[26] = 1;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -2.38834175E+01;
  COFETA[1] = 4.81370257E+00;
  COFETA[2] = -5.55599800E-01;
  COFETA[3] = 2.47531415E-02;
  COFETA[4] = -2.50495904E+01;
  COFETA[5] = 5.33053102E+00;
  COFETA[6] = -5.88272539E-01;
  COFETA[7] = 2.46770415E-02;
  COFETA[8] = -2.13155625E+01;
  COFETA[9] = 4.16526189E+00;
  COFETA[10] = -4.77299177E-01;
  COFETA[11] = 2.16170171E-02;
  COFETA[12] = -2.54191150E+01;
  COFETA[13] = 5.43249288E+00;
  COFETA[14] = -6.08420255E-01;
  COFETA[15] = 2.58527292E-02;
  COFETA[16] = -2.30660679E+01;
  COFETA[17] = 4.13706471E+00;
  COFETA[18] = -3.89347353E-01;
  COFETA[19] = 1.41307121E-02;
  COFETA[20] = -2.30660679E+01;
  COFETA[21] = 4.13706471E+00;
  COFETA[22] = -3.89347353E-01;
  COFETA[23] = 1.41307121E-02;
  COFETA[24] = -1.36231733E+01;
  COFETA[25] = 9.09836736E-01;
  COFETA[26] = -3.68303150E-02;
  COFETA[27] = 1.70542982E-03;
  COFETA[28] = -2.51446029E+01;
  COFETA[29] = 5.42054473E+00;
  COFETA[30] = -6.12382651E-01;
  COFETA[31] = 2.62624651E-02;
  COFETA[32] = -1.75941120E+01;
  COFETA[33] = 2.84774872E+00;
  COFETA[34] = -3.03436145E-01;
  COFETA[35] = 1.39480568E-02;
  COFETA[36] = -1.76196473E+01;
  COFETA[37] = 1.56457963E+00;
  COFETA[38] = 6.74862473E-03;
  COFETA[39] = -5.69801967E-03;
  COFETA[40] = -2.42838515E+01;
  COFETA[41] = 5.22134055E+00;
  COFETA[42] = -6.01496859E-01;
  COFETA[43] = 2.64421040E-02;
  COFETA[44] = -1.59376082E+01;
  COFETA[45] = 7.56729747E-01;
  COFETA[46] = 1.27453582E-01;
  COFETA[47] = -1.15925358E-02;
  COFETA[48] = -2.15236856E+01;
  COFETA[49] = 4.21938831E+00;
  COFETA[50] = -4.84060747E-01;
  COFETA[51] = 2.18984053E-02;
  COFETA[52] = -1.82659072E+01;
  COFETA[53] = 3.18445771E+00;
  COFETA[54] = -3.48911103E-01;
  COFETA[55] = 1.60003067E-02;
  COFETA[56] = -1.58318472E+01;
  COFETA[57] = 2.26294246E+00;
  COFETA[58] = -2.24415532E-01;
  COFETA[59] = 1.03800256E-02;
  COFETA[60] = -1.58012978E+01;
  COFETA[61] = 2.26294246E+00;
  COFETA[62] = -2.24415532E-01;
  COFETA[63] = 1.03800256E-02;
  COFETA[64] = -1.82503992E+01;
  COFETA[65] = 3.18445771E+00;
  COFETA[66] = -3.48911103E-01;
  COFETA[67] = 1.60003067E-02;
  COFETA[68] = -8.59380143E+00;
  COFETA[69] = -2.26208099E+00;
  COFETA[70] = 5.53651510E-01;
  COFETA[71] = -3.07142017E-02;
  COFETA[72] = -1.82353578E+01;
  COFETA[73] = 3.18445771E+00;
  COFETA[74] = -3.48911103E-01;
  COFETA[75] = 1.60003067E-02;
  COFETA[76] = -2.16840336E+01;
  COFETA[77] = 4.23442872E+00;
  COFETA[78] = -4.85814918E-01;
  COFETA[79] = 2.19654717E-02;
  COFETA[80] = -1.54420999E+01;
  COFETA[81] = 6.91072430E-01;
  COFETA[82] = 1.37419250E-01;
  COFETA[83] = -1.20853767E-02;
  COFETA[84] = -2.46168222E+01;
  COFETA[85] = 5.42134272E+00;
  COFETA[86] = -6.15868616E-01;
  COFETA[87] = 2.65612334E-02;
  COFETA[88] = -1.88158943E+01;
  COFETA[89] = 2.25438279E+00;
  COFETA[90] = -9.75489390E-02;
  COFETA[91] = -5.60416501E-04;
  COFETA[92] = -2.52083557E+01;
  COFETA[93] = 5.41821635E+00;
  COFETA[94] = -6.12161891E-01;
  COFETA[95] = 2.62563215E-02;
  COFETA[96] = -2.54312377E+01;
  COFETA[97] = 5.43249288E+00;
  COFETA[98] = -6.08420255E-01;
  COFETA[99] = 2.58527292E-02;
  COFETA[100] = -1.76071814E+01;
  COFETA[101] = 1.56457963E+00;
  COFETA[102] = 6.74862473E-03;
  COFETA[103] = -5.69801967E-03;
  COFETA[104] = -2.29933283E+01;
  COFETA[105] = 4.13706471E+00;
  COFETA[106] = -3.89347353E-01;
  COFETA[107] = 1.41307121E-02;
  COFETA[108] = -1.59431082E+01;
  COFETA[109] = 7.56729747E-01;
  COFETA[110] = 1.27453582E-01;
  COFETA[111] = -1.15925358E-02;
  COFETA[112] = -1.75318680E+01;
  COFETA[113] = 1.56457963E+00;
  COFETA[114] = 6.74862473E-03;
  COFETA[115] = -5.69801967E-03;
  COFETA[116] = -9.36340359E+00;
  COFETA[117] = -2.10998541E+00;
  COFETA[118] = 5.41626294E-01;
  COFETA[119] = -3.12100508E-02;
  COFETA[120] = -1.75356101E+01;
  COFETA[121] = 2.83116587E+00;
  COFETA[122] = -3.01228013E-01;
  COFETA[123] = 1.38497725E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = -1.76340800E+01;
  COFLAM[1] = 7.33555707E+00;
  COFLAM[2] = -6.39096368E-01;
  COFLAM[3] = 1.86179648E-02;
  COFLAM[4] = -1.05896117E+01;
  COFLAM[5] = 4.51847875E+00;
  COFLAM[6] = -2.23745596E-01;
  COFLAM[7] = -1.49604026E-03;
  COFLAM[8] = 2.58085913E+01;
  COFLAM[9] = -1.06542743E+01;
  COFLAM[10] = 1.89308529E+00;
  COFLAM[11] = -9.94577580E-02;
  COFLAM[12] = -1.47820542E+01;
  COFLAM[13] = 6.30852358E+00;
  COFLAM[14] = -4.91519092E-01;
  COFLAM[15] = 1.17827162E-02;
  COFLAM[16] = -5.51425557E+00;
  COFLAM[17] = 1.93682827E+00;
  COFLAM[18] = 1.83581705E-01;
  COFLAM[19] = -2.24298567E-02;
  COFLAM[20] = -1.10028590E+01;
  COFLAM[21] = 4.28206647E+00;
  COFLAM[22] = -1.49678225E-01;
  COFLAM[23] = -6.65450165E-03;
  COFLAM[24] = 3.77711392E-01;
  COFLAM[25] = 3.57577815E+00;
  COFLAM[26] = -4.96594587E-01;
  COFLAM[27] = 2.81676659E-02;
  COFLAM[28] = -4.39314688E+00;
  COFLAM[29] = 1.69340564E+00;
  COFLAM[30] = 2.04137505E-01;
  COFLAM[31] = -2.27569828E-02;
  COFLAM[32] = 1.56886150E+01;
  COFLAM[33] = -4.87808720E+00;
  COFLAM[34] = 8.60585548E-01;
  COFLAM[35] = -4.31982439E-02;
  COFLAM[36] = -3.65585851E+01;
  COFLAM[37] = 1.50330158E+01;
  COFLAM[38] = -1.66918619E+00;
  COFLAM[39] = 6.48469288E-02;
  COFLAM[40] = -1.34060931E+01;
  COFLAM[41] = 7.17743624E+00;
  COFLAM[42] = -8.00514597E-01;
  COFLAM[43] = 3.40071511E-02;
  COFLAM[44] = -3.09285421E+01;
  COFLAM[45] = 1.25461528E+01;
  COFLAM[46] = -1.30878374E+00;
  COFLAM[47] = 4.76259788E-02;
  COFLAM[48] = 1.51416542E+01;
  COFLAM[49] = -5.15364471E+00;
  COFLAM[50] = 9.83167728E-01;
  COFLAM[51] = -5.14192646E-02;
  COFLAM[52] = 4.20267050E+00;
  COFLAM[53] = 9.25396993E-02;
  COFLAM[54] = 1.52120322E-01;
  COFLAM[55] = -9.70208617E-03;
  COFLAM[56] = 9.53475395E-01;
  COFLAM[57] = 2.26294246E+00;
  COFLAM[58] = -2.24415532E-01;
  COFLAM[59] = 1.03800256E-02;
  COFLAM[60] = 8.22924269E+00;
  COFLAM[61] = -5.33837512E-01;
  COFLAM[62] = 1.23127102E-01;
  COFLAM[63] = -2.66841247E-03;
  COFLAM[64] = -1.89201961E+00;
  COFLAM[65] = 2.67311765E+00;
  COFLAM[66] = -2.11440254E-01;
  COFLAM[67] = 8.11513415E-03;
  COFLAM[68] = 1.96428874E+01;
  COFLAM[69] = -7.25817809E+00;
  COFLAM[70] = 1.26905230E+00;
  COFLAM[71] = -6.27937555E-02;
  COFLAM[72] = 2.04525400E-01;
  COFLAM[73] = 1.62151412E+00;
  COFLAM[74] = -2.66644056E-02;
  COFLAM[75] = -2.13749109E-03;
  COFLAM[76] = -2.13415286E+00;
  COFLAM[77] = 4.23442872E+00;
  COFLAM[78] = -4.85814918E-01;
  COFLAM[79] = 2.19654717E-02;
  COFLAM[80] = 2.11243602E+01;
  COFLAM[81] = -9.56334830E+00;
  COFLAM[82] = 1.82373694E+00;
  COFLAM[83] = -1.00229190E-01;
  COFLAM[84] = -9.06359083E+00;
  COFLAM[85] = 4.83326903E+00;
  COFLAM[86] = -4.10199501E-01;
  COFLAM[87] = 1.24126436E-02;
  COFLAM[88] = -4.93801913E+00;
  COFLAM[89] = 2.42765624E+00;
  COFLAM[90] = 1.16524156E-02;
  COFLAM[91] = -1.01830215E-02;
  COFLAM[92] = -1.25860432E+01;
  COFLAM[93] = 6.37981374E+00;
  COFLAM[94] = -6.35012868E-01;
  COFLAM[95] = 2.38500368E-02;
  COFLAM[96] = -2.38695171E+01;
  COFLAM[97] = 1.05105698E+01;
  COFLAM[98] = -1.13072790E+00;
  COFLAM[99] = 4.36539121E-02;
  COFLAM[100] = -2.40922270E+01;
  COFLAM[101] = 9.92597512E+00;
  COFLAM[102] = -9.81440858E-01;
  COFLAM[103] = 3.39064107E-02;
  COFLAM[104] = -8.64135104E+00;
  COFLAM[105] = 3.62701787E+00;
  COFLAM[106] = -1.12872484E-01;
  COFLAM[107] = -6.03171150E-03;
  COFLAM[108] = -2.75393670E+01;
  COFLAM[109] = 1.13102964E+01;
  COFLAM[110] = -1.16032958E+00;
  COFLAM[111] = 4.16609692E-02;
  COFLAM[112] = -3.36316309E+01;
  COFLAM[113] = 1.41867239E+01;
  COFLAM[114] = -1.60184772E+00;
  COFLAM[115] = 6.37331096E-02;
  COFLAM[116] = -2.38628307E+01;
  COFLAM[117] = 9.60886586E+00;
  COFLAM[118] = -9.06059084E-01;
  COFLAM[119] = 2.91664402E-02;
  COFLAM[120] = 1.49161845E+01;
  COFLAM[121] = -4.41954662E+00;
  COFLAM[122] = 7.78306011E-01;
  COFLAM[123] = -3.85051200E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -2.26360123E+01;
  COFD[1] = 5.10718625E+00;
  COFD[2] = -4.53773770E-01;
  COFD[3] = 1.99645914E-02;
  COFD[4] = -2.29096065E+01;
  COFD[5] = 5.63427088E+00;
  COFD[6] = -5.14445238E-01;
  COFD[7] = 2.22821627E-02;
  COFD[8] = -2.02705625E+01;
  COFD[9] = 4.82340435E+00;
  COFD[10] = -4.19541538E-01;
  COFD[11] = 1.85864430E-02;
  COFD[12] = -2.30816284E+01;
  COFD[13] = 5.59360310E+00;
  COFD[14] = -5.10572093E-01;
  COFD[15] = 2.21739087E-02;
  COFD[16] = -2.36297004E+01;
  COFD[17] = 5.66015033E+00;
  COFD[18] = -5.08351812E-01;
  COFD[19] = 2.16104873E-02;
  COFD[20] = -2.36297004E+01;
  COFD[21] = 5.66015033E+00;
  COFD[22] = -5.08351812E-01;
  COFD[23] = 2.16104873E-02;
  COFD[24] = -1.47227642E+01;
  COFD[25] = 3.15497411E+00;
  COFD[26] = -2.03824810E-01;
  COFD[27] = 9.24118691E-03;
  COFD[28] = -2.26136123E+01;
  COFD[29] = 5.51014294E+00;
  COFD[30] = -5.00490863E-01;
  COFD[31] = 2.17654712E-02;
  COFD[32] = -1.93751244E+01;
  COFD[33] = 4.42649312E+00;
  COFD[34] = -3.71750611E-01;
  COFD[35] = 1.66724904E-02;
  COFD[36] = -2.38342076E+01;
  COFD[37] = 5.58077369E+00;
  COFD[38] = -4.85290481E-01;
  COFD[39] = 2.00627377E-02;
  COFD[40] = -2.19957808E+01;
  COFD[41] = 5.34402519E+00;
  COFD[42] = -4.83068822E-01;
  COFD[43] = 2.11832962E-02;
  COFD[44] = -2.37835094E+01;
  COFD[45] = 5.48425494E+00;
  COFD[46] = -4.68327600E-01;
  COFD[47] = 1.91335179E-02;
  COFD[48] = -2.03023823E+01;
  COFD[49] = 4.84155965E+00;
  COFD[50] = -4.21649019E-01;
  COFD[51] = 1.86672992E-02;
  COFD[52] = -1.97428162E+01;
  COFD[53] = 4.55369444E+00;
  COFD[54] = -3.87975150E-01;
  COFD[55] = 1.73657784E-02;
  COFD[56] = -1.80914623E+01;
  COFD[57] = 4.07933301E+00;
  COFD[58] = -3.25884118E-01;
  COFD[59] = 1.46408360E-02;
  COFD[60] = -1.81190609E+01;
  COFD[61] = 4.07933301E+00;
  COFD[62] = -3.25884118E-01;
  COFD[63] = 1.46408360E-02;
  COFD[64] = -1.97556261E+01;
  COFD[65] = 4.55369444E+00;
  COFD[66] = -3.87975150E-01;
  COFD[67] = 1.73657784E-02;
  COFD[68] = -2.23489854E+01;
  COFD[69] = 5.26844723E+00;
  COFD[70] = -4.30558385E-01;
  COFD[71] = 1.70757975E-02;
  COFD[72] = -1.97679839E+01;
  COFD[73] = 4.55369444E+00;
  COFD[74] = -3.87975150E-01;
  COFD[75] = 1.73657784E-02;
  COFD[76] = -1.87373197E+01;
  COFD[77] = 4.84958928E+00;
  COFD[78] = -4.22621869E-01;
  COFD[79] = 1.87067121E-02;
  COFD[80] = -2.30583179E+01;
  COFD[81] = 5.47498589E+00;
  COFD[82] = -4.66735757E-01;
  COFD[83] = 1.90475911E-02;
  COFD[84] = -2.26064841E+01;
  COFD[85] = 5.48643918E+00;
  COFD[86] = -4.98327363E-01;
  COFD[87] = 2.17107588E-02;
  COFD[88] = -2.34701649E+01;
  COFD[89] = 5.62943629E+00;
  COFD[90] = -4.95272887E-01;
  COFD[91] = 2.06543955E-02;
  COFD[92] = -2.27819450E+01;
  COFD[93] = 5.50908317E+00;
  COFD[94] = -5.00382955E-01;
  COFD[95] = 2.17620583E-02;
  COFD[96] = -2.30720788E+01;
  COFD[97] = 5.59360310E+00;
  COFD[98] = -5.10572093E-01;
  COFD[99] = 2.21739087E-02;
  COFD[100] = -2.38424489E+01;
  COFD[101] = 5.58077369E+00;
  COFD[102] = -4.85290481E-01;
  COFD[103] = 2.00627377E-02;
  COFD[104] = -2.36836133E+01;
  COFD[105] = 5.66015033E+00;
  COFD[106] = -5.08351812E-01;
  COFD[107] = 2.16104873E-02;
  COFD[108] = -2.37800587E+01;
  COFD[109] = 5.48425494E+00;
  COFD[110] = -4.68327600E-01;
  COFD[111] = 1.91335179E-02;
  COFD[112] = -2.38907333E+01;
  COFD[113] = 5.58077369E+00;
  COFD[114] = -4.85290481E-01;
  COFD[115] = 2.00627377E-02;
  COFD[116] = -2.33114627E+01;
  COFD[117] = 5.19165128E+00;
  COFD[118] = -4.17805039E-01;
  COFD[119] = 1.64021805E-02;
  COFD[120] = -1.93515315E+01;
  COFD[121] = 4.41939237E+00;
  COFD[122] = -3.70853119E-01;
  COFD[123] = 1.66344814E-02;
  COFD[124] = -2.29096065E+01;
  COFD[125] = 5.63427088E+00;
  COFD[126] = -5.14445238E-01;
  COFD[127] = 2.22821627E-02;
  COFD[128] = -2.19560899E+01;
  COFD[129] = 5.61561805E+00;
  COFD[130] = -4.92449893E-01;
  COFD[131] = 2.04873677E-02;
  COFD[132] = -2.06997900E+01;
  COFD[133] = 5.42833239E+00;
  COFD[134] = -4.93061354E-01;
  COFD[135] = 2.15793020E-02;
  COFD[136] = -2.23680004E+01;
  COFD[137] = 5.67323480E+00;
  COFD[138] = -5.03108721E-01;
  COFD[139] = 2.10878525E-02;
  COFD[140] = -2.18975230E+01;
  COFD[141] = 5.29777789E+00;
  COFD[142] = -4.35476842E-01;
  COFD[143] = 1.73373342E-02;
  COFD[144] = -2.18975230E+01;
  COFD[145] = 5.29777789E+00;
  COFD[146] = -4.35476842E-01;
  COFD[147] = 1.73373342E-02;
  COFD[148] = -1.50247369E+01;
  COFD[149] = 3.75251314E+00;
  COFD[150] = -2.84160414E-01;
  COFD[151] = 1.28605733E-02;
  COFD[152] = -2.21214411E+01;
  COFD[153] = 5.69019961E+00;
  COFD[154] = -5.07971611E-01;
  COFD[155] = 2.14126561E-02;
  COFD[156] = -1.94104030E+01;
  COFD[157] = 4.91881880E+00;
  COFD[158] = -4.30621727E-01;
  COFD[159] = 1.90115470E-02;
  COFD[160] = -2.10412741E+01;
  COFD[161] = 4.77480735E+00;
  COFD[162] = -3.48088937E-01;
  COFD[163] = 1.27148736E-02;
  COFD[164] = -2.18016669E+01;
  COFD[165] = 5.66495194E+00;
  COFD[166] = -5.12328464E-01;
  COFD[167] = 2.19277949E-02;
  COFD[168] = -2.08083408E+01;
  COFD[169] = 4.60022609E+00;
  COFD[170] = -3.20098606E-01;
  COFD[171] = 1.12745986E-02;
  COFD[172] = -2.07569884E+01;
  COFD[173] = 5.45048622E+00;
  COFD[174] = -4.95678069E-01;
  COFD[175] = 2.16826855E-02;
  COFD[176] = -1.97631858E+01;
  COFD[177] = 5.05439215E+00;
  COFD[178] = -4.47524613E-01;
  COFD[179] = 1.97181397E-02;
  COFD[180] = -1.83100736E+01;
  COFD[181] = 4.67429531E+00;
  COFD[182] = -4.00998687E-01;
  COFD[183] = 1.78140746E-02;
  COFD[184] = -1.83293112E+01;
  COFD[185] = 4.67429531E+00;
  COFD[186] = -4.00998687E-01;
  COFD[187] = 1.78140746E-02;
  COFD[188] = -1.97703707E+01;
  COFD[189] = 5.05439215E+00;
  COFD[190] = -4.47524613E-01;
  COFD[191] = 1.97181397E-02;
  COFD[192] = -1.90232196E+01;
  COFD[193] = 4.24017605E+00;
  COFD[194] = -2.62003557E-01;
  COFD[195] = 8.27816665E-03;
  COFD[196] = -1.97772254E+01;
  COFD[197] = 5.05439215E+00;
  COFD[198] = -4.47524613E-01;
  COFD[199] = 1.97181397E-02;
  COFD[200] = -1.91177523E+01;
  COFD[201] = 5.45933834E+00;
  COFD[202] = -4.96736684E-01;
  COFD[203] = 2.17251306E-02;
  COFD[204] = -2.01009288E+01;
  COFD[205] = 4.58807289E+00;
  COFD[206] = -3.18105074E-01;
  COFD[207] = 1.11706107E-02;
  COFD[208] = -2.20508891E+01;
  COFD[209] = 5.69592279E+00;
  COFD[210] = -5.10240070E-01;
  COFD[211] = 2.15762020E-02;
  COFD[212] = -2.08599325E+01;
  COFD[213] = 4.90144316E+00;
  COFD[214] = -3.69014218E-01;
  COFD[215] = 1.38104338E-02;
  COFD[216] = -2.22872895E+01;
  COFD[217] = 5.69035599E+00;
  COFD[218] = -5.08045645E-01;
  COFD[219] = 2.14181606E-02;
  COFD[220] = -2.23631160E+01;
  COFD[221] = 5.67323480E+00;
  COFD[222] = -5.03108721E-01;
  COFD[223] = 2.10878525E-02;
  COFD[224] = -2.10445380E+01;
  COFD[225] = 4.77480735E+00;
  COFD[226] = -3.48088937E-01;
  COFD[227] = 1.27148736E-02;
  COFD[228] = -2.19219536E+01;
  COFD[229] = 5.29777789E+00;
  COFD[230] = -4.35476842E-01;
  COFD[231] = 1.73373342E-02;
  COFD[232] = -2.08070517E+01;
  COFD[233] = 4.60022609E+00;
  COFD[234] = -3.20098606E-01;
  COFD[235] = 1.12745986E-02;
  COFD[236] = -2.10630129E+01;
  COFD[237] = 4.77480735E+00;
  COFD[238] = -3.48088937E-01;
  COFD[239] = 1.27148736E-02;
  COFD[240] = -1.98245682E+01;
  COFD[241] = 4.10460882E+00;
  COFD[242] = -2.40832572E-01;
  COFD[243] = 7.20652667E-03;
  COFD[244] = -1.93843092E+01;
  COFD[245] = 4.91244566E+00;
  COFD[246] = -4.29874687E-01;
  COFD[247] = 1.89825217E-02;
  COFD[248] = -2.02705625E+01;
  COFD[249] = 4.82340435E+00;
  COFD[250] = -4.19541538E-01;
  COFD[251] = 1.85864430E-02;
  COFD[252] = -2.06997900E+01;
  COFD[253] = 5.42833239E+00;
  COFD[254] = -4.93061354E-01;
  COFD[255] = 2.15793020E-02;
  COFD[256] = -1.81739951E+01;
  COFD[257] = 4.60315134E+00;
  COFD[258] = -3.93906877E-01;
  COFD[259] = 1.76017847E-02;
  COFD[260] = -2.08289873E+01;
  COFD[261] = 5.36559371E+00;
  COFD[262] = -4.85661513E-01;
  COFD[263] = 2.12877010E-02;
  COFD[264] = -2.17765406E+01;
  COFD[265] = 5.64206578E+00;
  COFD[266] = -5.15104753E-01;
  COFD[267] = 2.22957422E-02;
  COFD[268] = -2.17765406E+01;
  COFD[269] = 5.64206578E+00;
  COFD[270] = -5.15104753E-01;
  COFD[271] = 2.22957422E-02;
  COFD[272] = -1.29751337E+01;
  COFD[273] = 2.99687474E+00;
  COFD[274] = -1.83820478E-01;
  COFD[275] = 8.39908814E-03;
  COFD[276] = -2.03481312E+01;
  COFD[277] = 5.26709856E+00;
  COFD[278] = -4.73195490E-01;
  COFD[279] = 2.07564226E-02;
  COFD[280] = -1.68256395E+01;
  COFD[281] = 4.05650314E+00;
  COFD[282] = -3.23082632E-01;
  COFD[283] = 1.45263472E-02;
  COFD[284] = -2.21770779E+01;
  COFD[285] = 5.68744998E+00;
  COFD[286] = -5.10793511E-01;
  COFD[287] = 2.16704352E-02;
  COFD[288] = -1.95860363E+01;
  COFD[289] = 5.02452773E+00;
  COFD[290] = -4.43782411E-01;
  COFD[291] = 1.95604414E-02;
  COFD[292] = -2.23456670E+01;
  COFD[293] = 5.69153566E+00;
  COFD[294] = -5.08605460E-01;
  COFD[295] = 2.14598086E-02;
  COFD[296] = -1.82302992E+01;
  COFD[297] = 4.62413676E+00;
  COFD[298] = -3.96485100E-01;
  COFD[299] = 1.77074617E-02;
  COFD[300] = -1.71870267E+01;
  COFD[301] = 4.20847168E+00;
  COFD[302] = -3.43267883E-01;
  COFD[303] = 1.54252580E-02;
  COFD[304] = -1.58379324E+01;
  COFD[305] = 3.83195750E+00;
  COFD[306] = -2.94605739E-01;
  COFD[307] = 1.33200383E-02;
  COFD[308] = -1.58529948E+01;
  COFD[309] = 3.83195750E+00;
  COFD[310] = -2.94605739E-01;
  COFD[311] = 1.33200383E-02;
  COFD[312] = -1.71921522E+01;
  COFD[313] = 4.20847168E+00;
  COFD[314] = -3.43267883E-01;
  COFD[315] = 1.54252580E-02;
  COFD[316] = -2.07134339E+01;
  COFD[317] = 5.25362242E+00;
  COFD[318] = -4.28085831E-01;
  COFD[319] = 1.69448077E-02;
  COFD[320] = -1.71970223E+01;
  COFD[321] = 4.20847168E+00;
  COFD[322] = -3.43267883E-01;
  COFD[323] = 1.54252580E-02;
  COFD[324] = -1.66720297E+01;
  COFD[325] = 4.63136373E+00;
  COFD[326] = -3.97356633E-01;
  COFD[327] = 1.77424240E-02;
  COFD[328] = -2.17130934E+01;
  COFD[329] = 5.69099359E+00;
  COFD[330] = -5.08349503E-01;
  COFD[331] = 2.14407762E-02;
  COFD[332] = -2.00989387E+01;
  COFD[333] = 5.20351263E+00;
  COFD[334] = -4.65001962E-01;
  COFD[335] = 2.04005867E-02;
  COFD[336] = -2.16430338E+01;
  COFD[337] = 5.64779714E+00;
  COFD[338] = -5.07721971E-01;
  COFD[339] = 2.16241891E-02;
  COFD[340] = -2.04928200E+01;
  COFD[341] = 5.26407420E+00;
  COFD[342] = -4.72791546E-01;
  COFD[343] = 2.07382489E-02;
  COFD[344] = -2.08256118E+01;
  COFD[345] = 5.36559371E+00;
  COFD[346] = -4.85661513E-01;
  COFD[347] = 2.12877010E-02;
  COFD[348] = -2.21791800E+01;
  COFD[349] = 5.68744998E+00;
  COFD[350] = -5.10793511E-01;
  COFD[351] = 2.16704352E-02;
  COFD[352] = -2.17930266E+01;
  COFD[353] = 5.64206578E+00;
  COFD[354] = -5.15104753E-01;
  COFD[355] = 2.22957422E-02;
  COFD[356] = -2.23448475E+01;
  COFD[357] = 5.69153566E+00;
  COFD[358] = -5.08605460E-01;
  COFD[359] = 2.14598086E-02;
  COFD[360] = -2.21909866E+01;
  COFD[361] = 5.68744998E+00;
  COFD[362] = -5.10793511E-01;
  COFD[363] = 2.16704352E-02;
  COFD[364] = -2.20353558E+01;
  COFD[365] = 5.46603508E+00;
  COFD[366] = -4.65199707E-01;
  COFD[367] = 1.89647157E-02;
  COFD[368] = -1.68011884E+01;
  COFD[369] = 4.05042859E+00;
  COFD[370] = -3.22319395E-01;
  COFD[371] = 1.44942745E-02;
  COFD[372] = -2.30816284E+01;
  COFD[373] = 5.59360310E+00;
  COFD[374] = -5.10572093E-01;
  COFD[375] = 2.21739087E-02;
  COFD[376] = -2.23680004E+01;
  COFD[377] = 5.67323480E+00;
  COFD[378] = -5.03108721E-01;
  COFD[379] = 2.10878525E-02;
  COFD[380] = -2.08289873E+01;
  COFD[381] = 5.36559371E+00;
  COFD[382] = -4.85661513E-01;
  COFD[383] = 2.12877010E-02;
  COFD[384] = -2.26820519E+01;
  COFD[385] = 5.68951631E+00;
  COFD[386] = -5.07668098E-01;
  COFD[387] = 2.13903212E-02;
  COFD[388] = -2.23509243E+01;
  COFD[389] = 5.37198708E+00;
  COFD[390] = -4.48528740E-01;
  COFD[391] = 1.80499807E-02;
  COFD[392] = -2.23509243E+01;
  COFD[393] = 5.37198708E+00;
  COFD[394] = -4.48528740E-01;
  COFD[395] = 1.80499807E-02;
  COFD[396] = -1.51005325E+01;
  COFD[397] = 3.67029147E+00;
  COFD[398] = -2.73138589E-01;
  COFD[399] = 1.23661438E-02;
  COFD[400] = -2.24140975E+01;
  COFD[401] = 5.69725388E+00;
  COFD[402] = -5.11197970E-01;
  COFD[403] = 2.16513648E-02;
  COFD[404] = -1.95989967E+01;
  COFD[405] = 4.86773881E+00;
  COFD[406] = -4.24796060E-01;
  COFD[407] = 1.87934811E-02;
  COFD[408] = -2.15675111E+01;
  COFD[409] = 4.87393197E+00;
  COFD[410] = -3.64472579E-01;
  COFD[411] = 1.35722107E-02;
  COFD[412] = -2.20886792E+01;
  COFD[413] = 5.66947709E+00;
  COFD[414] = -5.15131199E-01;
  COFD[415] = 2.21454794E-02;
  COFD[416] = -2.14305236E+01;
  COFD[417] = 4.74312020E+00;
  COFD[418] = -3.42998475E-01;
  COFD[419] = 1.24528839E-02;
  COFD[420] = -2.08856540E+01;
  COFD[421] = 5.38939502E+00;
  COFD[422] = -4.88508342E-01;
  COFD[423] = 2.14017409E-02;
  COFD[424] = -1.99192393E+01;
  COFD[425] = 4.98360158E+00;
  COFD[426] = -4.38825780E-01;
  COFD[427] = 1.93601206E-02;
  COFD[428] = -1.85766545E+01;
  COFD[429] = 4.65440100E+00;
  COFD[430] = -3.99617849E-01;
  COFD[431] = 1.78081611E-02;
  COFD[432] = -1.85986007E+01;
  COFD[433] = 4.65440100E+00;
  COFD[434] = -3.99617849E-01;
  COFD[435] = 1.78081611E-02;
  COFD[436] = -1.99279897E+01;
  COFD[437] = 4.98360158E+00;
  COFD[438] = -4.38825780E-01;
  COFD[439] = 1.93601206E-02;
  COFD[440] = -1.97246304E+01;
  COFD[441] = 4.41370094E+00;
  COFD[442] = -2.89313133E-01;
  COFD[443] = 9.66674118E-03;
  COFD[444] = -1.99363635E+01;
  COFD[445] = 4.98360158E+00;
  COFD[446] = -4.38825780E-01;
  COFD[447] = 1.93601206E-02;
  COFD[448] = -1.92553728E+01;
  COFD[449] = 5.39783798E+00;
  COFD[450] = -4.89502414E-01;
  COFD[451] = 2.14408287E-02;
  COFD[452] = -2.07150283E+01;
  COFD[453] = 4.72805055E+00;
  COFD[454] = -3.40591321E-01;
  COFD[455] = 1.23293721E-02;
  COFD[456] = -2.23300848E+01;
  COFD[457] = 5.68194587E+00;
  COFD[458] = -5.10402599E-01;
  COFD[459] = 2.16670698E-02;
  COFD[460] = -2.14217431E+01;
  COFD[461] = 5.01654907E+00;
  COFD[462] = -3.87995080E-01;
  COFD[463] = 1.48063744E-02;
  COFD[464] = -2.25814161E+01;
  COFD[465] = 5.69729375E+00;
  COFD[466] = -5.11255096E-01;
  COFD[467] = 2.16560632E-02;
  COFD[468] = -2.26759538E+01;
  COFD[469] = 5.68951631E+00;
  COFD[470] = -5.07668098E-01;
  COFD[471] = 2.13903212E-02;
  COFD[472] = -2.15718402E+01;
  COFD[473] = 4.87393197E+00;
  COFD[474] = -3.64472579E-01;
  COFD[475] = 1.35722107E-02;
  COFD[476] = -2.23822073E+01;
  COFD[477] = 5.37198708E+00;
  COFD[478] = -4.48528740E-01;
  COFD[479] = 1.80499807E-02;
  COFD[480] = -2.14287927E+01;
  COFD[481] = 4.74312020E+00;
  COFD[482] = -3.42998475E-01;
  COFD[483] = 1.24528839E-02;
  COFD[484] = -2.15965223E+01;
  COFD[485] = 4.87393197E+00;
  COFD[486] = -3.64472579E-01;
  COFD[487] = 1.35722107E-02;
  COFD[488] = -2.05723773E+01;
  COFD[489] = 4.29837248E+00;
  COFD[490] = -2.71107161E-01;
  COFD[491] = 8.73928648E-03;
  COFD[492] = -1.95742449E+01;
  COFD[493] = 4.86151358E+00;
  COFD[494] = -4.24066143E-01;
  COFD[495] = 1.87651483E-02;
  COFD[496] = -2.36297004E+01;
  COFD[497] = 5.66015033E+00;
  COFD[498] = -5.08351812E-01;
  COFD[499] = 2.16104873E-02;
  COFD[500] = -2.18975230E+01;
  COFD[501] = 5.29777789E+00;
  COFD[502] = -4.35476842E-01;
  COFD[503] = 1.73373342E-02;
  COFD[504] = -2.17765406E+01;
  COFD[505] = 5.64206578E+00;
  COFD[506] = -5.15104753E-01;
  COFD[507] = 2.22957422E-02;
  COFD[508] = -2.23509243E+01;
  COFD[509] = 5.37198708E+00;
  COFD[510] = -4.48528740E-01;
  COFD[511] = 1.80499807E-02;
  COFD[512] = -2.15073190E+01;
  COFD[513] = 4.82380626E+00;
  COFD[514] = -3.56106499E-01;
  COFD[515] = 1.31315966E-02;
  COFD[516] = -2.15073190E+01;
  COFD[517] = 4.82380626E+00;
  COFD[518] = -3.56106499E-01;
  COFD[519] = 1.31315966E-02;
  COFD[520] = -1.61178919E+01;
  COFD[521] = 4.03479307E+00;
  COFD[522] = -3.20399233E-01;
  COFD[523] = 1.44157782E-02;
  COFD[524] = -2.22189610E+01;
  COFD[525] = 5.44396600E+00;
  COFD[526] = -4.61412551E-01;
  COFD[527] = 1.87602923E-02;
  COFD[528] = -2.07128235E+01;
  COFD[529] = 5.22471147E+00;
  COFD[530] = -4.67607197E-01;
  COFD[531] = 2.05082142E-02;
  COFD[532] = -2.02519341E+01;
  COFD[533] = 4.11843264E+00;
  COFD[534] = -2.42988196E-01;
  COFD[535] = 7.31555013E-03;
  COFD[536] = -2.24734294E+01;
  COFD[537] = 5.67806029E+00;
  COFD[538] = -5.03991163E-01;
  COFD[539] = 2.11372864E-02;
  COFD[540] = -1.98891989E+01;
  COFD[541] = 3.88632523E+00;
  COFD[542] = -2.06802738E-01;
  COFD[543] = 5.48944874E-03;
  COFD[544] = -2.18020150E+01;
  COFD[545] = 5.65210943E+00;
  COFD[546] = -5.15837732E-01;
  COFD[547] = 2.23031110E-02;
  COFD[548] = -2.11491052E+01;
  COFD[549] = 5.38685618E+00;
  COFD[550] = -4.88207385E-01;
  COFD[551] = 2.13898131E-02;
  COFD[552] = -1.95878092E+01;
  COFD[553] = 4.97734997E+00;
  COFD[554] = -4.38018636E-01;
  COFD[555] = 1.93251310E-02;
  COFD[556] = -1.96114174E+01;
  COFD[557] = 4.97734997E+00;
  COFD[558] = -4.38018636E-01;
  COFD[559] = 1.93251310E-02;
  COFD[560] = -2.11589253E+01;
  COFD[561] = 5.38685618E+00;
  COFD[562] = -4.88207385E-01;
  COFD[563] = 2.13898131E-02;
  COFD[564] = -1.79615597E+01;
  COFD[565] = 3.48451904E+00;
  COFD[566] = -1.43831594E-01;
  COFD[567] = 2.32079598E-03;
  COFD[568] = -2.11683428E+01;
  COFD[569] = 5.38685618E+00;
  COFD[570] = -4.88207385E-01;
  COFD[571] = 2.13898131E-02;
  COFD[572] = -2.01428617E+01;
  COFD[573] = 5.65654333E+00;
  COFD[574] = -5.16217584E-01;
  COFD[575] = 2.23113761E-02;
  COFD[576] = -1.91380229E+01;
  COFD[577] = 3.86904236E+00;
  COFD[578] = -2.04091431E-01;
  COFD[579] = 5.35231270E-03;
  COFD[580] = -2.23119992E+01;
  COFD[581] = 5.50021686E+00;
  COFD[582] = -4.71107238E-01;
  COFD[583] = 1.92849078E-02;
  COFD[584] = -2.03163280E+01;
  COFD[585] = 4.36001963E+00;
  COFD[586] = -2.80770646E-01;
  COFD[587] = 9.22995126E-03;
  COFD[588] = -2.23968206E+01;
  COFD[589] = 5.44551229E+00;
  COFD[590] = -4.61691222E-01;
  COFD[591] = 1.87757502E-02;
  COFD[592] = -2.23439611E+01;
  COFD[593] = 5.37198708E+00;
  COFD[594] = -4.48528740E-01;
  COFD[595] = 1.80499807E-02;
  COFD[596] = -2.02571074E+01;
  COFD[597] = 4.11843264E+00;
  COFD[598] = -2.42988196E-01;
  COFD[599] = 7.31555013E-03;
  COFD[600] = -2.15438557E+01;
  COFD[601] = 4.82380626E+00;
  COFD[602] = -3.56106499E-01;
  COFD[603] = 1.31315966E-02;
  COFD[604] = -1.98871102E+01;
  COFD[605] = 3.88632523E+00;
  COFD[606] = -2.06802738E-01;
  COFD[607] = 5.48944874E-03;
  COFD[608] = -2.02867736E+01;
  COFD[609] = 4.11843264E+00;
  COFD[610] = -2.42988196E-01;
  COFD[611] = 7.31555013E-03;
  COFD[612] = -1.88300652E+01;
  COFD[613] = 3.36066148E+00;
  COFD[614] = -1.24815434E-01;
  COFD[615] = 1.37670619E-03;
  COFD[616] = -2.06822165E+01;
  COFD[617] = 5.21598228E+00;
  COFD[618] = -4.66522092E-01;
  COFD[619] = 2.04628158E-02;
  COFD[620] = -2.36297004E+01;
  COFD[621] = 5.66015033E+00;
  COFD[622] = -5.08351812E-01;
  COFD[623] = 2.16104873E-02;
  COFD[624] = -2.18975230E+01;
  COFD[625] = 5.29777789E+00;
  COFD[626] = -4.35476842E-01;
  COFD[627] = 1.73373342E-02;
  COFD[628] = -2.17765406E+01;
  COFD[629] = 5.64206578E+00;
  COFD[630] = -5.15104753E-01;
  COFD[631] = 2.22957422E-02;
  COFD[632] = -2.23509243E+01;
  COFD[633] = 5.37198708E+00;
  COFD[634] = -4.48528740E-01;
  COFD[635] = 1.80499807E-02;
  COFD[636] = -2.15073190E+01;
  COFD[637] = 4.82380626E+00;
  COFD[638] = -3.56106499E-01;
  COFD[639] = 1.31315966E-02;
  COFD[640] = -2.15073190E+01;
  COFD[641] = 4.82380626E+00;
  COFD[642] = -3.56106499E-01;
  COFD[643] = 1.31315966E-02;
  COFD[644] = -1.61178919E+01;
  COFD[645] = 4.03479307E+00;
  COFD[646] = -3.20399233E-01;
  COFD[647] = 1.44157782E-02;
  COFD[648] = -2.22189610E+01;
  COFD[649] = 5.44396600E+00;
  COFD[650] = -4.61412551E-01;
  COFD[651] = 1.87602923E-02;
  COFD[652] = -2.07128235E+01;
  COFD[653] = 5.22471147E+00;
  COFD[654] = -4.67607197E-01;
  COFD[655] = 2.05082142E-02;
  COFD[656] = -2.02519341E+01;
  COFD[657] = 4.11843264E+00;
  COFD[658] = -2.42988196E-01;
  COFD[659] = 7.31555013E-03;
  COFD[660] = -2.24734294E+01;
  COFD[661] = 5.67806029E+00;
  COFD[662] = -5.03991163E-01;
  COFD[663] = 2.11372864E-02;
  COFD[664] = -1.98891989E+01;
  COFD[665] = 3.88632523E+00;
  COFD[666] = -2.06802738E-01;
  COFD[667] = 5.48944874E-03;
  COFD[668] = -2.18020150E+01;
  COFD[669] = 5.65210943E+00;
  COFD[670] = -5.15837732E-01;
  COFD[671] = 2.23031110E-02;
  COFD[672] = -2.11491052E+01;
  COFD[673] = 5.38685618E+00;
  COFD[674] = -4.88207385E-01;
  COFD[675] = 2.13898131E-02;
  COFD[676] = -1.95878092E+01;
  COFD[677] = 4.97734997E+00;
  COFD[678] = -4.38018636E-01;
  COFD[679] = 1.93251310E-02;
  COFD[680] = -1.96114174E+01;
  COFD[681] = 4.97734997E+00;
  COFD[682] = -4.38018636E-01;
  COFD[683] = 1.93251310E-02;
  COFD[684] = -2.11589253E+01;
  COFD[685] = 5.38685618E+00;
  COFD[686] = -4.88207385E-01;
  COFD[687] = 2.13898131E-02;
  COFD[688] = -1.79615597E+01;
  COFD[689] = 3.48451904E+00;
  COFD[690] = -1.43831594E-01;
  COFD[691] = 2.32079598E-03;
  COFD[692] = -2.11683428E+01;
  COFD[693] = 5.38685618E+00;
  COFD[694] = -4.88207385E-01;
  COFD[695] = 2.13898131E-02;
  COFD[696] = -2.01428617E+01;
  COFD[697] = 5.65654333E+00;
  COFD[698] = -5.16217584E-01;
  COFD[699] = 2.23113761E-02;
  COFD[700] = -1.91380229E+01;
  COFD[701] = 3.86904236E+00;
  COFD[702] = -2.04091431E-01;
  COFD[703] = 5.35231270E-03;
  COFD[704] = -2.23119992E+01;
  COFD[705] = 5.50021686E+00;
  COFD[706] = -4.71107238E-01;
  COFD[707] = 1.92849078E-02;
  COFD[708] = -2.03163280E+01;
  COFD[709] = 4.36001963E+00;
  COFD[710] = -2.80770646E-01;
  COFD[711] = 9.22995126E-03;
  COFD[712] = -2.23968206E+01;
  COFD[713] = 5.44551229E+00;
  COFD[714] = -4.61691222E-01;
  COFD[715] = 1.87757502E-02;
  COFD[716] = -2.23439611E+01;
  COFD[717] = 5.37198708E+00;
  COFD[718] = -4.48528740E-01;
  COFD[719] = 1.80499807E-02;
  COFD[720] = -2.02571074E+01;
  COFD[721] = 4.11843264E+00;
  COFD[722] = -2.42988196E-01;
  COFD[723] = 7.31555013E-03;
  COFD[724] = -2.15438557E+01;
  COFD[725] = 4.82380626E+00;
  COFD[726] = -3.56106499E-01;
  COFD[727] = 1.31315966E-02;
  COFD[728] = -1.98871102E+01;
  COFD[729] = 3.88632523E+00;
  COFD[730] = -2.06802738E-01;
  COFD[731] = 5.48944874E-03;
  COFD[732] = -2.02867736E+01;
  COFD[733] = 4.11843264E+00;
  COFD[734] = -2.42988196E-01;
  COFD[735] = 7.31555013E-03;
  COFD[736] = -1.88300652E+01;
  COFD[737] = 3.36066148E+00;
  COFD[738] = -1.24815434E-01;
  COFD[739] = 1.37670619E-03;
  COFD[740] = -2.06822165E+01;
  COFD[741] = 5.21598228E+00;
  COFD[742] = -4.66522092E-01;
  COFD[743] = 2.04628158E-02;
  COFD[744] = -1.47227642E+01;
  COFD[745] = 3.15497411E+00;
  COFD[746] = -2.03824810E-01;
  COFD[747] = 9.24118691E-03;
  COFD[748] = -1.50247369E+01;
  COFD[749] = 3.75251314E+00;
  COFD[750] = -2.84160414E-01;
  COFD[751] = 1.28605733E-02;
  COFD[752] = -1.29751337E+01;
  COFD[753] = 2.99687474E+00;
  COFD[754] = -1.83820478E-01;
  COFD[755] = 8.39908814E-03;
  COFD[756] = -1.51005325E+01;
  COFD[757] = 3.67029147E+00;
  COFD[758] = -2.73138589E-01;
  COFD[759] = 1.23661438E-02;
  COFD[760] = -1.61178919E+01;
  COFD[761] = 4.03479307E+00;
  COFD[762] = -3.20399233E-01;
  COFD[763] = 1.44157782E-02;
  COFD[764] = -1.61178919E+01;
  COFD[765] = 4.03479307E+00;
  COFD[766] = -3.20399233E-01;
  COFD[767] = 1.44157782E-02;
  COFD[768] = -9.98517889E+00;
  COFD[769] = 2.04336848E+00;
  COFD[770] = -5.38387626E-02;
  COFD[771] = 2.48117739E-03;
  COFD[772] = -1.47236250E+01;
  COFD[773] = 3.59739586E+00;
  COFD[774] = -2.63437939E-01;
  COFD[775] = 1.19336668E-02;
  COFD[776] = -1.22646769E+01;
  COFD[777] = 2.73074409E+00;
  COFD[778] = -1.48960245E-01;
  COFD[779] = 6.87635559E-03;
  COFD[780] = -1.72184222E+01;
  COFD[781] = 4.44378938E+00;
  COFD[782] = -3.73963936E-01;
  COFD[783] = 1.67675483E-02;
  COFD[784] = -1.40517241E+01;
  COFD[785] = 3.35868034E+00;
  COFD[786] = -2.31350436E-01;
  COFD[787] = 1.04871016E-02;
  COFD[788] = -1.75698825E+01;
  COFD[789] = 4.54000784E+00;
  COFD[790] = -3.86295602E-01;
  COFD[791] = 1.72969843E-02;
  COFD[792] = -1.30053412E+01;
  COFD[793] = 3.00227472E+00;
  COFD[794] = -1.84384037E-01;
  COFD[795] = 8.41707179E-03;
  COFD[796] = -1.24510316E+01;
  COFD[797] = 2.82692805E+00;
  COFD[798] = -1.62138652E-01;
  COFD[799] = 7.47929495E-03;
  COFD[800] = -1.16227322E+01;
  COFD[801] = 2.61014717E+00;
  COFD[802] = -1.33183711E-01;
  COFD[803] = 6.18937111E-03;
  COFD[804] = -1.16260596E+01;
  COFD[805] = 2.61014717E+00;
  COFD[806] = -1.33183711E-01;
  COFD[807] = 6.18937111E-03;
  COFD[808] = -1.24519374E+01;
  COFD[809] = 2.82692805E+00;
  COFD[810] = -1.62138652E-01;
  COFD[811] = 7.47929495E-03;
  COFD[812] = -1.79975170E+01;
  COFD[813] = 5.00313903E+00;
  COFD[814] = -4.41228726E-01;
  COFD[815] = 1.94588671E-02;
  COFD[816] = -1.24527911E+01;
  COFD[817] = 2.82692805E+00;
  COFD[818] = -1.62138652E-01;
  COFD[819] = 7.47929495E-03;
  COFD[820] = -1.19251455E+01;
  COFD[821] = 3.00550766E+00;
  COFD[822] = -1.84765984E-01;
  COFD[823] = 8.43184890E-03;
  COFD[824] = -1.70030029E+01;
  COFD[825] = 4.54421325E+00;
  COFD[826] = -3.86809376E-01;
  COFD[827] = 1.73179271E-02;
  COFD[828] = -1.44828240E+01;
  COFD[829] = 3.56110932E+00;
  COFD[830] = -2.58702659E-01;
  COFD[831] = 1.17266885E-02;
  COFD[832] = -1.66323736E+01;
  COFD[833] = 4.36001181E+00;
  COFD[834] = -3.63261725E-01;
  COFD[835] = 1.63092312E-02;
  COFD[836] = -1.48505617E+01;
  COFD[837] = 3.59614134E+00;
  COFD[838] = -2.63274609E-01;
  COFD[839] = 1.19265426E-02;
  COFD[840] = -1.50999718E+01;
  COFD[841] = 3.67029147E+00;
  COFD[842] = -2.73138589E-01;
  COFD[843] = 1.23661438E-02;
  COFD[844] = -1.72187320E+01;
  COFD[845] = 4.44378938E+00;
  COFD[846] = -3.73963936E-01;
  COFD[847] = 1.67675483E-02;
  COFD[848] = -1.61212798E+01;
  COFD[849] = 4.03479307E+00;
  COFD[850] = -3.20399233E-01;
  COFD[851] = 1.44157782E-02;
  COFD[852] = -1.75697641E+01;
  COFD[853] = 4.54000784E+00;
  COFD[854] = -3.86295602E-01;
  COFD[855] = 1.72969843E-02;
  COFD[856] = -1.72204518E+01;
  COFD[857] = 4.44378938E+00;
  COFD[858] = -3.73963936E-01;
  COFD[859] = 1.67675483E-02;
  COFD[860] = -1.82304427E+01;
  COFD[861] = 4.78069184E+00;
  COFD[862] = -4.14340969E-01;
  COFD[863] = 1.83747757E-02;
  COFD[864] = -1.22379946E+01;
  COFD[865] = 2.72351269E+00;
  COFD[866] = -1.47956351E-01;
  COFD[867] = 6.82984550E-03;
  COFD[868] = -2.26136123E+01;
  COFD[869] = 5.51014294E+00;
  COFD[870] = -5.00490863E-01;
  COFD[871] = 2.17654712E-02;
  COFD[872] = -2.21214411E+01;
  COFD[873] = 5.69019961E+00;
  COFD[874] = -5.07971611E-01;
  COFD[875] = 2.14126561E-02;
  COFD[876] = -2.03481312E+01;
  COFD[877] = 5.26709856E+00;
  COFD[878] = -4.73195490E-01;
  COFD[879] = 2.07564226E-02;
  COFD[880] = -2.24140975E+01;
  COFD[881] = 5.69725388E+00;
  COFD[882] = -5.11197970E-01;
  COFD[883] = 2.16513648E-02;
  COFD[884] = -2.22189610E+01;
  COFD[885] = 5.44396600E+00;
  COFD[886] = -4.61412551E-01;
  COFD[887] = 1.87602923E-02;
  COFD[888] = -2.22189610E+01;
  COFD[889] = 5.44396600E+00;
  COFD[890] = -4.61412551E-01;
  COFD[891] = 1.87602923E-02;
  COFD[892] = -1.47236250E+01;
  COFD[893] = 3.59739586E+00;
  COFD[894] = -2.63437939E-01;
  COFD[895] = 1.19336668E-02;
  COFD[896] = -2.20562000E+01;
  COFD[897] = 5.66395629E+00;
  COFD[898] = -5.08751142E-01;
  COFD[899] = 2.16239527E-02;
  COFD[900] = -1.91885079E+01;
  COFD[901] = 4.80792873E+00;
  COFD[902] = -4.17710332E-01;
  COFD[903] = 1.85143704E-02;
  COFD[904] = -2.15365186E+01;
  COFD[905] = 4.99548160E+00;
  COFD[906] = -3.84541130E-01;
  COFD[907] = 1.46252961E-02;
  COFD[908] = -2.17996373E+01;
  COFD[909] = 5.66379176E+00;
  COFD[910] = -5.16553812E-01;
  COFD[911] = 2.23002301E-02;
  COFD[912] = -2.13880455E+01;
  COFD[913] = 4.85816818E+00;
  COFD[914] = -3.61859198E-01;
  COFD[915] = 1.34347998E-02;
  COFD[916] = -2.04392836E+01;
  COFD[917] = 5.30470298E+00;
  COFD[918] = -4.78070128E-01;
  COFD[919] = 2.09693013E-02;
  COFD[920] = -1.94467669E+01;
  COFD[921] = 4.90176377E+00;
  COFD[922] = -4.28654088E-01;
  COFD[923] = 1.89366950E-02;
  COFD[924] = -1.82146635E+01;
  COFD[925] = 4.61379381E+00;
  COFD[926] = -3.95204189E-01;
  COFD[927] = 1.76544311E-02;
  COFD[928] = -1.82343908E+01;
  COFD[929] = 4.61379381E+00;
  COFD[930] = -3.95204189E-01;
  COFD[931] = 1.76544311E-02;
  COFD[932] = -1.94542200E+01;
  COFD[933] = 4.90176377E+00;
  COFD[934] = -4.28654088E-01;
  COFD[935] = 1.89366950E-02;
  COFD[936] = -1.97071715E+01;
  COFD[937] = 4.53650344E+00;
  COFD[938] = -3.09332864E-01;
  COFD[939] = 1.07047264E-02;
  COFD[940] = -1.94613342E+01;
  COFD[941] = 4.90176377E+00;
  COFD[942] = -4.28654088E-01;
  COFD[943] = 1.89366950E-02;
  COFD[944] = -1.88211497E+01;
  COFD[945] = 5.31710153E+00;
  COFD[946] = -4.79638614E-01;
  COFD[947] = 2.10360613E-02;
  COFD[948] = -2.06943071E+01;
  COFD[949] = 4.84791744E+00;
  COFD[950] = -3.60148227E-01;
  COFD[951] = 1.33445806E-02;
  COFD[952] = -2.19469232E+01;
  COFD[953] = 5.64839278E+00;
  COFD[954] = -5.07869816E-01;
  COFD[955] = 2.16336719E-02;
  COFD[956] = -2.13053031E+01;
  COFD[957] = 5.09944835E+00;
  COFD[958] = -4.02512129E-01;
  COFD[959] = 1.55957509E-02;
  COFD[960] = -2.22171868E+01;
  COFD[961] = 5.66274856E+00;
  COFD[962] = -5.08624885E-01;
  COFD[963] = 2.16197194E-02;
  COFD[964] = -2.24090094E+01;
  COFD[965] = 5.69725388E+00;
  COFD[966] = -5.11197970E-01;
  COFD[967] = 2.16513648E-02;
  COFD[968] = -2.15399525E+01;
  COFD[969] = 4.99548160E+00;
  COFD[970] = -3.84541130E-01;
  COFD[971] = 1.46252961E-02;
  COFD[972] = -2.22444909E+01;
  COFD[973] = 5.44396600E+00;
  COFD[974] = -4.61412551E-01;
  COFD[975] = 1.87602923E-02;
  COFD[976] = -2.13866866E+01;
  COFD[977] = 4.85816818E+00;
  COFD[978] = -3.61859198E-01;
  COFD[979] = 1.34347998E-02;
  COFD[980] = -2.15594116E+01;
  COFD[981] = 4.99548160E+00;
  COFD[982] = -3.84541130E-01;
  COFD[983] = 1.46252961E-02;
  COFD[984] = -2.06438575E+01;
  COFD[985] = 4.46770471E+00;
  COFD[986] = -2.97972198E-01;
  COFD[987] = 1.01116412E-02;
  COFD[988] = -1.91593673E+01;
  COFD[989] = 4.79990484E+00;
  COFD[990] = -4.16700940E-01;
  COFD[991] = 1.84717181E-02;
  COFD[992] = -1.93751244E+01;
  COFD[993] = 4.42649312E+00;
  COFD[994] = -3.71750611E-01;
  COFD[995] = 1.66724904E-02;
  COFD[996] = -1.94104030E+01;
  COFD[997] = 4.91881880E+00;
  COFD[998] = -4.30621727E-01;
  COFD[999] = 1.90115470E-02;
  COFD[1000] = -1.68256395E+01;
  COFD[1001] = 4.05650314E+00;
  COFD[1002] = -3.23082632E-01;
  COFD[1003] = 1.45263472E-02;
  COFD[1004] = -1.95989967E+01;
  COFD[1005] = 4.86773881E+00;
  COFD[1006] = -4.24796060E-01;
  COFD[1007] = 1.87934811E-02;
  COFD[1008] = -2.07128235E+01;
  COFD[1009] = 5.22471147E+00;
  COFD[1010] = -4.67607197E-01;
  COFD[1011] = 2.05082142E-02;
  COFD[1012] = -2.07128235E+01;
  COFD[1013] = 5.22471147E+00;
  COFD[1014] = -4.67607197E-01;
  COFD[1015] = 2.05082142E-02;
  COFD[1016] = -1.22646769E+01;
  COFD[1017] = 2.73074409E+00;
  COFD[1018] = -1.48960245E-01;
  COFD[1019] = 6.87635559E-03;
  COFD[1020] = -1.91885079E+01;
  COFD[1021] = 4.80792873E+00;
  COFD[1022] = -4.17710332E-01;
  COFD[1023] = 1.85143704E-02;
  COFD[1024] = -1.57572302E+01;
  COFD[1025] = 3.60137256E+00;
  COFD[1026] = -2.63955612E-01;
  COFD[1027] = 1.19562427E-02;
  COFD[1028] = -2.16876073E+01;
  COFD[1029] = 5.52912323E+00;
  COFD[1030] = -5.02611621E-01;
  COFD[1031] = 2.18432892E-02;
  COFD[1032] = -1.85806726E+01;
  COFD[1033] = 4.63135891E+00;
  COFD[1034] = -3.97356061E-01;
  COFD[1035] = 1.77424015E-02;
  COFD[1036] = -2.20487184E+01;
  COFD[1037] = 5.61717340E+00;
  COFD[1038] = -5.12963928E-01;
  COFD[1039] = 2.22494915E-02;
  COFD[1040] = -1.68688450E+01;
  COFD[1041] = 4.07436246E+00;
  COFD[1042] = -3.25294692E-01;
  COFD[1043] = 1.46177587E-02;
  COFD[1044] = -1.60810237E+01;
  COFD[1045] = 3.73663964E+00;
  COFD[1046] = -2.82091747E-01;
  COFD[1047] = 1.27703717E-02;
  COFD[1048] = -1.46697009E+01;
  COFD[1049] = 3.34099775E+00;
  COFD[1050] = -2.28926170E-01;
  COFD[1051] = 1.03757053E-02;
  COFD[1052] = -1.46889273E+01;
  COFD[1053] = 3.34099775E+00;
  COFD[1054] = -2.28926170E-01;
  COFD[1055] = 1.03757053E-02;
  COFD[1056] = -1.60882025E+01;
  COFD[1057] = 3.73663964E+00;
  COFD[1058] = -2.82091747E-01;
  COFD[1059] = 1.27703717E-02;
  COFD[1060] = -2.14387421E+01;
  COFD[1061] = 5.69059069E+00;
  COFD[1062] = -5.08172820E-01;
  COFD[1063] = 2.14277961E-02;
  COFD[1064] = -1.60950513E+01;
  COFD[1065] = 3.73663964E+00;
  COFD[1066] = -2.82091747E-01;
  COFD[1067] = 1.27703717E-02;
  COFD[1068] = -1.51958271E+01;
  COFD[1069] = 4.08009081E+00;
  COFD[1070] = -3.25974206E-01;
  COFD[1071] = 1.46443746E-02;
  COFD[1072] = -2.13550473E+01;
  COFD[1073] = 5.62017718E+00;
  COFD[1074] = -5.13235471E-01;
  COFD[1075] = 2.22562169E-02;
  COFD[1076] = -1.90113079E+01;
  COFD[1077] = 4.76461849E+00;
  COFD[1078] = -4.12345773E-01;
  COFD[1079] = 1.82917938E-02;
  COFD[1080] = -2.11053659E+01;
  COFD[1081] = 5.48192321E+00;
  COFD[1082] = -4.98166647E-01;
  COFD[1083] = 2.17221333E-02;
  COFD[1084] = -1.93550571E+01;
  COFD[1085] = 4.80637892E+00;
  COFD[1086] = -4.17516720E-01;
  COFD[1087] = 1.85062434E-02;
  COFD[1088] = -1.95941169E+01;
  COFD[1089] = 4.86773881E+00;
  COFD[1090] = -4.24796060E-01;
  COFD[1091] = 1.87934811E-02;
  COFD[1092] = -2.16908674E+01;
  COFD[1093] = 5.52912323E+00;
  COFD[1094] = -5.02611621E-01;
  COFD[1095] = 2.18432892E-02;
  COFD[1096] = -2.07372608E+01;
  COFD[1097] = 5.22471147E+00;
  COFD[1098] = -4.67607197E-01;
  COFD[1099] = 2.05082142E-02;
  COFD[1100] = -2.20474308E+01;
  COFD[1101] = 5.61717340E+00;
  COFD[1102] = -5.12963928E-01;
  COFD[1103] = 2.22494915E-02;
  COFD[1104] = -2.17093204E+01;
  COFD[1105] = 5.52912323E+00;
  COFD[1106] = -5.02611621E-01;
  COFD[1107] = 2.18432892E-02;
  COFD[1108] = -2.23053293E+01;
  COFD[1109] = 5.64811803E+00;
  COFD[1110] = -5.07801617E-01;
  COFD[1111] = 2.16292975E-02;
  COFD[1112] = -1.57330387E+01;
  COFD[1113] = 3.59522642E+00;
  COFD[1114] = -2.63155485E-01;
  COFD[1115] = 1.19213463E-02;
  COFD[1116] = -2.38342076E+01;
  COFD[1117] = 5.58077369E+00;
  COFD[1118] = -4.85290481E-01;
  COFD[1119] = 2.00627377E-02;
  COFD[1120] = -2.10412741E+01;
  COFD[1121] = 4.77480735E+00;
  COFD[1122] = -3.48088937E-01;
  COFD[1123] = 1.27148736E-02;
  COFD[1124] = -2.21770779E+01;
  COFD[1125] = 5.68744998E+00;
  COFD[1126] = -5.10793511E-01;
  COFD[1127] = 2.16704352E-02;
  COFD[1128] = -2.15675111E+01;
  COFD[1129] = 4.87393197E+00;
  COFD[1130] = -3.64472579E-01;
  COFD[1131] = 1.35722107E-02;
  COFD[1132] = -2.02519341E+01;
  COFD[1133] = 4.11843264E+00;
  COFD[1134] = -2.42988196E-01;
  COFD[1135] = 7.31555013E-03;
  COFD[1136] = -2.02519341E+01;
  COFD[1137] = 4.11843264E+00;
  COFD[1138] = -2.42988196E-01;
  COFD[1139] = 7.31555013E-03;
  COFD[1140] = -1.72184222E+01;
  COFD[1141] = 4.44378938E+00;
  COFD[1142] = -3.73963936E-01;
  COFD[1143] = 1.67675483E-02;
  COFD[1144] = -2.15365186E+01;
  COFD[1145] = 4.99548160E+00;
  COFD[1146] = -3.84541130E-01;
  COFD[1147] = 1.46252961E-02;
  COFD[1148] = -2.16876073E+01;
  COFD[1149] = 5.52912323E+00;
  COFD[1150] = -5.02611621E-01;
  COFD[1151] = 2.18432892E-02;
  COFD[1152] = -1.87009754E+01;
  COFD[1153] = 3.28867876E+00;
  COFD[1154] = -1.13783324E-01;
  COFD[1155] = 8.29764378E-04;
  COFD[1156] = -2.20541783E+01;
  COFD[1157] = 5.34786767E+00;
  COFD[1158] = -4.44160169E-01;
  COFD[1159] = 1.78077063E-02;
  COFD[1160] = -1.83222039E+01;
  COFD[1161] = 3.05109646E+00;
  COFD[1162] = -7.75253866E-02;
  COFD[1163] = -9.62211004E-04;
  COFD[1164] = -2.22010228E+01;
  COFD[1165] = 5.69706859E+00;
  COFD[1166] = -5.11416131E-01;
  COFD[1167] = 2.16711595E-02;
  COFD[1168] = -2.20099125E+01;
  COFD[1169] = 5.63470135E+00;
  COFD[1170] = -5.14478143E-01;
  COFD[1171] = 2.22826045E-02;
  COFD[1172] = -2.06764596E+01;
  COFD[1173] = 5.34618044E+00;
  COFD[1174] = -4.83331563E-01;
  COFD[1175] = 2.11940573E-02;
  COFD[1176] = -2.07016822E+01;
  COFD[1177] = 5.34618044E+00;
  COFD[1178] = -4.83331563E-01;
  COFD[1179] = 2.11940573E-02;
  COFD[1180] = -2.20208641E+01;
  COFD[1181] = 5.63470135E+00;
  COFD[1182] = -5.14478143E-01;
  COFD[1183] = 2.22826045E-02;
  COFD[1184] = -1.39859525E+01;
  COFD[1185] = 1.55451537E+00;
  COFD[1186] = 1.48062755E-01;
  COFD[1187] = -1.20297011E-02;
  COFD[1188] = -2.20313904E+01;
  COFD[1189] = 5.63470135E+00;
  COFD[1190] = -5.14478143E-01;
  COFD[1191] = 2.22826045E-02;
  COFD[1192] = -2.05106259E+01;
  COFD[1193] = 5.69720134E+00;
  COFD[1194] = -5.11137553E-01;
  COFD[1195] = 2.16464526E-02;
  COFD[1196] = -1.75368726E+01;
  COFD[1197] = 3.03695857E+00;
  COFD[1198] = -7.53570650E-02;
  COFD[1199] = -1.06951881E-03;
  COFD[1200] = -2.16654806E+01;
  COFD[1201] = 5.06148364E+00;
  COFD[1202] = -3.95727634E-01;
  COFD[1203] = 1.52235677E-02;
  COFD[1204] = -1.87080864E+01;
  COFD[1205] = 3.50982702E+00;
  COFD[1206] = -1.47750833E-01;
  COFD[1207] = 2.51627764E-03;
  COFD[1208] = -2.17265278E+01;
  COFD[1209] = 4.99861193E+00;
  COFD[1210] = -3.85052101E-01;
  COFD[1211] = 1.46519879E-02;
  COFD[1212] = -2.15595993E+01;
  COFD[1213] = 4.87393197E+00;
  COFD[1214] = -3.64472579E-01;
  COFD[1215] = 1.35722107E-02;
  COFD[1216] = -1.87071695E+01;
  COFD[1217] = 3.28867876E+00;
  COFD[1218] = -1.13783324E-01;
  COFD[1219] = 8.29764378E-04;
  COFD[1220] = -2.02945780E+01;
  COFD[1221] = 4.11843264E+00;
  COFD[1222] = -2.42988196E-01;
  COFD[1223] = 7.31555013E-03;
  COFD[1224] = -1.83196729E+01;
  COFD[1225] = 3.05109646E+00;
  COFD[1226] = -7.75253866E-02;
  COFD[1227] = -9.62211004E-04;
  COFD[1228] = -1.87429412E+01;
  COFD[1229] = 3.28867876E+00;
  COFD[1230] = -1.13783324E-01;
  COFD[1231] = 8.29764378E-04;
  COFD[1232] = -1.63376941E+01;
  COFD[1233] = 2.10546851E+00;
  COFD[1234] = 6.57487483E-02;
  COFD[1235] = -8.01461150E-03;
  COFD[1236] = -2.16604323E+01;
  COFD[1237] = 5.52209451E+00;
  COFD[1238] = -5.01800802E-01;
  COFD[1239] = 2.18122017E-02;
  COFD[1240] = -2.19957808E+01;
  COFD[1241] = 5.34402519E+00;
  COFD[1242] = -4.83068822E-01;
  COFD[1243] = 2.11832962E-02;
  COFD[1244] = -2.18016669E+01;
  COFD[1245] = 5.66495194E+00;
  COFD[1246] = -5.12328464E-01;
  COFD[1247] = 2.19277949E-02;
  COFD[1248] = -1.95860363E+01;
  COFD[1249] = 5.02452773E+00;
  COFD[1250] = -4.43782411E-01;
  COFD[1251] = 1.95604414E-02;
  COFD[1252] = -2.20886792E+01;
  COFD[1253] = 5.66947709E+00;
  COFD[1254] = -5.15131199E-01;
  COFD[1255] = 2.21454794E-02;
  COFD[1256] = -2.24734294E+01;
  COFD[1257] = 5.67806029E+00;
  COFD[1258] = -5.03991163E-01;
  COFD[1259] = 2.11372864E-02;
  COFD[1260] = -2.24734294E+01;
  COFD[1261] = 5.67806029E+00;
  COFD[1262] = -5.03991163E-01;
  COFD[1263] = 2.11372864E-02;
  COFD[1264] = -1.40517241E+01;
  COFD[1265] = 3.35868034E+00;
  COFD[1266] = -2.31350436E-01;
  COFD[1267] = 1.04871016E-02;
  COFD[1268] = -2.17996373E+01;
  COFD[1269] = 5.66379176E+00;
  COFD[1270] = -5.16553812E-01;
  COFD[1271] = 2.23002301E-02;
  COFD[1272] = -1.85806726E+01;
  COFD[1273] = 4.63135891E+00;
  COFD[1274] = -3.97356061E-01;
  COFD[1275] = 1.77424015E-02;
  COFD[1276] = -2.20541783E+01;
  COFD[1277] = 5.34786767E+00;
  COFD[1278] = -4.44160169E-01;
  COFD[1279] = 1.78077063E-02;
  COFD[1280] = -2.11580145E+01;
  COFD[1281] = 5.48915410E+00;
  COFD[1282] = -4.98433602E-01;
  COFD[1283] = 2.17047430E-02;
  COFD[1284] = -2.19530975E+01;
  COFD[1285] = 5.23115443E+00;
  COFD[1286] = -4.24338954E-01;
  COFD[1287] = 1.67465343E-02;
  COFD[1288] = -1.96529178E+01;
  COFD[1289] = 5.05139863E+00;
  COFD[1290] = -4.47150410E-01;
  COFD[1291] = 1.97024129E-02;
  COFD[1292] = -1.87148165E+01;
  COFD[1293] = 4.67388141E+00;
  COFD[1294] = -4.00961748E-01;
  COFD[1295] = 1.78132254E-02;
  COFD[1296] = -1.74774489E+01;
  COFD[1297] = 4.37416294E+00;
  COFD[1298] = -3.65107627E-01;
  COFD[1299] = 1.63899597E-02;
  COFD[1300] = -1.74961504E+01;
  COFD[1301] = 4.37416294E+00;
  COFD[1302] = -3.65107627E-01;
  COFD[1303] = 1.63899597E-02;
  COFD[1304] = -1.87217148E+01;
  COFD[1305] = 4.67388141E+00;
  COFD[1306] = -4.00961748E-01;
  COFD[1307] = 1.78132254E-02;
  COFD[1308] = -2.03818235E+01;
  COFD[1309] = 4.95053951E+00;
  COFD[1310] = -3.77134666E-01;
  COFD[1311] = 1.42368958E-02;
  COFD[1312] = -1.87282922E+01;
  COFD[1313] = 4.67388141E+00;
  COFD[1314] = -4.00961748E-01;
  COFD[1315] = 1.78132254E-02;
  COFD[1316] = -1.80373598E+01;
  COFD[1317] = 5.06144525E+00;
  COFD[1318] = -4.48405432E-01;
  COFD[1319] = 1.97551196E-02;
  COFD[1320] = -2.12623028E+01;
  COFD[1321] = 5.21899155E+00;
  COFD[1322] = -4.22323327E-01;
  COFD[1323] = 1.66401604E-02;
  COFD[1324] = -2.16804439E+01;
  COFD[1325] = 5.64741106E+00;
  COFD[1326] = -5.15473555E-01;
  COFD[1327] = 2.22977945E-02;
  COFD[1328] = -2.17782694E+01;
  COFD[1329] = 5.42990885E+00;
  COFD[1330] = -4.58860891E-01;
  COFD[1331] = 1.86184915E-02;
  COFD[1332] = -2.19599621E+01;
  COFD[1333] = 5.66323135E+00;
  COFD[1334] = -5.16518069E-01;
  COFD[1335] = 2.23002455E-02;
  COFD[1336] = -2.20840106E+01;
  COFD[1337] = 5.66947709E+00;
  COFD[1338] = -5.15131199E-01;
  COFD[1339] = 2.21454794E-02;
  COFD[1340] = -2.20572657E+01;
  COFD[1341] = 5.34786767E+00;
  COFD[1342] = -4.44160169E-01;
  COFD[1343] = 1.78077063E-02;
  COFD[1344] = -2.24966654E+01;
  COFD[1345] = 5.67806029E+00;
  COFD[1346] = -5.03991163E-01;
  COFD[1347] = 2.11372864E-02;
  COFD[1348] = -2.19518805E+01;
  COFD[1349] = 5.23115443E+00;
  COFD[1350] = -4.24338954E-01;
  COFD[1351] = 1.67465343E-02;
  COFD[1352] = -2.20747210E+01;
  COFD[1353] = 5.34786767E+00;
  COFD[1354] = -4.44160169E-01;
  COFD[1355] = 1.78077063E-02;
  COFD[1356] = -2.12939940E+01;
  COFD[1357] = 4.87520005E+00;
  COFD[1358] = -3.64681670E-01;
  COFD[1359] = 1.35831766E-02;
  COFD[1360] = -1.85562214E+01;
  COFD[1361] = 4.62539600E+00;
  COFD[1362] = -3.96640913E-01;
  COFD[1363] = 1.77139115E-02;
  COFD[1364] = -2.37835094E+01;
  COFD[1365] = 5.48425494E+00;
  COFD[1366] = -4.68327600E-01;
  COFD[1367] = 1.91335179E-02;
  COFD[1368] = -2.08083408E+01;
  COFD[1369] = 4.60022609E+00;
  COFD[1370] = -3.20098606E-01;
  COFD[1371] = 1.12745986E-02;
  COFD[1372] = -2.23456670E+01;
  COFD[1373] = 5.69153566E+00;
  COFD[1374] = -5.08605460E-01;
  COFD[1375] = 2.14598086E-02;
  COFD[1376] = -2.14305236E+01;
  COFD[1377] = 4.74312020E+00;
  COFD[1378] = -3.42998475E-01;
  COFD[1379] = 1.24528839E-02;
  COFD[1380] = -1.98891989E+01;
  COFD[1381] = 3.88632523E+00;
  COFD[1382] = -2.06802738E-01;
  COFD[1383] = 5.48944874E-03;
  COFD[1384] = -1.98891989E+01;
  COFD[1385] = 3.88632523E+00;
  COFD[1386] = -2.06802738E-01;
  COFD[1387] = 5.48944874E-03;
  COFD[1388] = -1.75698825E+01;
  COFD[1389] = 4.54000784E+00;
  COFD[1390] = -3.86295602E-01;
  COFD[1391] = 1.72969843E-02;
  COFD[1392] = -2.13880455E+01;
  COFD[1393] = 4.85816818E+00;
  COFD[1394] = -3.61859198E-01;
  COFD[1395] = 1.34347998E-02;
  COFD[1396] = -2.20487184E+01;
  COFD[1397] = 5.61717340E+00;
  COFD[1398] = -5.12963928E-01;
  COFD[1399] = 2.22494915E-02;
  COFD[1400] = -1.83222039E+01;
  COFD[1401] = 3.05109646E+00;
  COFD[1402] = -7.75253866E-02;
  COFD[1403] = -9.62211004E-04;
  COFD[1404] = -2.19530975E+01;
  COFD[1405] = 5.23115443E+00;
  COFD[1406] = -4.24338954E-01;
  COFD[1407] = 1.67465343E-02;
  COFD[1408] = -1.78827271E+01;
  COFD[1409] = 2.78750377E+00;
  COFD[1410] = -3.75661727E-02;
  COFD[1411] = -2.93067908E-03;
  COFD[1412] = -2.23400234E+01;
  COFD[1413] = 5.68920173E+00;
  COFD[1414] = -5.07537130E-01;
  COFD[1415] = 2.13807918E-02;
  COFD[1416] = -2.22524251E+01;
  COFD[1417] = 5.66831709E+00;
  COFD[1418] = -5.16826635E-01;
  COFD[1419] = 2.22987354E-02;
  COFD[1420] = -2.10138841E+01;
  COFD[1421] = 5.42577327E+00;
  COFD[1422] = -4.92756280E-01;
  COFD[1423] = 2.15671078E-02;
  COFD[1424] = -2.10397944E+01;
  COFD[1425] = 5.42577327E+00;
  COFD[1426] = -4.92756280E-01;
  COFD[1427] = 2.15671078E-02;
  COFD[1428] = -2.22615149E+01;
  COFD[1429] = 5.66777991E+00;
  COFD[1430] = -5.16795849E-01;
  COFD[1431] = 2.22990514E-02;
  COFD[1432] = -1.53149885E+01;
  COFD[1433] = 2.14009360E+00;
  COFD[1434] = 5.93887776E-02;
  COFD[1435] = -7.65730317E-03;
  COFD[1436] = -2.22725452E+01;
  COFD[1437] = 5.66777991E+00;
  COFD[1438] = -5.16795849E-01;
  COFD[1439] = 2.22990514E-02;
  COFD[1440] = -2.06545761E+01;
  COFD[1441] = 5.68796184E+00;
  COFD[1442] = -5.07058830E-01;
  COFD[1443] = 2.13464896E-02;
  COFD[1444] = -1.70825629E+01;
  COFD[1445] = 2.76803494E+00;
  COFD[1446] = -3.45011618E-02;
  COFD[1447] = -3.08591460E-03;
  COFD[1448] = -2.15379038E+01;
  COFD[1449] = 4.92672935E+00;
  COFD[1450] = -3.73194449E-01;
  COFD[1451] = 1.40298739E-02;
  COFD[1452] = -1.83689025E+01;
  COFD[1453] = 3.29018405E+00;
  COFD[1454] = -1.14013582E-01;
  COFD[1455] = 8.41167937E-04;
  COFD[1456] = -2.15771044E+01;
  COFD[1457] = 4.86045752E+00;
  COFD[1458] = -3.62240800E-01;
  COFD[1459] = 1.34549132E-02;
  COFD[1460] = -2.14221700E+01;
  COFD[1461] = 4.74312020E+00;
  COFD[1462] = -3.42998475E-01;
  COFD[1463] = 1.24528839E-02;
  COFD[1464] = -1.83289117E+01;
  COFD[1465] = 3.05109646E+00;
  COFD[1466] = -7.75253866E-02;
  COFD[1467] = -9.62211004E-04;
  COFD[1468] = -1.99347931E+01;
  COFD[1469] = 3.88632523E+00;
  COFD[1470] = -2.06802738E-01;
  COFD[1471] = 5.48944874E-03;
  COFD[1472] = -1.78799696E+01;
  COFD[1473] = 2.78750377E+00;
  COFD[1474] = -3.75661727E-02;
  COFD[1475] = -2.93067908E-03;
  COFD[1476] = -1.83677895E+01;
  COFD[1477] = 3.05109646E+00;
  COFD[1478] = -7.75253866E-02;
  COFD[1479] = -9.62211004E-04;
  COFD[1480] = -1.61986745E+01;
  COFD[1481] = 1.99402574E+00;
  COFD[1482] = 8.16970869E-02;
  COFD[1483] = -8.76358100E-03;
  COFD[1484] = -2.20270040E+01;
  COFD[1485] = 5.61263501E+00;
  COFD[1486] = -5.12541597E-01;
  COFD[1487] = 2.22382754E-02;
  COFD[1488] = -2.03023823E+01;
  COFD[1489] = 4.84155965E+00;
  COFD[1490] = -4.21649019E-01;
  COFD[1491] = 1.86672992E-02;
  COFD[1492] = -2.07569884E+01;
  COFD[1493] = 5.45048622E+00;
  COFD[1494] = -4.95678069E-01;
  COFD[1495] = 2.16826855E-02;
  COFD[1496] = -1.82302992E+01;
  COFD[1497] = 4.62413676E+00;
  COFD[1498] = -3.96485100E-01;
  COFD[1499] = 1.77074617E-02;
  COFD[1500] = -2.08856540E+01;
  COFD[1501] = 5.38939502E+00;
  COFD[1502] = -4.88508342E-01;
  COFD[1503] = 2.14017409E-02;
  COFD[1504] = -2.18020150E+01;
  COFD[1505] = 5.65210943E+00;
  COFD[1506] = -5.15837732E-01;
  COFD[1507] = 2.23031110E-02;
  COFD[1508] = -2.18020150E+01;
  COFD[1509] = 5.65210943E+00;
  COFD[1510] = -5.15837732E-01;
  COFD[1511] = 2.23031110E-02;
  COFD[1512] = -1.30053412E+01;
  COFD[1513] = 3.00227472E+00;
  COFD[1514] = -1.84384037E-01;
  COFD[1515] = 8.41707179E-03;
  COFD[1516] = -2.04392836E+01;
  COFD[1517] = 5.30470298E+00;
  COFD[1518] = -4.78070128E-01;
  COFD[1519] = 2.09693013E-02;
  COFD[1520] = -1.68688450E+01;
  COFD[1521] = 4.07436246E+00;
  COFD[1522] = -3.25294692E-01;
  COFD[1523] = 1.46177587E-02;
  COFD[1524] = -2.22010228E+01;
  COFD[1525] = 5.69706859E+00;
  COFD[1526] = -5.11416131E-01;
  COFD[1527] = 2.16711595E-02;
  COFD[1528] = -1.96529178E+01;
  COFD[1529] = 5.05139863E+00;
  COFD[1530] = -4.47150410E-01;
  COFD[1531] = 1.97024129E-02;
  COFD[1532] = -2.23400234E+01;
  COFD[1533] = 5.68920173E+00;
  COFD[1534] = -5.07537130E-01;
  COFD[1535] = 2.13807918E-02;
  COFD[1536] = -1.82754257E+01;
  COFD[1537] = 4.63999331E+00;
  COFD[1538] = -3.98311828E-01;
  COFD[1539] = 1.77766109E-02;
  COFD[1540] = -1.72726080E+01;
  COFD[1541] = 4.24483918E+00;
  COFD[1542] = -3.48135608E-01;
  COFD[1543] = 1.56435370E-02;
  COFD[1544] = -1.59069185E+01;
  COFD[1545] = 3.85870007E+00;
  COFD[1546] = -2.98154723E-01;
  COFD[1547] = 1.34776935E-02;
  COFD[1548] = -1.59214858E+01;
  COFD[1549] = 3.85870007E+00;
  COFD[1550] = -2.98154723E-01;
  COFD[1551] = 1.34776935E-02;
  COFD[1552] = -1.72775133E+01;
  COFD[1553] = 4.24483918E+00;
  COFD[1554] = -3.48135608E-01;
  COFD[1555] = 1.56435370E-02;
  COFD[1556] = -2.12270291E+01;
  COFD[1557] = 5.58293886E+00;
  COFD[1558] = -4.85683839E-01;
  COFD[1559] = 2.00846811E-02;
  COFD[1560] = -1.72821723E+01;
  COFD[1561] = 4.24483918E+00;
  COFD[1562] = -3.48135608E-01;
  COFD[1563] = 1.56435370E-02;
  COFD[1564] = -1.67296679E+01;
  COFD[1565] = 4.64465126E+00;
  COFD[1566] = -3.98803383E-01;
  COFD[1567] = 1.77929328E-02;
  COFD[1568] = -2.17175170E+01;
  COFD[1569] = 5.68824628E+00;
  COFD[1570] = -5.07164081E-01;
  COFD[1571] = 2.13539742E-02;
  COFD[1572] = -2.01618838E+01;
  COFD[1573] = 5.22960509E+00;
  COFD[1574] = -4.68215587E-01;
  COFD[1575] = 2.05336694E-02;
  COFD[1576] = -2.16530812E+01;
  COFD[1577] = 5.64919890E+00;
  COFD[1578] = -5.07174967E-01;
  COFD[1579] = 2.15693228E-02;
  COFD[1580] = -2.05833341E+01;
  COFD[1581] = 5.30254126E+00;
  COFD[1582] = -4.77796012E-01;
  COFD[1583] = 2.09576046E-02;
  COFD[1584] = -2.08824342E+01;
  COFD[1585] = 5.38939502E+00;
  COFD[1586] = -4.88508342E-01;
  COFD[1587] = 2.14017409E-02;
  COFD[1588] = -2.22030140E+01;
  COFD[1589] = 5.69706859E+00;
  COFD[1590] = -5.11416131E-01;
  COFD[1591] = 2.16711595E-02;
  COFD[1592] = -2.18177115E+01;
  COFD[1593] = 5.65210943E+00;
  COFD[1594] = -5.15837732E-01;
  COFD[1595] = 2.23031110E-02;
  COFD[1596] = -2.23392482E+01;
  COFD[1597] = 5.68920173E+00;
  COFD[1598] = -5.07537130E-01;
  COFD[1599] = 2.13807918E-02;
  COFD[1600] = -2.22141889E+01;
  COFD[1601] = 5.69706859E+00;
  COFD[1602] = -5.11416131E-01;
  COFD[1603] = 2.16711595E-02;
  COFD[1604] = -2.21178782E+01;
  COFD[1605] = 5.52954770E+00;
  COFD[1606] = -4.76277229E-01;
  COFD[1607] = 1.95684485E-02;
  COFD[1608] = -1.68473654E+01;
  COFD[1609] = 4.06963018E+00;
  COFD[1610] = -3.24735969E-01;
  COFD[1611] = 1.45960083E-02;
  COFD[1612] = -1.97428162E+01;
  COFD[1613] = 4.55369444E+00;
  COFD[1614] = -3.87975150E-01;
  COFD[1615] = 1.73657784E-02;
  COFD[1616] = -1.97631858E+01;
  COFD[1617] = 5.05439215E+00;
  COFD[1618] = -4.47524613E-01;
  COFD[1619] = 1.97181397E-02;
  COFD[1620] = -1.71870267E+01;
  COFD[1621] = 4.20847168E+00;
  COFD[1622] = -3.43267883E-01;
  COFD[1623] = 1.54252580E-02;
  COFD[1624] = -1.99192393E+01;
  COFD[1625] = 4.98360158E+00;
  COFD[1626] = -4.38825780E-01;
  COFD[1627] = 1.93601206E-02;
  COFD[1628] = -2.11491052E+01;
  COFD[1629] = 5.38685618E+00;
  COFD[1630] = -4.88207385E-01;
  COFD[1631] = 2.13898131E-02;
  COFD[1632] = -2.11491052E+01;
  COFD[1633] = 5.38685618E+00;
  COFD[1634] = -4.88207385E-01;
  COFD[1635] = 2.13898131E-02;
  COFD[1636] = -1.24510316E+01;
  COFD[1637] = 2.82692805E+00;
  COFD[1638] = -1.62138652E-01;
  COFD[1639] = 7.47929495E-03;
  COFD[1640] = -1.94467669E+01;
  COFD[1641] = 4.90176377E+00;
  COFD[1642] = -4.28654088E-01;
  COFD[1643] = 1.89366950E-02;
  COFD[1644] = -1.60810237E+01;
  COFD[1645] = 3.73663964E+00;
  COFD[1646] = -2.82091747E-01;
  COFD[1647] = 1.27703717E-02;
  COFD[1648] = -2.20099125E+01;
  COFD[1649] = 5.63470135E+00;
  COFD[1650] = -5.14478143E-01;
  COFD[1651] = 2.22826045E-02;
  COFD[1652] = -1.87148165E+01;
  COFD[1653] = 4.67388141E+00;
  COFD[1654] = -4.00961748E-01;
  COFD[1655] = 1.78132254E-02;
  COFD[1656] = -2.22524251E+01;
  COFD[1657] = 5.66831709E+00;
  COFD[1658] = -5.16826635E-01;
  COFD[1659] = 2.22987354E-02;
  COFD[1660] = -1.72726080E+01;
  COFD[1661] = 4.24483918E+00;
  COFD[1662] = -3.48135608E-01;
  COFD[1663] = 1.56435370E-02;
  COFD[1664] = -1.63824749E+01;
  COFD[1665] = 3.86041291E+00;
  COFD[1666] = -2.98380064E-01;
  COFD[1667] = 1.34876205E-02;
  COFD[1668] = -1.49421326E+01;
  COFD[1669] = 3.46399647E+00;
  COFD[1670] = -2.45668465E-01;
  COFD[1671] = 1.11399884E-02;
  COFD[1672] = -1.49622901E+01;
  COFD[1673] = 3.46399647E+00;
  COFD[1674] = -2.45668465E-01;
  COFD[1675] = 1.11399884E-02;
  COFD[1676] = -1.63901688E+01;
  COFD[1677] = 3.86041291E+00;
  COFD[1678] = -2.98380064E-01;
  COFD[1679] = 1.34876205E-02;
  COFD[1680] = -2.13884324E+01;
  COFD[1681] = 5.65488061E+00;
  COFD[1682] = -4.99826791E-01;
  COFD[1683] = 2.09064205E-02;
  COFD[1684] = -1.63975163E+01;
  COFD[1685] = 3.86041291E+00;
  COFD[1686] = -2.98380064E-01;
  COFD[1687] = 1.34876205E-02;
  COFD[1688] = -1.55822809E+01;
  COFD[1689] = 4.25889159E+00;
  COFD[1690] = -3.50023998E-01;
  COFD[1691] = 1.57285900E-02;
  COFD[1692] = -2.15248648E+01;
  COFD[1693] = 5.66913715E+00;
  COFD[1694] = -5.16774023E-01;
  COFD[1695] = 2.22895896E-02;
  COFD[1696] = -1.92936265E+01;
  COFD[1697] = 4.86874488E+00;
  COFD[1698] = -4.24902800E-01;
  COFD[1699] = 1.87970659E-02;
  COFD[1700] = -2.13841054E+01;
  COFD[1701] = 5.57682097E+00;
  COFD[1702] = -5.08589054E-01;
  COFD[1703] = 2.20956285E-02;
  COFD[1704] = -1.96209604E+01;
  COFD[1705] = 4.90052813E+00;
  COFD[1706] = -4.28511355E-01;
  COFD[1707] = 1.89312580E-02;
  COFD[1708] = -1.99139669E+01;
  COFD[1709] = 4.98360158E+00;
  COFD[1710] = -4.38825780E-01;
  COFD[1711] = 1.93601206E-02;
  COFD[1712] = -2.20135031E+01;
  COFD[1713] = 5.63470135E+00;
  COFD[1714] = -5.14478143E-01;
  COFD[1715] = 2.22826045E-02;
  COFD[1716] = -2.11757519E+01;
  COFD[1717] = 5.38685618E+00;
  COFD[1718] = -4.88207385E-01;
  COFD[1719] = 2.13898131E-02;
  COFD[1720] = -2.22510016E+01;
  COFD[1721] = 5.66831709E+00;
  COFD[1722] = -5.16826635E-01;
  COFD[1723] = 2.22987354E-02;
  COFD[1724] = -2.20338721E+01;
  COFD[1725] = 5.63470135E+00;
  COFD[1726] = -5.14478143E-01;
  COFD[1727] = 2.22826045E-02;
  COFD[1728] = -2.25069594E+01;
  COFD[1729] = 5.69732523E+00;
  COFD[1730] = -5.11316920E-01;
  COFD[1731] = 2.16612121E-02;
  COFD[1732] = -1.60542790E+01;
  COFD[1733] = 3.72962835E+00;
  COFD[1734] = -2.81187017E-01;
  COFD[1735] = 1.27313717E-02;
  COFD[1736] = -1.80914623E+01;
  COFD[1737] = 4.07933301E+00;
  COFD[1738] = -3.25884118E-01;
  COFD[1739] = 1.46408360E-02;
  COFD[1740] = -1.83100736E+01;
  COFD[1741] = 4.67429531E+00;
  COFD[1742] = -4.00998687E-01;
  COFD[1743] = 1.78140746E-02;
  COFD[1744] = -1.58379324E+01;
  COFD[1745] = 3.83195750E+00;
  COFD[1746] = -2.94605739E-01;
  COFD[1747] = 1.33200383E-02;
  COFD[1748] = -1.85766545E+01;
  COFD[1749] = 4.65440100E+00;
  COFD[1750] = -3.99617849E-01;
  COFD[1751] = 1.78081611E-02;
  COFD[1752] = -1.95878092E+01;
  COFD[1753] = 4.97734997E+00;
  COFD[1754] = -4.38018636E-01;
  COFD[1755] = 1.93251310E-02;
  COFD[1756] = -1.95878092E+01;
  COFD[1757] = 4.97734997E+00;
  COFD[1758] = -4.38018636E-01;
  COFD[1759] = 1.93251310E-02;
  COFD[1760] = -1.16227322E+01;
  COFD[1761] = 2.61014717E+00;
  COFD[1762] = -1.33183711E-01;
  COFD[1763] = 6.18937111E-03;
  COFD[1764] = -1.82146635E+01;
  COFD[1765] = 4.61379381E+00;
  COFD[1766] = -3.95204189E-01;
  COFD[1767] = 1.76544311E-02;
  COFD[1768] = -1.46697009E+01;
  COFD[1769] = 3.34099775E+00;
  COFD[1770] = -2.28926170E-01;
  COFD[1771] = 1.03757053E-02;
  COFD[1772] = -2.06764596E+01;
  COFD[1773] = 5.34618044E+00;
  COFD[1774] = -4.83331563E-01;
  COFD[1775] = 2.11940573E-02;
  COFD[1776] = -1.74774489E+01;
  COFD[1777] = 4.37416294E+00;
  COFD[1778] = -3.65107627E-01;
  COFD[1779] = 1.63899597E-02;
  COFD[1780] = -2.10138841E+01;
  COFD[1781] = 5.42577327E+00;
  COFD[1782] = -4.92756280E-01;
  COFD[1783] = 2.15671078E-02;
  COFD[1784] = -1.59069185E+01;
  COFD[1785] = 3.85870007E+00;
  COFD[1786] = -2.98154723E-01;
  COFD[1787] = 1.34776935E-02;
  COFD[1788] = -1.49421326E+01;
  COFD[1789] = 3.46399647E+00;
  COFD[1790] = -2.45668465E-01;
  COFD[1791] = 1.11399884E-02;
  COFD[1792] = -1.36893902E+01;
  COFD[1793] = 3.12661616E+00;
  COFD[1794] = -2.00477206E-01;
  COFD[1795] = 9.11202886E-03;
  COFD[1796] = -1.37044316E+01;
  COFD[1797] = 3.12661616E+00;
  COFD[1798] = -2.00477206E-01;
  COFD[1799] = 9.11202886E-03;
  COFD[1800] = -1.49472487E+01;
  COFD[1801] = 3.46399647E+00;
  COFD[1802] = -2.45668465E-01;
  COFD[1803] = 1.11399884E-02;
  COFD[1804] = -2.02329152E+01;
  COFD[1805] = 5.53415157E+00;
  COFD[1806] = -5.03188882E-01;
  COFD[1807] = 2.18653015E-02;
  COFD[1808] = -1.49521098E+01;
  COFD[1809] = 3.46399647E+00;
  COFD[1810] = -2.45668465E-01;
  COFD[1811] = 1.11399884E-02;
  COFD[1812] = -1.42587302E+01;
  COFD[1813] = 3.86790216E+00;
  COFD[1814] = -2.99364050E-01;
  COFD[1815] = 1.35309049E-02;
  COFD[1816] = -2.03299982E+01;
  COFD[1817] = 5.43253571E+00;
  COFD[1818] = -4.93560962E-01;
  COFD[1819] = 2.15991994E-02;
  COFD[1820] = -1.80137966E+01;
  COFD[1821] = 4.57861932E+00;
  COFD[1822] = -3.90990906E-01;
  COFD[1823] = 1.74871172E-02;
  COFD[1824] = -1.99120381E+01;
  COFD[1825] = 5.21863561E+00;
  COFD[1826] = -4.66851910E-01;
  COFD[1827] = 2.04766146E-02;
  COFD[1828] = -1.83782241E+01;
  COFD[1829] = 4.61237034E+00;
  COFD[1830] = -3.95027652E-01;
  COFD[1831] = 1.76471131E-02;
  COFD[1832] = -1.85732857E+01;
  COFD[1833] = 4.65440100E+00;
  COFD[1834] = -3.99617849E-01;
  COFD[1835] = 1.78081611E-02;
  COFD[1836] = -2.06785569E+01;
  COFD[1837] = 5.34618044E+00;
  COFD[1838] = -4.83331563E-01;
  COFD[1839] = 2.11940573E-02;
  COFD[1840] = -1.96043740E+01;
  COFD[1841] = 4.97734997E+00;
  COFD[1842] = -4.38018636E-01;
  COFD[1843] = 1.93251310E-02;
  COFD[1844] = -2.10130665E+01;
  COFD[1845] = 5.42577327E+00;
  COFD[1846] = -4.92756280E-01;
  COFD[1847] = 2.15671078E-02;
  COFD[1848] = -2.06903362E+01;
  COFD[1849] = 5.34618044E+00;
  COFD[1850] = -4.83331563E-01;
  COFD[1851] = 2.11940573E-02;
  COFD[1852] = -2.15044839E+01;
  COFD[1853] = 5.59463241E+00;
  COFD[1854] = -5.10685806E-01;
  COFD[1855] = 2.21780225E-02;
  COFD[1856] = -1.46399714E+01;
  COFD[1857] = 3.33278784E+00;
  COFD[1858] = -2.27808884E-01;
  COFD[1859] = 1.03247543E-02;
  COFD[1860] = -1.81190609E+01;
  COFD[1861] = 4.07933301E+00;
  COFD[1862] = -3.25884118E-01;
  COFD[1863] = 1.46408360E-02;
  COFD[1864] = -1.83293112E+01;
  COFD[1865] = 4.67429531E+00;
  COFD[1866] = -4.00998687E-01;
  COFD[1867] = 1.78140746E-02;
  COFD[1868] = -1.58529948E+01;
  COFD[1869] = 3.83195750E+00;
  COFD[1870] = -2.94605739E-01;
  COFD[1871] = 1.33200383E-02;
  COFD[1872] = -1.85986007E+01;
  COFD[1873] = 4.65440100E+00;
  COFD[1874] = -3.99617849E-01;
  COFD[1875] = 1.78081611E-02;
  COFD[1876] = -1.96114174E+01;
  COFD[1877] = 4.97734997E+00;
  COFD[1878] = -4.38018636E-01;
  COFD[1879] = 1.93251310E-02;
  COFD[1880] = -1.96114174E+01;
  COFD[1881] = 4.97734997E+00;
  COFD[1882] = -4.38018636E-01;
  COFD[1883] = 1.93251310E-02;
  COFD[1884] = -1.16260596E+01;
  COFD[1885] = 2.61014717E+00;
  COFD[1886] = -1.33183711E-01;
  COFD[1887] = 6.18937111E-03;
  COFD[1888] = -1.82343908E+01;
  COFD[1889] = 4.61379381E+00;
  COFD[1890] = -3.95204189E-01;
  COFD[1891] = 1.76544311E-02;
  COFD[1892] = -1.46889273E+01;
  COFD[1893] = 3.34099775E+00;
  COFD[1894] = -2.28926170E-01;
  COFD[1895] = 1.03757053E-02;
  COFD[1896] = -2.07016822E+01;
  COFD[1897] = 5.34618044E+00;
  COFD[1898] = -4.83331563E-01;
  COFD[1899] = 2.11940573E-02;
  COFD[1900] = -1.74961504E+01;
  COFD[1901] = 4.37416294E+00;
  COFD[1902] = -3.65107627E-01;
  COFD[1903] = 1.63899597E-02;
  COFD[1904] = -2.10397944E+01;
  COFD[1905] = 5.42577327E+00;
  COFD[1906] = -4.92756280E-01;
  COFD[1907] = 2.15671078E-02;
  COFD[1908] = -1.59214858E+01;
  COFD[1909] = 3.85870007E+00;
  COFD[1910] = -2.98154723E-01;
  COFD[1911] = 1.34776935E-02;
  COFD[1912] = -1.49622901E+01;
  COFD[1913] = 3.46399647E+00;
  COFD[1914] = -2.45668465E-01;
  COFD[1915] = 1.11399884E-02;
  COFD[1916] = -1.37044316E+01;
  COFD[1917] = 3.12661616E+00;
  COFD[1918] = -2.00477206E-01;
  COFD[1919] = 9.11202886E-03;
  COFD[1920] = -1.37199396E+01;
  COFD[1921] = 3.12661616E+00;
  COFD[1922] = -2.00477206E-01;
  COFD[1923] = 9.11202886E-03;
  COFD[1924] = -1.49676178E+01;
  COFD[1925] = 3.46399647E+00;
  COFD[1926] = -2.45668465E-01;
  COFD[1927] = 1.11399884E-02;
  COFD[1928] = -2.02488625E+01;
  COFD[1929] = 5.53415157E+00;
  COFD[1930] = -5.03188882E-01;
  COFD[1931] = 2.18653015E-02;
  COFD[1932] = -1.49726820E+01;
  COFD[1933] = 3.46399647E+00;
  COFD[1934] = -2.45668465E-01;
  COFD[1935] = 1.11399884E-02;
  COFD[1936] = -1.42604897E+01;
  COFD[1937] = 3.86790216E+00;
  COFD[1938] = -2.99364050E-01;
  COFD[1939] = 1.35309049E-02;
  COFD[1940] = -2.03497152E+01;
  COFD[1941] = 5.43253571E+00;
  COFD[1942] = -4.93560962E-01;
  COFD[1943] = 2.15991994E-02;
  COFD[1944] = -1.80360169E+01;
  COFD[1945] = 4.57861932E+00;
  COFD[1946] = -3.90990906E-01;
  COFD[1947] = 1.74871172E-02;
  COFD[1948] = -1.99339778E+01;
  COFD[1949] = 5.21863561E+00;
  COFD[1950] = -4.66851910E-01;
  COFD[1951] = 2.04766146E-02;
  COFD[1952] = -1.83997019E+01;
  COFD[1953] = 4.61237034E+00;
  COFD[1954] = -3.95027652E-01;
  COFD[1955] = 1.76471131E-02;
  COFD[1956] = -1.85950812E+01;
  COFD[1957] = 4.65440100E+00;
  COFD[1958] = -3.99617849E-01;
  COFD[1959] = 1.78081611E-02;
  COFD[1960] = -2.07038883E+01;
  COFD[1961] = 5.34618044E+00;
  COFD[1962] = -4.83331563E-01;
  COFD[1963] = 2.11940573E-02;
  COFD[1964] = -1.96287467E+01;
  COFD[1965] = 4.97734997E+00;
  COFD[1966] = -4.38018636E-01;
  COFD[1967] = 1.93251310E-02;
  COFD[1968] = -2.10389335E+01;
  COFD[1969] = 5.42577327E+00;
  COFD[1970] = -4.92756280E-01;
  COFD[1971] = 2.15671078E-02;
  COFD[1972] = -2.07162873E+01;
  COFD[1973] = 5.34618044E+00;
  COFD[1974] = -4.83331563E-01;
  COFD[1975] = 2.11940573E-02;
  COFD[1976] = -2.15309233E+01;
  COFD[1977] = 5.59463241E+00;
  COFD[1978] = -5.10685806E-01;
  COFD[1979] = 2.21780225E-02;
  COFD[1980] = -1.46591988E+01;
  COFD[1981] = 3.33278784E+00;
  COFD[1982] = -2.27808884E-01;
  COFD[1983] = 1.03247543E-02;
  COFD[1984] = -1.97556261E+01;
  COFD[1985] = 4.55369444E+00;
  COFD[1986] = -3.87975150E-01;
  COFD[1987] = 1.73657784E-02;
  COFD[1988] = -1.97703707E+01;
  COFD[1989] = 5.05439215E+00;
  COFD[1990] = -4.47524613E-01;
  COFD[1991] = 1.97181397E-02;
  COFD[1992] = -1.71921522E+01;
  COFD[1993] = 4.20847168E+00;
  COFD[1994] = -3.43267883E-01;
  COFD[1995] = 1.54252580E-02;
  COFD[1996] = -1.99279897E+01;
  COFD[1997] = 4.98360158E+00;
  COFD[1998] = -4.38825780E-01;
  COFD[1999] = 1.93601206E-02;
  COFD[2000] = -2.11589253E+01;
  COFD[2001] = 5.38685618E+00;
  COFD[2002] = -4.88207385E-01;
  COFD[2003] = 2.13898131E-02;
  COFD[2004] = -2.11589253E+01;
  COFD[2005] = 5.38685618E+00;
  COFD[2006] = -4.88207385E-01;
  COFD[2007] = 2.13898131E-02;
  COFD[2008] = -1.24519374E+01;
  COFD[2009] = 2.82692805E+00;
  COFD[2010] = -1.62138652E-01;
  COFD[2011] = 7.47929495E-03;
  COFD[2012] = -1.94542200E+01;
  COFD[2013] = 4.90176377E+00;
  COFD[2014] = -4.28654088E-01;
  COFD[2015] = 1.89366950E-02;
  COFD[2016] = -1.60882025E+01;
  COFD[2017] = 3.73663964E+00;
  COFD[2018] = -2.82091747E-01;
  COFD[2019] = 1.27703717E-02;
  COFD[2020] = -2.20208641E+01;
  COFD[2021] = 5.63470135E+00;
  COFD[2022] = -5.14478143E-01;
  COFD[2023] = 2.22826045E-02;
  COFD[2024] = -1.87217148E+01;
  COFD[2025] = 4.67388141E+00;
  COFD[2026] = -4.00961748E-01;
  COFD[2027] = 1.78132254E-02;
  COFD[2028] = -2.22615149E+01;
  COFD[2029] = 5.66777991E+00;
  COFD[2030] = -5.16795849E-01;
  COFD[2031] = 2.22990514E-02;
  COFD[2032] = -1.72775133E+01;
  COFD[2033] = 4.24483918E+00;
  COFD[2034] = -3.48135608E-01;
  COFD[2035] = 1.56435370E-02;
  COFD[2036] = -1.63901688E+01;
  COFD[2037] = 3.86041291E+00;
  COFD[2038] = -2.98380064E-01;
  COFD[2039] = 1.34876205E-02;
  COFD[2040] = -1.49472487E+01;
  COFD[2041] = 3.46399647E+00;
  COFD[2042] = -2.45668465E-01;
  COFD[2043] = 1.11399884E-02;
  COFD[2044] = -1.49676178E+01;
  COFD[2045] = 3.46399647E+00;
  COFD[2046] = -2.45668465E-01;
  COFD[2047] = 1.11399884E-02;
  COFD[2048] = -1.63979829E+01;
  COFD[2049] = 3.86041291E+00;
  COFD[2050] = -2.98380064E-01;
  COFD[2051] = 1.34876205E-02;
  COFD[2052] = -2.11627170E+01;
  COFD[2053] = 5.64896383E+00;
  COFD[2054] = -5.08011587E-01;
  COFD[2055] = 2.16427657E-02;
  COFD[2056] = -1.64054470E+01;
  COFD[2057] = 3.86041291E+00;
  COFD[2058] = -2.98380064E-01;
  COFD[2059] = 1.34876205E-02;
  COFD[2060] = -1.55827475E+01;
  COFD[2061] = 4.25889159E+00;
  COFD[2062] = -3.50023998E-01;
  COFD[2063] = 1.57285900E-02;
  COFD[2064] = -2.15323122E+01;
  COFD[2065] = 5.66913715E+00;
  COFD[2066] = -5.16774023E-01;
  COFD[2067] = 2.22895896E-02;
  COFD[2068] = -1.93025471E+01;
  COFD[2069] = 4.86874488E+00;
  COFD[2070] = -4.24902800E-01;
  COFD[2071] = 1.87970659E-02;
  COFD[2072] = -2.13928517E+01;
  COFD[2073] = 5.57682097E+00;
  COFD[2074] = -5.08589054E-01;
  COFD[2075] = 2.20956285E-02;
  COFD[2076] = -1.96294252E+01;
  COFD[2077] = 4.90052813E+00;
  COFD[2078] = -4.28511355E-01;
  COFD[2079] = 1.89312580E-02;
  COFD[2080] = -1.99226246E+01;
  COFD[2081] = 4.98360158E+00;
  COFD[2082] = -4.38825780E-01;
  COFD[2083] = 1.93601206E-02;
  COFD[2084] = -2.20245345E+01;
  COFD[2085] = 5.63470135E+00;
  COFD[2086] = -5.14478143E-01;
  COFD[2087] = 2.22826045E-02;
  COFD[2088] = -2.11860957E+01;
  COFD[2089] = 5.38685618E+00;
  COFD[2090] = -4.88207385E-01;
  COFD[2091] = 2.13898131E-02;
  COFD[2092] = -2.22600584E+01;
  COFD[2093] = 5.66777991E+00;
  COFD[2094] = -5.16795849E-01;
  COFD[2095] = 2.22990514E-02;
  COFD[2096] = -2.20453675E+01;
  COFD[2097] = 5.63470135E+00;
  COFD[2098] = -5.14478143E-01;
  COFD[2099] = 2.22826045E-02;
  COFD[2100] = -2.23895495E+01;
  COFD[2101] = 5.66447764E+00;
  COFD[2102] = -5.08805506E-01;
  COFD[2103] = 2.16257683E-02;
  COFD[2104] = -1.60614584E+01;
  COFD[2105] = 3.72962835E+00;
  COFD[2106] = -2.81187017E-01;
  COFD[2107] = 1.27313717E-02;
  COFD[2108] = -2.23489854E+01;
  COFD[2109] = 5.26844723E+00;
  COFD[2110] = -4.30558385E-01;
  COFD[2111] = 1.70757975E-02;
  COFD[2112] = -1.90232196E+01;
  COFD[2113] = 4.24017605E+00;
  COFD[2114] = -2.62003557E-01;
  COFD[2115] = 8.27816665E-03;
  COFD[2116] = -2.07134339E+01;
  COFD[2117] = 5.25362242E+00;
  COFD[2118] = -4.28085831E-01;
  COFD[2119] = 1.69448077E-02;
  COFD[2120] = -1.97246304E+01;
  COFD[2121] = 4.41370094E+00;
  COFD[2122] = -2.89313133E-01;
  COFD[2123] = 9.66674118E-03;
  COFD[2124] = -1.79615597E+01;
  COFD[2125] = 3.48451904E+00;
  COFD[2126] = -1.43831594E-01;
  COFD[2127] = 2.32079598E-03;
  COFD[2128] = -1.79615597E+01;
  COFD[2129] = 3.48451904E+00;
  COFD[2130] = -1.43831594E-01;
  COFD[2131] = 2.32079598E-03;
  COFD[2132] = -1.79975170E+01;
  COFD[2133] = 5.00313903E+00;
  COFD[2134] = -4.41228726E-01;
  COFD[2135] = 1.94588671E-02;
  COFD[2136] = -1.97071715E+01;
  COFD[2137] = 4.53650344E+00;
  COFD[2138] = -3.09332864E-01;
  COFD[2139] = 1.07047264E-02;
  COFD[2140] = -2.14387421E+01;
  COFD[2141] = 5.69059069E+00;
  COFD[2142] = -5.08172820E-01;
  COFD[2143] = 2.14277961E-02;
  COFD[2144] = -1.39859525E+01;
  COFD[2145] = 1.55451537E+00;
  COFD[2146] = 1.48062755E-01;
  COFD[2147] = -1.20297011E-02;
  COFD[2148] = -2.03818235E+01;
  COFD[2149] = 4.95053951E+00;
  COFD[2150] = -3.77134666E-01;
  COFD[2151] = 1.42368958E-02;
  COFD[2152] = -1.53149885E+01;
  COFD[2153] = 2.14009360E+00;
  COFD[2154] = 5.93887776E-02;
  COFD[2155] = -7.65730317E-03;
  COFD[2156] = -2.12270291E+01;
  COFD[2157] = 5.58293886E+00;
  COFD[2158] = -4.85683839E-01;
  COFD[2159] = 2.00846811E-02;
  COFD[2160] = -2.13884324E+01;
  COFD[2161] = 5.65488061E+00;
  COFD[2162] = -4.99826791E-01;
  COFD[2163] = 2.09064205E-02;
  COFD[2164] = -2.02329152E+01;
  COFD[2165] = 5.53415157E+00;
  COFD[2166] = -5.03188882E-01;
  COFD[2167] = 2.18653015E-02;
  COFD[2168] = -2.02488625E+01;
  COFD[2169] = 5.53415157E+00;
  COFD[2170] = -5.03188882E-01;
  COFD[2171] = 2.18653015E-02;
  COFD[2172] = -2.11627170E+01;
  COFD[2173] = 5.64896383E+00;
  COFD[2174] = -5.08011587E-01;
  COFD[2175] = 2.16427657E-02;
  COFD[2176] = -9.22228540E+00;
  COFD[2177] = -2.96089007E-01;
  COFD[2178] = 4.26931760E-01;
  COFD[2179] = -2.52336569E-02;
  COFD[2180] = -2.11679764E+01;
  COFD[2181] = 5.64896383E+00;
  COFD[2182] = -5.08011587E-01;
  COFD[2183] = 2.16427657E-02;
  COFD[2184] = -1.95009685E+01;
  COFD[2185] = 5.57432264E+00;
  COFD[2186] = -4.84119394E-01;
  COFD[2187] = 1.99974393E-02;
  COFD[2188] = -1.46556624E+01;
  COFD[2189] = 2.16138313E+00;
  COFD[2190] = 5.73490661E-02;
  COFD[2191] = -7.60382925E-03;
  COFD[2192] = -1.87332554E+01;
  COFD[2193] = 4.08334106E+00;
  COFD[2194] = -2.37515720E-01;
  COFD[2195] = 7.03876946E-03;
  COFD[2196] = -1.60017321E+01;
  COFD[2197] = 2.71982952E+00;
  COFD[2198] = -2.72095575E-02;
  COFD[2199] = -3.44411288E-03;
  COFD[2200] = -1.98840081E+01;
  COFD[2201] = 4.53847594E+00;
  COFD[2202] = -3.09666566E-01;
  COFD[2203] = 1.07224007E-02;
  COFD[2204] = -1.97209654E+01;
  COFD[2205] = 4.41370094E+00;
  COFD[2206] = -2.89313133E-01;
  COFD[2207] = 9.66674118E-03;
  COFD[2208] = -1.39882652E+01;
  COFD[2209] = 1.55451537E+00;
  COFD[2210] = 1.48062755E-01;
  COFD[2211] = -1.20297011E-02;
  COFD[2212] = -1.79796526E+01;
  COFD[2213] = 3.48451904E+00;
  COFD[2214] = -1.43831594E-01;
  COFD[2215] = 2.32079598E-03;
  COFD[2216] = -1.53140849E+01;
  COFD[2217] = 2.14009360E+00;
  COFD[2218] = 5.93887776E-02;
  COFD[2219] = -7.65730317E-03;
  COFD[2220] = -1.40012720E+01;
  COFD[2221] = 1.55451537E+00;
  COFD[2222] = 1.48062755E-01;
  COFD[2223] = -1.20297011E-02;
  COFD[2224] = -1.21156577E+01;
  COFD[2225] = 6.90312644E-01;
  COFD[2226] = 2.71552173E-01;
  COFD[2227] = -1.77491467E-02;
  COFD[2228] = -2.14163493E+01;
  COFD[2229] = 5.69468569E+00;
  COFD[2230] = -5.09722690E-01;
  COFD[2231] = 2.15385637E-02;
  COFD[2232] = -1.97679839E+01;
  COFD[2233] = 4.55369444E+00;
  COFD[2234] = -3.87975150E-01;
  COFD[2235] = 1.73657784E-02;
  COFD[2236] = -1.97772254E+01;
  COFD[2237] = 5.05439215E+00;
  COFD[2238] = -4.47524613E-01;
  COFD[2239] = 1.97181397E-02;
  COFD[2240] = -1.71970223E+01;
  COFD[2241] = 4.20847168E+00;
  COFD[2242] = -3.43267883E-01;
  COFD[2243] = 1.54252580E-02;
  COFD[2244] = -1.99363635E+01;
  COFD[2245] = 4.98360158E+00;
  COFD[2246] = -4.38825780E-01;
  COFD[2247] = 1.93601206E-02;
  COFD[2248] = -2.11683428E+01;
  COFD[2249] = 5.38685618E+00;
  COFD[2250] = -4.88207385E-01;
  COFD[2251] = 2.13898131E-02;
  COFD[2252] = -2.11683428E+01;
  COFD[2253] = 5.38685618E+00;
  COFD[2254] = -4.88207385E-01;
  COFD[2255] = 2.13898131E-02;
  COFD[2256] = -1.24527911E+01;
  COFD[2257] = 2.82692805E+00;
  COFD[2258] = -1.62138652E-01;
  COFD[2259] = 7.47929495E-03;
  COFD[2260] = -1.94613342E+01;
  COFD[2261] = 4.90176377E+00;
  COFD[2262] = -4.28654088E-01;
  COFD[2263] = 1.89366950E-02;
  COFD[2264] = -1.60950513E+01;
  COFD[2265] = 3.73663964E+00;
  COFD[2266] = -2.82091747E-01;
  COFD[2267] = 1.27703717E-02;
  COFD[2268] = -2.20313904E+01;
  COFD[2269] = 5.63470135E+00;
  COFD[2270] = -5.14478143E-01;
  COFD[2271] = 2.22826045E-02;
  COFD[2272] = -1.87282922E+01;
  COFD[2273] = 4.67388141E+00;
  COFD[2274] = -4.00961748E-01;
  COFD[2275] = 1.78132254E-02;
  COFD[2276] = -2.22725452E+01;
  COFD[2277] = 5.66777991E+00;
  COFD[2278] = -5.16795849E-01;
  COFD[2279] = 2.22990514E-02;
  COFD[2280] = -1.72821723E+01;
  COFD[2281] = 4.24483918E+00;
  COFD[2282] = -3.48135608E-01;
  COFD[2283] = 1.56435370E-02;
  COFD[2284] = -1.63975163E+01;
  COFD[2285] = 3.86041291E+00;
  COFD[2286] = -2.98380064E-01;
  COFD[2287] = 1.34876205E-02;
  COFD[2288] = -1.49521098E+01;
  COFD[2289] = 3.46399647E+00;
  COFD[2290] = -2.45668465E-01;
  COFD[2291] = 1.11399884E-02;
  COFD[2292] = -1.49726820E+01;
  COFD[2293] = 3.46399647E+00;
  COFD[2294] = -2.45668465E-01;
  COFD[2295] = 1.11399884E-02;
  COFD[2296] = -1.64054470E+01;
  COFD[2297] = 3.86041291E+00;
  COFD[2298] = -2.98380064E-01;
  COFD[2299] = 1.34876205E-02;
  COFD[2300] = -2.11679764E+01;
  COFD[2301] = 5.64896383E+00;
  COFD[2302] = -5.08011587E-01;
  COFD[2303] = 2.16427657E-02;
  COFD[2304] = -1.64130243E+01;
  COFD[2305] = 3.86041291E+00;
  COFD[2306] = -2.98380064E-01;
  COFD[2307] = 1.34876205E-02;
  COFD[2308] = -1.55831868E+01;
  COFD[2309] = 4.25889159E+00;
  COFD[2310] = -3.50023998E-01;
  COFD[2311] = 1.57285900E-02;
  COFD[2312] = -2.15394209E+01;
  COFD[2313] = 5.66913715E+00;
  COFD[2314] = -5.16774023E-01;
  COFD[2315] = 2.22895896E-02;
  COFD[2316] = -1.93110868E+01;
  COFD[2317] = 4.86874488E+00;
  COFD[2318] = -4.24902800E-01;
  COFD[2319] = 1.87970659E-02;
  COFD[2320] = -2.14012217E+01;
  COFD[2321] = 5.57682097E+00;
  COFD[2322] = -5.08589054E-01;
  COFD[2323] = 2.20956285E-02;
  COFD[2324] = -1.96375212E+01;
  COFD[2325] = 4.90052813E+00;
  COFD[2326] = -4.28511355E-01;
  COFD[2327] = 1.89312580E-02;
  COFD[2328] = -1.99309084E+01;
  COFD[2329] = 4.98360158E+00;
  COFD[2330] = -4.38825780E-01;
  COFD[2331] = 1.93601206E-02;
  COFD[2332] = -2.20351392E+01;
  COFD[2333] = 5.63470135E+00;
  COFD[2334] = -5.14478143E-01;
  COFD[2335] = 2.22826045E-02;
  COFD[2336] = -2.11960258E+01;
  COFD[2337] = 5.38685618E+00;
  COFD[2338] = -4.88207385E-01;
  COFD[2339] = 2.13898131E-02;
  COFD[2340] = -2.22710563E+01;
  COFD[2341] = 5.66777991E+00;
  COFD[2342] = -5.16795849E-01;
  COFD[2343] = 2.22990514E-02;
  COFD[2344] = -2.20564284E+01;
  COFD[2345] = 5.63470135E+00;
  COFD[2346] = -5.14478143E-01;
  COFD[2347] = 2.22826045E-02;
  COFD[2348] = -2.24009815E+01;
  COFD[2349] = 5.66447764E+00;
  COFD[2350] = -5.08805506E-01;
  COFD[2351] = 2.16257683E-02;
  COFD[2352] = -1.60683077E+01;
  COFD[2353] = 3.72962835E+00;
  COFD[2354] = -2.81187017E-01;
  COFD[2355] = 1.27313717E-02;
  COFD[2356] = -1.87373197E+01;
  COFD[2357] = 4.84958928E+00;
  COFD[2358] = -4.22621869E-01;
  COFD[2359] = 1.87067121E-02;
  COFD[2360] = -1.91177523E+01;
  COFD[2361] = 5.45933834E+00;
  COFD[2362] = -4.96736684E-01;
  COFD[2363] = 2.17251306E-02;
  COFD[2364] = -1.66720297E+01;
  COFD[2365] = 4.63136373E+00;
  COFD[2366] = -3.97356633E-01;
  COFD[2367] = 1.77424240E-02;
  COFD[2368] = -1.92553728E+01;
  COFD[2369] = 5.39783798E+00;
  COFD[2370] = -4.89502414E-01;
  COFD[2371] = 2.14408287E-02;
  COFD[2372] = -2.01428617E+01;
  COFD[2373] = 5.65654333E+00;
  COFD[2374] = -5.16217584E-01;
  COFD[2375] = 2.23113761E-02;
  COFD[2376] = -2.01428617E+01;
  COFD[2377] = 5.65654333E+00;
  COFD[2378] = -5.16217584E-01;
  COFD[2379] = 2.23113761E-02;
  COFD[2380] = -1.19251455E+01;
  COFD[2381] = 3.00550766E+00;
  COFD[2382] = -1.84765984E-01;
  COFD[2383] = 8.43184890E-03;
  COFD[2384] = -1.88211497E+01;
  COFD[2385] = 5.31710153E+00;
  COFD[2386] = -4.79638614E-01;
  COFD[2387] = 2.10360613E-02;
  COFD[2388] = -1.51958271E+01;
  COFD[2389] = 4.08009081E+00;
  COFD[2390] = -3.25974206E-01;
  COFD[2391] = 1.46443746E-02;
  COFD[2392] = -2.05106259E+01;
  COFD[2393] = 5.69720134E+00;
  COFD[2394] = -5.11137553E-01;
  COFD[2395] = 2.16464526E-02;
  COFD[2396] = -1.80373598E+01;
  COFD[2397] = 5.06144525E+00;
  COFD[2398] = -4.48405432E-01;
  COFD[2399] = 1.97551196E-02;
  COFD[2400] = -2.06545761E+01;
  COFD[2401] = 5.68796184E+00;
  COFD[2402] = -5.07058830E-01;
  COFD[2403] = 2.13464896E-02;
  COFD[2404] = -1.67296679E+01;
  COFD[2405] = 4.64465126E+00;
  COFD[2406] = -3.98803383E-01;
  COFD[2407] = 1.77929328E-02;
  COFD[2408] = -1.55822809E+01;
  COFD[2409] = 4.25889159E+00;
  COFD[2410] = -3.50023998E-01;
  COFD[2411] = 1.57285900E-02;
  COFD[2412] = -1.42587302E+01;
  COFD[2413] = 3.86790216E+00;
  COFD[2414] = -2.99364050E-01;
  COFD[2415] = 1.35309049E-02;
  COFD[2416] = -1.42604897E+01;
  COFD[2417] = 3.86790216E+00;
  COFD[2418] = -2.99364050E-01;
  COFD[2419] = 1.35309049E-02;
  COFD[2420] = -1.55827475E+01;
  COFD[2421] = 4.25889159E+00;
  COFD[2422] = -3.50023998E-01;
  COFD[2423] = 1.57285900E-02;
  COFD[2424] = -1.95009685E+01;
  COFD[2425] = 5.57432264E+00;
  COFD[2426] = -4.84119394E-01;
  COFD[2427] = 1.99974393E-02;
  COFD[2428] = -1.55831868E+01;
  COFD[2429] = 4.25889159E+00;
  COFD[2430] = -3.50023998E-01;
  COFD[2431] = 1.57285900E-02;
  COFD[2432] = -1.57167238E+01;
  COFD[2433] = 4.64812949E+00;
  COFD[2434] = -3.99120489E-01;
  COFD[2435] = 1.78007073E-02;
  COFD[2436] = -2.00181175E+01;
  COFD[2437] = 5.68795121E+00;
  COFD[2438] = -5.06829829E-01;
  COFD[2439] = 2.13269478E-02;
  COFD[2440] = -1.84637937E+01;
  COFD[2441] = 5.24666770E+00;
  COFD[2442] = -4.70481585E-01;
  COFD[2443] = 2.06350051E-02;
  COFD[2444] = -1.99563295E+01;
  COFD[2445] = 5.65684578E+00;
  COFD[2446] = -5.08001806E-01;
  COFD[2447] = 2.15985135E-02;
  COFD[2448] = -1.89584270E+01;
  COFD[2449] = 5.31499124E+00;
  COFD[2450] = -4.79372108E-01;
  COFD[2451] = 2.10247388E-02;
  COFD[2452] = -1.92550858E+01;
  COFD[2453] = 5.39783798E+00;
  COFD[2454] = -4.89502414E-01;
  COFD[2455] = 2.14408287E-02;
  COFD[2456] = -2.05107828E+01;
  COFD[2457] = 5.69720134E+00;
  COFD[2458] = -5.11137553E-01;
  COFD[2459] = 2.16464526E-02;
  COFD[2460] = -2.01451883E+01;
  COFD[2461] = 5.65654333E+00;
  COFD[2462] = -5.16217584E-01;
  COFD[2463] = 2.23113761E-02;
  COFD[2464] = -2.06545163E+01;
  COFD[2465] = 5.68796184E+00;
  COFD[2466] = -5.07058830E-01;
  COFD[2467] = 2.13464896E-02;
  COFD[2468] = -2.05116526E+01;
  COFD[2469] = 5.69720134E+00;
  COFD[2470] = -5.11137553E-01;
  COFD[2471] = 2.16464526E-02;
  COFD[2472] = -2.03933979E+01;
  COFD[2473] = 5.51931290E+00;
  COFD[2474] = -4.74472824E-01;
  COFD[2475] = 1.94694645E-02;
  COFD[2476] = -1.51717004E+01;
  COFD[2477] = 4.07525938E+00;
  COFD[2478] = -3.25400860E-01;
  COFD[2479] = 1.46219057E-02;
  COFD[2480] = -2.30583179E+01;
  COFD[2481] = 5.47498589E+00;
  COFD[2482] = -4.66735757E-01;
  COFD[2483] = 1.90475911E-02;
  COFD[2484] = -2.01009288E+01;
  COFD[2485] = 4.58807289E+00;
  COFD[2486] = -3.18105074E-01;
  COFD[2487] = 1.11706107E-02;
  COFD[2488] = -2.17130934E+01;
  COFD[2489] = 5.69099359E+00;
  COFD[2490] = -5.08349503E-01;
  COFD[2491] = 2.14407762E-02;
  COFD[2492] = -2.07150283E+01;
  COFD[2493] = 4.72805055E+00;
  COFD[2494] = -3.40591321E-01;
  COFD[2495] = 1.23293721E-02;
  COFD[2496] = -1.91380229E+01;
  COFD[2497] = 3.86904236E+00;
  COFD[2498] = -2.04091431E-01;
  COFD[2499] = 5.35231270E-03;
  COFD[2500] = -1.91380229E+01;
  COFD[2501] = 3.86904236E+00;
  COFD[2502] = -2.04091431E-01;
  COFD[2503] = 5.35231270E-03;
  COFD[2504] = -1.70030029E+01;
  COFD[2505] = 4.54421325E+00;
  COFD[2506] = -3.86809376E-01;
  COFD[2507] = 1.73179271E-02;
  COFD[2508] = -2.06943071E+01;
  COFD[2509] = 4.84791744E+00;
  COFD[2510] = -3.60148227E-01;
  COFD[2511] = 1.33445806E-02;
  COFD[2512] = -2.13550473E+01;
  COFD[2513] = 5.62017718E+00;
  COFD[2514] = -5.13235471E-01;
  COFD[2515] = 2.22562169E-02;
  COFD[2516] = -1.75368726E+01;
  COFD[2517] = 3.03695857E+00;
  COFD[2518] = -7.53570650E-02;
  COFD[2519] = -1.06951881E-03;
  COFD[2520] = -2.12623028E+01;
  COFD[2521] = 5.21899155E+00;
  COFD[2522] = -4.22323327E-01;
  COFD[2523] = 1.66401604E-02;
  COFD[2524] = -1.70825629E+01;
  COFD[2525] = 2.76803494E+00;
  COFD[2526] = -3.45011618E-02;
  COFD[2527] = -3.08591460E-03;
  COFD[2528] = -2.17175170E+01;
  COFD[2529] = 5.68824628E+00;
  COFD[2530] = -5.07164081E-01;
  COFD[2531] = 2.13539742E-02;
  COFD[2532] = -2.15248648E+01;
  COFD[2533] = 5.66913715E+00;
  COFD[2534] = -5.16774023E-01;
  COFD[2535] = 2.22895896E-02;
  COFD[2536] = -2.03299982E+01;
  COFD[2537] = 5.43253571E+00;
  COFD[2538] = -4.93560962E-01;
  COFD[2539] = 2.15991994E-02;
  COFD[2540] = -2.03497152E+01;
  COFD[2541] = 5.43253571E+00;
  COFD[2542] = -4.93560962E-01;
  COFD[2543] = 2.15991994E-02;
  COFD[2544] = -2.15323122E+01;
  COFD[2545] = 5.66913715E+00;
  COFD[2546] = -5.16774023E-01;
  COFD[2547] = 2.22895896E-02;
  COFD[2548] = -1.46556624E+01;
  COFD[2549] = 2.16138313E+00;
  COFD[2550] = 5.73490661E-02;
  COFD[2551] = -7.60382925E-03;
  COFD[2552] = -2.15394209E+01;
  COFD[2553] = 5.66913715E+00;
  COFD[2554] = -5.16774023E-01;
  COFD[2555] = 2.22895896E-02;
  COFD[2556] = -2.00181175E+01;
  COFD[2557] = 5.68795121E+00;
  COFD[2558] = -5.06829829E-01;
  COFD[2559] = 2.13269478E-02;
  COFD[2560] = -1.63190312E+01;
  COFD[2561] = 2.74560847E+00;
  COFD[2562] = -3.11082858E-02;
  COFD[2563] = -3.25262689E-03;
  COFD[2564] = -2.07645532E+01;
  COFD[2565] = 4.91740304E+00;
  COFD[2566] = -3.71652145E-01;
  COFD[2567] = 1.39488879E-02;
  COFD[2568] = -1.75885358E+01;
  COFD[2569] = 3.26964480E+00;
  COFD[2570] = -1.10871639E-01;
  COFD[2571] = 6.85450093E-04;
  COFD[2572] = -2.08720892E+01;
  COFD[2573] = 4.85012404E+00;
  COFD[2574] = -3.60516881E-01;
  COFD[2575] = 1.33640233E-02;
  COFD[2576] = -2.07099445E+01;
  COFD[2577] = 4.72805055E+00;
  COFD[2578] = -3.40591321E-01;
  COFD[2579] = 1.23293721E-02;
  COFD[2580] = -1.75403029E+01;
  COFD[2581] = 3.03695857E+00;
  COFD[2582] = -7.53570650E-02;
  COFD[2583] = -1.06951881E-03;
  COFD[2584] = -1.91635972E+01;
  COFD[2585] = 3.86904236E+00;
  COFD[2586] = -2.04091431E-01;
  COFD[2587] = 5.35231270E-03;
  COFD[2588] = -1.70812055E+01;
  COFD[2589] = 2.76803494E+00;
  COFD[2590] = -3.45011618E-02;
  COFD[2591] = -3.08591460E-03;
  COFD[2592] = -1.75597409E+01;
  COFD[2593] = 3.03695857E+00;
  COFD[2594] = -7.53570650E-02;
  COFD[2595] = -1.06951881E-03;
  COFD[2596] = -1.54121875E+01;
  COFD[2597] = 1.98817703E+00;
  COFD[2598] = 8.32926956E-02;
  COFD[2599] = -8.87042615E-03;
  COFD[2600] = -2.13321490E+01;
  COFD[2601] = 5.61588044E+00;
  COFD[2602] = -5.12844998E-01;
  COFD[2603] = 2.22464175E-02;
  COFD[2604] = -2.26064841E+01;
  COFD[2605] = 5.48643918E+00;
  COFD[2606] = -4.98327363E-01;
  COFD[2607] = 2.17107588E-02;
  COFD[2608] = -2.20508891E+01;
  COFD[2609] = 5.69592279E+00;
  COFD[2610] = -5.10240070E-01;
  COFD[2611] = 2.15762020E-02;
  COFD[2612] = -2.00989387E+01;
  COFD[2613] = 5.20351263E+00;
  COFD[2614] = -4.65001962E-01;
  COFD[2615] = 2.04005867E-02;
  COFD[2616] = -2.23300848E+01;
  COFD[2617] = 5.68194587E+00;
  COFD[2618] = -5.10402599E-01;
  COFD[2619] = 2.16670698E-02;
  COFD[2620] = -2.23119992E+01;
  COFD[2621] = 5.50021686E+00;
  COFD[2622] = -4.71107238E-01;
  COFD[2623] = 1.92849078E-02;
  COFD[2624] = -2.23119992E+01;
  COFD[2625] = 5.50021686E+00;
  COFD[2626] = -4.71107238E-01;
  COFD[2627] = 1.92849078E-02;
  COFD[2628] = -1.44828240E+01;
  COFD[2629] = 3.56110932E+00;
  COFD[2630] = -2.58702659E-01;
  COFD[2631] = 1.17266885E-02;
  COFD[2632] = -2.19469232E+01;
  COFD[2633] = 5.64839278E+00;
  COFD[2634] = -5.07869816E-01;
  COFD[2635] = 2.16336719E-02;
  COFD[2636] = -1.90113079E+01;
  COFD[2637] = 4.76461849E+00;
  COFD[2638] = -4.12345773E-01;
  COFD[2639] = 1.82917938E-02;
  COFD[2640] = -2.16654806E+01;
  COFD[2641] = 5.06148364E+00;
  COFD[2642] = -3.95727634E-01;
  COFD[2643] = 1.52235677E-02;
  COFD[2644] = -2.16804439E+01;
  COFD[2645] = 5.64741106E+00;
  COFD[2646] = -5.15473555E-01;
  COFD[2647] = 2.22977945E-02;
  COFD[2648] = -2.15379038E+01;
  COFD[2649] = 4.92672935E+00;
  COFD[2650] = -3.73194449E-01;
  COFD[2651] = 1.40298739E-02;
  COFD[2652] = -2.01618838E+01;
  COFD[2653] = 5.22960509E+00;
  COFD[2654] = -4.68215587E-01;
  COFD[2655] = 2.05336694E-02;
  COFD[2656] = -1.92936265E+01;
  COFD[2657] = 4.86874488E+00;
  COFD[2658] = -4.24902800E-01;
  COFD[2659] = 1.87970659E-02;
  COFD[2660] = -1.80137966E+01;
  COFD[2661] = 4.57861932E+00;
  COFD[2662] = -3.90990906E-01;
  COFD[2663] = 1.74871172E-02;
  COFD[2664] = -1.80360169E+01;
  COFD[2665] = 4.57861932E+00;
  COFD[2666] = -3.90990906E-01;
  COFD[2667] = 1.74871172E-02;
  COFD[2668] = -1.93025471E+01;
  COFD[2669] = 4.86874488E+00;
  COFD[2670] = -4.24902800E-01;
  COFD[2671] = 1.87970659E-02;
  COFD[2672] = -1.87332554E+01;
  COFD[2673] = 4.08334106E+00;
  COFD[2674] = -2.37515720E-01;
  COFD[2675] = 7.03876946E-03;
  COFD[2676] = -1.93110868E+01;
  COFD[2677] = 4.86874488E+00;
  COFD[2678] = -4.24902800E-01;
  COFD[2679] = 1.87970659E-02;
  COFD[2680] = -1.84637937E+01;
  COFD[2681] = 5.24666770E+00;
  COFD[2682] = -4.70481585E-01;
  COFD[2683] = 2.06350051E-02;
  COFD[2684] = -2.07645532E+01;
  COFD[2685] = 4.91740304E+00;
  COFD[2686] = -3.71652145E-01;
  COFD[2687] = 1.39488879E-02;
  COFD[2688] = -2.19211183E+01;
  COFD[2689] = 5.66582199E+00;
  COFD[2690] = -5.11853099E-01;
  COFD[2691] = 2.18817980E-02;
  COFD[2692] = -2.13997280E+01;
  COFD[2693] = 5.16972284E+00;
  COFD[2694] = -4.14178667E-01;
  COFD[2695] = 1.62111661E-02;
  COFD[2696] = -2.21309037E+01;
  COFD[2697] = 5.64888199E+00;
  COFD[2698] = -5.07991267E-01;
  COFD[2699] = 2.16414623E-02;
  COFD[2700] = -2.23238510E+01;
  COFD[2701] = 5.68194587E+00;
  COFD[2702] = -5.10402599E-01;
  COFD[2703] = 2.16670698E-02;
  COFD[2704] = -2.16699372E+01;
  COFD[2705] = 5.06148364E+00;
  COFD[2706] = -3.95727634E-01;
  COFD[2707] = 1.52235677E-02;
  COFD[2708] = -2.23441976E+01;
  COFD[2709] = 5.50021686E+00;
  COFD[2710] = -4.71107238E-01;
  COFD[2711] = 1.92849078E-02;
  COFD[2712] = -2.15361194E+01;
  COFD[2713] = 4.92672935E+00;
  COFD[2714] = -3.73194449E-01;
  COFD[2715] = 1.40298739E-02;
  COFD[2716] = -2.16953680E+01;
  COFD[2717] = 5.06148364E+00;
  COFD[2718] = -3.95727634E-01;
  COFD[2719] = 1.52235677E-02;
  COFD[2720] = -2.06166794E+01;
  COFD[2721] = 4.43679748E+00;
  COFD[2722] = -2.93011707E-01;
  COFD[2723] = 9.85648974E-03;
  COFD[2724] = -1.89816912E+01;
  COFD[2725] = 4.75662930E+00;
  COFD[2726] = -4.11343764E-01;
  COFD[2727] = 1.82496227E-02;
  COFD[2728] = -2.34701649E+01;
  COFD[2729] = 5.62943629E+00;
  COFD[2730] = -4.95272887E-01;
  COFD[2731] = 2.06543955E-02;
  COFD[2732] = -2.08599325E+01;
  COFD[2733] = 4.90144316E+00;
  COFD[2734] = -3.69014218E-01;
  COFD[2735] = 1.38104338E-02;
  COFD[2736] = -2.16430338E+01;
  COFD[2737] = 5.64779714E+00;
  COFD[2738] = -5.07721971E-01;
  COFD[2739] = 2.16241891E-02;
  COFD[2740] = -2.14217431E+01;
  COFD[2741] = 5.01654907E+00;
  COFD[2742] = -3.87995080E-01;
  COFD[2743] = 1.48063744E-02;
  COFD[2744] = -2.03163280E+01;
  COFD[2745] = 4.36001963E+00;
  COFD[2746] = -2.80770646E-01;
  COFD[2747] = 9.22995126E-03;
  COFD[2748] = -2.03163280E+01;
  COFD[2749] = 4.36001963E+00;
  COFD[2750] = -2.80770646E-01;
  COFD[2751] = 9.22995126E-03;
  COFD[2752] = -1.66323736E+01;
  COFD[2753] = 4.36001181E+00;
  COFD[2754] = -3.63261725E-01;
  COFD[2755] = 1.63092312E-02;
  COFD[2756] = -2.13053031E+01;
  COFD[2757] = 5.09944835E+00;
  COFD[2758] = -4.02512129E-01;
  COFD[2759] = 1.55957509E-02;
  COFD[2760] = -2.11053659E+01;
  COFD[2761] = 5.48192321E+00;
  COFD[2762] = -4.98166647E-01;
  COFD[2763] = 2.17221333E-02;
  COFD[2764] = -1.87080864E+01;
  COFD[2765] = 3.50982702E+00;
  COFD[2766] = -1.47750833E-01;
  COFD[2767] = 2.51627764E-03;
  COFD[2768] = -2.17782694E+01;
  COFD[2769] = 5.42990885E+00;
  COFD[2770] = -4.58860891E-01;
  COFD[2771] = 1.86184915E-02;
  COFD[2772] = -1.83689025E+01;
  COFD[2773] = 3.29018405E+00;
  COFD[2774] = -1.14013582E-01;
  COFD[2775] = 8.41167937E-04;
  COFD[2776] = -2.16530812E+01;
  COFD[2777] = 5.64919890E+00;
  COFD[2778] = -5.07174967E-01;
  COFD[2779] = 2.15693228E-02;
  COFD[2780] = -2.13841054E+01;
  COFD[2781] = 5.57682097E+00;
  COFD[2782] = -5.08589054E-01;
  COFD[2783] = 2.20956285E-02;
  COFD[2784] = -1.99120381E+01;
  COFD[2785] = 5.21863561E+00;
  COFD[2786] = -4.66851910E-01;
  COFD[2787] = 2.04766146E-02;
  COFD[2788] = -1.99339778E+01;
  COFD[2789] = 5.21863561E+00;
  COFD[2790] = -4.66851910E-01;
  COFD[2791] = 2.04766146E-02;
  COFD[2792] = -2.13928517E+01;
  COFD[2793] = 5.57682097E+00;
  COFD[2794] = -5.08589054E-01;
  COFD[2795] = 2.20956285E-02;
  COFD[2796] = -1.60017321E+01;
  COFD[2797] = 2.71982952E+00;
  COFD[2798] = -2.72095575E-02;
  COFD[2799] = -3.44411288E-03;
  COFD[2800] = -2.14012217E+01;
  COFD[2801] = 5.57682097E+00;
  COFD[2802] = -5.08589054E-01;
  COFD[2803] = 2.20956285E-02;
  COFD[2804] = -1.99563295E+01;
  COFD[2805] = 5.65684578E+00;
  COFD[2806] = -5.08001806E-01;
  COFD[2807] = 2.15985135E-02;
  COFD[2808] = -1.75885358E+01;
  COFD[2809] = 3.26964480E+00;
  COFD[2810] = -1.10871639E-01;
  COFD[2811] = 6.85450093E-04;
  COFD[2812] = -2.13997280E+01;
  COFD[2813] = 5.16972284E+00;
  COFD[2814] = -4.14178667E-01;
  COFD[2815] = 1.62111661E-02;
  COFD[2816] = -1.86047487E+01;
  COFD[2817] = 3.68013508E+00;
  COFD[2818] = -1.74380426E-01;
  COFD[2819] = 3.85147554E-03;
  COFD[2820] = -2.14889715E+01;
  COFD[2821] = 5.10164697E+00;
  COFD[2822] = -4.02880791E-01;
  COFD[2823] = 1.56152795E-02;
  COFD[2824] = -2.14156482E+01;
  COFD[2825] = 5.01654907E+00;
  COFD[2826] = -3.87995080E-01;
  COFD[2827] = 1.48063744E-02;
  COFD[2828] = -1.87124126E+01;
  COFD[2829] = 3.50982702E+00;
  COFD[2830] = -1.47750833E-01;
  COFD[2831] = 2.51627764E-03;
  COFD[2832] = -2.03476793E+01;
  COFD[2833] = 4.36001963E+00;
  COFD[2834] = -2.80770646E-01;
  COFD[2835] = 9.22995126E-03;
  COFD[2836] = -1.83671729E+01;
  COFD[2837] = 3.29018405E+00;
  COFD[2838] = -1.14013582E-01;
  COFD[2839] = 8.41167937E-04;
  COFD[2840] = -1.87370773E+01;
  COFD[2841] = 3.50982702E+00;
  COFD[2842] = -1.47750833E-01;
  COFD[2843] = 2.51627764E-03;
  COFD[2844] = -1.69141623E+01;
  COFD[2845] = 2.59961196E+00;
  COFD[2846] = -8.79342036E-03;
  COFD[2847] = -4.35596363E-03;
  COFD[2848] = -2.10888364E+01;
  COFD[2849] = 5.48007439E+00;
  COFD[2850] = -4.98112485E-01;
  COFD[2851] = 2.17277651E-02;
  COFD[2852] = -2.27819450E+01;
  COFD[2853] = 5.50908317E+00;
  COFD[2854] = -5.00382955E-01;
  COFD[2855] = 2.17620583E-02;
  COFD[2856] = -2.22872895E+01;
  COFD[2857] = 5.69035599E+00;
  COFD[2858] = -5.08045645E-01;
  COFD[2859] = 2.14181606E-02;
  COFD[2860] = -2.04928200E+01;
  COFD[2861] = 5.26407420E+00;
  COFD[2862] = -4.72791546E-01;
  COFD[2863] = 2.07382489E-02;
  COFD[2864] = -2.25814161E+01;
  COFD[2865] = 5.69729375E+00;
  COFD[2866] = -5.11255096E-01;
  COFD[2867] = 2.16560632E-02;
  COFD[2868] = -2.23968206E+01;
  COFD[2869] = 5.44551229E+00;
  COFD[2870] = -4.61691222E-01;
  COFD[2871] = 1.87757502E-02;
  COFD[2872] = -2.23968206E+01;
  COFD[2873] = 5.44551229E+00;
  COFD[2874] = -4.61691222E-01;
  COFD[2875] = 1.87757502E-02;
  COFD[2876] = -1.48505617E+01;
  COFD[2877] = 3.59614134E+00;
  COFD[2878] = -2.63274609E-01;
  COFD[2879] = 1.19265426E-02;
  COFD[2880] = -2.22171868E+01;
  COFD[2881] = 5.66274856E+00;
  COFD[2882] = -5.08624885E-01;
  COFD[2883] = 2.16197194E-02;
  COFD[2884] = -1.93550571E+01;
  COFD[2885] = 4.80637892E+00;
  COFD[2886] = -4.17516720E-01;
  COFD[2887] = 1.85062434E-02;
  COFD[2888] = -2.17265278E+01;
  COFD[2889] = 4.99861193E+00;
  COFD[2890] = -3.85052101E-01;
  COFD[2891] = 1.46519879E-02;
  COFD[2892] = -2.19599621E+01;
  COFD[2893] = 5.66323135E+00;
  COFD[2894] = -5.16518069E-01;
  COFD[2895] = 2.23002455E-02;
  COFD[2896] = -2.15771044E+01;
  COFD[2897] = 4.86045752E+00;
  COFD[2898] = -3.62240800E-01;
  COFD[2899] = 1.34549132E-02;
  COFD[2900] = -2.05833341E+01;
  COFD[2901] = 5.30254126E+00;
  COFD[2902] = -4.77796012E-01;
  COFD[2903] = 2.09576046E-02;
  COFD[2904] = -1.96209604E+01;
  COFD[2905] = 4.90052813E+00;
  COFD[2906] = -4.28511355E-01;
  COFD[2907] = 1.89312580E-02;
  COFD[2908] = -1.83782241E+01;
  COFD[2909] = 4.61237034E+00;
  COFD[2910] = -3.95027652E-01;
  COFD[2911] = 1.76471131E-02;
  COFD[2912] = -1.83997019E+01;
  COFD[2913] = 4.61237034E+00;
  COFD[2914] = -3.95027652E-01;
  COFD[2915] = 1.76471131E-02;
  COFD[2916] = -1.96294252E+01;
  COFD[2917] = 4.90052813E+00;
  COFD[2918] = -4.28511355E-01;
  COFD[2919] = 1.89312580E-02;
  COFD[2920] = -1.98840081E+01;
  COFD[2921] = 4.53847594E+00;
  COFD[2922] = -3.09666566E-01;
  COFD[2923] = 1.07224007E-02;
  COFD[2924] = -1.96375212E+01;
  COFD[2925] = 4.90052813E+00;
  COFD[2926] = -4.28511355E-01;
  COFD[2927] = 1.89312580E-02;
  COFD[2928] = -1.89584270E+01;
  COFD[2929] = 5.31499124E+00;
  COFD[2930] = -4.79372108E-01;
  COFD[2931] = 2.10247388E-02;
  COFD[2932] = -2.08720892E+01;
  COFD[2933] = 4.85012404E+00;
  COFD[2934] = -3.60516881E-01;
  COFD[2935] = 1.33640233E-02;
  COFD[2936] = -2.21309037E+01;
  COFD[2937] = 5.64888199E+00;
  COFD[2938] = -5.07991267E-01;
  COFD[2939] = 2.16414623E-02;
  COFD[2940] = -2.14889715E+01;
  COFD[2941] = 5.10164697E+00;
  COFD[2942] = -4.02880791E-01;
  COFD[2943] = 1.56152795E-02;
  COFD[2944] = -2.23815574E+01;
  COFD[2945] = 5.66153021E+00;
  COFD[2946] = -5.08497079E-01;
  COFD[2947] = 2.16154111E-02;
  COFD[2948] = -2.25755439E+01;
  COFD[2949] = 5.69729375E+00;
  COFD[2950] = -5.11255096E-01;
  COFD[2951] = 2.16560632E-02;
  COFD[2952] = -2.17306487E+01;
  COFD[2953] = 4.99861193E+00;
  COFD[2954] = -3.85052101E-01;
  COFD[2955] = 1.46519879E-02;
  COFD[2956] = -2.24267907E+01;
  COFD[2957] = 5.44551229E+00;
  COFD[2958] = -4.61691222E-01;
  COFD[2959] = 1.87757502E-02;
  COFD[2960] = -2.15754608E+01;
  COFD[2961] = 4.86045752E+00;
  COFD[2962] = -3.62240800E-01;
  COFD[2963] = 1.34549132E-02;
  COFD[2964] = -2.17541101E+01;
  COFD[2965] = 4.99861193E+00;
  COFD[2966] = -3.85052101E-01;
  COFD[2967] = 1.46519879E-02;
  COFD[2968] = -2.08396295E+01;
  COFD[2969] = 4.47055940E+00;
  COFD[2970] = -2.98434085E-01;
  COFD[2971] = 1.01355015E-02;
  COFD[2972] = -1.93262186E+01;
  COFD[2973] = 4.79832015E+00;
  COFD[2974] = -4.16503776E-01;
  COFD[2975] = 1.84634981E-02;
  COFD[2976] = -2.30720788E+01;
  COFD[2977] = 5.59360310E+00;
  COFD[2978] = -5.10572093E-01;
  COFD[2979] = 2.21739087E-02;
  COFD[2980] = -2.23631160E+01;
  COFD[2981] = 5.67323480E+00;
  COFD[2982] = -5.03108721E-01;
  COFD[2983] = 2.10878525E-02;
  COFD[2984] = -2.08256118E+01;
  COFD[2985] = 5.36559371E+00;
  COFD[2986] = -4.85661513E-01;
  COFD[2987] = 2.12877010E-02;
  COFD[2988] = -2.26759538E+01;
  COFD[2989] = 5.68951631E+00;
  COFD[2990] = -5.07668098E-01;
  COFD[2991] = 2.13903212E-02;
  COFD[2992] = -2.23439611E+01;
  COFD[2993] = 5.37198708E+00;
  COFD[2994] = -4.48528740E-01;
  COFD[2995] = 1.80499807E-02;
  COFD[2996] = -2.23439611E+01;
  COFD[2997] = 5.37198708E+00;
  COFD[2998] = -4.48528740E-01;
  COFD[2999] = 1.80499807E-02;
  COFD[3000] = -1.50999718E+01;
  COFD[3001] = 3.67029147E+00;
  COFD[3002] = -2.73138589E-01;
  COFD[3003] = 1.23661438E-02;
  COFD[3004] = -2.24090094E+01;
  COFD[3005] = 5.69725388E+00;
  COFD[3006] = -5.11197970E-01;
  COFD[3007] = 2.16513648E-02;
  COFD[3008] = -1.95941169E+01;
  COFD[3009] = 4.86773881E+00;
  COFD[3010] = -4.24796060E-01;
  COFD[3011] = 1.87934811E-02;
  COFD[3012] = -2.15595993E+01;
  COFD[3013] = 4.87393197E+00;
  COFD[3014] = -3.64472579E-01;
  COFD[3015] = 1.35722107E-02;
  COFD[3016] = -2.20840106E+01;
  COFD[3017] = 5.66947709E+00;
  COFD[3018] = -5.15131199E-01;
  COFD[3019] = 2.21454794E-02;
  COFD[3020] = -2.14221700E+01;
  COFD[3021] = 4.74312020E+00;
  COFD[3022] = -3.42998475E-01;
  COFD[3023] = 1.24528839E-02;
  COFD[3024] = -2.08824342E+01;
  COFD[3025] = 5.38939502E+00;
  COFD[3026] = -4.88508342E-01;
  COFD[3027] = 2.14017409E-02;
  COFD[3028] = -1.99139669E+01;
  COFD[3029] = 4.98360158E+00;
  COFD[3030] = -4.38825780E-01;
  COFD[3031] = 1.93601206E-02;
  COFD[3032] = -1.85732857E+01;
  COFD[3033] = 4.65440100E+00;
  COFD[3034] = -3.99617849E-01;
  COFD[3035] = 1.78081611E-02;
  COFD[3036] = -1.85950812E+01;
  COFD[3037] = 4.65440100E+00;
  COFD[3038] = -3.99617849E-01;
  COFD[3039] = 1.78081611E-02;
  COFD[3040] = -1.99226246E+01;
  COFD[3041] = 4.98360158E+00;
  COFD[3042] = -4.38825780E-01;
  COFD[3043] = 1.93601206E-02;
  COFD[3044] = -1.97209654E+01;
  COFD[3045] = 4.41370094E+00;
  COFD[3046] = -2.89313133E-01;
  COFD[3047] = 9.66674118E-03;
  COFD[3048] = -1.99309084E+01;
  COFD[3049] = 4.98360158E+00;
  COFD[3050] = -4.38825780E-01;
  COFD[3051] = 1.93601206E-02;
  COFD[3052] = -1.92550858E+01;
  COFD[3053] = 5.39783798E+00;
  COFD[3054] = -4.89502414E-01;
  COFD[3055] = 2.14408287E-02;
  COFD[3056] = -2.07099445E+01;
  COFD[3057] = 4.72805055E+00;
  COFD[3058] = -3.40591321E-01;
  COFD[3059] = 1.23293721E-02;
  COFD[3060] = -2.23238510E+01;
  COFD[3061] = 5.68194587E+00;
  COFD[3062] = -5.10402599E-01;
  COFD[3063] = 2.16670698E-02;
  COFD[3064] = -2.14156482E+01;
  COFD[3065] = 5.01654907E+00;
  COFD[3066] = -3.87995080E-01;
  COFD[3067] = 1.48063744E-02;
  COFD[3068] = -2.25755439E+01;
  COFD[3069] = 5.69729375E+00;
  COFD[3070] = -5.11255096E-01;
  COFD[3071] = 2.16560632E-02;
  COFD[3072] = -2.26699292E+01;
  COFD[3073] = 5.68951631E+00;
  COFD[3074] = -5.07668098E-01;
  COFD[3075] = 2.13903212E-02;
  COFD[3076] = -2.15638602E+01;
  COFD[3077] = 4.87393197E+00;
  COFD[3078] = -3.64472579E-01;
  COFD[3079] = 1.35722107E-02;
  COFD[3080] = -2.23748094E+01;
  COFD[3081] = 5.37198708E+00;
  COFD[3082] = -4.48528740E-01;
  COFD[3083] = 1.80499807E-02;
  COFD[3084] = -2.14204678E+01;
  COFD[3085] = 4.74312020E+00;
  COFD[3086] = -3.42998475E-01;
  COFD[3087] = 1.24528839E-02;
  COFD[3088] = -2.15881418E+01;
  COFD[3089] = 4.87393197E+00;
  COFD[3090] = -3.64472579E-01;
  COFD[3091] = 1.35722107E-02;
  COFD[3092] = -2.05636669E+01;
  COFD[3093] = 4.29837248E+00;
  COFD[3094] = -2.71107161E-01;
  COFD[3095] = 8.73928648E-03;
  COFD[3096] = -1.95693646E+01;
  COFD[3097] = 4.86151358E+00;
  COFD[3098] = -4.24066143E-01;
  COFD[3099] = 1.87651483E-02;
  COFD[3100] = -2.38424489E+01;
  COFD[3101] = 5.58077369E+00;
  COFD[3102] = -4.85290481E-01;
  COFD[3103] = 2.00627377E-02;
  COFD[3104] = -2.10445380E+01;
  COFD[3105] = 4.77480735E+00;
  COFD[3106] = -3.48088937E-01;
  COFD[3107] = 1.27148736E-02;
  COFD[3108] = -2.21791800E+01;
  COFD[3109] = 5.68744998E+00;
  COFD[3110] = -5.10793511E-01;
  COFD[3111] = 2.16704352E-02;
  COFD[3112] = -2.15718402E+01;
  COFD[3113] = 4.87393197E+00;
  COFD[3114] = -3.64472579E-01;
  COFD[3115] = 1.35722107E-02;
  COFD[3116] = -2.02571074E+01;
  COFD[3117] = 4.11843264E+00;
  COFD[3118] = -2.42988196E-01;
  COFD[3119] = 7.31555013E-03;
  COFD[3120] = -2.02571074E+01;
  COFD[3121] = 4.11843264E+00;
  COFD[3122] = -2.42988196E-01;
  COFD[3123] = 7.31555013E-03;
  COFD[3124] = -1.72187320E+01;
  COFD[3125] = 4.44378938E+00;
  COFD[3126] = -3.73963936E-01;
  COFD[3127] = 1.67675483E-02;
  COFD[3128] = -2.15399525E+01;
  COFD[3129] = 4.99548160E+00;
  COFD[3130] = -3.84541130E-01;
  COFD[3131] = 1.46252961E-02;
  COFD[3132] = -2.16908674E+01;
  COFD[3133] = 5.52912323E+00;
  COFD[3134] = -5.02611621E-01;
  COFD[3135] = 2.18432892E-02;
  COFD[3136] = -1.87071695E+01;
  COFD[3137] = 3.28867876E+00;
  COFD[3138] = -1.13783324E-01;
  COFD[3139] = 8.29764378E-04;
  COFD[3140] = -2.20572657E+01;
  COFD[3141] = 5.34786767E+00;
  COFD[3142] = -4.44160169E-01;
  COFD[3143] = 1.78077063E-02;
  COFD[3144] = -1.83289117E+01;
  COFD[3145] = 3.05109646E+00;
  COFD[3146] = -7.75253866E-02;
  COFD[3147] = -9.62211004E-04;
  COFD[3148] = -2.22030140E+01;
  COFD[3149] = 5.69706859E+00;
  COFD[3150] = -5.11416131E-01;
  COFD[3151] = 2.16711595E-02;
  COFD[3152] = -2.20135031E+01;
  COFD[3153] = 5.63470135E+00;
  COFD[3154] = -5.14478143E-01;
  COFD[3155] = 2.22826045E-02;
  COFD[3156] = -2.06785569E+01;
  COFD[3157] = 5.34618044E+00;
  COFD[3158] = -4.83331563E-01;
  COFD[3159] = 2.11940573E-02;
  COFD[3160] = -2.07038883E+01;
  COFD[3161] = 5.34618044E+00;
  COFD[3162] = -4.83331563E-01;
  COFD[3163] = 2.11940573E-02;
  COFD[3164] = -2.20245345E+01;
  COFD[3165] = 5.63470135E+00;
  COFD[3166] = -5.14478143E-01;
  COFD[3167] = 2.22826045E-02;
  COFD[3168] = -1.39882652E+01;
  COFD[3169] = 1.55451537E+00;
  COFD[3170] = 1.48062755E-01;
  COFD[3171] = -1.20297011E-02;
  COFD[3172] = -2.20351392E+01;
  COFD[3173] = 5.63470135E+00;
  COFD[3174] = -5.14478143E-01;
  COFD[3175] = 2.22826045E-02;
  COFD[3176] = -2.05107828E+01;
  COFD[3177] = 5.69720134E+00;
  COFD[3178] = -5.11137553E-01;
  COFD[3179] = 2.16464526E-02;
  COFD[3180] = -1.75403029E+01;
  COFD[3181] = 3.03695857E+00;
  COFD[3182] = -7.53570650E-02;
  COFD[3183] = -1.06951881E-03;
  COFD[3184] = -2.16699372E+01;
  COFD[3185] = 5.06148364E+00;
  COFD[3186] = -3.95727634E-01;
  COFD[3187] = 1.52235677E-02;
  COFD[3188] = -1.87124126E+01;
  COFD[3189] = 3.50982702E+00;
  COFD[3190] = -1.47750833E-01;
  COFD[3191] = 2.51627764E-03;
  COFD[3192] = -2.17306487E+01;
  COFD[3193] = 4.99861193E+00;
  COFD[3194] = -3.85052101E-01;
  COFD[3195] = 1.46519879E-02;
  COFD[3196] = -2.15638602E+01;
  COFD[3197] = 4.87393197E+00;
  COFD[3198] = -3.64472579E-01;
  COFD[3199] = 1.35722107E-02;
  COFD[3200] = -1.87134413E+01;
  COFD[3201] = 3.28867876E+00;
  COFD[3202] = -1.13783324E-01;
  COFD[3203] = 8.29764378E-04;
  COFD[3204] = -2.03002058E+01;
  COFD[3205] = 4.11843264E+00;
  COFD[3206] = -2.42988196E-01;
  COFD[3207] = 7.31555013E-03;
  COFD[3208] = -1.83263467E+01;
  COFD[3209] = 3.05109646E+00;
  COFD[3210] = -7.75253866E-02;
  COFD[3211] = -9.62211004E-04;
  COFD[3212] = -1.87496813E+01;
  COFD[3213] = 3.28867876E+00;
  COFD[3214] = -1.13783324E-01;
  COFD[3215] = 8.29764378E-04;
  COFD[3216] = -1.63448367E+01;
  COFD[3217] = 2.10546851E+00;
  COFD[3218] = 6.57487483E-02;
  COFD[3219] = -8.01461150E-03;
  COFD[3220] = -2.16636927E+01;
  COFD[3221] = 5.52209451E+00;
  COFD[3222] = -5.01800802E-01;
  COFD[3223] = 2.18122017E-02;
  COFD[3224] = -2.36836133E+01;
  COFD[3225] = 5.66015033E+00;
  COFD[3226] = -5.08351812E-01;
  COFD[3227] = 2.16104873E-02;
  COFD[3228] = -2.19219536E+01;
  COFD[3229] = 5.29777789E+00;
  COFD[3230] = -4.35476842E-01;
  COFD[3231] = 1.73373342E-02;
  COFD[3232] = -2.17930266E+01;
  COFD[3233] = 5.64206578E+00;
  COFD[3234] = -5.15104753E-01;
  COFD[3235] = 2.22957422E-02;
  COFD[3236] = -2.23822073E+01;
  COFD[3237] = 5.37198708E+00;
  COFD[3238] = -4.48528740E-01;
  COFD[3239] = 1.80499807E-02;
  COFD[3240] = -2.15438557E+01;
  COFD[3241] = 4.82380626E+00;
  COFD[3242] = -3.56106499E-01;
  COFD[3243] = 1.31315966E-02;
  COFD[3244] = -2.15438557E+01;
  COFD[3245] = 4.82380626E+00;
  COFD[3246] = -3.56106499E-01;
  COFD[3247] = 1.31315966E-02;
  COFD[3248] = -1.61212798E+01;
  COFD[3249] = 4.03479307E+00;
  COFD[3250] = -3.20399233E-01;
  COFD[3251] = 1.44157782E-02;
  COFD[3252] = -2.22444909E+01;
  COFD[3253] = 5.44396600E+00;
  COFD[3254] = -4.61412551E-01;
  COFD[3255] = 1.87602923E-02;
  COFD[3256] = -2.07372608E+01;
  COFD[3257] = 5.22471147E+00;
  COFD[3258] = -4.67607197E-01;
  COFD[3259] = 2.05082142E-02;
  COFD[3260] = -2.02945780E+01;
  COFD[3261] = 4.11843264E+00;
  COFD[3262] = -2.42988196E-01;
  COFD[3263] = 7.31555013E-03;
  COFD[3264] = -2.24966654E+01;
  COFD[3265] = 5.67806029E+00;
  COFD[3266] = -5.03991163E-01;
  COFD[3267] = 2.11372864E-02;
  COFD[3268] = -1.99347931E+01;
  COFD[3269] = 3.88632523E+00;
  COFD[3270] = -2.06802738E-01;
  COFD[3271] = 5.48944874E-03;
  COFD[3272] = -2.18177115E+01;
  COFD[3273] = 5.65210943E+00;
  COFD[3274] = -5.15837732E-01;
  COFD[3275] = 2.23031110E-02;
  COFD[3276] = -2.11757519E+01;
  COFD[3277] = 5.38685618E+00;
  COFD[3278] = -4.88207385E-01;
  COFD[3279] = 2.13898131E-02;
  COFD[3280] = -1.96043740E+01;
  COFD[3281] = 4.97734997E+00;
  COFD[3282] = -4.38018636E-01;
  COFD[3283] = 1.93251310E-02;
  COFD[3284] = -1.96287467E+01;
  COFD[3285] = 4.97734997E+00;
  COFD[3286] = -4.38018636E-01;
  COFD[3287] = 1.93251310E-02;
  COFD[3288] = -2.11860957E+01;
  COFD[3289] = 5.38685618E+00;
  COFD[3290] = -4.88207385E-01;
  COFD[3291] = 2.13898131E-02;
  COFD[3292] = -1.79796526E+01;
  COFD[3293] = 3.48451904E+00;
  COFD[3294] = -1.43831594E-01;
  COFD[3295] = 2.32079598E-03;
  COFD[3296] = -2.11960258E+01;
  COFD[3297] = 5.38685618E+00;
  COFD[3298] = -4.88207385E-01;
  COFD[3299] = 2.13898131E-02;
  COFD[3300] = -2.01451883E+01;
  COFD[3301] = 5.65654333E+00;
  COFD[3302] = -5.16217584E-01;
  COFD[3303] = 2.23113761E-02;
  COFD[3304] = -1.91635972E+01;
  COFD[3305] = 3.86904236E+00;
  COFD[3306] = -2.04091431E-01;
  COFD[3307] = 5.35231270E-03;
  COFD[3308] = -2.23441976E+01;
  COFD[3309] = 5.50021686E+00;
  COFD[3310] = -4.71107238E-01;
  COFD[3311] = 1.92849078E-02;
  COFD[3312] = -2.03476793E+01;
  COFD[3313] = 4.36001963E+00;
  COFD[3314] = -2.80770646E-01;
  COFD[3315] = 9.22995126E-03;
  COFD[3316] = -2.24267907E+01;
  COFD[3317] = 5.44551229E+00;
  COFD[3318] = -4.61691222E-01;
  COFD[3319] = 1.87757502E-02;
  COFD[3320] = -2.23748094E+01;
  COFD[3321] = 5.37198708E+00;
  COFD[3322] = -4.48528740E-01;
  COFD[3323] = 1.80499807E-02;
  COFD[3324] = -2.03002058E+01;
  COFD[3325] = 4.11843264E+00;
  COFD[3326] = -2.42988196E-01;
  COFD[3327] = 7.31555013E-03;
  COFD[3328] = -2.15831487E+01;
  COFD[3329] = 4.82380626E+00;
  COFD[3330] = -3.56106499E-01;
  COFD[3331] = 1.31315966E-02;
  COFD[3332] = -1.99325088E+01;
  COFD[3333] = 3.88632523E+00;
  COFD[3334] = -2.06802738E-01;
  COFD[3335] = 5.48944874E-03;
  COFD[3336] = -2.03325798E+01;
  COFD[3337] = 4.11843264E+00;
  COFD[3338] = -2.42988196E-01;
  COFD[3339] = 7.31555013E-03;
  COFD[3340] = -1.88781431E+01;
  COFD[3341] = 3.36066148E+00;
  COFD[3342] = -1.24815434E-01;
  COFD[3343] = 1.37670619E-03;
  COFD[3344] = -2.07066590E+01;
  COFD[3345] = 5.21598228E+00;
  COFD[3346] = -4.66522092E-01;
  COFD[3347] = 2.04628158E-02;
  COFD[3348] = -2.37800587E+01;
  COFD[3349] = 5.48425494E+00;
  COFD[3350] = -4.68327600E-01;
  COFD[3351] = 1.91335179E-02;
  COFD[3352] = -2.08070517E+01;
  COFD[3353] = 4.60022609E+00;
  COFD[3354] = -3.20098606E-01;
  COFD[3355] = 1.12745986E-02;
  COFD[3356] = -2.23448475E+01;
  COFD[3357] = 5.69153566E+00;
  COFD[3358] = -5.08605460E-01;
  COFD[3359] = 2.14598086E-02;
  COFD[3360] = -2.14287927E+01;
  COFD[3361] = 4.74312020E+00;
  COFD[3362] = -3.42998475E-01;
  COFD[3363] = 1.24528839E-02;
  COFD[3364] = -1.98871102E+01;
  COFD[3365] = 3.88632523E+00;
  COFD[3366] = -2.06802738E-01;
  COFD[3367] = 5.48944874E-03;
  COFD[3368] = -1.98871102E+01;
  COFD[3369] = 3.88632523E+00;
  COFD[3370] = -2.06802738E-01;
  COFD[3371] = 5.48944874E-03;
  COFD[3372] = -1.75697641E+01;
  COFD[3373] = 4.54000784E+00;
  COFD[3374] = -3.86295602E-01;
  COFD[3375] = 1.72969843E-02;
  COFD[3376] = -2.13866866E+01;
  COFD[3377] = 4.85816818E+00;
  COFD[3378] = -3.61859198E-01;
  COFD[3379] = 1.34347998E-02;
  COFD[3380] = -2.20474308E+01;
  COFD[3381] = 5.61717340E+00;
  COFD[3382] = -5.12963928E-01;
  COFD[3383] = 2.22494915E-02;
  COFD[3384] = -1.83196729E+01;
  COFD[3385] = 3.05109646E+00;
  COFD[3386] = -7.75253866E-02;
  COFD[3387] = -9.62211004E-04;
  COFD[3388] = -2.19518805E+01;
  COFD[3389] = 5.23115443E+00;
  COFD[3390] = -4.24338954E-01;
  COFD[3391] = 1.67465343E-02;
  COFD[3392] = -1.78799696E+01;
  COFD[3393] = 2.78750377E+00;
  COFD[3394] = -3.75661727E-02;
  COFD[3395] = -2.93067908E-03;
  COFD[3396] = -2.23392482E+01;
  COFD[3397] = 5.68920173E+00;
  COFD[3398] = -5.07537130E-01;
  COFD[3399] = 2.13807918E-02;
  COFD[3400] = -2.22510016E+01;
  COFD[3401] = 5.66831709E+00;
  COFD[3402] = -5.16826635E-01;
  COFD[3403] = 2.22987354E-02;
  COFD[3404] = -2.10130665E+01;
  COFD[3405] = 5.42577327E+00;
  COFD[3406] = -4.92756280E-01;
  COFD[3407] = 2.15671078E-02;
  COFD[3408] = -2.10389335E+01;
  COFD[3409] = 5.42577327E+00;
  COFD[3410] = -4.92756280E-01;
  COFD[3411] = 2.15671078E-02;
  COFD[3412] = -2.22600584E+01;
  COFD[3413] = 5.66777991E+00;
  COFD[3414] = -5.16795849E-01;
  COFD[3415] = 2.22990514E-02;
  COFD[3416] = -1.53140849E+01;
  COFD[3417] = 2.14009360E+00;
  COFD[3418] = 5.93887776E-02;
  COFD[3419] = -7.65730317E-03;
  COFD[3420] = -2.22710563E+01;
  COFD[3421] = 5.66777991E+00;
  COFD[3422] = -5.16795849E-01;
  COFD[3423] = 2.22990514E-02;
  COFD[3424] = -2.06545163E+01;
  COFD[3425] = 5.68796184E+00;
  COFD[3426] = -5.07058830E-01;
  COFD[3427] = 2.13464896E-02;
  COFD[3428] = -1.70812055E+01;
  COFD[3429] = 2.76803494E+00;
  COFD[3430] = -3.45011618E-02;
  COFD[3431] = -3.08591460E-03;
  COFD[3432] = -2.15361194E+01;
  COFD[3433] = 4.92672935E+00;
  COFD[3434] = -3.73194449E-01;
  COFD[3435] = 1.40298739E-02;
  COFD[3436] = -1.83671729E+01;
  COFD[3437] = 3.29018405E+00;
  COFD[3438] = -1.14013582E-01;
  COFD[3439] = 8.41167937E-04;
  COFD[3440] = -2.15754608E+01;
  COFD[3441] = 4.86045752E+00;
  COFD[3442] = -3.62240800E-01;
  COFD[3443] = 1.34549132E-02;
  COFD[3444] = -2.14204678E+01;
  COFD[3445] = 4.74312020E+00;
  COFD[3446] = -3.42998475E-01;
  COFD[3447] = 1.24528839E-02;
  COFD[3448] = -1.83263467E+01;
  COFD[3449] = 3.05109646E+00;
  COFD[3450] = -7.75253866E-02;
  COFD[3451] = -9.62211004E-04;
  COFD[3452] = -1.99325088E+01;
  COFD[3453] = 3.88632523E+00;
  COFD[3454] = -2.06802738E-01;
  COFD[3455] = 5.48944874E-03;
  COFD[3456] = -1.78772271E+01;
  COFD[3457] = 2.78750377E+00;
  COFD[3458] = -3.75661727E-02;
  COFD[3459] = -2.93067908E-03;
  COFD[3460] = -1.83650176E+01;
  COFD[3461] = 3.05109646E+00;
  COFD[3462] = -7.75253866E-02;
  COFD[3463] = -9.62211004E-04;
  COFD[3464] = -1.61957230E+01;
  COFD[3465] = 1.99402574E+00;
  COFD[3466] = 8.16970869E-02;
  COFD[3467] = -8.76358100E-03;
  COFD[3468] = -2.20257163E+01;
  COFD[3469] = 5.61263501E+00;
  COFD[3470] = -5.12541597E-01;
  COFD[3471] = 2.22382754E-02;
  COFD[3472] = -2.38907333E+01;
  COFD[3473] = 5.58077369E+00;
  COFD[3474] = -4.85290481E-01;
  COFD[3475] = 2.00627377E-02;
  COFD[3476] = -2.10630129E+01;
  COFD[3477] = 4.77480735E+00;
  COFD[3478] = -3.48088937E-01;
  COFD[3479] = 1.27148736E-02;
  COFD[3480] = -2.21909866E+01;
  COFD[3481] = 5.68744998E+00;
  COFD[3482] = -5.10793511E-01;
  COFD[3483] = 2.16704352E-02;
  COFD[3484] = -2.15965223E+01;
  COFD[3485] = 4.87393197E+00;
  COFD[3486] = -3.64472579E-01;
  COFD[3487] = 1.35722107E-02;
  COFD[3488] = -2.02867736E+01;
  COFD[3489] = 4.11843264E+00;
  COFD[3490] = -2.42988196E-01;
  COFD[3491] = 7.31555013E-03;
  COFD[3492] = -2.02867736E+01;
  COFD[3493] = 4.11843264E+00;
  COFD[3494] = -2.42988196E-01;
  COFD[3495] = 7.31555013E-03;
  COFD[3496] = -1.72204518E+01;
  COFD[3497] = 4.44378938E+00;
  COFD[3498] = -3.73963936E-01;
  COFD[3499] = 1.67675483E-02;
  COFD[3500] = -2.15594116E+01;
  COFD[3501] = 4.99548160E+00;
  COFD[3502] = -3.84541130E-01;
  COFD[3503] = 1.46252961E-02;
  COFD[3504] = -2.17093204E+01;
  COFD[3505] = 5.52912323E+00;
  COFD[3506] = -5.02611621E-01;
  COFD[3507] = 2.18432892E-02;
  COFD[3508] = -1.87429412E+01;
  COFD[3509] = 3.28867876E+00;
  COFD[3510] = -1.13783324E-01;
  COFD[3511] = 8.29764378E-04;
  COFD[3512] = -2.20747210E+01;
  COFD[3513] = 5.34786767E+00;
  COFD[3514] = -4.44160169E-01;
  COFD[3515] = 1.78077063E-02;
  COFD[3516] = -1.83677895E+01;
  COFD[3517] = 3.05109646E+00;
  COFD[3518] = -7.75253866E-02;
  COFD[3519] = -9.62211004E-04;
  COFD[3520] = -2.22141889E+01;
  COFD[3521] = 5.69706859E+00;
  COFD[3522] = -5.11416131E-01;
  COFD[3523] = 2.16711595E-02;
  COFD[3524] = -2.20338721E+01;
  COFD[3525] = 5.63470135E+00;
  COFD[3526] = -5.14478143E-01;
  COFD[3527] = 2.22826045E-02;
  COFD[3528] = -2.06903362E+01;
  COFD[3529] = 5.34618044E+00;
  COFD[3530] = -4.83331563E-01;
  COFD[3531] = 2.11940573E-02;
  COFD[3532] = -2.07162873E+01;
  COFD[3533] = 5.34618044E+00;
  COFD[3534] = -4.83331563E-01;
  COFD[3535] = 2.11940573E-02;
  COFD[3536] = -2.20453675E+01;
  COFD[3537] = 5.63470135E+00;
  COFD[3538] = -5.14478143E-01;
  COFD[3539] = 2.22826045E-02;
  COFD[3540] = -1.40012720E+01;
  COFD[3541] = 1.55451537E+00;
  COFD[3542] = 1.48062755E-01;
  COFD[3543] = -1.20297011E-02;
  COFD[3544] = -2.20564284E+01;
  COFD[3545] = 5.63470135E+00;
  COFD[3546] = -5.14478143E-01;
  COFD[3547] = 2.22826045E-02;
  COFD[3548] = -2.05116526E+01;
  COFD[3549] = 5.69720134E+00;
  COFD[3550] = -5.11137553E-01;
  COFD[3551] = 2.16464526E-02;
  COFD[3552] = -1.75597409E+01;
  COFD[3553] = 3.03695857E+00;
  COFD[3554] = -7.53570650E-02;
  COFD[3555] = -1.06951881E-03;
  COFD[3556] = -2.16953680E+01;
  COFD[3557] = 5.06148364E+00;
  COFD[3558] = -3.95727634E-01;
  COFD[3559] = 1.52235677E-02;
  COFD[3560] = -1.87370773E+01;
  COFD[3561] = 3.50982702E+00;
  COFD[3562] = -1.47750833E-01;
  COFD[3563] = 2.51627764E-03;
  COFD[3564] = -2.17541101E+01;
  COFD[3565] = 4.99861193E+00;
  COFD[3566] = -3.85052101E-01;
  COFD[3567] = 1.46519879E-02;
  COFD[3568] = -2.15881418E+01;
  COFD[3569] = 4.87393197E+00;
  COFD[3570] = -3.64472579E-01;
  COFD[3571] = 1.35722107E-02;
  COFD[3572] = -1.87496813E+01;
  COFD[3573] = 3.28867876E+00;
  COFD[3574] = -1.13783324E-01;
  COFD[3575] = 8.29764378E-04;
  COFD[3576] = -2.03325798E+01;
  COFD[3577] = 4.11843264E+00;
  COFD[3578] = -2.42988196E-01;
  COFD[3579] = 7.31555013E-03;
  COFD[3580] = -1.83650176E+01;
  COFD[3581] = 3.05109646E+00;
  COFD[3582] = -7.75253866E-02;
  COFD[3583] = -9.62211004E-04;
  COFD[3584] = -1.87887547E+01;
  COFD[3585] = 3.28867876E+00;
  COFD[3586] = -1.13783324E-01;
  COFD[3587] = 8.29764378E-04;
  COFD[3588] = -1.63863602E+01;
  COFD[3589] = 2.10546851E+00;
  COFD[3590] = 6.57487483E-02;
  COFD[3591] = -8.01461150E-03;
  COFD[3592] = -2.16821478E+01;
  COFD[3593] = 5.52209451E+00;
  COFD[3594] = -5.01800802E-01;
  COFD[3595] = 2.18122017E-02;
  COFD[3596] = -2.33114627E+01;
  COFD[3597] = 5.19165128E+00;
  COFD[3598] = -4.17805039E-01;
  COFD[3599] = 1.64021805E-02;
  COFD[3600] = -1.98245682E+01;
  COFD[3601] = 4.10460882E+00;
  COFD[3602] = -2.40832572E-01;
  COFD[3603] = 7.20652667E-03;
  COFD[3604] = -2.20353558E+01;
  COFD[3605] = 5.46603508E+00;
  COFD[3606] = -4.65199707E-01;
  COFD[3607] = 1.89647157E-02;
  COFD[3608] = -2.05723773E+01;
  COFD[3609] = 4.29837248E+00;
  COFD[3610] = -2.71107161E-01;
  COFD[3611] = 8.73928648E-03;
  COFD[3612] = -1.88300652E+01;
  COFD[3613] = 3.36066148E+00;
  COFD[3614] = -1.24815434E-01;
  COFD[3615] = 1.37670619E-03;
  COFD[3616] = -1.88300652E+01;
  COFD[3617] = 3.36066148E+00;
  COFD[3618] = -1.24815434E-01;
  COFD[3619] = 1.37670619E-03;
  COFD[3620] = -1.82304427E+01;
  COFD[3621] = 4.78069184E+00;
  COFD[3622] = -4.14340969E-01;
  COFD[3623] = 1.83747757E-02;
  COFD[3624] = -2.06438575E+01;
  COFD[3625] = 4.46770471E+00;
  COFD[3626] = -2.97972198E-01;
  COFD[3627] = 1.01116412E-02;
  COFD[3628] = -2.23053293E+01;
  COFD[3629] = 5.64811803E+00;
  COFD[3630] = -5.07801617E-01;
  COFD[3631] = 2.16292975E-02;
  COFD[3632] = -1.63376941E+01;
  COFD[3633] = 2.10546851E+00;
  COFD[3634] = 6.57487483E-02;
  COFD[3635] = -8.01461150E-03;
  COFD[3636] = -2.12939940E+01;
  COFD[3637] = 4.87520005E+00;
  COFD[3638] = -3.64681670E-01;
  COFD[3639] = 1.35831766E-02;
  COFD[3640] = -1.61986745E+01;
  COFD[3641] = 1.99402574E+00;
  COFD[3642] = 8.16970869E-02;
  COFD[3643] = -8.76358100E-03;
  COFD[3644] = -2.21178782E+01;
  COFD[3645] = 5.52954770E+00;
  COFD[3646] = -4.76277229E-01;
  COFD[3647] = 1.95684485E-02;
  COFD[3648] = -2.25069594E+01;
  COFD[3649] = 5.69732523E+00;
  COFD[3650] = -5.11316920E-01;
  COFD[3651] = 2.16612121E-02;
  COFD[3652] = -2.15044839E+01;
  COFD[3653] = 5.59463241E+00;
  COFD[3654] = -5.10685806E-01;
  COFD[3655] = 2.21780225E-02;
  COFD[3656] = -2.15309233E+01;
  COFD[3657] = 5.59463241E+00;
  COFD[3658] = -5.10685806E-01;
  COFD[3659] = 2.21780225E-02;
  COFD[3660] = -2.23895495E+01;
  COFD[3661] = 5.66447764E+00;
  COFD[3662] = -5.08805506E-01;
  COFD[3663] = 2.16257683E-02;
  COFD[3664] = -1.21156577E+01;
  COFD[3665] = 6.90312644E-01;
  COFD[3666] = 2.71552173E-01;
  COFD[3667] = -1.77491467E-02;
  COFD[3668] = -2.24009815E+01;
  COFD[3669] = 5.66447764E+00;
  COFD[3670] = -5.08805506E-01;
  COFD[3671] = 2.16257683E-02;
  COFD[3672] = -2.03933979E+01;
  COFD[3673] = 5.51931290E+00;
  COFD[3674] = -4.74472824E-01;
  COFD[3675] = 1.94694645E-02;
  COFD[3676] = -1.54121875E+01;
  COFD[3677] = 1.98817703E+00;
  COFD[3678] = 8.32926956E-02;
  COFD[3679] = -8.87042615E-03;
  COFD[3680] = -2.06166794E+01;
  COFD[3681] = 4.43679748E+00;
  COFD[3682] = -2.93011707E-01;
  COFD[3683] = 9.85648974E-03;
  COFD[3684] = -1.69141623E+01;
  COFD[3685] = 2.59961196E+00;
  COFD[3686] = -8.79342036E-03;
  COFD[3687] = -4.35596363E-03;
  COFD[3688] = -2.08396295E+01;
  COFD[3689] = 4.47055940E+00;
  COFD[3690] = -2.98434085E-01;
  COFD[3691] = 1.01355015E-02;
  COFD[3692] = -2.05636669E+01;
  COFD[3693] = 4.29837248E+00;
  COFD[3694] = -2.71107161E-01;
  COFD[3695] = 8.73928648E-03;
  COFD[3696] = -1.63448367E+01;
  COFD[3697] = 2.10546851E+00;
  COFD[3698] = 6.57487483E-02;
  COFD[3699] = -8.01461150E-03;
  COFD[3700] = -1.88781431E+01;
  COFD[3701] = 3.36066148E+00;
  COFD[3702] = -1.24815434E-01;
  COFD[3703] = 1.37670619E-03;
  COFD[3704] = -1.61957230E+01;
  COFD[3705] = 1.99402574E+00;
  COFD[3706] = 8.16970869E-02;
  COFD[3707] = -8.76358100E-03;
  COFD[3708] = -1.63863602E+01;
  COFD[3709] = 2.10546851E+00;
  COFD[3710] = 6.57487483E-02;
  COFD[3711] = -8.01461150E-03;
  COFD[3712] = -1.35596478E+01;
  COFD[3713] = 7.94972722E-01;
  COFD[3714] = 2.56798266E-01;
  COFD[3715] = -1.71141952E-02;
  COFD[3716] = -2.23006688E+01;
  COFD[3717] = 5.65307531E+00;
  COFD[3718] = -5.08950053E-01;
  COFD[3719] = 2.17011813E-02;
  COFD[3720] = -1.93515315E+01;
  COFD[3721] = 4.41939237E+00;
  COFD[3722] = -3.70853119E-01;
  COFD[3723] = 1.66344814E-02;
  COFD[3724] = -1.93843092E+01;
  COFD[3725] = 4.91244566E+00;
  COFD[3726] = -4.29874687E-01;
  COFD[3727] = 1.89825217E-02;
  COFD[3728] = -1.68011884E+01;
  COFD[3729] = 4.05042859E+00;
  COFD[3730] = -3.22319395E-01;
  COFD[3731] = 1.44942745E-02;
  COFD[3732] = -1.95742449E+01;
  COFD[3733] = 4.86151358E+00;
  COFD[3734] = -4.24066143E-01;
  COFD[3735] = 1.87651483E-02;
  COFD[3736] = -2.06822165E+01;
  COFD[3737] = 5.21598228E+00;
  COFD[3738] = -4.66522092E-01;
  COFD[3739] = 2.04628158E-02;
  COFD[3740] = -2.06822165E+01;
  COFD[3741] = 5.21598228E+00;
  COFD[3742] = -4.66522092E-01;
  COFD[3743] = 2.04628158E-02;
  COFD[3744] = -1.22379946E+01;
  COFD[3745] = 2.72351269E+00;
  COFD[3746] = -1.47956351E-01;
  COFD[3747] = 6.82984550E-03;
  COFD[3748] = -1.91593673E+01;
  COFD[3749] = 4.79990484E+00;
  COFD[3750] = -4.16700940E-01;
  COFD[3751] = 1.84717181E-02;
  COFD[3752] = -1.57330387E+01;
  COFD[3753] = 3.59522642E+00;
  COFD[3754] = -2.63155485E-01;
  COFD[3755] = 1.19213463E-02;
  COFD[3756] = -2.16604323E+01;
  COFD[3757] = 5.52209451E+00;
  COFD[3758] = -5.01800802E-01;
  COFD[3759] = 2.18122017E-02;
  COFD[3760] = -1.85562214E+01;
  COFD[3761] = 4.62539600E+00;
  COFD[3762] = -3.96640913E-01;
  COFD[3763] = 1.77139115E-02;
  COFD[3764] = -2.20270040E+01;
  COFD[3765] = 5.61263501E+00;
  COFD[3766] = -5.12541597E-01;
  COFD[3767] = 2.22382754E-02;
  COFD[3768] = -1.68473654E+01;
  COFD[3769] = 4.06963018E+00;
  COFD[3770] = -3.24735969E-01;
  COFD[3771] = 1.45960083E-02;
  COFD[3772] = -1.60542790E+01;
  COFD[3773] = 3.72962835E+00;
  COFD[3774] = -2.81187017E-01;
  COFD[3775] = 1.27313717E-02;
  COFD[3776] = -1.46399714E+01;
  COFD[3777] = 3.33278784E+00;
  COFD[3778] = -2.27808884E-01;
  COFD[3779] = 1.03247543E-02;
  COFD[3780] = -1.46591988E+01;
  COFD[3781] = 3.33278784E+00;
  COFD[3782] = -2.27808884E-01;
  COFD[3783] = 1.03247543E-02;
  COFD[3784] = -1.60614584E+01;
  COFD[3785] = 3.72962835E+00;
  COFD[3786] = -2.81187017E-01;
  COFD[3787] = 1.27313717E-02;
  COFD[3788] = -2.14163493E+01;
  COFD[3789] = 5.69468569E+00;
  COFD[3790] = -5.09722690E-01;
  COFD[3791] = 2.15385637E-02;
  COFD[3792] = -1.60683077E+01;
  COFD[3793] = 3.72962835E+00;
  COFD[3794] = -2.81187017E-01;
  COFD[3795] = 1.27313717E-02;
  COFD[3796] = -1.51717004E+01;
  COFD[3797] = 4.07525938E+00;
  COFD[3798] = -3.25400860E-01;
  COFD[3799] = 1.46219057E-02;
  COFD[3800] = -2.13321490E+01;
  COFD[3801] = 5.61588044E+00;
  COFD[3802] = -5.12844998E-01;
  COFD[3803] = 2.22464175E-02;
  COFD[3804] = -1.89816912E+01;
  COFD[3805] = 4.75662930E+00;
  COFD[3806] = -4.11343764E-01;
  COFD[3807] = 1.82496227E-02;
  COFD[3808] = -2.10888364E+01;
  COFD[3809] = 5.48007439E+00;
  COFD[3810] = -4.98112485E-01;
  COFD[3811] = 2.17277651E-02;
  COFD[3812] = -1.93262186E+01;
  COFD[3813] = 4.79832015E+00;
  COFD[3814] = -4.16503776E-01;
  COFD[3815] = 1.84634981E-02;
  COFD[3816] = -1.95693646E+01;
  COFD[3817] = 4.86151358E+00;
  COFD[3818] = -4.24066143E-01;
  COFD[3819] = 1.87651483E-02;
  COFD[3820] = -2.16636927E+01;
  COFD[3821] = 5.52209451E+00;
  COFD[3822] = -5.01800802E-01;
  COFD[3823] = 2.18122017E-02;
  COFD[3824] = -2.07066590E+01;
  COFD[3825] = 5.21598228E+00;
  COFD[3826] = -4.66522092E-01;
  COFD[3827] = 2.04628158E-02;
  COFD[3828] = -2.20257163E+01;
  COFD[3829] = 5.61263501E+00;
  COFD[3830] = -5.12541597E-01;
  COFD[3831] = 2.22382754E-02;
  COFD[3832] = -2.16821478E+01;
  COFD[3833] = 5.52209451E+00;
  COFD[3834] = -5.01800802E-01;
  COFD[3835] = 2.18122017E-02;
  COFD[3836] = -2.23006688E+01;
  COFD[3837] = 5.65307531E+00;
  COFD[3838] = -5.08950053E-01;
  COFD[3839] = 2.17011813E-02;
  COFD[3840] = -1.57088312E+01;
  COFD[3841] = 3.58908491E+00;
  COFD[3842] = -2.62355672E-01;
  COFD[3843] = 1.18864473E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 6;
  KTDIF[1] = 19;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = 2.88673291E-01;
  COFTD[1] = 6.39989997E-04;
  COFTD[2] = -5.06504154E-07;
  COFTD[3] = 1.24719527E-10;
  COFTD[4] = 1.50671946E-01;
  COFTD[5] = 7.77714628E-04;
  COFTD[6] = -5.80231351E-07;
  COFTD[7] = 1.37266493E-10;
  COFTD[8] = 2.73973268E-01;
  COFTD[9] = 4.13478236E-04;
  COFTD[10] = -3.38225208E-07;
  COFTD[11] = 8.53309006E-11;
  COFTD[12] = 1.70860005E-01;
  COFTD[13] = 7.92659552E-04;
  COFTD[14] = -5.95124800E-07;
  COFTD[15] = 1.41369716E-10;
  COFTD[16] = 1.00135572E-01;
  COFTD[17] = 9.42145411E-04;
  COFTD[18] = -6.82682828E-07;
  COFTD[19] = 1.58526510E-10;
  COFTD[20] = 1.00135572E-01;
  COFTD[21] = 9.42145411E-04;
  COFTD[22] = -6.82682828E-07;
  COFTD[23] = 1.58526510E-10;
  COFTD[24] = 0.00000000E+00;
  COFTD[25] = 0.00000000E+00;
  COFTD[26] = 0.00000000E+00;
  COFTD[27] = 0.00000000E+00;
  COFTD[28] = 1.77780802E-01;
  COFTD[29] = 7.37834670E-04;
  COFTD[30] = -5.57826552E-07;
  COFTD[31] = 1.33116530E-10;
  COFTD[32] = 3.75275416E-01;
  COFTD[33] = 2.92301937E-04;
  COFTD[34] = -2.54974118E-07;
  COFTD[35] = 6.77581308E-11;
  COFTD[36] = 3.33950113E-02;
  COFTD[37] = 1.06569738E-03;
  COFTD[38] = -7.47944111E-07;
  COFTD[39] = 1.70284766E-10;
  COFTD[40] = 2.17485318E-01;
  COFTD[41] = 6.37783270E-04;
  COFTD[42] = -4.93899053E-07;
  COFTD[43] = 1.19780645E-10;
  COFTD[44] = 1.68229668E-02;
  COFTD[45] = 1.09714156E-03;
  COFTD[46] = -7.63898826E-07;
  COFTD[47] = 1.73073672E-10;
  COFTD[48] = 2.65993391E-01;
  COFTD[49] = 4.14035264E-04;
  COFTD[50] = -3.37741506E-07;
  COFTD[51] = 8.50298841E-11;
  COFTD[52] = 3.65574893E-01;
  COFTD[53] = 3.39114035E-04;
  COFTD[54] = -2.90565787E-07;
  COFTD[55] = 7.60595575E-11;
  COFTD[56] = 3.66599164E-01;
  COFTD[57] = 1.83133456E-04;
  COFTD[58] = -1.67760224E-07;
  COFTD[59] = 4.65669946E-11;
  COFTD[60] = 3.72200520E-01;
  COFTD[61] = 1.85931595E-04;
  COFTD[62] = -1.70323472E-07;
  COFTD[63] = 4.72785028E-11;
  COFTD[64] = 3.66989891E-01;
  COFTD[65] = 3.40426613E-04;
  COFTD[66] = -2.91690454E-07;
  COFTD[67] = 7.63539544E-11;
  COFTD[68] = -7.38835413E-02;
  COFTD[69] = 1.01288758E-03;
  COFTD[70] = -6.67484942E-07;
  COFTD[71] = 1.46290033E-10;
  COFTD[72] = 3.68325715E-01;
  COFTD[73] = 3.41665749E-04;
  COFTD[74] = -2.92752192E-07;
  COFTD[75] = 7.66318789E-11;
  COFTD[76] = -1.15570296E-01;
  COFTD[77] = -1.82012403E-04;
  COFTD[78] = 1.48317762E-07;
  COFTD[79] = -3.73110256E-11;
  COFTD[80] = 1.44859346E-02;
  COFTD[81] = 1.00316246E-03;
  COFTD[82] = -6.98143875E-07;
  COFTD[83] = 1.58131610E-10;
  COFTD[84] = 1.93821916E-01;
  COFTD[85] = 7.54167510E-04;
  COFTD[86] = -5.72570774E-07;
  COFTD[87] = 1.37015250E-10;
  COFTD[88] = 4.77527113E-02;
  COFTD[89] = 9.96881852E-04;
  COFTD[90] = -7.05105452E-07;
  COFTD[91] = 1.61298019E-10;
  COFTD[92] = 1.83663988E-01;
  COFTD[93] = 7.60485043E-04;
  COFTD[94] = -5.75036466E-07;
  COFTD[95] = 1.37236889E-10;
  COFTD[96] = 1.70457760E-01;
  COFTD[97] = 7.90793446E-04;
  COFTD[98] = -5.93723737E-07;
  COFTD[99] = 1.41036899E-10;
  COFTD[100] = 3.34375106E-02;
  COFTD[101] = 1.06705362E-03;
  COFTD[102] = -7.48895964E-07;
  COFTD[103] = 1.70501474E-10;
  COFTD[104] = 1.01135104E-01;
  COFTD[105] = 9.51549711E-04;
  COFTD[106] = -6.89497225E-07;
  COFTD[107] = 1.60108889E-10;
  COFTD[108] = 1.68148224E-02;
  COFTD[109] = 1.09661041E-03;
  COFTD[110] = -7.63529003E-07;
  COFTD[111] = 1.72989882E-10;
  COFTD[112] = 3.36738693E-02;
  COFTD[113] = 1.07459626E-03;
  COFTD[114] = -7.54189660E-07;
  COFTD[115] = 1.71706693E-10;
  COFTD[116] = -4.62194860E-02;
  COFTD[117] = 1.17981741E-03;
  COFTD[118] = -7.96106270E-07;
  COFTD[119] = 1.76982235E-10;
  COFTD[120] = 3.76300857E-01;
  COFTD[121] = 2.89716506E-04;
  COFTD[122] = -2.53025596E-07;
  COFTD[123] = 6.73103796E-11;
  COFTD[124] = -6.25039387E-02;
  COFTD[125] = 1.22522340E-03;
  COFTD[126] = -8.20272093E-07;
  COFTD[127] = 1.81493618E-10;
  COFTD[128] = -1.55165990E-01;
  COFTD[129] = 1.21987604E-03;
  COFTD[130] = -7.66117811E-07;
  COFTD[131] = 1.63080259E-10;
  COFTD[132] = -4.18893806E-03;
  COFTD[133] = 1.03620787E-03;
  COFTD[134] = -7.14052620E-07;
  COFTD[135] = 1.60768013E-10;
  COFTD[136] = -1.49045581E-01;
  COFTD[137] = 1.24644955E-03;
  COFTD[138] = -7.88869589E-07;
  COFTD[139] = 1.68716831E-10;
  COFTD[140] = -2.03160421E-01;
  COFTD[141] = 1.26295642E-03;
  COFTD[142] = -7.62789171E-07;
  COFTD[143] = 1.58483481E-10;
  COFTD[144] = -2.03160421E-01;
  COFTD[145] = 1.26295642E-03;
  COFTD[146] = -7.62789171E-07;
  COFTD[147] = 1.58483481E-10;
  COFTD[148] = 1.15570296E-01;
  COFTD[149] = 1.82012403E-04;
  COFTD[150] = -1.48317762E-07;
  COFTD[151] = 3.73110256E-11;
  COFTD[152] = -1.35269382E-01;
  COFTD[153] = 1.21827699E-03;
  COFTD[154] = -7.77411735E-07;
  COFTD[155] = 1.67101255E-10;
  COFTD[156] = 8.79254190E-02;
  COFTD[157] = 9.61645502E-04;
  COFTD[158] = -6.92836629E-07;
  COFTD[159] = 1.60309645E-10;
  COFTD[160] = -2.42096783E-01;
  COFTD[161] = 1.24219973E-03;
  COFTD[162] = -7.13362649E-07;
  COFTD[163] = 1.43465117E-10;
  COFTD[164] = -9.49027405E-02;
  COFTD[165] = 1.18112918E-03;
  COFTD[166] = -7.73895853E-07;
  COFTD[167] = 1.69025753E-10;
  COFTD[168] = -2.50201626E-01;
  COFTD[169] = 1.23382238E-03;
  COFTD[170] = -6.98860116E-07;
  COFTD[171] = 1.39259018E-10;
  COFTD[172] = -8.35092968E-03;
  COFTD[173] = 1.03269855E-03;
  COFTD[174] = -7.10026786E-07;
  COFTD[175] = 1.59642853E-10;
  COFTD[176] = 6.52819318E-02;
  COFTD[177] = 1.00664633E-03;
  COFTD[178] = -7.17369475E-07;
  COFTD[179] = 1.64863150E-10;
  COFTD[180] = 1.33057181E-01;
  COFTD[181] = 8.27852352E-04;
  COFTD[182] = -6.11356852E-07;
  COFTD[183] = 1.43680475E-10;
  COFTD[184] = 1.34058390E-01;
  COFTD[185] = 8.34081649E-04;
  COFTD[186] = -6.15957098E-07;
  COFTD[187] = 1.44761620E-10;
  COFTD[188] = 6.54077851E-02;
  COFTD[189] = 1.00858699E-03;
  COFTD[190] = -7.18752451E-07;
  COFTD[191] = 1.65180980E-10;
  COFTD[192] = -2.41001157E-01;
  COFTD[193] = 1.09298402E-03;
  COFTD[194] = -5.98082581E-07;
  COFTD[195] = 1.16371915E-10;
  COFTD[196] = 6.55263939E-02;
  COFTD[197] = 1.01041593E-03;
  COFTD[198] = -7.20055818E-07;
  COFTD[199] = 1.65480515E-10;
  COFTD[200] = 0.00000000E+00;
  COFTD[201] = 0.00000000E+00;
  COFTD[202] = 0.00000000E+00;
  COFTD[203] = 0.00000000E+00;
  COFTD[204] = -2.39676183E-01;
  COFTD[205] = 1.17801889E-03;
  COFTD[206] = -6.66442488E-07;
  COFTD[207] = 1.32690458E-10;
  COFTD[208] = -1.31307141E-01;
  COFTD[209] = 1.24103075E-03;
  COFTD[210] = -7.95769778E-07;
  COFTD[211] = 1.71549845E-10;
  COFTD[212] = -2.29083461E-01;
  COFTD[213] = 1.22601186E-03;
  COFTD[214] = -7.13382013E-07;
  COFTD[215] = 1.44716613E-10;
  COFTD[216] = -1.37133513E-01;
  COFTD[217] = 1.23712107E-03;
  COFTD[218] = -7.89573267E-07;
  COFTD[219] = 1.69733170E-10;
  COFTD[220] = -1.48870343E-01;
  COFTD[221] = 1.24498406E-03;
  COFTD[222] = -7.87942089E-07;
  COFTD[223] = 1.68518465E-10;
  COFTD[224] = -2.42250708E-01;
  COFTD[225] = 1.24298952E-03;
  COFTD[226] = -7.13816205E-07;
  COFTD[227] = 1.43556332E-10;
  COFTD[228] = -2.04171003E-01;
  COFTD[229] = 1.26923876E-03;
  COFTD[230] = -7.66583518E-07;
  COFTD[231] = 1.59271826E-10;
  COFTD[232] = -2.50141077E-01;
  COFTD[233] = 1.23352379E-03;
  COFTD[234] = -6.98690989E-07;
  COFTD[235] = 1.39225317E-10;
  COFTD[236] = -2.43105042E-01;
  COFTD[237] = 1.24737312E-03;
  COFTD[238] = -7.16333588E-07;
  COFTD[239] = 1.44062606E-10;
  COFTD[240] = -2.67212118E-01;
  COFTD[241] = 1.18869081E-03;
  COFTD[242] = -6.44481718E-07;
  COFTD[243] = 1.24580496E-10;
  COFTD[244] = 8.94248926E-02;
  COFTD[245] = 9.59272316E-04;
  COFTD[246] = -6.91613109E-07;
  COFTD[247] = 1.60096781E-10;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[31];
  amrex::Real SIG[31];
  amrex::Real wt[31];
  amrex::Real Rcst = 83.144598; // in bar [CGS] !
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: POSF10325
  Tci[0] = 1.316 * EPS[0];
  ai[0] = (5.55 * avogadro * avogadro * EPS[0] * boltzmann * 1e-24 * SIG[0] *
           SIG[0] * SIG[0]) /
          (wt[0] * wt[0]);
  bi[0] = 0.855 * avogadro * 1e-24 * SIG[0] * SIG[0] * SIG[0] / (wt[0]);
  acentric_i[0] = 0.0;

  // species 1: C2H4
  // Imported from NIST
  Tci[1] = 282.340000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (28.054000 * 28.054000 * 50.410000);
  bi[1] = 0.08664 * Rcst * Tci[1] / (28.054000 * 50.410000);
  acentric_i[1] = 0.087000;

  // species 2: CH4
  // Imported from NIST
  Tci[2] = 190.560000;
  ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] /
          (16.043030 * 16.043030 * 45.990000);
  bi[2] = 0.08664 * Rcst * Tci[2] / (16.043030 * 45.990000);
  acentric_i[2] = 0.011000;

  // species 3: C3H6
  Tci[3] = 1.316 * EPS[3];
  ai[3] = (5.55 * avogadro * avogadro * EPS[3] * boltzmann * 1e-24 * SIG[3] *
           SIG[3] * SIG[3]) /
          (wt[3] * wt[3]);
  bi[3] = 0.855 * avogadro * 1e-24 * SIG[3] * SIG[3] * SIG[3] / (wt[3]);
  acentric_i[3] = 0.0;

  // species 4: iC4H8
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann * 1e-24 * SIG[4] *
           SIG[4] * SIG[4]) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * 1e-24 * SIG[4] * SIG[4] * SIG[4] / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: C4H81
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann * 1e-24 * SIG[5] *
           SIG[5] * SIG[5]) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: H2
  // Imported from NIST
  Tci[6] = 33.145000;
  ai[6] = 1e6 * 0.42748 * Rcst * Rcst * Tci[6] * Tci[6] /
          (2.015880 * 2.015880 * 12.964000);
  bi[6] = 0.08664 * Rcst * Tci[6] / (2.015880 * 12.964000);
  acentric_i[6] = -0.219000;

  // species 7: C2H6
  // Imported from NIST
  Tci[7] = 305.320000;
  ai[7] = 1e6 * 0.42748 * Rcst * Rcst * Tci[7] * Tci[7] /
          (30.070120 * 30.070120 * 48.720000);
  bi[7] = 0.08664 * Rcst * Tci[7] / (30.070120 * 48.720000);
  acentric_i[7] = 0.099000;

  // species 8: CO
  // Imported from NIST
  Tci[8] = 132.850000;
  ai[8] = 1e6 * 0.42748 * Rcst * Rcst * Tci[8] * Tci[8] /
          (28.010000 * 28.010000 * 34.940000);
  bi[8] = 0.08664 * Rcst * Tci[8] / (28.010000 * 34.940000);
  acentric_i[8] = 0.045000;

  // species 9: C6H6
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann * 1e-24 * SIG[9] *
           SIG[9] * SIG[9]) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * 1e-24 * SIG[9] * SIG[9] * SIG[9] / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: C2H2
  // Imported from NIST
  Tci[10] = 308.300000;
  ai[10] = 1e6 * 0.42748 * Rcst * Rcst * Tci[10] * Tci[10] /
           (26.038000 * 26.038000 * 61.140000);
  bi[10] = 0.08664 * Rcst * Tci[10] / (26.038000 * 61.140000);
  acentric_i[10] = 0.189000;

  // species 11: C6H5CH3
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann * 1e-24 * SIG[11] *
            SIG[11] * SIG[11]) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: CH3
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann * 1e-24 * SIG[12] *
            SIG[12] * SIG[12]) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: O2
  // Imported from NIST
  Tci[13] = 154.581000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (31.998800 * 31.998800 * 50.430466);
  bi[13] = 0.08664 * Rcst * Tci[13] / (31.998800 * 50.430466);
  acentric_i[13] = 0.022200;

  // species 14: O
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann * 1e-24 * SIG[14] *
            SIG[14] * SIG[14]) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: OH
  Tci[15] = 1.316 * EPS[15];
  ai[15] = (5.55 * avogadro * avogadro * EPS[15] * boltzmann * 1e-24 * SIG[15] *
            SIG[15] * SIG[15]) /
           (wt[15] * wt[15]);
  bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]);
  acentric_i[15] = 0.0;

  // species 16: HO2
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann * 1e-24 * SIG[16] *
            SIG[16] * SIG[16]) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: H2O
  // Imported from NIST
  Tci[17] = 647.096000;
  ai[17] = 1e6 * 0.42748 * Rcst * Rcst * Tci[17] * Tci[17] /
           (18.015340 * 18.015340 * 220.640000);
  bi[17] = 0.08664 * Rcst * Tci[17] / (18.015340 * 220.640000);
  acentric_i[17] = 0.344300;

  // species 18: H2O2
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann * 1e-24 * SIG[18] *
            SIG[18] * SIG[18]) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: H
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann * 1e-24 * SIG[19] *
            SIG[19] * SIG[19]) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: CH2O
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann * 1e-24 * SIG[20] *
            SIG[20] * SIG[20]) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: CO2
  // Imported from NIST
  Tci[21] = 304.120000;
  ai[21] = 1e6 * 0.42748 * Rcst * Rcst * Tci[21] * Tci[21] /
           (44.009950 * 44.009950 * 73.740000);
  bi[21] = 0.08664 * Rcst * Tci[21] / (44.009950 * 73.740000);
  acentric_i[21] = 0.225000;

  // species 22: CH2CO
  Tci[22] = 1.316 * EPS[22];
  ai[22] = (5.55 * avogadro * avogadro * EPS[22] * boltzmann * 1e-24 * SIG[22] *
            SIG[22] * SIG[22]) /
           (wt[22] * wt[22]);
  bi[22] = 0.855 * avogadro * 1e-24 * SIG[22] * SIG[22] * SIG[22] / (wt[22]);
  acentric_i[22] = 0.0;

  // species 23: C3H3
  Tci[23] = 1.316 * EPS[23];
  ai[23] = (5.55 * avogadro * avogadro * EPS[23] * boltzmann * 1e-24 * SIG[23] *
            SIG[23] * SIG[23]) /
           (wt[23] * wt[23]);
  bi[23] = 0.855 * avogadro * 1e-24 * SIG[23] * SIG[23] * SIG[23] / (wt[23]);
  acentric_i[23] = 0.0;

  // species 24: aC3H5
  Tci[24] = 1.316 * EPS[24];
  ai[24] = (5.55 * avogadro * avogadro * EPS[24] * boltzmann * 1e-24 * SIG[24] *
            SIG[24] * SIG[24]) /
           (wt[24] * wt[24]);
  bi[24] = 0.855 * avogadro * 1e-24 * SIG[24] * SIG[24] * SIG[24] / (wt[24]);
  acentric_i[24] = 0.0;

  // species 25: C5H4O
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann * 1e-24 * SIG[25] *
            SIG[25] * SIG[25]) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * 1e-24 * SIG[25] * SIG[25] * SIG[25] / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: C5H5
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann * 1e-24 * SIG[26] *
            SIG[26] * SIG[26]) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * 1e-24 * SIG[26] * SIG[26] * SIG[26] / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: C6H5CH2
  Tci[27] = 1.316 * EPS[27];
  ai[27] = (5.55 * avogadro * avogadro * EPS[27] * boltzmann * 1e-24 * SIG[27] *
            SIG[27] * SIG[27]) /
           (wt[27] * wt[27]);
  bi[27] = 0.855 * avogadro * 1e-24 * SIG[27] * SIG[27] * SIG[27] / (wt[27]);
  acentric_i[27] = 0.0;

  // species 28: C6H5O
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann * 1e-24 * SIG[28] *
            SIG[28] * SIG[28]) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * 1e-24 * SIG[28] * SIG[28] * SIG[28] / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: C6H5CHO
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann * 1e-24 * SIG[29] *
            SIG[29] * SIG[29]) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * 1e-24 * SIG[29] * SIG[29] * SIG[29] / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: N2
  // Imported from NIST
  Tci[30] = 126.192000;
  ai[30] = 1e6 * 0.42748 * Rcst * Rcst * Tci[30] * Tci[30] /
           (28.013400 * 28.013400 * 33.958000);
  bi[30] = 0.08664 * Rcst * Tci[30] / (28.013400 * 33.958000);
  acentric_i[30] = 0.037200;
}

// compute the critical parameter quantities for each species for SRK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS_SRK(
  amrex::Real* sqrtOneOverTc,
  amrex::Real* sqrtAsti,
  amrex::Real* Bi,
  amrex::Real* Fomega)
{

  // species 0: POSF10325
  // Computed from Lennard-Jones
  sqrtOneOverTc[0] = 6.5402682478301e-02;
  sqrtAsti[0] = 4.2865154585193e+04;
  Bi[0] = 2.9570027693584e+00;
  Fomega[0] = 4.8508000000000e-01;

  // species 1: C2H4
  // Imported from NIST
  sqrtOneOverTc[1] = 5.9513267432530e-02;
  sqrtAsti[1] = 7.7056842134487e+04;
  Bi[1] = 1.4381805192666e+00;
  Fomega[1] = 6.1893034120300e-01;

  // species 2: CH4
  // Imported from NIST
  sqrtOneOverTc[2] = 7.2440948474968e-02;
  sqrtAsti[2] = 9.5215046085708e+04;
  Bi[2] = 1.8605203320660e+00;
  Fomega[2] = 5.0213035482700e-01;

  // species 3: C3H6
  // Computed from Lennard-Jones
  sqrtOneOverTc[3] = 5.3367780663448e-02;
  sqrtAsti[3] = 7.1953475180922e+04;
  Bi[3] = 1.5130114815887e+00;
  Fomega[3] = 4.8508000000000e-01;

  // species 4: iC4H8
  // Computed from Lennard-Jones
  sqrtOneOverTc[4] = 4.6135788482041e-02;
  sqrtAsti[4] = 6.6105873722398e+04;
  Bi[4] = 1.2725507770503e+00;
  Fomega[4] = 4.8508000000000e-01;

  // species 5: C4H81
  // Computed from Lennard-Jones
  sqrtOneOverTc[5] = 4.6135788482041e-02;
  sqrtAsti[5] = 6.6105873722398e+04;
  Bi[5] = 1.2725507770503e+00;
  Fomega[5] = 4.8508000000000e-01;

  // species 6: H2
  // Imported from NIST
  sqrtOneOverTc[6] = 1.7369646834812e-01;
  sqrtAsti[6] = 2.4824229305911e+05;
  Bi[6] = 9.1362254169923e+00;
  Fomega[6] = 1.3798618890700e-01;

  // species 7: C2H6
  // Imported from NIST
  sqrtOneOverTc[7] = 5.7229819101749e-02;
  sqrtAsti[7] = 7.9078494187583e+04;
  Bi[7] = 1.5012924285481e+00;
  Fomega[7] = 6.3721234098700e-01;

  // species 8: CO
  // Imported from NIST
  sqrtOneOverTc[8] = 8.6759935530451e-02;
  sqrtAsti[8] = 4.3619324712923e+04;
  Bi[8] = 9.7786303823350e-01;
  Fomega[8] = 5.5459948367500e-01;

  // species 9: C6H6
  // Computed from Lennard-Jones
  sqrtOneOverTc[9] = 4.0433282083300e-02;
  sqrtAsti[9] = 5.5979242684102e+04;
  Bi[9] = 9.7578748676763e-01;
  Fomega[9] = 4.8508000000000e-01;

  // species 10: C2H2
  // Imported from NIST
  sqrtOneOverTc[10] = 5.6952558345025e-02;
  sqrtAsti[10] = 8.2318059295808e+04;
  Bi[10] = 1.3950602011188e+00;
  Fomega[10] = 7.7293553202700e-01;

  // species 11: C6H5CH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[11] = 3.9168585794863e-02;
  sqrtAsti[11] = 5.4505844727925e+04;
  Bi[11] = 1.0240217749472e+00;
  Fomega[11] = 4.8508000000000e-01;

  // species 12: CH3
  // Computed from Lennard-Jones
  sqrtOneOverTc[12] = 7.2642504557751e-02;
  sqrtAsti[12] = 9.8558148656101e+04;
  Bi[12] = 1.8791630452967e+00;
  Fomega[12] = 4.8508000000000e-01;

  // species 13: O2
  // Imported from NIST
  sqrtOneOverTc[13] = 8.0430717653241e-02;
  sqrtAsti[13] = 3.6980081924740e+04;
  Bi[13] = 6.9005216444999e-01;
  Fomega[13] = 5.1945301904908e-01;

  // species 14: O
  // Computed from Lennard-Jones
  sqrtOneOverTc[14] = 9.7460146948181e-02;
  sqrtAsti[14] = 4.2500156012386e+04;
  Bi[14] = 6.6930234851885e-01;
  Fomega[14] = 4.8508000000000e-01;

  // species 15: OH
  // Computed from Lennard-Jones
  sqrtOneOverTc[15] = 9.7460146948181e-02;
  sqrtAsti[15] = 3.9981183985545e+04;
  Bi[15] = 6.2963299076575e-01;
  Fomega[15] = 4.8508000000000e-01;

  // species 16: HO2
  // Computed from Lennard-Jones
  sqrtOneOverTc[16] = 8.4114315417892e-02;
  sqrtAsti[16] = 3.3657825710980e+04;
  Bi[16] = 6.4505861132042e-01;
  Fomega[16] = 4.8508000000000e-01;

  // species 17: H2O
  // Imported from NIST
  sqrtOneOverTc[17] = 3.9311140369715e-02;
  sqrtAsti[17] = 1.3145468419592e+05;
  Bi[17] = 1.1727204136223e+00;
  Fomega[17] = 1.0013577274636e+00;

  // species 18: H2O2
  // Computed from Lennard-Jones
  sqrtOneOverTc[18] = 8.4114315417892e-02;
  sqrtAsti[18] = 3.2660380884830e+04;
  Bi[18] = 6.2594239211036e-01;
  Fomega[18] = 4.8508000000000e-01;

  // species 19: H
  // Computed from Lennard-Jones
  sqrtOneOverTc[19] = 7.2391579785311e-02;
  sqrtAsti[19] = 5.8451221185793e+05;
  Bi[19] = 4.4006634563410e+00;
  Fomega[19] = 4.8508000000000e-01;

  // species 20: CH2O
  // Computed from Lennard-Jones
  sqrtOneOverTc[20] = 3.9062261583604e-02;
  sqrtAsti[20] = 8.4274889632487e+04;
  Bi[20] = 7.9341968505345e-01;
  Fomega[20] = 4.8508000000000e-01;

  // species 21: CO2
  // Imported from NIST
  sqrtOneOverTc[21] = 5.7342616962522e-02;
  sqrtAsti[21] = 4.3745610142919e+04;
  Bi[21] = 6.7506167841745e-01;
  Fomega[21] = 8.2653709187500e-01;

  // species 22: CH2CO
  // Computed from Lennard-Jones
  sqrtOneOverTc[22] = 4.1747340173827e-02;
  sqrtAsti[22] = 6.5499293944176e+04;
  Bi[22] = 7.6640249759188e-01;
  Fomega[22] = 4.8508000000000e-01;

  // species 23: C3H3
  // Computed from Lennard-Jones
  sqrtOneOverTc[23] = 5.4912571906481e-02;
  sqrtAsti[23] = 7.0364101467487e+04;
  Bi[23] = 1.4218018738211e+00;
  Fomega[23] = 4.8508000000000e-01;

  // species 24: aC3H5
  // Computed from Lennard-Jones
  sqrtOneOverTc[24] = 5.3367780663448e-02;
  sqrtAsti[24] = 7.3719333603301e+04;
  Bi[24] = 1.5501433096373e+00;
  Fomega[24] = 4.8508000000000e-01;

  // species 25: C5H4O
  // Computed from Lennard-Jones
  sqrtOneOverTc[25] = 4.0433282083300e-02;
  sqrtAsti[25] = 5.4600836138975e+04;
  Bi[25] = 9.5176015460089e-01;
  Fomega[25] = 4.8508000000000e-01;

  // species 26: C5H5
  // Computed from Lennard-Jones
  sqrtOneOverTc[26] = 4.6135788482041e-02;
  sqrtAsti[26] = 5.7045375707276e+04;
  Bi[26] = 1.0994076477915e+00;
  Fomega[26] = 4.8508000000000e-01;

  // species 27: C6H5CH2
  // Computed from Lennard-Jones
  sqrtOneOverTc[27] = 3.9168585794863e-02;
  sqrtAsti[27] = 5.5108720650870e+04;
  Bi[27] = 1.0353482313257e+00;
  Fomega[27] = 4.8508000000000e-01;

  // species 28: C6H5O
  // Computed from Lennard-Jones
  sqrtOneOverTc[28] = 4.0433282083300e-02;
  sqrtAsti[28] = 4.6965926244841e+04;
  Bi[28] = 8.1867422524426e-01;
  Fomega[28] = 4.8508000000000e-01;

  // species 29: C6H5CHO
  // Computed from Lennard-Jones
  sqrtOneOverTc[29] = 3.5796841491917e-02;
  sqrtAsti[29] = 4.8936629453525e+04;
  Bi[29] = 7.9408222342350e-01;
  Fomega[29] = 4.8508000000000e-01;

  // species 30: N2
  // Imported from NIST
  sqrtOneOverTc[30] = 8.9019282240563e-02;
  sqrtAsti[30] = 4.2022983929562e+04;
  Bi[30] = 9.5560052221563e-01;
  Fomega[30] = 5.4259343186608e-01;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
